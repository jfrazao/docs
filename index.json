{
  "api/Bonsai.Arduino.AnalogInput.html": {
    "href": "api/Bonsai.Arduino.AnalogInput.html",
    "title": "Class AnalogInput",
    "keywords": "Class AnalogInput Represents an operator that generates a sequence of digitized analog readings from the specified Arduino input pin. Inheritance Object Source < Int32 > AnalogInput Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class AnalogInput : Source<int> Properties | Improve this Doc View Source Pin Gets or sets the analog input pin number from which to take readings. Declaration public int Pin { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence of digitized analog values. Declaration public override IObservable<int> Generate() Returns Type Description IObservable < Int32 > A sequence of Int32 values that report the digitized analog readings from the specified Arduino analog input pin. Overrides Bonsai.Source<System.Int32>.Generate()"
  },
  "api/Bonsai.Arduino.AnalogInputReceivedEventArgs.html": {
    "href": "api/Bonsai.Arduino.AnalogInputReceivedEventArgs.html",
    "title": "Class AnalogInputReceivedEventArgs",
    "keywords": "Class AnalogInputReceivedEventArgs Provides data for the AnalogInputReceived event. Inheritance Object EventArgs AnalogInputReceivedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class AnalogInputReceivedEventArgs : EventArgs Constructors | Improve this Doc View Source AnalogInputReceivedEventArgs(Int32, Int32) Initializes a new instance of the AnalogInputReceivedEventArgs class using the pin number and analog value received in the analog input message. Declaration public AnalogInputReceivedEventArgs(int pin, int value) Parameters Type Name Description Int32 pin The pin number from which the analog value was sampled. Int32 value The digitized analog value. Properties | Improve this Doc View Source Pin Gets the pin number from which the analog value was sampled. Declaration public int Pin { get; } Property Value Type Description Int32 | Improve this Doc View Source Value Gets the digitized analog value. Declaration public int Value { get; } Property Value Type Description Int32"
  },
  "api/Bonsai.Arduino.AnalogOutput.html": {
    "href": "api/Bonsai.Arduino.AnalogOutput.html",
    "title": "Class AnalogOutput",
    "keywords": "Class AnalogOutput Represents an operator that writes the sequence of numerical values to the specified Arduino output pin using PWM. Inheritance Object Combinator < Int32 , Int32 > Sink < Int32 > AnalogOutput Inherited Members Combinator<Int32, Int32>.Process(IObservable<Int32>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class AnalogOutput : Sink<int> Properties | Improve this Doc View Source Pin Gets or sets the digital output (PWM) pin number on which to write values. Declaration public int Pin { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<Int32>) Writes a sequence of Int32 values to the specified Arduino output pin using PWM. Declaration public override IObservable<int> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of Int32 values to write into the specified Arduino output pin. Returns Type Description IObservable < Int32 > A sequence of the Int32 values which have been written into the Arduino output pin. Overrides Bonsai.Combinator<System.Int32, System.Int32>.Process(System.IObservable<System.Int32>) Remarks This operator only subscribes to the source sequence after initializing the connection to the Arduino and configuring the output pin mode to PWM."
  },
  "api/Bonsai.Arduino.Arduino.html": {
    "href": "api/Bonsai.Arduino.Arduino.html",
    "title": "Class Arduino",
    "keywords": "Class Arduino Represents an Arduino board communicating with the host computer using the Firmata protocol. Inheritance Object Arduino Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public sealed class Arduino : IDisposable Constructors | Improve this Doc View Source Arduino(String) Initializes a new instance of the Arduino class using the specified port name. Declaration public Arduino(string portName) Parameters Type Name Description String portName The port to use (for example, COM1). | Improve this Doc View Source Arduino(String, Int32) Initializes a new instance of the Arduino class using the specified port name and baud rate. Declaration public Arduino(string portName, int baudRate) Parameters Type Name Description String portName The port to use (for example, COM1). Int32 baudRate The serial baud rate. Fields | Improve this Doc View Source DefaultBaudRate Represents the default serial baud rate used to communicate with the Arduino. Declaration public const int DefaultBaudRate = 57600 Field Value Type Description Int32 | Improve this Doc View Source DefaultSamplingInterval Represents the default sampling interval for analog pins. Declaration public const int DefaultSamplingInterval = 19 Field Value Type Description Int32 Properties | Improve this Doc View Source IsOpen Gets a value indicating the open or closed status of the Arduino object. Declaration public bool IsOpen { get; } Property Value Type Description Boolean | Improve this Doc View Source MajorVersion Gets the major version of the Firmata firmware reported by the board on initialization. Declaration public int MajorVersion { get; } Property Value Type Description Int32 | Improve this Doc View Source MinorVersion Gets the minor version of the Firmata firmware reported by the board on initialization. Declaration public int MinorVersion { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source AnalogRead(Int32) Returns the current value of the specified analog pin. Declaration public int AnalogRead(int pin) Parameters Type Name Description Int32 pin The number of the analog pin to read. Returns Type Description Int32 A Int32 value representing a digitized analog measurement. | Improve this Doc View Source AnalogWrite(Int32, Int32) Writes an analog value as a PWM wave to the specified digital output pin. Declaration public void AnalogWrite(int pin, int value) Parameters Type Name Description Int32 pin The number of the digital pin to write. Int32 value A Int32 value used to update the PWM signal. | Improve this Doc View Source Close() Closes the port connection, sets the IsOpen property to false and disposes of the internal SerialPort object. Declaration public void Close() | Improve this Doc View Source DigitalPortRead(Int32) Reads the current state of all the digital pins in the specified port. Declaration public byte DigitalPortRead(int port) Parameters Type Name Description Int32 port The number of the digital port (i.e. collection of 8 pins) to read. Returns Type Description Byte A Byte value where each bit represents the state of one pin in the digital port. | Improve this Doc View Source DigitalPortWrite(Int32, Byte) Sets the state of all the digital output pins in the specified port simultaneously. Declaration public void DigitalPortWrite(int port, byte value) Parameters Type Name Description Int32 port The number of the digital port (i.e. collection of 8 pins) to write. Byte value A Byte value where each bit will be used to set the state of one pin in the digital port. | Improve this Doc View Source DigitalRead(Int32) Reads the current state of the specified digital input pin. Declaration public bool DigitalRead(int pin) Parameters Type Name Description Int32 pin The number of the digital pin to read. Returns Type Description Boolean true if the pin is HIGH; false if the pin is LOW. | Improve this Doc View Source DigitalWrite(Int32, Boolean) Sets the state of the specified digital output pin. Declaration public void DigitalWrite(int pin, bool value) Parameters Type Name Description Int32 pin The number of the digital pin to write. Boolean value true to set the pin HIGH; false to set the pin LOW. | Improve this Doc View Source GetPortNumber(Int32) Gets the digital port number for the specified pin. Declaration public static int GetPortNumber(int pin) Parameters Type Name Description Int32 pin The pin number for which to retrieve the digital port. Returns Type Description Int32 A Int32 identifier for the digital port containing the specified pin. | Improve this Doc View Source I2CConfig(Byte[]) Configures I2C settings such as delay time and power pins. Declaration public void I2CConfig(params byte[] args) Parameters Type Name Description Byte [] args The I2C configuration arguments. The first two bytes are used to configure the optional delay time, in microseconds, between writing to the I2C register, and reading the data from the device. | Improve this Doc View Source I2CRequest(Int32, I2CRequestMode, Byte[]) Sends a request to the I2C device with the specified address. Declaration public void I2CRequest(int address, I2CRequestMode mode, params byte[] data) Parameters Type Name Description Int32 address The address of the slave device in the I2C bus. I2CRequestMode mode The read/write mode of the request. Byte [] data The data payload for the I2C request. | Improve this Doc View Source I2CWrite(Int32, Byte[]) Writes a data payload to the I2C device with the specified address. Declaration public void I2CWrite(int address, params byte[] data) Parameters Type Name Description Int32 address The address of the slave device in the I2C bus. Byte [] data The data payload to write to the device. | Improve this Doc View Source Open() Opens a new serial port connection to the Arduino board. Declaration public void Open() | Improve this Doc View Source PinMode(Int32, PinMode) Sets the mode of an individual Arduino pin. Declaration public void PinMode(int pin, PinMode mode) Parameters Type Name Description Int32 pin The number of the pin to configure. PinMode mode The pin mode. | Improve this Doc View Source ReportAnalog(Int32, Boolean) Enables or disables reporting of analog pin values for the specified pin number. Declaration public void ReportAnalog(int pin, bool state) Parameters Type Name Description Int32 pin The number of the pin to configure. Boolean state true if analog reporting for the pin should be enabled; false otherwise. | Improve this Doc View Source ReportDigital(Int32, Boolean) Enables or disables reporting of digital pin changes for the specified digital port in the Arduino. Declaration public void ReportDigital(int port, bool state) Parameters Type Name Description Int32 port The digital port to configure. Boolean state true if reporting of digital pin changes on the specified port should be enabled; false otherwise. | Improve this Doc View Source SamplingInterval(Int32) Sets the sampling rate for reporting analog and I2C data in the main firmware loop. Declaration public void SamplingInterval(int milliseconds) Parameters Type Name Description Int32 milliseconds The sampling interval, in milliseconds, between analog and I2C measurements. | Improve this Doc View Source SendSysex(Byte, Byte[]) Sends the specified MIDI SysEx command using the specified arguments. Declaration public void SendSysex(byte command, params byte[] args) Parameters Type Name Description Byte command A Byte value indicating the SysEx command ID. Byte [] args The optional extended payload sent to configure the SysEx command. Events | Improve this Doc View Source AnalogInputReceived Occurs when the Arduino object receives a new analog input event. Declaration public event EventHandler<AnalogInputReceivedEventArgs> AnalogInputReceived Event Type Type Description EventHandler < AnalogInputReceivedEventArgs > | Improve this Doc View Source DigitalInputReceived Occurs when the Arduino object receives a new digital input event. Declaration public event EventHandler<DigitalInputReceivedEventArgs> DigitalInputReceived Event Type Type Description EventHandler < DigitalInputReceivedEventArgs > | Improve this Doc View Source SysexReceived Occurs when the Arduino object receives a new MIDI SysEx message. Declaration public event EventHandler<SysexReceivedEventArgs> SysexReceived Event Type Type Description EventHandler < SysexReceivedEventArgs > Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable"
  },
  "api/Bonsai.Arduino.ArduinoConfiguration.html": {
    "href": "api/Bonsai.Arduino.ArduinoConfiguration.html",
    "title": "Class ArduinoConfiguration",
    "keywords": "Class ArduinoConfiguration Represents configuration settings used to initialize a Firmata serial connection. Inheritance Object ArduinoConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class ArduinoConfiguration Constructors | Improve this Doc View Source ArduinoConfiguration() Initializes a new instance of the ArduinoConfiguration class. Declaration public ArduinoConfiguration() Properties | Improve this Doc View Source BaudRate Gets or sets the serial baud rate. Declaration [TypeConverter(typeof(BaudRateConverter))] public int BaudRate { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PortName Gets or sets the name of the serial port. Declaration [TypeConverter(typeof(SerialPortNameConverter))] public string PortName { get; set; } Property Value Type Description String | Improve this Doc View Source SamplingInterval Gets or sets the sampling interval, in milliseconds, between analog and I2C measurements. Declaration public int SamplingInterval { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.Arduino.CreateArduino.html": {
    "href": "api/Bonsai.Arduino.CreateArduino.html",
    "title": "Class CreateArduino",
    "keywords": "Class CreateArduino Represents an operator that creates a connection to an Arduino board using the Firmata protocol. Inheritance Object Source < Arduino > CreateArduino Implements INamedElement Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class CreateArduino : Source<Arduino>, INamedElement Properties | Improve this Doc View Source BaudRate Gets or sets the serial baud rate. Declaration [TypeConverter(typeof(BaudRateConverter))] public int BaudRate { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Name Gets or sets the optional alias for the Arduino board. Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(SerialPortNameConverter))] public string PortName { get; set; } Property Value Type Description String | Improve this Doc View Source SamplingInterval Gets or sets the sampling interval, in milliseconds, between analog and I2C measurements. Declaration public int SamplingInterval { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains the Firmata connection object. Declaration public override IObservable<Arduino> Generate() Returns Type Description IObservable < Arduino > A sequence containing a single instance of the Arduino class representing the Firmata connection. Overrides Bonsai.Source<Bonsai.Arduino.Arduino>.Generate() Implements INamedElement"
  },
  "api/Bonsai.Arduino.DigitalInput.html": {
    "href": "api/Bonsai.Arduino.DigitalInput.html",
    "title": "Class DigitalInput",
    "keywords": "Class DigitalInput Represents an operator that generates a sequence of digital state transitions from the specified Arduino input pin. Inheritance Object Source < Boolean > DigitalInput Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class DigitalInput : Source<bool> Properties | Improve this Doc View Source Pin Gets or sets the digital input pin number from which to take readings. Declaration public int Pin { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Configures the digital pin as INPUT and generates an observable sequence of all its state transitions. Declaration public override IObservable<bool> Generate() Returns Type Description IObservable < Boolean > A sequence of Boolean values that report the binary state transitions of the specified Arduino input pin: true if the pin is now HIGH; false if the pin is now LOW. Overrides Bonsai.Source<System.Boolean>.Generate()"
  },
  "api/Bonsai.Arduino.DigitalInputReceivedEventArgs.html": {
    "href": "api/Bonsai.Arduino.DigitalInputReceivedEventArgs.html",
    "title": "Class DigitalInputReceivedEventArgs",
    "keywords": "Class DigitalInputReceivedEventArgs Provides data for the DigitalInputReceived event. Inheritance Object EventArgs DigitalInputReceivedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class DigitalInputReceivedEventArgs : EventArgs Constructors | Improve this Doc View Source DigitalInputReceivedEventArgs(Int32, Byte) Initializes a new instance of the DigitalInputReceivedEventArgs class using the port number and port pin state received in the digital input message. Declaration public DigitalInputReceivedEventArgs(int port, byte state) Parameters Type Name Description Int32 port The number identifying the digital port (i.e. collection of 8 pins) from which the state transition event originated. Byte state The state of all the digital input pins in the specified port at the time the transition occurred. Properties | Improve this Doc View Source Port Gets the number identifying the digital port from which the event originated. Declaration public int Port { get; } Property Value Type Description Int32 | Improve this Doc View Source State Gets the state of all the digital input pins in the specified port at the time the transition occurred. Declaration public byte State { get; } Property Value Type Description Byte"
  },
  "api/Bonsai.Arduino.DigitalOutput.html": {
    "href": "api/Bonsai.Arduino.DigitalOutput.html",
    "title": "Class DigitalOutput",
    "keywords": "Class DigitalOutput Represents an operator that writes the sequence of digital state transitions to the specified Arduino output pin. Inheritance Object Combinator < Boolean , Boolean > Sink < Boolean > DigitalOutput Inherited Members Combinator<Boolean, Boolean>.Process(IObservable<Boolean>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class DigitalOutput : Sink<bool> Properties | Improve this Doc View Source Pin Gets or sets the digital output pin number on which to write the state values. Declaration public int Pin { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<Boolean>) Writes a sequence of binary states to the specified Arduino digital output pin. Declaration public override IObservable<bool> Process(IObservable<bool> source) Parameters Type Name Description IObservable < Boolean > source A sequence of Boolean values used to update the state of the specified Arduino output pin. If a value in the sequence is true , the pin will be set to HIGH; otherwise, the pin will be set to LOW. Returns Type Description IObservable < Boolean > A sequence of the Boolean values which have been written into the Arduino output pin. Overrides Bonsai.Combinator<System.Boolean, System.Boolean>.Process(System.IObservable<System.Boolean>) Remarks This operator only subscribes to the source sequence after initializing the connection to the Arduino and configuring the digital pin mode to OUTPUT."
  },
  "api/Bonsai.Arduino.html": {
    "href": "api/Bonsai.Arduino.html",
    "title": "Namespace Bonsai.Arduino",
    "keywords": "Namespace Bonsai.Arduino Classes AnalogInput Represents an operator that generates a sequence of digitized analog readings from the specified Arduino input pin. AnalogInputReceivedEventArgs Provides data for the AnalogInputReceived event. AnalogOutput Represents an operator that writes the sequence of numerical values to the specified Arduino output pin using PWM. Arduino Represents an Arduino board communicating with the host computer using the Firmata protocol. ArduinoConfiguration Represents configuration settings used to initialize a Firmata serial connection. CreateArduino Represents an operator that creates a connection to an Arduino board using the Firmata protocol. DigitalInput Represents an operator that generates a sequence of digital state transitions from the specified Arduino input pin. DigitalInputReceivedEventArgs Provides data for the DigitalInputReceived event. DigitalOutput Represents an operator that writes the sequence of digital state transitions to the specified Arduino output pin. InputPullUp Represents an operator that generates a sequence of digital state transitions from the specified Arduino input pin in pull-up mode. ReceiveSysex Represents an operator that generates a sequence of system exclusive messages received from the specified Arduino. SendSysex Represents an operator that sends a sequence of system exclusive messages to the specified Arduino. ServoOutput Represents an operator that writes a sequence of angular positions to control a servomotor connected to an Arduino output pin. SysexReceivedEventArgs Provides data for the SysexReceived event. Enums I2CRequestMode Specifies the read/write mode for I2C requests. PinMode Specifies the mode of an individual Arduino pin."
  },
  "api/Bonsai.Arduino.I2CRequestMode.html": {
    "href": "api/Bonsai.Arduino.I2CRequestMode.html",
    "title": "Enum I2CRequestMode",
    "keywords": "Enum I2CRequestMode Specifies the read/write mode for I2C requests. Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public enum I2CRequestMode : byte Fields Name Description ReadContinuously A request to read and report data continuously from the device. ReadOnce A request to read one data sample from the device. StopReading A request to stop reading data from the device. Write A request to write data to the device."
  },
  "api/Bonsai.Arduino.InputPullUp.html": {
    "href": "api/Bonsai.Arduino.InputPullUp.html",
    "title": "Class InputPullUp",
    "keywords": "Class InputPullUp Represents an operator that generates a sequence of digital state transitions from the specified Arduino input pin in pull-up mode. Inheritance Object Source < Boolean > InputPullUp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class InputPullUp : Source<bool> Properties | Improve this Doc View Source Pin Gets or sets the digital input pin number from which to take readings. Declaration public int Pin { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Configures the digital pin as INPUT_PULLUP and generates an observable sequence of all its state transitions. Declaration public override IObservable<bool> Generate() Returns Type Description IObservable < Boolean > A sequence of Boolean values that report the binary state transitions of the specified Arduino input pin: true if the pin is now HIGH; false if the pin is now LOW. Overrides Bonsai.Source<System.Boolean>.Generate()"
  },
  "api/Bonsai.Arduino.PinMode.html": {
    "href": "api/Bonsai.Arduino.PinMode.html",
    "title": "Enum PinMode",
    "keywords": "Enum PinMode Specifies the mode of an individual Arduino pin. Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public enum PinMode : byte Fields Name Description Analog The analog pin is configured in analog input mode. Encoder The pin is configured for a rotary encoder. I2C The pin is configured to access I2C devices. Input The digital pin is configured as INPUT. InputPullUp The digital pin is configured as INPUT_PULLUP. OneWire The pin is configured as a 1-wire bus master. Output The digital pin is configured as OUTPUT. Pwm The digital pin is configured in PWM output mode. Serial The pin is configured for serial communication. Servo The digital pin is configured in Servo output mode. Shift The pin is configured as a data pin in shiftOut/shiftIn mode. Stepper The pin is configured for stepper motor control."
  },
  "api/Bonsai.Arduino.ReceiveSysex.html": {
    "href": "api/Bonsai.Arduino.ReceiveSysex.html",
    "title": "Class ReceiveSysex",
    "keywords": "Class ReceiveSysex Represents an operator that generates a sequence of system exclusive messages received from the specified Arduino. Inheritance Object Source < Byte []> ReceiveSysex Inherited Members Source<Byte[]>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class ReceiveSysex : Source<byte[]> Properties | Improve this Doc View Source Feature Gets or sets the feature ID used to identify the system exclusive message payload. Declaration public int Feature { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence of all the system exclusive messages with the specified feature ID received from the Arduino. Declaration public override IObservable<byte[]> Generate() Returns Type Description IObservable < Byte []> A sequence of Byte arrays containing the payload data which was included with each system exclusive message received from the Arduino. Overrides Bonsai.Source<System.Byte[]>.Generate()"
  },
  "api/Bonsai.Arduino.SendSysex.html": {
    "href": "api/Bonsai.Arduino.SendSysex.html",
    "title": "Class SendSysex",
    "keywords": "Class SendSysex Represents an operator that sends a sequence of system exclusive messages to the specified Arduino. Inheritance Object Combinator < Byte [], Byte []> Sink < Byte []> SendSysex Inherited Members Combinator<Byte[], Byte[]>.Process(IObservable<Byte[]>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class SendSysex : Sink<byte[]> Properties | Improve this Doc View Source Feature Gets or sets the feature ID used to identify the system exclusive message payload. Declaration public int Feature { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<Byte[]>) Writes a sequence of system exclusive messages to the specified Arduino. Declaration public override IObservable<byte[]> Process(IObservable<byte[]> source) Parameters Type Name Description IObservable < Byte []> source A sequence of Byte arrays specifying the payload data to include in each of the system exclusive messages sent to the Arduino. The specified feature ID will be used to identify each message. Returns Type Description IObservable < Byte []> A sequence of Byte arrays containing the payload data which was included with each system exclusive message sent to the Arduino. Overrides Bonsai.Combinator<System.Byte[], System.Byte[]>.Process(System.IObservable<System.Byte[]>) Remarks This operator only subscribes to the source sequence after initializing the connection to the Arduino."
  },
  "api/Bonsai.Arduino.ServoOutput.html": {
    "href": "api/Bonsai.Arduino.ServoOutput.html",
    "title": "Class ServoOutput",
    "keywords": "Class ServoOutput Represents an operator that writes a sequence of angular positions to control a servomotor connected to an Arduino output pin. Inheritance Object Combinator < Int32 , Int32 > Sink < Int32 > ServoOutput Inherited Members Combinator<Int32, Int32>.Process(IObservable<Int32>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class ServoOutput : Sink<int> Properties | Improve this Doc View Source Pin Gets or sets the digital output pin number to which the servo is connected. Declaration public int Pin { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PortName Gets or sets the name of the serial port used to communicate with the Arduino. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<Int32>) Writes a sequence of angular position values to control a servomotor connected to the specified Arduino output pin. Declaration public override IObservable<int> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of Int32 values specifying angular positions, in degrees from 0 to 180, used to control the servomotor connected to the specified Arduino output pin. Returns Type Description IObservable < Int32 > A sequence of Int32 values containing the angular positions which have been used to control the servomotor connected to the specified Arduino output pin. Overrides Bonsai.Combinator<System.Int32, System.Int32>.Process(System.IObservable<System.Int32>) Remarks This operator only subscribes to the source sequence after initializing the connection to the Arduino and configuring the digital pin as a Servo output."
  },
  "api/Bonsai.Arduino.SysexReceivedEventArgs.html": {
    "href": "api/Bonsai.Arduino.SysexReceivedEventArgs.html",
    "title": "Class SysexReceivedEventArgs",
    "keywords": "Class SysexReceivedEventArgs Provides data for the SysexReceived event. Inheritance Object EventArgs SysexReceivedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Arduino Assembly : Bonsai.Arduino.dll Syntax public class SysexReceivedEventArgs : EventArgs Constructors | Improve this Doc View Source SysexReceivedEventArgs(Byte, Byte[]) Initializes a new instance of the SysexReceivedEventArgs class using the specified feature ID and optional data payload. Declaration public SysexReceivedEventArgs(byte feature, byte[] args) Parameters Type Name Description Byte feature The identifier of the system exclusive (SysEx) feature received in the message event. Byte [] args The data payload received together with the SysEx message. Properties | Improve this Doc View Source Args Gets the data payload received together with the SysEx message. Declaration public byte[] Args { get; } Property Value Type Description Byte [] | Improve this Doc View Source Feature Gets the identifier of the system exclusive (SysEx) feature received in the message event. Declaration public byte Feature { get; } Property Value Type Description Byte"
  },
  "api/Bonsai.ArrayConvert.html": {
    "href": "api/Bonsai.ArrayConvert.html",
    "title": "Class ArrayConvert",
    "keywords": "Class ArrayConvert Provides methods for converting between instances of the Array class and String . Inheritance Object ArrayConvert Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public static class ArrayConvert Methods | Improve this Doc View Source ToArray(String, Int32, Type) Converts the String to an Array equivalent with the specified rank and elementType . Declaration public static Array ToArray(string value, int rank, Type elementType) Parameters Type Name Description String value The string to convert. Int32 rank The rank of the result array; can be either one- or two-dimensional. Type elementType The type of the elements in the array. Returns Type Description Array An Array equivalent of the string. | Improve this Doc View Source ToArray(String, Int32, Type, IFormatProvider) Converts the String to an Array equivalent with the specified rank and elementType using a provider of culture-specific formatting information. Declaration public static Array ToArray(string value, int rank, Type elementType, IFormatProvider provider) Parameters Type Name Description String value The string to convert. Int32 rank The rank of the result array; can be either one- or two-dimensional. Type elementType The type of the elements in the array. IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description Array An Array equivalent of the string. | Improve this Doc View Source ToString(Array) Converts the Array to a String . Declaration public static string ToString(Array array) Parameters Type Name Description Array array The Array to be converted. Returns Type Description String A string representation of the Array using the system's current culture. | Improve this Doc View Source ToString(Array, IFormatProvider) Converts the Array to a String using the specified culture-specific format information. Declaration public static string ToString(Array array, IFormatProvider provider) Parameters Type Name Description Array array The Array to be converted. IFormatProvider provider An object that supplies culture-specific formatting information. Returns Type Description String A string representation of the Array using the specified culture-specific format information."
  },
  "api/Bonsai.Audio.AudioCapture.html": {
    "href": "api/Bonsai.Audio.AudioCapture.html",
    "title": "Class AudioCapture",
    "keywords": "Class AudioCapture Represents an operator that generates a sequence of buffered samples acquired from the specified audio capture device. Inheritance Object Source < Mat > AudioCapture Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class AudioCapture : Source<Mat> Constructors | Improve this Doc View Source AudioCapture() Initializes a new instance of the AudioCapture class. Declaration public AudioCapture() Properties | Improve this Doc View Source BufferLength Gets or sets the length of the capture buffer, in milliseconds. Declaration public double BufferLength { get; set; } Property Value Type Description Double | Improve this Doc View Source DeviceName Gets or sets the name of the capture device from which to acquire samples. Declaration [TypeConverter(typeof(CaptureDeviceNameConverter))] public string DeviceName { get; set; } Property Value Type Description String | Improve this Doc View Source SampleFormat Gets or sets the format of capture buffer samples. Declaration [TypeConverter(typeof(AudioCapture.SampleFormatConverter))] public ALFormat SampleFormat { get; set; } Property Value Type Description ALFormat | Improve this Doc View Source SampleRate Gets or sets the sample rate used by the audio capture device, in Hz. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Generate() Generates an observable sequence of buffered audio samples acquired from the specified audio capture device. Declaration public override IObservable<Mat> Generate() Returns Type Description IObservable < Mat > A sequence of Mat objects representing audio capture buffers of a fixed length. See BufferLength . Overrides Bonsai.Source<OpenCV.Net.Mat>.Generate()"
  },
  "api/Bonsai.Audio.AudioContextManager.html": {
    "href": "api/Bonsai.Audio.AudioContextManager.html",
    "title": "Class AudioContextManager",
    "keywords": "Class AudioContextManager Manages the lifetime of an audio context and its associated resources. Inheritance Object AudioContextManager Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class AudioContextManager : IDisposable Properties | Improve this Doc View Source AudioContext Gets the audio context associated with any loaded audio resources. Declaration public AudioContext AudioContext { get; } Property Value Type Description AudioContext | Improve this Doc View Source ResourceManager Gets the resource manager storing all the resources associated with this audio context. Declaration public ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager Methods | Improve this Doc View Source Dispose() Releases all resources used by the AudioContextManager class. Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/Bonsai.Audio.AudioPlayback.html": {
    "href": "api/Bonsai.Audio.AudioPlayback.html",
    "title": "Class AudioPlayback",
    "keywords": "Class AudioPlayback Represents an operator that plays a sequence of buffered samples to the specified audio device. Inheritance Object Combinator < Mat , Mat > Sink < Mat > AudioPlayback Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class AudioPlayback : Sink<Mat> Properties | Improve this Doc View Source DeviceName Gets or sets the name of the audio device used for playback. Declaration [TypeConverter(typeof(PlaybackDeviceNameConverter))] public string DeviceName { get; set; } Property Value Type Description String | Improve this Doc View Source SampleRate Gets or sets the sample rate, in Hz, used to playback the audio buffers. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SourceName Gets or sets the optional name of the source used to playback the audio buffers. Declaration [TypeConverter(typeof(SourceNameConverter))] public string SourceName { get; set; } Property Value Type Description String | Improve this Doc View Source State Gets or sets a value specifying the state to which the source should be set when queueing audio buffers. Declaration public ALSourceState? State { get; set; } Property Value Type Description Nullable < ALSourceState > Methods | Improve this Doc View Source Process(IObservable<Mat>) Plays an observable sequence of buffered samples to the specified audio device. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the buffered audio samples to queue for playback on the specified audio device. Returns Type Description IObservable < Mat > An observable sequence that is identical to the source sequence but where there is an additional side effect of queueing the audio buffers for playback on the specified audio device. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>) Remarks This operator only subscribes to the source sequence after initializing the audio context on the specified audio device. | Improve this Doc View Source Process(IObservable<Mat>, IObservable<AudioSource>) Plays an observable sequence of buffered samples to all the specified audio sources. Declaration public IObservable<Mat> Process(IObservable<Mat> dataSource, IObservable<AudioSource> audioSource) Parameters Type Name Description IObservable < Mat > dataSource A sequence of Mat objects representing the buffered audio samples to queue for playback on all the active audio sources. IObservable < AudioSource > audioSource A sequence of AudioSource objects on which to queue the buffered audio samples for playback. Returns Type Description IObservable < Mat > An observable sequence that is identical to the dataSource sequence but where there is an additional side effect of queueing the audio buffers for playback on all the active audio sources. Remarks This operator only subscribes to the dataSource sequence after initializing the audio context on the specified audio device."
  },
  "api/Bonsai.Audio.AudioReader.html": {
    "href": "api/Bonsai.Audio.AudioReader.html",
    "title": "Class AudioReader",
    "keywords": "Class AudioReader Represents an operator that generates a sequence of buffered audio samples from an uncompressed RIFF/WAV file. Inheritance Object Source < Mat > AudioReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class AudioReader : Source<Mat> Properties | Improve this Doc View Source BufferLength Gets or sets the length of the sample buffer, in milliseconds. Declaration public double BufferLength { get; set; } Property Value Type Description Double | Improve this Doc View Source FileName Gets or sets the name of the WAV file. Declaration [FileNameFilter(\"WAV Files (*.wav;*.wave)|*.wav;*.wave|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source SampleRate Gets or sets the sample rate, in Hz, used to playback the sample buffers. If it is zero, samples will be played at the rate specified in the RIFF/WAV file header. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Generate() Generates a sequence of buffered audio samples from the specified WAV file. Declaration public override IObservable<Mat> Generate() Returns Type Description IObservable < Mat > A sequence of Mat objects representing audio sample buffers of a fixed length. See BufferLength . Overrides Bonsai.Source<OpenCV.Net.Mat>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates a sequence of buffered audio samples from the specified WAV file, where each new buffer is emitted only when an observable sequence emits a notification. Declaration public IObservable<Mat> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting audio buffers. Returns Type Description IObservable < Mat > A sequence of Mat objects representing audio sample buffers of a fixed length. See BufferLength . Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Audio.AudioResources.html": {
    "href": "api/Bonsai.Audio.AudioResources.html",
    "title": "Class AudioResources",
    "keywords": "Class AudioResources Represents an operator that creates a collection of buffer resources and audio sources to be loaded into the resource manager. Inheritance Object Combinator < ResourceConfigurationCollection , ResourceConfigurationCollection > Transform < ResourceConfigurationCollection , ResourceConfigurationCollection > ResourceLoader AudioResources Inherited Members ResourceLoader.Process(IObservable<ResourceManager>) ResourceLoader.Process(IObservable<ResourceConfigurationCollection>) Combinator<ResourceConfigurationCollection, ResourceConfigurationCollection>.Process(IObservable<ResourceConfigurationCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class AudioResources : ResourceLoader Properties | Improve this Doc View Source Buffers Gets the collection of buffer resources to be loaded into the resource manager. Declaration public BufferConfigurationCollection Buffers { get; } Property Value Type Description BufferConfigurationCollection | Improve this Doc View Source Sources Gets the collection of audio sources to be loaded into the resource manager. Declaration public SourceConfigurationCollection Sources { get; } Property Value Type Description SourceConfigurationCollection Methods | Improve this Doc View Source GetResources() Returns the set of resources to be loaded into the resource manager. Declaration protected override IEnumerable<IResourceConfiguration> GetResources() Returns Type Description IEnumerable < IResourceConfiguration > A collection of IResourceConfiguration objects to be loaded into the resource manager. Overrides ResourceLoader.GetResources() | Improve this Doc View Source Process(IObservable<AudioContextManager>) Creates a collection of buffer resources and audio sources to be loaded into the resource manager. Declaration public IObservable<ResourceConfigurationCollection> Process(IObservable<AudioContextManager> source) Parameters Type Name Description IObservable < AudioContextManager > source A sequence of AudioContextManager objects containing the resource managers into which the resources will be loaded. Returns Type Description IObservable < ResourceConfigurationCollection > A sequence of ResourceConfigurationCollection objects which can be used to load resources into the resource manager."
  },
  "api/Bonsai.Audio.AudioSource.html": {
    "href": "api/Bonsai.Audio.AudioSource.html",
    "title": "Class AudioSource",
    "keywords": "Class AudioSource Represents a source of spatialized audio which can be used to define and control the audio landscape surrounding the listener. Inheritance Object AudioSource Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class AudioSource : IDisposable Constructors | Improve this Doc View Source AudioSource() Initializes a new instance of the AudioSource class. Declaration public AudioSource() Properties | Improve this Doc View Source Direction Gets or sets the direction vector of the audio source. Declaration public Vector3 Direction { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Gain Gets or sets the volume amplification applied to the audio source. Declaration public float Gain { get; set; } Property Value Type Description Single Remarks Each division by 2 equals an attenuation of -6 dB, and each multiplication by 2 an amplification by +6 dB. A value of 1.0 means the source is unchanged, and zero is interpreted as zero volume. | Improve this Doc View Source Id Gets the name of the audio source. This is an OpenAL buffer reference which can be used to call audio source manipulation functions. Declaration public int Id { get; } Property Value Type Description Int32 | Improve this Doc View Source Looping Gets or sets a value indicating whether the audio source is looping. Declaration public bool Looping { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Pitch Gets or sets the pitch to be applied to the audio source. Declaration public float Pitch { get; set; } Property Value Type Description Single | Improve this Doc View Source Position Gets or sets the location of the audio source in three-dimensional space. Declaration public Vector3 Position { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Relative Gets or sets a value indicating whether the audio source uses coordinates relative to the listener. Declaration public bool Relative { get; set; } Property Value Type Description Boolean | Improve this Doc View Source State Gets information about the current source state. Declaration public ALSourceState State { get; } Property Value Type Description ALSourceState | Improve this Doc View Source Velocity Gets or sets the velocity of the audio source in three-dimensional space. Declaration public Vector3 Velocity { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Dispose() Releases all resources used by the AudioSource class. Declaration public void Dispose() | Improve this Doc View Source Pause() Pauses the source and sets its state to Paused . Declaration public void Pause() | Improve this Doc View Source Play() Plays, replays, or resumes the source and sets its state to Playing . If the source is already playing, the source will restart at the beginning. Declaration public void Play() | Improve this Doc View Source Rewind() Stops the source and sets its state to Initial . Declaration public void Rewind() | Improve this Doc View Source Stop() Stops the source and sets its state to Stopped . Declaration public void Stop() Implements System.IDisposable"
  },
  "api/Bonsai.Audio.AudioWriter.html": {
    "href": "api/Bonsai.Audio.AudioWriter.html",
    "title": "Class AudioWriter",
    "keywords": "Class AudioWriter Represents an operator that writes a sequence of buffered samples into an uncompressed RIFF/WAV file. Inheritance Object FileSink FileSink < Mat , RiffWriter > AudioWriter Inherited Members FileSink<Mat, RiffWriter>.CreateWriter(String, Mat) FileSink<Mat, RiffWriter>.Write(RiffWriter, Mat) FileSink<Mat, RiffWriter>.Process<TElement>(IObservable<TElement>, Func<TElement, Mat>) FileSink<Mat, RiffWriter>.Process(IObservable<Mat>) FileSink.FileName FileSink.Suffix FileSink.Buffered FileSink.Overwrite Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class AudioWriter : FileSink<Mat, RiffWriter> Properties | Improve this Doc View Source SampleRate Gets or sets the sample rate of the input signal, in Hz. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source CreateWriter(String, Mat) When overridden in a derived class, creates the writer over the specified fileName that will be responsible for handling the input elements. Declaration protected override RiffWriter CreateWriter(string fileName, Mat input) Parameters Type Name Description String fileName The name of the file on which the elements should be written. Mat input Returns Type Description RiffWriter The writer that will be used to push elements into the file. Overrides Bonsai.IO.FileSink<OpenCV.Net.Mat, Bonsai.Audio.RiffWriter>.CreateWriter(System.String, OpenCV.Net.Mat) | Improve this Doc View Source Write(RiffWriter, Mat) Writes a sample buffer into the WAV file. Declaration protected override void Write(RiffWriter writer, Mat input) Parameters Type Name Description RiffWriter writer The RiffWriter used to write data into the WAV file. Mat input A Mat object containing the audio samples to write into the file. Overrides Bonsai.IO.FileSink<OpenCV.Net.Mat, Bonsai.Audio.RiffWriter>.Write(Bonsai.Audio.RiffWriter, OpenCV.Net.Mat)"
  },
  "api/Bonsai.Audio.Buffer.html": {
    "href": "api/Bonsai.Audio.Buffer.html",
    "title": "Class Buffer",
    "keywords": "Class Buffer Represents an audio buffer which can be used to store and manipulate audio data. Inheritance Object Buffer Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class Buffer : IDisposable Constructors | Improve this Doc View Source Buffer() Initializes a new instance of the Buffer class. Declaration public Buffer() Properties | Improve this Doc View Source Id Gets the name of the buffer. This is an OpenAL buffer reference which can be used to call audio manipulation functions. Declaration public int Id { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Dispose() Releases all resources used by the Buffer class. Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/Bonsai.Audio.Configuration.BufferConfiguration.html": {
    "href": "api/Bonsai.Audio.Configuration.BufferConfiguration.html",
    "title": "Class BufferConfiguration",
    "keywords": "Class BufferConfiguration Provides configuration and loading functionality for audio buffer resources. Inheritance Object ResourceConfiguration < Buffer > BufferConfiguration SoundBuffer Implements IResourceConfiguration Inherited Members ResourceConfiguration<Buffer>.Name ResourceConfiguration<Buffer>.IResourceConfiguration.Type ResourceConfiguration<Buffer>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Buffer>.ToString() ResourceConfiguration<Buffer>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio.Configuration Assembly : Bonsai.Audio.dll Syntax public class BufferConfiguration : ResourceConfiguration<Buffer>, IResourceConfiguration Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new empty audio buffer resource, typically used for uploading dynamic data. Declaration public override Buffer CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description Buffer A new instance of the Buffer class. Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Audio.Buffer>.CreateResource(Bonsai.Resources.ResourceManager) Implements IResourceConfiguration"
  },
  "api/Bonsai.Audio.Configuration.BufferConfigurationCollection.html": {
    "href": "api/Bonsai.Audio.Configuration.BufferConfigurationCollection.html",
    "title": "Class BufferConfigurationCollection",
    "keywords": "Class BufferConfigurationCollection Represents a collection of audio buffer resources. Inheritance Object Collection < BufferConfiguration > KeyedCollection < String , BufferConfiguration > BufferConfigurationCollection Implements IList < BufferConfiguration > ICollection < BufferConfiguration > IList ICollection IReadOnlyList < BufferConfiguration > IReadOnlyCollection < BufferConfiguration > IEnumerable < BufferConfiguration > IEnumerable Inherited Members KeyedCollection<String, BufferConfiguration>.Contains(String) KeyedCollection<String, BufferConfiguration>.Remove(String) KeyedCollection<String, BufferConfiguration>.ChangeItemKey(BufferConfiguration, String) KeyedCollection<String, BufferConfiguration>.ClearItems() KeyedCollection<String, BufferConfiguration>.GetKeyForItem(BufferConfiguration) KeyedCollection<String, BufferConfiguration>.InsertItem(Int32, BufferConfiguration) KeyedCollection<String, BufferConfiguration>.RemoveItem(Int32) KeyedCollection<String, BufferConfiguration>.SetItem(Int32, BufferConfiguration) KeyedCollection<String, BufferConfiguration>.Comparer KeyedCollection<String, BufferConfiguration>.Item[String] KeyedCollection<String, BufferConfiguration>.Dictionary Collection<BufferConfiguration>.Add(BufferConfiguration) Collection<BufferConfiguration>.Clear() Collection<BufferConfiguration>.CopyTo(BufferConfiguration[], Int32) Collection<BufferConfiguration>.Contains(BufferConfiguration) Collection<BufferConfiguration>.GetEnumerator() Collection<BufferConfiguration>.IndexOf(BufferConfiguration) Collection<BufferConfiguration>.Insert(Int32, BufferConfiguration) Collection<BufferConfiguration>.Remove(BufferConfiguration) Collection<BufferConfiguration>.RemoveAt(Int32) Collection<BufferConfiguration>.ClearItems() Collection<BufferConfiguration>.InsertItem(Int32, BufferConfiguration) Collection<BufferConfiguration>.RemoveItem(Int32) Collection<BufferConfiguration>.SetItem(Int32, BufferConfiguration) Collection<BufferConfiguration>.IEnumerable.GetEnumerator() Collection<BufferConfiguration>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Audio.Configuration.BufferConfiguration>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Audio.Configuration.BufferConfiguration>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<BufferConfiguration>.IList.Add(Object) Collection<BufferConfiguration>.IList.Contains(Object) Collection<BufferConfiguration>.IList.IndexOf(Object) Collection<BufferConfiguration>.IList.Insert(Int32, Object) Collection<BufferConfiguration>.IList.Remove(Object) Collection<BufferConfiguration>.Count Collection<BufferConfiguration>.Items Collection<BufferConfiguration>.Item[Int32] Collection<BufferConfiguration>.ICollection<BufferConfiguration>.IsReadOnly Collection<BufferConfiguration>.ICollection.IsSynchronized Collection<BufferConfiguration>.ICollection.SyncRoot Collection<BufferConfiguration>.IList.Item[Int32] Collection<BufferConfiguration>.IList.IsReadOnly Collection<BufferConfiguration>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio.Configuration Assembly : Bonsai.Audio.dll Syntax public class BufferConfigurationCollection : KeyedCollection<string, BufferConfiguration>, IList<BufferConfiguration>, ICollection<BufferConfiguration>, IList, ICollection, IReadOnlyList<BufferConfiguration>, IReadOnlyCollection<BufferConfiguration>, IEnumerable<BufferConfiguration>, IEnumerable Methods | Improve this Doc View Source GetKeyForItem(BufferConfiguration) Declaration protected override string GetKeyForItem(BufferConfiguration item) Parameters Type Name Description BufferConfiguration item Returns Type Description String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Bonsai.Audio.Configuration.BufferConfiguration>.GetKeyForItem(Bonsai.Audio.Configuration.BufferConfiguration) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Audio.Configuration.html": {
    "href": "api/Bonsai.Audio.Configuration.html",
    "title": "Namespace Bonsai.Audio.Configuration",
    "keywords": "Namespace Bonsai.Audio.Configuration Classes BufferConfiguration Provides configuration and loading functionality for audio buffer resources. BufferConfigurationCollection Represents a collection of audio buffer resources. SoundBuffer Provides configuration and loading functionality for WAV audio buffers. SourceConfiguration Provides configuration and loading functionality for audio sources. SourceConfigurationCollection Represents a collection of audio source resources."
  },
  "api/Bonsai.Audio.Configuration.SoundBuffer.html": {
    "href": "api/Bonsai.Audio.Configuration.SoundBuffer.html",
    "title": "Class SoundBuffer",
    "keywords": "Class SoundBuffer Provides configuration and loading functionality for WAV audio buffers. Inheritance Object ResourceConfiguration < Buffer > BufferConfiguration SoundBuffer Implements IResourceConfiguration Inherited Members ResourceConfiguration<Buffer>.Name ResourceConfiguration<Buffer>.IResourceConfiguration.Type ResourceConfiguration<Buffer>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Buffer>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio.Configuration Assembly : Bonsai.Audio.dll Syntax public class SoundBuffer : BufferConfiguration, IResourceConfiguration Properties | Improve this Doc View Source FileName Gets or sets the name of the sound WAV file. Declaration [FileNameFilter(\"WAV Files (*.wav;*.wave)|*.wav;*.wave|All Files|*.*\")] [TypeConverter(typeof(ResourceFileNameConverter))] public string FileName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new buffer resource by reading and storing audio data from a WAV file. Declaration public override Buffer CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description Buffer A new instance of the Buffer class storing audio data from the loaded WAV file. Overrides BufferConfiguration.CreateResource(ResourceManager) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Audio.Buffer>.ToString() Implements IResourceConfiguration"
  },
  "api/Bonsai.Audio.Configuration.SourceConfiguration.html": {
    "href": "api/Bonsai.Audio.Configuration.SourceConfiguration.html",
    "title": "Class SourceConfiguration",
    "keywords": "Class SourceConfiguration Provides configuration and loading functionality for audio sources. Inheritance Object ResourceConfiguration < AudioSource > SourceConfiguration Implements IResourceConfiguration Inherited Members ResourceConfiguration<AudioSource>.Name ResourceConfiguration<AudioSource>.IResourceConfiguration.Type ResourceConfiguration<AudioSource>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<AudioSource>.ToString() ResourceConfiguration<AudioSource>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio.Configuration Assembly : Bonsai.Audio.dll Syntax public class SourceConfiguration : ResourceConfiguration<AudioSource>, IResourceConfiguration Properties | Improve this Doc View Source BufferName Gets or sets the optional name of a buffer to play when creating the source. Declaration [TypeConverter(typeof(BufferNameConverter))] public string BufferName { get; set; } Property Value Type Description String | Improve this Doc View Source Direction Gets or sets the direction vector of the audio source. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Direction { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Gain Gets or sets the volume amplification applied to the audio source. Declaration [Precision(2, 0.01)] [Range(0, 2147483647)] public float Gain { get; set; } Property Value Type Description Single | Improve this Doc View Source Looping Gets or sets a value indicating whether the audio source is looping. Declaration public bool Looping { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Pitch Gets or sets the pitch to be applied to the audio source. Declaration [Range(0.5F, 2F)] [Precision(2, 0.01)] public float Pitch { get; set; } Property Value Type Description Single | Improve this Doc View Source Position Gets or sets the location of the audio source in three-dimensional space. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Position { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Relative Gets or sets a value indicating whether the audio source uses coordinates relative to the listener. Declaration public bool Relative { get; set; } Property Value Type Description Boolean | Improve this Doc View Source State Gets or sets a value specifying the state to which the source should be set after creation. Declaration public ALSourceState State { get; set; } Property Value Type Description ALSourceState | Improve this Doc View Source Velocity Gets or sets the velocity of the audio source in three-dimensional space. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Velocity { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new source of spatialized audio. Declaration public override AudioSource CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description AudioSource A new instance of the AudioSource class. Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Audio.AudioSource>.CreateResource(Bonsai.Resources.ResourceManager) Implements IResourceConfiguration"
  },
  "api/Bonsai.Audio.Configuration.SourceConfigurationCollection.html": {
    "href": "api/Bonsai.Audio.Configuration.SourceConfigurationCollection.html",
    "title": "Class SourceConfigurationCollection",
    "keywords": "Class SourceConfigurationCollection Represents a collection of audio source resources. Inheritance Object Collection < SourceConfiguration > KeyedCollection < String , SourceConfiguration > SourceConfigurationCollection Implements IList < SourceConfiguration > ICollection < SourceConfiguration > IList ICollection IReadOnlyList < SourceConfiguration > IReadOnlyCollection < SourceConfiguration > IEnumerable < SourceConfiguration > IEnumerable Inherited Members KeyedCollection<String, SourceConfiguration>.Contains(String) KeyedCollection<String, SourceConfiguration>.Remove(String) KeyedCollection<String, SourceConfiguration>.ChangeItemKey(SourceConfiguration, String) KeyedCollection<String, SourceConfiguration>.ClearItems() KeyedCollection<String, SourceConfiguration>.GetKeyForItem(SourceConfiguration) KeyedCollection<String, SourceConfiguration>.InsertItem(Int32, SourceConfiguration) KeyedCollection<String, SourceConfiguration>.RemoveItem(Int32) KeyedCollection<String, SourceConfiguration>.SetItem(Int32, SourceConfiguration) KeyedCollection<String, SourceConfiguration>.Comparer KeyedCollection<String, SourceConfiguration>.Item[String] KeyedCollection<String, SourceConfiguration>.Dictionary Collection<SourceConfiguration>.Add(SourceConfiguration) Collection<SourceConfiguration>.Clear() Collection<SourceConfiguration>.CopyTo(SourceConfiguration[], Int32) Collection<SourceConfiguration>.Contains(SourceConfiguration) Collection<SourceConfiguration>.GetEnumerator() Collection<SourceConfiguration>.IndexOf(SourceConfiguration) Collection<SourceConfiguration>.Insert(Int32, SourceConfiguration) Collection<SourceConfiguration>.Remove(SourceConfiguration) Collection<SourceConfiguration>.RemoveAt(Int32) Collection<SourceConfiguration>.ClearItems() Collection<SourceConfiguration>.InsertItem(Int32, SourceConfiguration) Collection<SourceConfiguration>.RemoveItem(Int32) Collection<SourceConfiguration>.SetItem(Int32, SourceConfiguration) Collection<SourceConfiguration>.IEnumerable.GetEnumerator() Collection<SourceConfiguration>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Audio.Configuration.SourceConfiguration>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Audio.Configuration.SourceConfiguration>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<SourceConfiguration>.IList.Add(Object) Collection<SourceConfiguration>.IList.Contains(Object) Collection<SourceConfiguration>.IList.IndexOf(Object) Collection<SourceConfiguration>.IList.Insert(Int32, Object) Collection<SourceConfiguration>.IList.Remove(Object) Collection<SourceConfiguration>.Count Collection<SourceConfiguration>.Items Collection<SourceConfiguration>.Item[Int32] Collection<SourceConfiguration>.ICollection<SourceConfiguration>.IsReadOnly Collection<SourceConfiguration>.ICollection.IsSynchronized Collection<SourceConfiguration>.ICollection.SyncRoot Collection<SourceConfiguration>.IList.Item[Int32] Collection<SourceConfiguration>.IList.IsReadOnly Collection<SourceConfiguration>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio.Configuration Assembly : Bonsai.Audio.dll Syntax public class SourceConfigurationCollection : KeyedCollection<string, SourceConfiguration>, IList<SourceConfiguration>, ICollection<SourceConfiguration>, IList, ICollection, IReadOnlyList<SourceConfiguration>, IReadOnlyCollection<SourceConfiguration>, IEnumerable<SourceConfiguration>, IEnumerable Methods | Improve this Doc View Source GetKeyForItem(SourceConfiguration) Declaration protected override string GetKeyForItem(SourceConfiguration item) Parameters Type Name Description SourceConfiguration item Returns Type Description String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Bonsai.Audio.Configuration.SourceConfiguration>.GetKeyForItem(Bonsai.Audio.Configuration.SourceConfiguration) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Audio.CreateAudioContext.html": {
    "href": "api/Bonsai.Audio.CreateAudioContext.html",
    "title": "Class CreateAudioContext",
    "keywords": "Class CreateAudioContext Represents an operator that creates an audio context using the specified device and listener properties. Inheritance Object Source < AudioContextManager > CreateAudioContext Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax [TypeConverter(typeof(CreateAudioContext.AudioContextConverter))] public class CreateAudioContext : Source<AudioContextManager> Properties | Improve this Doc View Source DeviceName Gets or sets the name of the audio device used for playback. Declaration [TypeConverter(typeof(PlaybackDeviceNameConverter))] public string DeviceName { get; set; } Property Value Type Description String | Improve this Doc View Source Direction Gets or sets the direction vector of the listener, in the world coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Direction { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Gain Gets or sets the amount of amplification applied to the listener. Each multiplication by 2 increases gain by +6dB. Declaration public float Gain { get; set; } Property Value Type Description Single | Improve this Doc View Source Position Gets or sets the location of the listener, in the world coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Position { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Refresh Gets or sets the refresh frequency, in Hz, used by the audio device. Zero represents the driver default. Declaration public int Refresh { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SampleRate Gets or sets the sample rate, in Hz, used by the audio device. Zero represents the driver default. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Up Gets or sets the up vector of the listener, in the world coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Up { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Velocity Gets or sets the velocity of the listener, in the world coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Velocity { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains the audio context manager object. Declaration public override IObservable<AudioContextManager> Generate() Returns Type Description IObservable < AudioContextManager > A sequence containing a single instance of the AudioContextManager class which will manage the lifetime of the audio context. Overrides Bonsai.Source<Bonsai.Audio.AudioContextManager>.Generate()"
  },
  "api/Bonsai.Audio.CreateSource.html": {
    "href": "api/Bonsai.Audio.CreateSource.html",
    "title": "Class CreateSource",
    "keywords": "Class CreateSource Represents an operator that creates a spatialized source on the specified audio device. Inheritance Object Source < AudioSource > CreateSource Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class CreateSource : Source<AudioSource> Properties | Improve this Doc View Source BufferName Gets or sets the optional name of a buffer to play when creating the source. Declaration [TypeConverter(typeof(BufferNameConverter))] public string BufferName { get; set; } Property Value Type Description String | Improve this Doc View Source DeviceName Gets or sets the name of the audio device used for playback. Declaration [TypeConverter(typeof(PlaybackDeviceNameConverter))] public string DeviceName { get; set; } Property Value Type Description String | Improve this Doc View Source Direction Gets or sets the direction vector of the audio source. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Direction { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Gain Gets or sets the volume amplification applied to the audio source. Declaration [Precision(2, 0.01)] [Range(0, 2147483647)] public float Gain { get; set; } Property Value Type Description Single | Improve this Doc View Source Looping Gets or sets a value indicating whether the audio source is looping. Declaration public bool Looping { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Pitch Gets or sets the pitch to be applied to the audio source. Declaration [Range(0.5F, 2F)] [Precision(2, 0.01)] public float Pitch { get; set; } Property Value Type Description Single | Improve this Doc View Source Position Gets or sets the current location of the audio source in three-dimensional space. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Position { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Relative Gets or sets a value indicating whether the audio source uses coordinates relative to the listener. Declaration public bool Relative { get; set; } Property Value Type Description Boolean | Improve this Doc View Source State Gets or sets a value specifying the state to which the source should be set after creation. Declaration public ALSourceState State { get; set; } Property Value Type Description ALSourceState | Improve this Doc View Source Velocity Gets or sets the current velocity of the audio source in three-dimensional space. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Velocity { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains the created audio source. Declaration public override IObservable<AudioSource> Generate() Returns Type Description IObservable < AudioSource > A sequence containing the created AudioSource instance. Overrides Bonsai.Source<Bonsai.Audio.AudioSource>.Generate()"
  },
  "api/Bonsai.Audio.html": {
    "href": "api/Bonsai.Audio.html",
    "title": "Namespace Bonsai.Audio",
    "keywords": "Namespace Bonsai.Audio Classes AudioCapture Represents an operator that generates a sequence of buffered samples acquired from the specified audio capture device. AudioContextManager Manages the lifetime of an audio context and its associated resources. AudioPlayback Represents an operator that plays a sequence of buffered samples to the specified audio device. AudioReader Represents an operator that generates a sequence of buffered audio samples from an uncompressed RIFF/WAV file. AudioResources Represents an operator that creates a collection of buffer resources and audio sources to be loaded into the resource manager. AudioSource Represents a source of spatialized audio which can be used to define and control the audio landscape surrounding the listener. AudioWriter Represents an operator that writes a sequence of buffered samples into an uncompressed RIFF/WAV file. Buffer Represents an audio buffer which can be used to store and manipulate audio data. CreateAudioContext Represents an operator that creates an audio context using the specified device and listener properties. CreateSource Represents an operator that creates a spatialized source on the specified audio device. PauseSource Represents an operator that pauses the specified set of audio sources. PlaySource Represents an operator that starts playing the specified set of audio sources. If a source is already playing, it will start from the beginning. RewindSource Represents an operator that rewinds the specified set of audio sources back to the initial state. RiffWriter Writes audio data into a stream following the RIFF/WAV format. StopSource Represents an operator that stops the specified set of audio sources. UpdateBuffer Represents an operator that updates the sample data of the specified audio buffer. UpdateListener Represents an operator that updates the properties of the audio listener. UpdateSource Represents an operator that updates the properties of an audio source. UpdateSourceState Provides an abstract base class for operators that update the state of specified audio sources."
  },
  "api/Bonsai.Audio.PauseSource.html": {
    "href": "api/Bonsai.Audio.PauseSource.html",
    "title": "Class PauseSource",
    "keywords": "Class PauseSource Represents an operator that pauses the specified set of audio sources. Inheritance Object Combinator Sink UpdateSourceState PauseSource Inherited Members UpdateSourceState.DeviceName UpdateSourceState.SourceName UpdateSourceState.Process<TSource>(IObservable<TSource>) UpdateSourceState.Process(IObservable<AudioSource>) UpdateSourceState.Process(IObservable<AudioSource[]>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class PauseSource : UpdateSourceState"
  },
  "api/Bonsai.Audio.PlaySource.html": {
    "href": "api/Bonsai.Audio.PlaySource.html",
    "title": "Class PlaySource",
    "keywords": "Class PlaySource Represents an operator that starts playing the specified set of audio sources. If a source is already playing, it will start from the beginning. Inheritance Object Combinator Sink UpdateSourceState PlaySource Inherited Members UpdateSourceState.DeviceName UpdateSourceState.SourceName UpdateSourceState.Process<TSource>(IObservable<TSource>) UpdateSourceState.Process(IObservable<AudioSource>) UpdateSourceState.Process(IObservable<AudioSource[]>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class PlaySource : UpdateSourceState"
  },
  "api/Bonsai.Audio.RewindSource.html": {
    "href": "api/Bonsai.Audio.RewindSource.html",
    "title": "Class RewindSource",
    "keywords": "Class RewindSource Represents an operator that rewinds the specified set of audio sources back to the initial state. Inheritance Object Combinator Sink UpdateSourceState RewindSource Inherited Members UpdateSourceState.DeviceName UpdateSourceState.SourceName UpdateSourceState.Process<TSource>(IObservable<TSource>) UpdateSourceState.Process(IObservable<AudioSource>) UpdateSourceState.Process(IObservable<AudioSource[]>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class RewindSource : UpdateSourceState"
  },
  "api/Bonsai.Audio.RiffWriter.html": {
    "href": "api/Bonsai.Audio.RiffWriter.html",
    "title": "Class RiffWriter",
    "keywords": "Class RiffWriter Writes audio data into a stream following the RIFF/WAV format. Inheritance Object RiffWriter Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public sealed class RiffWriter : IDisposable Constructors | Improve this Doc View Source RiffWriter(Stream, Int32, Int32, Int32) Initializes a new instance of the RiffWriter class using the specified stream, number of channels, sample rate and bits per sample. Declaration public RiffWriter(Stream stream, int channels, int samplesPerSecond, int bitsPerSample) Parameters Type Name Description Stream stream The output stream. Int32 channels The number of audio channels. Int32 samplesPerSecond The playback sample frequency, in samples per second. Int32 bitsPerSample The number of bits per audio sample. Methods | Improve this Doc View Source Close() Closes the current RiffWriter and the underlying stream. Declaration public void Close() | Improve this Doc View Source Write(Byte[]) Writes an array containing raw audio data into the WAV stream. Declaration public void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer A Byte array containing the data to write. Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IDisposable"
  },
  "api/Bonsai.Audio.StopSource.html": {
    "href": "api/Bonsai.Audio.StopSource.html",
    "title": "Class StopSource",
    "keywords": "Class StopSource Represents an operator that stops the specified set of audio sources. Inheritance Object Combinator Sink UpdateSourceState StopSource Inherited Members UpdateSourceState.DeviceName UpdateSourceState.SourceName UpdateSourceState.Process<TSource>(IObservable<TSource>) UpdateSourceState.Process(IObservable<AudioSource>) UpdateSourceState.Process(IObservable<AudioSource[]>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class StopSource : UpdateSourceState"
  },
  "api/Bonsai.Audio.UpdateBuffer.html": {
    "href": "api/Bonsai.Audio.UpdateBuffer.html",
    "title": "Class UpdateBuffer",
    "keywords": "Class UpdateBuffer Represents an operator that updates the sample data of the specified audio buffer. Inheritance Object Combinator < Mat , Mat > Sink < Mat > UpdateBuffer Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class UpdateBuffer : Sink<Mat> Properties | Improve this Doc View Source BufferName Gets or sets the name of the buffer to update. Declaration [TypeConverter(typeof(BufferNameConverter))] public string BufferName { get; set; } Property Value Type Description String | Improve this Doc View Source DeviceName Gets or sets the name of the audio device used for playback. Declaration [TypeConverter(typeof(PlaybackDeviceNameConverter))] public string DeviceName { get; set; } Property Value Type Description String | Improve this Doc View Source SampleRate Gets or sets the sample rate, in Hz, used to playback the buffer data. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<Mat>) Updates the data of the specified audio buffer using an observable sequence of buffered samples. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the samples used to fill the buffer with audio data. Returns Type Description IObservable < Mat > An observable sequence that is identical to the source sequence but where there is an additional side effect of filling the buffer with audio data. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>) Remarks This operator only subscribes to the source sequence after initializing the audio context on the specified audio device."
  },
  "api/Bonsai.Audio.UpdateListener.html": {
    "href": "api/Bonsai.Audio.UpdateListener.html",
    "title": "Class UpdateListener",
    "keywords": "Class UpdateListener Represents an operator that updates the properties of the audio listener. Inheritance Object Combinator Sink UpdateListener Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class UpdateListener : Sink Properties | Improve this Doc View Source Gain Gets or sets the amount of amplification applied to the listener. Each multiplication by 2 increases gain by +6dB. If this property is not set, the gain of the audio listener will not be updated. Declaration public float? Gain { get; set; } Property Value Type Description Nullable < Single > | Improve this Doc View Source Orientation Gets or sets the current orientation of the listener, in the world coordinate frame. If this property is not set, the orientation of the audio listener will not be updated. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Quaternion? Orientation { get; set; } Property Value Type Description Nullable < Quaternion > | Improve this Doc View Source Position Gets or sets the current location of the listener, in the world coordinate frame. If this property is not set, the location of the audio listener will not be updated. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3? Position { get; set; } Property Value Type Description Nullable < Vector3 > | Improve this Doc View Source Velocity Gets or sets the current velocity of the listener, in the world coordinate frame. If this property is not set, the velocity of the audio listener will not be updated. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3? Velocity { get; set; } Property Value Type Description Nullable < Vector3 > Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Updates the properties of the audio listener whenever the source sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to trigger the update of the audio listener. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the properties of the audio listener whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Audio.UpdateSource.html": {
    "href": "api/Bonsai.Audio.UpdateSource.html",
    "title": "Class UpdateSource",
    "keywords": "Class UpdateSource Represents an operator that updates the properties of an audio source. Inheritance Object Combinator Sink UpdateSource Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public class UpdateSource : Sink Properties | Improve this Doc View Source DeviceName Gets or sets the name of the audio device used for playback. Declaration [TypeConverter(typeof(PlaybackDeviceNameConverter))] public string DeviceName { get; set; } Property Value Type Description String | Improve this Doc View Source Direction Gets or sets the current direction vector of the audio source. If this property is not set, the direction of the audio source will not be updated. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3? Direction { get; set; } Property Value Type Description Nullable < Vector3 > | Improve this Doc View Source Gain Gets or sets the volume amplification applied to the audio source. If this property is not set, the gain of the audio source will not be updated. Declaration [Precision(2, 0.01)] [Range(0, 2147483647)] public float? Gain { get; set; } Property Value Type Description Nullable < Single > | Improve this Doc View Source Pitch Gets or sets the pitch to be applied to the audio source. If this property is not set, the pitch of the audio source will not be updated. Declaration [Range(0.5F, 2F)] [Precision(2, 0.01)] public float? Pitch { get; set; } Property Value Type Description Nullable < Single > | Improve this Doc View Source Position Gets or sets the current location of the audio source in three-dimensional space. If this property is not set, the location of the audio source will not be updated. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3? Position { get; set; } Property Value Type Description Nullable < Vector3 > | Improve this Doc View Source SourceName Gets or sets the name of the audio source to update. Declaration [TypeConverter(typeof(SourceNameConverter))] public string SourceName { get; set; } Property Value Type Description String | Improve this Doc View Source Velocity Gets or sets the current velocity of the audio source in three-dimensional space. If this property is not set, the velocity of the audio source will not be updated. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3? Velocity { get; set; } Property Value Type Description Nullable < Vector3 > Methods | Improve this Doc View Source Process(IObservable<AudioSource>) Updates the properties of all the audio sources in an observable sequence. Declaration public IObservable<AudioSource> Process(IObservable<AudioSource> source) Parameters Type Name Description IObservable < AudioSource > source A sequence of AudioSource objects whose properties should be updated. Returns Type Description IObservable < AudioSource > An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the properties of each of the audio sources in the sequence. Remarks If SourceName is not null or empty, this method behaves as Process<TSource>(IObservable<TSource>) . | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Updates the properties of the specified audio source whenever the source sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to trigger the update of the audio source. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the properties of the specified audio source whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Audio.UpdateSourceState.html": {
    "href": "api/Bonsai.Audio.UpdateSourceState.html",
    "title": "Class UpdateSourceState",
    "keywords": "Class UpdateSourceState Provides an abstract base class for operators that update the state of specified audio sources. Inheritance Object Combinator Sink UpdateSourceState PauseSource PlaySource RewindSource StopSource Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Audio Assembly : Bonsai.Audio.dll Syntax public abstract class UpdateSourceState : Sink Properties | Improve this Doc View Source DeviceName Gets or sets the name of the audio device used for playback. Declaration [TypeConverter(typeof(PlaybackDeviceNameConverter))] public string DeviceName { get; set; } Property Value Type Description String | Improve this Doc View Source SourceName Gets or sets the name of the audio source, or a comma-separated list of names if specifying multiple sources. Declaration [TypeConverter(typeof(SourceNameArrayConverter))] public string[] SourceName { get; set; } Property Value Type Description String [] Methods | Improve this Doc View Source Process(IObservable<AudioSource[]>) Updates the state of all the audio sources in an observable sequence. Declaration public IObservable<AudioSource[]> Process(IObservable<AudioSource[]> source) Parameters Type Name Description IObservable < AudioSource []> source A sequence of AudioSource arrays containing all the audio sources whose state should be updated. Returns Type Description IObservable < AudioSource []> An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the state of all the audio sources. Remarks If SourceName is not null or empty, this method behaves as Process<TSource>(IObservable<TSource>) . | Improve this Doc View Source Process(IObservable<AudioSource>) Updates the state of all the audio sources in an observable sequence. Declaration public IObservable<AudioSource> Process(IObservable<AudioSource> source) Parameters Type Name Description IObservable < AudioSource > source A sequence of AudioSource objects whose state should be updated. Returns Type Description IObservable < AudioSource > An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the state of each of the audio sources in the sequence. Remarks If SourceName is not null or empty, this method behaves as Process<TSource>(IObservable<TSource>) . | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Updates the state of the specified audio source whenever the source sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to trigger the update of the audio source. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the state of the specified audio source whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Combinator.html": {
    "href": "api/Bonsai.Combinator.html",
    "title": "Class Combinator",
    "keywords": "Class Combinator Provides an abstract base class for operators that preserve the type of the source sequence. Inheritance Object Combinator Delay DelaySubscription Distinct DistinctUntilChanged First FirstOrDefault GateInterval IgnoreElements Last LastOrDefault ObserveOn Repeat RepeatCount Retry RetryCount SampleInterval Skip SkipLast Slice SubscribeOn Synchronize Take TakeLast Throttle Timeout Delay DelaySubscription LatestOnRenderFrame LatestOnUpdateFrame SampleOnRenderFrame SampleOnUpdateFrame Sink Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Combinator] public abstract class Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Processes an observable sequence into a new sequence of the same element type. Declaration public abstract IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to process. Returns Type Description IObservable <TSource> An observable sequence of the same data type as source . Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Combinator-1.html": {
    "href": "api/Bonsai.Combinator-1.html",
    "title": "Class Combinator<TResult>",
    "keywords": "Class Combinator<TResult> Provides an abstract base class for operators that process an observable sequence into another sequence of the specified element type. Inheritance Object Combinator<TResult> Count PlayTextureSequence RenderCubemap RenderTexture AffineTransform KeyState Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Combinator] public abstract class Combinator<TResult> Type Parameters Name Description TResult The type of the elements in the result sequence. Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Processes the source sequence into a new sequence of the specified element type. Declaration public abstract IObservable<TResult> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to process. Returns Type Description IObservable <TResult> An observable sequence with elements of type TResult . Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Combinator-2.html": {
    "href": "api/Bonsai.Combinator-2.html",
    "title": "Class Combinator<TSource, TResult>",
    "keywords": "Class Combinator<TSource, TResult> Provides an abstract base class for operators that process an observable sequence of a fixed type into another sequence of the specified element type. Inheritance Object Combinator<TSource, TResult> Decimate DetectSpikes Skip TriggeredBuffer LoadResources StoreImage StoreImageSequence Sink<TSource> Transform<TSource, TResult> EnumerateContours Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Combinator] public abstract class Combinator<TSource, TResult> Type Parameters Name Description TSource The type of the elements in the source sequence. TResult The type of the elements in the result sequence. Methods | Improve this Doc View Source Process(IObservable<TSource>) Processes an observable sequence into a new sequence of the specified element type. Declaration public abstract IObservable<TResult> Process(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to process. Returns Type Description IObservable <TResult> An observable sequence with elements of type TResult ."
  },
  "api/Bonsai.CombinatorAttribute.html": {
    "href": "api/Bonsai.CombinatorAttribute.html",
    "title": "Class CombinatorAttribute",
    "keywords": "Class CombinatorAttribute Specifies that a class provides a method that can combine one or more observable sequences into a new observable sequence. Inheritance Object Attribute CombinatorAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class CombinatorAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source CombinatorAttribute() Initializes a new instance of the CombinatorAttribute class using the default expression builder class. Declaration public CombinatorAttribute() | Improve this Doc View Source CombinatorAttribute(String) Initializes a new instance of the CombinatorAttribute class using the specified expression builder class. Declaration public CombinatorAttribute(string builderTypeName) Parameters Type Name Description String builderTypeName The fully qualified name of the expression builder class used to build expressions from this combinator. | Improve this Doc View Source CombinatorAttribute(Type) Initializes a new instance of the CombinatorAttribute class using the specified expression builder class. Declaration public CombinatorAttribute(Type builderType) Parameters Type Name Description Type builderType The Type of the expression builder class used to build expressions from this combinator. Properties | Improve this Doc View Source ExpressionBuilderTypeName Gets the fully qualified name of the expression builder class used to build expressions from this combinator. Declaration public string ExpressionBuilderTypeName { get; } Property Value Type Description String | Improve this Doc View Source MethodName Gets or sets the name of the method that can combine one or more observable sequences into a new observable sequence. Declaration public string MethodName { get; set; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.Dag.DirectedGraph-2.html": {
    "href": "api/Bonsai.Dag.DirectedGraph-2.html",
    "title": "Class DirectedGraph<TNodeValue, TEdgeLabel>",
    "keywords": "Class DirectedGraph<TNodeValue, TEdgeLabel> Represents a directed graph that consists of labeled nodes and edges. Inheritance Object DirectedGraph<TNodeValue, TEdgeLabel> ExpressionBuilderGraph Implements IEnumerable < Node <TNodeValue, TEdgeLabel>> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dag Assembly : Bonsai.Core.dll Syntax public class DirectedGraph<TNodeValue, TEdgeLabel> : IEnumerable<Node<TNodeValue, TEdgeLabel>>, IEnumerable Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. Constructors | Improve this Doc View Source DirectedGraph() Initializes a new instance of the DirectedGraph<TNodeValue, TEdgeLabel> class. Declaration public DirectedGraph() | Improve this Doc View Source DirectedGraph(IComparer<TNodeValue>) Initializes a new instance of the DirectedGraph<TNodeValue, TEdgeLabel> class that uses a specified comparer. Declaration public DirectedGraph(IComparer<TNodeValue> comparer) Parameters Type Name Description IComparer <TNodeValue> comparer The optional comparer to use for ordering node values. Properties | Improve this Doc View Source Comparer Gets the optional IComparer<T> object used to determine the order of the values in the directed graph. Declaration public IComparer<TNodeValue> Comparer { get; } Property Value Type Description IComparer <TNodeValue> | Improve this Doc View Source Count Gets the number of nodes in the directed graph. Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Add(TNodeValue) Creates and adds a new node with the specified value to the directed graph. Declaration public Node<TNodeValue, TEdgeLabel> Add(TNodeValue value) Parameters Type Name Description TNodeValue value The value of the node label. Returns Type Description Node <TNodeValue, TEdgeLabel> The created node. | Improve this Doc View Source Add(Node<TNodeValue, TEdgeLabel>) Adds a node to the directed graph. Declaration public void Add(Node<TNodeValue, TEdgeLabel> node) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> node The node to be added to the directed graph. | Improve this Doc View Source AddEdge(Node<TNodeValue, TEdgeLabel>, Edge<TNodeValue, TEdgeLabel>) Adds a labeled outgoing edge from the specified node in the directed graph. Declaration public void AddEdge(Node<TNodeValue, TEdgeLabel> from, Edge<TNodeValue, TEdgeLabel> edge) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> from The node that is the source of the edge. Edge <TNodeValue, TEdgeLabel> edge The labeled outgoing edge to be added to the directed graph. | Improve this Doc View Source AddEdge(Node<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>, TEdgeLabel) Creates and adds a new labeled edge linking the specified nodes in the directed graph. Declaration public Edge<TNodeValue, TEdgeLabel> AddEdge(Node<TNodeValue, TEdgeLabel> from, Node<TNodeValue, TEdgeLabel> to, TEdgeLabel label) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> from The node that is the source of the edge. Node <TNodeValue, TEdgeLabel> to The node that is the target of the edge. TEdgeLabel label The value of the edge label. Returns Type Description Edge <TNodeValue, TEdgeLabel> The created edge. | Improve this Doc View Source Clear() Removes all nodes and corresponding edges from the directed graph. Declaration public void Clear() | Improve this Doc View Source Contains(Node<TNodeValue, TEdgeLabel>) Determines whether a node is in the directed graph. Declaration public bool Contains(Node<TNodeValue, TEdgeLabel> node) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> node The node to locate in the directed graph. Returns Type Description Boolean true if node is found in the directed graph; otherwise, false . | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the nodes in the directed graph. Declaration public IEnumerator<Node<TNodeValue, TEdgeLabel>> GetEnumerator() Returns Type Description IEnumerator < Node <TNodeValue, TEdgeLabel>> An enumerator that can be used to iterate through the nodes in the directed graph. | Improve this Doc View Source InsertEdge(Node<TNodeValue, TEdgeLabel>, Int32, Edge<TNodeValue, TEdgeLabel>) Inserts a labeled outgoing edge of a source node at the specified index. Declaration public void InsertEdge(Node<TNodeValue, TEdgeLabel> from, int edgeIndex, Edge<TNodeValue, TEdgeLabel> edge) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> from The node that is the source of the edge. Int32 edgeIndex The zero-based index at which the edge should be inserted on the successor list of the from node. Edge <TNodeValue, TEdgeLabel> edge The labeled outgoing edge that is to be inserted at the specified index on the successor list of the from node. | Improve this Doc View Source InsertEdge(Node<TNodeValue, TEdgeLabel>, Int32, Node<TNodeValue, TEdgeLabel>, TEdgeLabel) Creates and inserts a labeled outgoing edge of the source node at the specified index. Declaration public Edge<TNodeValue, TEdgeLabel> InsertEdge(Node<TNodeValue, TEdgeLabel> from, int edgeIndex, Node<TNodeValue, TEdgeLabel> to, TEdgeLabel label) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> from The node that is the source of the edge. Int32 edgeIndex The zero-based index at which the edge should be inserted on the successor list of the from node. Node <TNodeValue, TEdgeLabel> to The node that is the target of the edge. TEdgeLabel label The value of the edge label. Returns Type Description Edge <TNodeValue, TEdgeLabel> The created edge. | Improve this Doc View Source Remove(Node<TNodeValue, TEdgeLabel>) Removes the specified node from the directed graph. Declaration public bool Remove(Node<TNodeValue, TEdgeLabel> node) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> node The node to remove from the directed graph. Returns Type Description Boolean true if node is successfully removed; otherwise, false . This method also returns false if node was not found in the directed graph. | Improve this Doc View Source RemoveEdge(Node<TNodeValue, TEdgeLabel>, Edge<TNodeValue, TEdgeLabel>) Removes the specified edge from the directed graph. Declaration public bool RemoveEdge(Node<TNodeValue, TEdgeLabel> from, Edge<TNodeValue, TEdgeLabel> edge) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> from The node that is the source of the edge. Edge <TNodeValue, TEdgeLabel> edge The outgoing edge to remove from the directed graph. Returns Type Description Boolean true if edge is successfully removed; otherwise, false . This method also returns false if edge was not found in the directed graph. | Improve this Doc View Source SetEdge(Node<TNodeValue, TEdgeLabel>, Int32, Edge<TNodeValue, TEdgeLabel>) Replaces a labeled outgoing edge of a source node at the specified index. Declaration public void SetEdge(Node<TNodeValue, TEdgeLabel> from, int edgeIndex, Edge<TNodeValue, TEdgeLabel> edge) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> from The node that is the source of the edge. Int32 edgeIndex The zero-based index of the edge to replace on the successor list of the from node. Edge <TNodeValue, TEdgeLabel> edge The labeled outgoing edge that is to be set at the specified index on the successor list of the from node. | Improve this Doc View Source SetEdge(Node<TNodeValue, TEdgeLabel>, Int32, Node<TNodeValue, TEdgeLabel>, TEdgeLabel) Creates and replaces a labeled outgoing edge of the source node at the specified index. Declaration public Edge<TNodeValue, TEdgeLabel> SetEdge(Node<TNodeValue, TEdgeLabel> from, int edgeIndex, Node<TNodeValue, TEdgeLabel> to, TEdgeLabel label) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> from The node that is the source of the edge. Int32 edgeIndex The zero-based index of the edge to replace on the successor list of the from node. Node <TNodeValue, TEdgeLabel> to The node that is the target of the edge. TEdgeLabel label The value of the edge label. Returns Type Description Edge <TNodeValue, TEdgeLabel> The created edge. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods DirectedGraphExtensions.Predecessors<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.PredecessorEdges<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Successors<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Sources<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Sinks<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.DepthFirstSearch<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.TopologicalSort<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Acyclic<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>)"
  },
  "api/Bonsai.Dag.DirectedGraphExtensions.html": {
    "href": "api/Bonsai.Dag.DirectedGraphExtensions.html",
    "title": "Class DirectedGraphExtensions",
    "keywords": "Class DirectedGraphExtensions Provides a set of static methods for searching, sorting and manipulating directed graphs. Inheritance Object DirectedGraphExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dag Assembly : Bonsai.Core.dll Syntax public static class DirectedGraphExtensions Methods | Improve this Doc View Source Acyclic<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) Determines whether a directed graph is acyclic. Declaration public static bool Acyclic<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The source directed graph to test. Returns Type Description Boolean true if source has no cycles; otherwise, false . Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. | Improve this Doc View Source DepthFirstSearch<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) Traverses through all the directed graph nodes in depth-first order. Declaration public static IEnumerable<Node<TNodeValue, TEdgeLabel>> DepthFirstSearch<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The source directed graph that will be traversed. Returns Type Description IEnumerable < Node <TNodeValue, TEdgeLabel>> A sequence containing the set of all graph nodes in depth-first order. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. | Improve this Doc View Source DepthFirstSearch<TNodeValue, TEdgeLabel>(Node<TNodeValue, TEdgeLabel>) Traverses through all the directed graph nodes in depth-first order, starting from the specified node. Declaration public static IEnumerable<Node<TNodeValue, TEdgeLabel>> DepthFirstSearch<TNodeValue, TEdgeLabel>(this Node<TNodeValue, TEdgeLabel> node) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> node The node from which to start the search. Returns Type Description IEnumerable < Node <TNodeValue, TEdgeLabel>> A sequence containing the set of all nodes reachable from node in depth-first order. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. | Improve this Doc View Source PredecessorEdges<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) Returns the sequence of predecessor edges to the specified node. Declaration public static IEnumerable<Tuple<Node<TNodeValue, TEdgeLabel>, Edge<TNodeValue, TEdgeLabel>, int>> PredecessorEdges<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source, Node<TNodeValue, TEdgeLabel> node) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The source directed graph to search for predecessors. Node <TNodeValue, TEdgeLabel> node The node for which to obtain the sequence of predecessors. Returns Type Description IEnumerable < Tuple < Node <TNodeValue, TEdgeLabel>, Edge <TNodeValue, TEdgeLabel>, Int32 >> A sequence of triples containing the predecessor node, the edge linking the predecessor to the specified node and the edge index. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. | Improve this Doc View Source Predecessors<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) Returns the sequence of predecessors to the specified node. Declaration public static IEnumerable<Node<TNodeValue, TEdgeLabel>> Predecessors<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source, Node<TNodeValue, TEdgeLabel> node) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The source directed graph to search for predecessors. Node <TNodeValue, TEdgeLabel> node The node for which to obtain the sequence of predecessors. Returns Type Description IEnumerable < Node <TNodeValue, TEdgeLabel>> A sequence containing all the predecessors to the specified node. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. | Improve this Doc View Source Sinks<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) Returns the sequence of all the nodes in the directed graph with no outgoing edges. Declaration public static IEnumerable<Node<TNodeValue, TEdgeLabel>> Sinks<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The directed graph to search for sinks. Returns Type Description IEnumerable < Node <TNodeValue, TEdgeLabel>> A sequence containing all the nodes in the directed graph with no outgoing edges. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. | Improve this Doc View Source Sources<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) Returns the sequence of all the nodes in the directed graph with no incoming edges. Declaration public static IEnumerable<Node<TNodeValue, TEdgeLabel>> Sources<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The directed graph to search for sources. Returns Type Description IEnumerable < Node <TNodeValue, TEdgeLabel>> A sequence containing all the nodes in the directed graph with no incoming edges. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. | Improve this Doc View Source Successors<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) Returns the sequence of successors to the specified node. Declaration public static IEnumerable<Node<TNodeValue, TEdgeLabel>> Successors<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source, Node<TNodeValue, TEdgeLabel> node) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The source directed graph to search for successors. Node <TNodeValue, TEdgeLabel> node The node for which to obtain the sequence of successors. Returns Type Description IEnumerable < Node <TNodeValue, TEdgeLabel>> A sequence containing all the successors to the specified node. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. | Improve this Doc View Source TopologicalSort<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) Traverses through all the directed graph nodes in such a way as to guarantee that for every node in the sequence, all its predecessors have been visited first. Declaration public static IEnumerable<Node<TNodeValue, TEdgeLabel>> TopologicalSort<TNodeValue, TEdgeLabel>(this DirectedGraph<TNodeValue, TEdgeLabel> source) Parameters Type Name Description DirectedGraph <TNodeValue, TEdgeLabel> source The source directed graph that will be traversed. Returns Type Description IEnumerable < Node <TNodeValue, TEdgeLabel>> A sequence containing the set of all graph nodes in topological sort order. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges."
  },
  "api/Bonsai.Dag.Edge.html": {
    "href": "api/Bonsai.Dag.Edge.html",
    "title": "Class Edge",
    "keywords": "Class Edge Provides static methods for creating edge objects. Inheritance Object Edge Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dag Assembly : Bonsai.Core.dll Syntax public static class Edge Methods | Improve this Doc View Source Create<TNodeValue, TEdgeLabel>(Node<TNodeValue, TEdgeLabel>, TEdgeLabel) Creates a new directed graph labeled edge. Declaration public static Edge<TNodeValue, TEdgeLabel> Create<TNodeValue, TEdgeLabel>(Node<TNodeValue, TEdgeLabel> target, TEdgeLabel label) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> target The node instance that is the target of the edge. TEdgeLabel label The value of the edge label. Returns Type Description Edge <TNodeValue, TEdgeLabel> A labeled edge targeting the specified node. Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges."
  },
  "api/Bonsai.Dag.Edge-2.html": {
    "href": "api/Bonsai.Dag.Edge-2.html",
    "title": "Class Edge<TNodeValue, TEdgeLabel>",
    "keywords": "Class Edge<TNodeValue, TEdgeLabel> Represents an outgoing labeled edge in a directed graph. Inheritance Object Edge<TNodeValue, TEdgeLabel> Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dag Assembly : Bonsai.Core.dll Syntax public class Edge<TNodeValue, TEdgeLabel> Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. Constructors | Improve this Doc View Source Edge(Node<TNodeValue, TEdgeLabel>, TEdgeLabel) Initializes a new instance of the Edge<TNodeValue, TEdgeLabel> class with the specified target node and label. Declaration public Edge(Node<TNodeValue, TEdgeLabel> target, TEdgeLabel label) Parameters Type Name Description Node <TNodeValue, TEdgeLabel> target The target node of the edge. TEdgeLabel label The label value of the edge. Properties | Improve this Doc View Source Label Gets the value of the edge label. Declaration public TEdgeLabel Label { get; } Property Value Type Description TEdgeLabel | Improve this Doc View Source Target Gets the node that is the target of the edge. Declaration public Node<TNodeValue, TEdgeLabel> Target { get; } Property Value Type Description Node <TNodeValue, TEdgeLabel> Methods | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj An object to compare with this instance. Returns Type Description Boolean true if obj is an instance of Edge<TNodeValue, TEdgeLabel> and its label equals the label value of this instance; otherwise, false. Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Dag.EdgeCollection-2.html": {
    "href": "api/Bonsai.Dag.EdgeCollection-2.html",
    "title": "Class EdgeCollection<TNodeValue, TEdgeLabel>",
    "keywords": "Class EdgeCollection<TNodeValue, TEdgeLabel> Represents a collection of outgoing labeled edges in a directed graph. Inheritance Object Collection < Edge <TNodeValue, TEdgeLabel>> EdgeCollection<TNodeValue, TEdgeLabel> Implements IList < Edge <TNodeValue, TEdgeLabel>> ICollection < Edge <TNodeValue, TEdgeLabel>> IList ICollection IReadOnlyList < Edge <TNodeValue, TEdgeLabel>> IReadOnlyCollection < Edge <TNodeValue, TEdgeLabel>> IEnumerable < Edge <TNodeValue, TEdgeLabel>> IEnumerable Inherited Members Collection<Edge<TNodeValue, TEdgeLabel>>.Add(Edge<TNodeValue, TEdgeLabel>) Collection<Edge<TNodeValue, TEdgeLabel>>.Clear() Collection<Edge<TNodeValue, TEdgeLabel>>.CopyTo(Edge<TNodeValue, TEdgeLabel>[], Int32) Collection<Edge<TNodeValue, TEdgeLabel>>.Contains(Edge<TNodeValue, TEdgeLabel>) Collection<Edge<TNodeValue, TEdgeLabel>>.GetEnumerator() Collection<Edge<TNodeValue, TEdgeLabel>>.IndexOf(Edge<TNodeValue, TEdgeLabel>) Collection<Edge<TNodeValue, TEdgeLabel>>.Insert(Int32, Edge<TNodeValue, TEdgeLabel>) Collection<Edge<TNodeValue, TEdgeLabel>>.Remove(Edge<TNodeValue, TEdgeLabel>) Collection<Edge<TNodeValue, TEdgeLabel>>.RemoveAt(Int32) Collection<Edge<TNodeValue, TEdgeLabel>>.ClearItems() Collection<Edge<TNodeValue, TEdgeLabel>>.InsertItem(Int32, Edge<TNodeValue, TEdgeLabel>) Collection<Edge<TNodeValue, TEdgeLabel>>.RemoveItem(Int32) Collection<Edge<TNodeValue, TEdgeLabel>>.SetItem(Int32, Edge<TNodeValue, TEdgeLabel>) Collection<Edge<TNodeValue, TEdgeLabel>>.IEnumerable.GetEnumerator() Collection<Edge<TNodeValue, TEdgeLabel>>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Dag.Edge<TNodeValue, TEdgeLabel>>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Dag.Edge<TNodeValue, TEdgeLabel>>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<Edge<TNodeValue, TEdgeLabel>>.IList.Add(Object) Collection<Edge<TNodeValue, TEdgeLabel>>.IList.Contains(Object) Collection<Edge<TNodeValue, TEdgeLabel>>.IList.IndexOf(Object) Collection<Edge<TNodeValue, TEdgeLabel>>.IList.Insert(Int32, Object) Collection<Edge<TNodeValue, TEdgeLabel>>.IList.Remove(Object) Collection<Edge<TNodeValue, TEdgeLabel>>.Count Collection<Edge<TNodeValue, TEdgeLabel>>.Items Collection<Edge<TNodeValue, TEdgeLabel>>.Item[Int32] Collection<Edge<TNodeValue, TEdgeLabel>>.ICollection<Edge<TNodeValue, TEdgeLabel>>.IsReadOnly Collection<Edge<TNodeValue, TEdgeLabel>>.ICollection.IsSynchronized Collection<Edge<TNodeValue, TEdgeLabel>>.ICollection.SyncRoot Collection<Edge<TNodeValue, TEdgeLabel>>.IList.Item[Int32] Collection<Edge<TNodeValue, TEdgeLabel>>.IList.IsReadOnly Collection<Edge<TNodeValue, TEdgeLabel>>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dag Assembly : Bonsai.Core.dll Syntax public class EdgeCollection<TNodeValue, TEdgeLabel> : Collection<Edge<TNodeValue, TEdgeLabel>>, IList<Edge<TNodeValue, TEdgeLabel>>, ICollection<Edge<TNodeValue, TEdgeLabel>>, IList, ICollection, IReadOnlyList<Edge<TNodeValue, TEdgeLabel>>, IReadOnlyCollection<Edge<TNodeValue, TEdgeLabel>>, IEnumerable<Edge<TNodeValue, TEdgeLabel>>, IEnumerable Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Dag.EdgeDescriptor-1.html": {
    "href": "api/Bonsai.Dag.EdgeDescriptor-1.html",
    "title": "Class EdgeDescriptor<TEdgeLabel>",
    "keywords": "Class EdgeDescriptor<TEdgeLabel> Represents a serializable descriptor of an edge connecting two nodes in a directed graph. Inheritance Object EdgeDescriptor<TEdgeLabel> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dag Assembly : Bonsai.Core.dll Syntax public class EdgeDescriptor<TEdgeLabel> Type Parameters Name Description TEdgeLabel The type of the labels associated with graph edges. Constructors | Improve this Doc View Source EdgeDescriptor() Initializes a new instance of the EdgeDescriptor<TEdgeLabel> class. Declaration public EdgeDescriptor() | Improve this Doc View Source EdgeDescriptor(Int32, Int32, TEdgeLabel) Initializes a new instance of the EdgeDescriptor<TEdgeLabel> class with the specified indices for source and target nodes and a label value. Declaration public EdgeDescriptor(int from, int to, TEdgeLabel label) Parameters Type Name Description Int32 from The zero-based index of the node that is the source of the edge. Int32 to The zero-based index of the node that is the target of the edge. TEdgeLabel label The value of the edge label. Properties | Improve this Doc View Source From Gets or sets the zero-based index of the node that is the source of the edge. Declaration public int From { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Label Gets or sets the value of the edge label. Declaration public TEdgeLabel Label { get; set; } Property Value Type Description TEdgeLabel | Improve this Doc View Source To Gets or sets the zero-based index of the node that is the target of the edge. Declaration public int To { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.Dag.html": {
    "href": "api/Bonsai.Dag.html",
    "title": "Namespace Bonsai.Dag",
    "keywords": "Namespace Bonsai.Dag Classes DirectedGraph<TNodeValue, TEdgeLabel> Represents a directed graph that consists of labeled nodes and edges. DirectedGraphExtensions Provides a set of static methods for searching, sorting and manipulating directed graphs. Edge Provides static methods for creating edge objects. Edge<TNodeValue, TEdgeLabel> Represents an outgoing labeled edge in a directed graph. EdgeCollection<TNodeValue, TEdgeLabel> Represents a collection of outgoing labeled edges in a directed graph. EdgeDescriptor<TEdgeLabel> Represents a serializable descriptor of an edge connecting two nodes in a directed graph. Node<TNodeValue, TEdgeLabel> Represents a labeled node in a directed graph."
  },
  "api/Bonsai.Dag.Node-2.html": {
    "href": "api/Bonsai.Dag.Node-2.html",
    "title": "Class Node<TNodeValue, TEdgeLabel>",
    "keywords": "Class Node<TNodeValue, TEdgeLabel> Represents a labeled node in a directed graph. Inheritance Object Node<TNodeValue, TEdgeLabel> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dag Assembly : Bonsai.Core.dll Syntax public class Node<TNodeValue, TEdgeLabel> Type Parameters Name Description TNodeValue The type of the labels associated with graph nodes. TEdgeLabel The type of the labels associated with graph edges. Constructors | Improve this Doc View Source Node(TNodeValue) Initializes a new instance of the Node<TNodeValue, TEdgeLabel> class with the specified value . Declaration public Node(TNodeValue value) Parameters Type Name Description TNodeValue value The value of the node label. Properties | Improve this Doc View Source Successors Gets the collection of successor edges leaving this node. Declaration public EdgeCollection<TNodeValue, TEdgeLabel> Successors { get; } Property Value Type Description EdgeCollection <TNodeValue, TEdgeLabel> | Improve this Doc View Source Value Gets the value of the node label. Declaration public TNodeValue Value { get; } Property Value Type Description TNodeValue Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Extension Methods DirectedGraphExtensions.DepthFirstSearch<TNodeValue, TEdgeLabel>(Node<TNodeValue, TEdgeLabel>)"
  },
  "api/Bonsai.Design.CommandExecutor.html": {
    "href": "api/Bonsai.Design.CommandExecutor.html",
    "title": "Class CommandExecutor",
    "keywords": "Class CommandExecutor Represents a command execution stack with support for undo and redo operations. Inheritance Object MarshalByRefObject Component CommandExecutor Implements IComponent IDisposable Inherited Members Component.Dispose() Component.Dispose(Boolean) Component.GetService(Type) Component.ToString() Component.CanRaiseEvents Component.Events Component.Site Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class CommandExecutor : Component, IComponent, IDisposable Properties | Improve this Doc View Source CanRedo Gets a value indicating whether there are any commands available to redo on the command execution stack. Declaration public bool CanRedo { get; } Property Value Type Description Boolean | Improve this Doc View Source CanUndo Gets a value indicating whether there are any commands available to undo on the command execution stack. Declaration public bool CanUndo { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source BeginCompositeCommand() Marks the beginning of a composite command execution. Declaration public void BeginCompositeCommand() Remarks Every command executed until EndCompositeCommand() will be considered part of the composite action. Calling undo or redo on a composite action will affect all commands in the composite, as if they were effectively part of a single command. | Improve this Doc View Source Clear() Clears the entire command execution history. Declaration public void Clear() | Improve this Doc View Source EndCompositeCommand() Marks the end of a composite command execution. Declaration public void EndCompositeCommand() | Improve this Doc View Source Execute(Action, Action) Specifies a new action for immediate execution, together with the optional undo action which reverses the effects of the command. Declaration public void Execute(Action command, Action undo) Parameters Type Name Description Action command The command to execute. Action undo The undo action which reverses the effects of the command . If no undo action is specified, the entire command history up to the execution of this command will be cleared. | Improve this Doc View Source OnStatusChanged(EventArgs) Raises the StatusChanged event. Declaration protected virtual void OnStatusChanged(EventArgs e) Parameters Type Name Description EventArgs e An EventArgs that contains the event data. | Improve this Doc View Source Redo() Redo the effects of the command which was previously undone. Declaration public void Redo() | Improve this Doc View Source Undo() Undo the effects of the previously executed command. Declaration public void Undo() | Improve this Doc View Source Undo(Boolean) Undo the effects of the previously executed command, with optional support for redo operations. Declaration public void Undo(bool allowRedo) Parameters Type Name Description Boolean allowRedo If this parameter is true , redo operations will be allowed after undoing the previous command. Otherwise, all the forward history, including the command being undone will be cleared. Events | Improve this Doc View Source StatusChanged Occurs when the command execution stack has changed, either by executing a new command, or calling undo or redo operations. Declaration public event EventHandler StatusChanged Event Type Type Description EventHandler Implements System.ComponentModel.IComponent System.IDisposable"
  },
  "api/Bonsai.Design.ControlObservable.html": {
    "href": "api/Bonsai.Design.ControlObservable.html",
    "title": "Class ControlObservable",
    "keywords": "Class ControlObservable Provides a set of static methods for subscribing to observable sequences using Windows Forms controls. Inheritance Object ControlObservable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public static class ControlObservable Methods | Improve this Doc View Source ObserveOn<TSource>(IObservable<TSource>, Control) Wraps the source sequence in order to run its observer callbacks in the UI thread of the specified control. Declaration public static IObservable<TSource> ObserveOn<TSource>(this IObservable<TSource> source, Control control) Parameters Type Name Description IObservable <TSource> source The observable sequence whose notifications will be scheduled in the UI thread of the specified control. Control control A Control object whose underlying handle will be used to schedule notifications. Returns Type Description IObservable <TSource> An observable sequence with the same elements as the source sequence, but where all notifications will be raised in the UI thread of the specified control . Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Design.ControlScheduler.html": {
    "href": "api/Bonsai.Design.ControlScheduler.html",
    "title": "Class ControlScheduler",
    "keywords": "Class ControlScheduler Represents an object that schedules units of work using the UI thread of a Windows Forms control. Inheritance Object ControlScheduler Implements IScheduler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class ControlScheduler : IScheduler Constructors | Improve this Doc View Source ControlScheduler(Control) Initializes a new instance of the ControlScheduler class using the specified control. Declaration public ControlScheduler(Control control) Parameters Type Name Description Control control A Control object whose underlying handle will be used to schedule units of work. Properties | Improve this Doc View Source Control Gets the control object used to schedule units of work. Declaration public Control Control { get; } Property Value Type Description Control | Improve this Doc View Source Now Gets the current time according to the local machine's system clock. Declaration public DateTimeOffset Now { get; } Property Value Type Description DateTimeOffset Methods | Improve this Doc View Source Schedule<TState>(TState, DateTimeOffset, Func<IScheduler, TState, IDisposable>) Declaration public IDisposable Schedule<TState>(TState state, DateTimeOffset dueTime, Func<IScheduler, TState, IDisposable> action) Parameters Type Name Description TState state DateTimeOffset dueTime Func < IScheduler , TState, IDisposable > action Returns Type Description IDisposable Type Parameters Name Description TState | Improve this Doc View Source Schedule<TState>(TState, Func<IScheduler, TState, IDisposable>) Declaration public IDisposable Schedule<TState>(TState state, Func<IScheduler, TState, IDisposable> action) Parameters Type Name Description TState state Func < IScheduler , TState, IDisposable > action Returns Type Description IDisposable Type Parameters Name Description TState | Improve this Doc View Source Schedule<TState>(TState, TimeSpan, Func<IScheduler, TState, IDisposable>) Declaration public IDisposable Schedule<TState>(TState state, TimeSpan dueTime, Func<IScheduler, TState, IDisposable> action) Parameters Type Name Description TState state TimeSpan dueTime Func < IScheduler , TState, IDisposable > action Returns Type Description IDisposable Type Parameters Name Description TState Implements IScheduler"
  },
  "api/Bonsai.Design.DataSourceTypeEditor.DataSource.html": {
    "href": "api/Bonsai.Design.DataSourceTypeEditor.DataSource.html",
    "title": "Enum DataSourceTypeEditor.DataSource",
    "keywords": "Enum DataSourceTypeEditor.DataSource Specifies the source of runtime notifications to the property editor. Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax protected enum DataSource Fields Name Description Input Runtime notifications will come from the first input sequence to the operator. Output Runtime notifications will come from the observable output of the operator."
  },
  "api/Bonsai.Design.DataSourceTypeEditor.html": {
    "href": "api/Bonsai.Design.DataSourceTypeEditor.html",
    "title": "Class DataSourceTypeEditor",
    "keywords": "Class DataSourceTypeEditor Provides an abstract base class for property editors that require inspecting the runtime notifications of an operator to provide their functionality. Inheritance Object UITypeEditor DataSourceTypeEditor MemberSelectorEditor SelectChannelEditor SpikeThresholdEditor IplImageCircleEditor IplImageEllipseEditor IplImageQuadrangleEditor IplImageRectangleEditor IplImageRoiEditor Inherited Members UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.GetEditStyle(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public abstract class DataSourceTypeEditor : UITypeEditor Constructors | Improve this Doc View Source DataSourceTypeEditor(DataSourceTypeEditor.DataSource) Initializes a new instance of the DataSourceTypeEditor class using the specified data source. Declaration protected DataSourceTypeEditor(DataSourceTypeEditor.DataSource source) Parameters Type Name Description DataSourceTypeEditor.DataSource source Specifies the source of runtime notifications to the property editor. | Improve this Doc View Source DataSourceTypeEditor(DataSourceTypeEditor.DataSource, Type) Initializes a new instance of the DataSourceTypeEditor class using the specified data source and target data type. Declaration protected DataSourceTypeEditor(DataSourceTypeEditor.DataSource source, Type targetType) Parameters Type Name Description DataSourceTypeEditor.DataSource source Specifies the source of runtime notifications to the property editor. Type targetType The type of values emitted by the data source. Methods | Improve this Doc View Source GetDataSource(ITypeDescriptorContext, IServiceProvider) Gets the source of runtime notifications arriving to or from the operator. Declaration protected InspectBuilder GetDataSource(ITypeDescriptorContext context, IServiceProvider provider) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext object that can be used to obtain additional context information. IServiceProvider provider An IServiceProvider object that this editor can use to obtain services. Returns Type Description InspectBuilder An InspectBuilder object that can be used to subscribe to runtime notifications arriving to or from the operator."
  },
  "api/Bonsai.Design.DescriptiveCollectionEditor.html": {
    "href": "api/Bonsai.Design.DescriptiveCollectionEditor.html",
    "title": "Class DescriptiveCollectionEditor",
    "keywords": "Class DescriptiveCollectionEditor Provides a user interface with a scaled description panel that can edit most types of collections at design time. Inheritance Object UITypeEditor CollectionEditor DescriptiveCollectionEditor CompressionParameterCollectionEditor Inherited Members CollectionEditor.CancelChanges() CollectionEditor.CanRemoveInstance(Object) CollectionEditor.CanSelectMultipleInstances() CollectionEditor.CreateInstance(Type) CollectionEditor.GetObjectsFromInstance(Object) CollectionEditor.GetDisplayText(Object) CollectionEditor.CreateCollectionItemType() CollectionEditor.CreateNewItemTypes() CollectionEditor.DestroyInstance(Object) CollectionEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) CollectionEditor.GetEditStyle(ITypeDescriptorContext) CollectionEditor.GetItems(Object) CollectionEditor.GetService(Type) CollectionEditor.SetItems(Object, Object[]) CollectionEditor.ShowHelp() CollectionEditor.CollectionItemType CollectionEditor.CollectionType CollectionEditor.Context CollectionEditor.NewItemTypes CollectionEditor.HelpTopic UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class DescriptiveCollectionEditor : CollectionEditor Constructors | Improve this Doc View Source DescriptiveCollectionEditor(Type) Initializes a new instance of the DescriptiveCollectionEditor class using the specified type. Declaration public DescriptiveCollectionEditor(Type type) Parameters Type Name Description Type type The type of the collection for this editor to edit. Methods | Improve this Doc View Source CreateCollectionForm() Declaration protected override CollectionEditor.CollectionForm CreateCollectionForm() Returns Type Description CollectionEditor.CollectionForm Overrides CollectionEditor.CreateCollectionForm()"
  },
  "api/Bonsai.Design.DialogTypeVisualizer.html": {
    "href": "api/Bonsai.Design.DialogTypeVisualizer.html",
    "title": "Class DialogTypeVisualizer",
    "keywords": "Class DialogTypeVisualizer Provides the abstract base class for type visualizers. Inheritance Object DialogTypeVisualizer MashupVisualizer ObjectTextVisualizer BarGraphVisualizer LineGraphVisualizer RollingGraphVisualizer StateTimeVisualizer TimeSeriesVisualizerBase MatVisualizer<TWaveformView> BinaryRegionExtremesOverlay CircleOverlay ConnectedComponentCollectionOverlay ConnectedComponentOverlay ContourConvexityOverlay ContoursOverlay IplImageOverlay KeyPointCollectionOverlay KeyPointOpticalFlowOverlay LineSegmentOverlay PointOverlay PolygonOverlay RectOverlay ScalarHistogramVisualizer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public abstract class DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public abstract void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. | Improve this Doc View Source SequenceCompleted() Updates the type visualizer when one of the active subscriptions gracefully terminates. Declaration public virtual void SequenceCompleted() | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public abstract void Show(object value) Parameters Type Name Description Object value The value to visualize. | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public abstract void Unload() | Improve this Doc View Source Visualize(IObservable<IObservable<Object>>, IServiceProvider) Creates an observable sequence used to visualize all notifications emitted by a workflow operator, using this type visualizer and the specified service provider. Declaration public virtual IObservable<object> Visualize(IObservable<IObservable<object>> source, IServiceProvider provider) Parameters Type Name Description IObservable < IObservable < Object >> source An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Returns Type Description IObservable < Object > An observable sequence where every notification updates the type visualizer object in the UI thread."
  },
  "api/Bonsai.Design.DynamicPropertyDescriptor.html": {
    "href": "api/Bonsai.Design.DynamicPropertyDescriptor.html",
    "title": "Class DynamicPropertyDescriptor",
    "keywords": "Class DynamicPropertyDescriptor Provides a virtual property for a class. Inheritance Object MemberDescriptor PropertyDescriptor DynamicPropertyDescriptor Inherited Members PropertyDescriptor.AddValueChanged(Object, EventHandler) PropertyDescriptor.Equals(Object) PropertyDescriptor.CreateInstance(Type) PropertyDescriptor.FillAttributes(IList) PropertyDescriptor.GetChildProperties() PropertyDescriptor.GetChildProperties(Attribute[]) PropertyDescriptor.GetChildProperties(Object) PropertyDescriptor.GetChildProperties(Object, Attribute[]) PropertyDescriptor.GetEditor(Type) PropertyDescriptor.GetHashCode() PropertyDescriptor.GetInvocationTarget(Type, Object) PropertyDescriptor.GetTypeFromName(String) PropertyDescriptor.OnValueChanged(Object, EventArgs) PropertyDescriptor.RemoveValueChanged(Object, EventHandler) PropertyDescriptor.GetValueChangedHandler(Object) PropertyDescriptor.Converter PropertyDescriptor.IsLocalizable PropertyDescriptor.SerializationVisibility PropertyDescriptor.SupportsChangeEvents MemberDescriptor.CreateAttributeCollection() MemberDescriptor.FindMethod(Type, String, Type[], Type) MemberDescriptor.FindMethod(Type, String, Type[], Type, Boolean) MemberDescriptor.GetSite(Object) MemberDescriptor.AttributeArray MemberDescriptor.Attributes MemberDescriptor.Category MemberDescriptor.Description MemberDescriptor.IsBrowsable MemberDescriptor.Name MemberDescriptor.NameHashCode MemberDescriptor.DesignTimeOnly MemberDescriptor.DisplayName Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class DynamicPropertyDescriptor : PropertyDescriptor Constructors | Improve this Doc View Source DynamicPropertyDescriptor(String, Type, Func<Object, Object>, Action<Object, Object>, Attribute[]) Initializes a new instance of the DynamicPropertyDescriptor class using the specified name, type, and dynamic methods for getting and setting property values. Declaration public DynamicPropertyDescriptor(string name, Type type, Func<object, object> getter, Action<object, object> setter, params Attribute[] attributes) Parameters Type Name Description String name The name of the dynamic property. Type type The type of the dynamic property. Func < Object , Object > getter A method used to get the current value of the dynamic property. Action < Object , Object > setter A method used to set the value of the dynamic property to a different value. Attribute [] attributes An optional array of Attribute objects that contains the property attributes. Properties | Improve this Doc View Source ComponentType Gets the type of the component this property is bound to. Declaration public override Type ComponentType { get; } Property Value Type Description Type Overrides PropertyDescriptor.ComponentType | Improve this Doc View Source IsReadOnly Gets a value indicating whether this property is read-only. Declaration public override bool IsReadOnly { get; } Property Value Type Description Boolean Overrides PropertyDescriptor.IsReadOnly | Improve this Doc View Source PropertyType Gets the type of the dynamic property. Declaration public override Type PropertyType { get; } Property Value Type Description Type Overrides PropertyDescriptor.PropertyType Methods | Improve this Doc View Source CanResetValue(Object) Returns whether resetting an object changes its value. Dynamic properties do not support resetting, so resetting an object never changes its value. Declaration public override bool CanResetValue(object component) Parameters Type Name Description Object component Returns Type Description Boolean Overrides PropertyDescriptor.CanResetValue(Object) | Improve this Doc View Source GetValue(Object) Gets the current value of the property on a component. Declaration public override object GetValue(object component) Parameters Type Name Description Object component Returns Type Description Object Overrides PropertyDescriptor.GetValue(Object) | Improve this Doc View Source ResetValue(Object) Resets the value for this property of the component to the default value. Dynamic properties do not support resetting their values. Declaration public override void ResetValue(object component) Parameters Type Name Description Object component Overrides PropertyDescriptor.ResetValue(Object) | Improve this Doc View Source SetValue(Object, Object) Sets the value of the dynamic property to a different value. Declaration public override void SetValue(object component, object value) Parameters Type Name Description Object component Object value Overrides PropertyDescriptor.SetValue(Object, Object) | Improve this Doc View Source ShouldSerializeValue(Object) Determines a value indicating whether the value of this property needs to be persisted. Dynamic property values are transient, so they always need to be persisted. Declaration public override bool ShouldSerializeValue(object component) Parameters Type Name Description Object component Returns Type Description Boolean Overrides PropertyDescriptor.ShouldSerializeValue(Object)"
  },
  "api/Bonsai.Design.DynamicTypeDescriptionProvider.html": {
    "href": "api/Bonsai.Design.DynamicTypeDescriptionProvider.html",
    "title": "Class DynamicTypeDescriptionProvider",
    "keywords": "Class DynamicTypeDescriptionProvider Provides dynamic supplemental metadata to a TypeDescriptor . Inheritance Object TypeDescriptionProvider DynamicTypeDescriptionProvider Inherited Members TypeDescriptionProvider.CreateInstance(IServiceProvider, Type, Type[], Object[]) TypeDescriptionProvider.GetCache(Object) TypeDescriptionProvider.GetExtenderProviders(Object) TypeDescriptionProvider.GetFullComponentName(Object) TypeDescriptionProvider.GetReflectionType(Type) TypeDescriptionProvider.GetReflectionType(Object) TypeDescriptionProvider.GetReflectionType(Type, Object) TypeDescriptionProvider.GetRuntimeType(Type) TypeDescriptionProvider.GetTypeDescriptor(Type) TypeDescriptionProvider.GetTypeDescriptor(Object) TypeDescriptionProvider.IsSupportedType(Type) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class DynamicTypeDescriptionProvider : TypeDescriptionProvider Properties | Improve this Doc View Source Properties Gets the collection of dynamic custom properties to be added to the TypeDescriptor . Declaration public Collection<PropertyDescriptor> Properties { get; } Property Value Type Description Collection < PropertyDescriptor > Methods | Improve this Doc View Source GetExtendedTypeDescriptor(Object) Declaration public override ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance) Parameters Type Name Description Object instance Returns Type Description ICustomTypeDescriptor Overrides TypeDescriptionProvider.GetExtendedTypeDescriptor(Object) | Improve this Doc View Source GetTypeDescriptor(Type, Object) Declaration public override ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance) Parameters Type Name Description Type objectType Object instance Returns Type Description ICustomTypeDescriptor Overrides TypeDescriptionProvider.GetTypeDescriptor(Type, Object)"
  },
  "api/Bonsai.Design.FileNameEditor.html": {
    "href": "api/Bonsai.Design.FileNameEditor.html",
    "title": "Class FileNameEditor",
    "keywords": "Class FileNameEditor Provides the abstract base class for user interface editors that display a dialog box from which the user can select a file. Inheritance Object UITypeEditor FileNameEditor OpenFileNameEditor SaveFileNameEditor Inherited Members UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public abstract class FileNameEditor : UITypeEditor Methods | Improve this Doc View Source CreateFileDialog() When overridden in a derived class, initializes the dialog box from which the user can select a file. Declaration protected abstract FileDialog CreateFileDialog() Returns Type Description FileDialog The FileDialog object which will display the dialog box from which the user can select a file. | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext)"
  },
  "api/Bonsai.Design.FolderBrowserDialog.html": {
    "href": "api/Bonsai.Design.FolderBrowserDialog.html",
    "title": "Class FolderBrowserDialog",
    "keywords": "Class FolderBrowserDialog Specifies a folder browser dialog box. Inheritance Object MarshalByRefObject Component CommonDialog FolderBrowserDialog Implements IComponent IDisposable Inherited Members CommonDialog.HookProc(IntPtr, Int32, IntPtr, IntPtr) CommonDialog.OnHelpRequest(EventArgs) CommonDialog.OwnerWndProc(IntPtr, Int32, IntPtr, IntPtr) CommonDialog.ShowDialog() CommonDialog.ShowDialog(IWin32Window) CommonDialog.Tag CommonDialog.HelpRequest Component.Dispose() Component.Dispose(Boolean) Component.GetService(Type) Component.ToString() Component.CanRaiseEvents Component.Events Component.Site Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class FolderBrowserDialog : CommonDialog, IComponent, IDisposable Constructors | Improve this Doc View Source FolderBrowserDialog() Initializes a new instance of the FolderBrowserDialog class. Declaration public FolderBrowserDialog() Properties | Improve this Doc View Source SelectedPath Gets or sets the path to the selected folder. Declaration public string SelectedPath { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Reset() Resets the properties of the folder browser dialog to their default values. Declaration public override void Reset() Overrides CommonDialog.Reset() | Improve this Doc View Source RunDialog(IntPtr) Displays a folder browser dialog. Declaration protected override bool RunDialog(IntPtr hwndOwner) Parameters Type Name Description IntPtr hwndOwner Returns Type Description Boolean Overrides CommonDialog.RunDialog(IntPtr) Implements System.ComponentModel.IComponent System.IDisposable"
  },
  "api/Bonsai.Design.FolderNameEditor.html": {
    "href": "api/Bonsai.Design.FolderNameEditor.html",
    "title": "Class FolderNameEditor",
    "keywords": "Class FolderNameEditor Provides a user interface editor that displays a browser dialog box from which the user can select a folder. Inheritance Object UITypeEditor FolderNameEditor Inherited Members UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class FolderNameEditor : UITypeEditor Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext)"
  },
  "api/Bonsai.Design.html": {
    "href": "api/Bonsai.Design.html",
    "title": "Namespace Bonsai.Design",
    "keywords": "Namespace Bonsai.Design Classes CommandExecutor Represents a command execution stack with support for undo and redo operations. ControlObservable Provides a set of static methods for subscribing to observable sequences using Windows Forms controls. ControlScheduler Represents an object that schedules units of work using the UI thread of a Windows Forms control. DataSourceTypeEditor Provides an abstract base class for property editors that require inspecting the runtime notifications of an operator to provide their functionality. DescriptiveCollectionEditor Provides a user interface with a scaled description panel that can edit most types of collections at design time. DialogTypeVisualizer Provides the abstract base class for type visualizers. DynamicPropertyDescriptor Provides a virtual property for a class. DynamicTypeDescriptionProvider Provides dynamic supplemental metadata to a TypeDescriptor . FileNameEditor Provides the abstract base class for user interface editors that display a dialog box from which the user can select a file. FolderBrowserDialog Specifies a folder browser dialog box. FolderNameEditor Provides a user interface editor that displays a browser dialog box from which the user can select a folder. MashupSource Represents an association between a workflow element and a type visualizer to be combined in a MashupVisualizer . MashupSource<TMashupVisualizer> Provides a generic type signature which can be used to declare that the specified mashup visualizer type accepts mashup combinations from any type visualizer object. MashupSource<TMashupVisualizer, TVisualizer> Represents a generic type signature which can be used to declare an association between the specified mashup visualizer type and compatible type visualizer objects. MashupSourceCollection Represents a collection of visualizer sources to be combined in a mashup visualizer. MashupVisualizer Provides an abstract base class for a visualizer which can be combined with other visualizers. MemberSelectorEditor Provides a user interface editor that displays a dialog for selecting members of a workflow expression type. MemberSelectorEditorDialog Represents a dialog for selecting members of a workflow expression type. MultiMemberSelectorEditor Provides a user interface editor that displays a dialog for selecting multiple members of a workflow expression type. MultiMemberSelectorEditorDialog Represents a dialog for selecting multiple members of a workflow expression type. NumericUpDownEditor Provides a user interface editor that displays an up-down control for selecting numeric values. ObjectTextVisualizer Provides a type visualizer for displaying any object type as text. OpenFileNameEditor Provides a user interface editor that prompts the user to open a file. ParsePatternEditor Provides a drop-down user interface for selecting available format specifiers which can be passed to the Parse(Expression, String) method. PathConvert Provides static methods for converting project paths. PropertyGrid Provides a user interface for browsing the properties of an object. SaveFileNameEditor Provides a user interface editor that prompts the user to select a location for saving a file. SeekBar Represents a horizontal seek bar. Slider Represents a slider control used to select values from a continuous range. SliderEditor Provides a user interface editor that displays a slider for selecting numeric values between a specified range. TypeMappingEditor Provides a user interface for selecting method overloads from a workflow operator. TypeVisualizerDialog Represents a window or panel where a type visualizer can be displayed. VisualizerDialogSettings VisualizerDialogSettingsCollection VisualizerLayout WorkflowComponentEditor Provides the abstract base class for a custom workflow component editor. WorkflowEditorSettings Interfaces IDialogTypeVisualizerService Provides an interface for a DialogTypeVisualizer to add controls to a type visualizer dialog. ITypeVisualizerContext Provides additional context information for a DialogTypeVisualizer , such as the workflow element and a source for subscribing to runtime notifications. IWorkflowEditorState Provides information about the state of the workflow editor. Enums DataSourceTypeEditor.DataSource Specifies the source of runtime notifications to the property editor."
  },
  "api/Bonsai.Design.IDialogTypeVisualizerService.html": {
    "href": "api/Bonsai.Design.IDialogTypeVisualizerService.html",
    "title": "Interface IDialogTypeVisualizerService",
    "keywords": "Interface IDialogTypeVisualizerService Provides an interface for a DialogTypeVisualizer to add controls to a type visualizer dialog. Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public interface IDialogTypeVisualizerService Methods | Improve this Doc View Source AddControl(Control) Adds a control to the type visualizer dialog. Declaration void AddControl(Control control) Parameters Type Name Description Control control The control to add to the type visualizer dialog."
  },
  "api/Bonsai.Design.ITypeVisualizerContext.html": {
    "href": "api/Bonsai.Design.ITypeVisualizerContext.html",
    "title": "Interface ITypeVisualizerContext",
    "keywords": "Interface ITypeVisualizerContext Provides additional context information for a DialogTypeVisualizer , such as the workflow element and a source for subscribing to runtime notifications. Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public interface ITypeVisualizerContext Properties | Improve this Doc View Source Source Gets an InspectBuilder object which can be used to subscribe to runtime notifications and obtain other information about the workflow element being visualized. Declaration InspectBuilder Source { get; } Property Value Type Description InspectBuilder"
  },
  "api/Bonsai.Design.IWorkflowEditorState.html": {
    "href": "api/Bonsai.Design.IWorkflowEditorState.html",
    "title": "Interface IWorkflowEditorState",
    "keywords": "Interface IWorkflowEditorState Provides information about the state of the workflow editor. Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public interface IWorkflowEditorState Properties | Improve this Doc View Source WorkflowRunning Gets a value indicating whether the workflow is running. Declaration bool WorkflowRunning { get; } Property Value Type Description Boolean Events | Improve this Doc View Source WorkflowStarted Occurs when the workflow starts. Declaration event EventHandler WorkflowStarted Event Type Type Description EventHandler | Improve this Doc View Source WorkflowStopped Occurs when the workflow stops. Declaration event EventHandler WorkflowStopped Event Type Type Description EventHandler"
  },
  "api/Bonsai.Design.MashupSource.html": {
    "href": "api/Bonsai.Design.MashupSource.html",
    "title": "Class MashupSource",
    "keywords": "Class MashupSource Represents an association between a workflow element and a type visualizer to be combined in a MashupVisualizer . Inheritance Object MashupSource Implements ITypeVisualizerContext Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class MashupSource : ITypeVisualizerContext Constructors | Improve this Doc View Source MashupSource(InspectBuilder, DialogTypeVisualizer) Initializes a new instance of the MashupSource class using the specified source and type visualizer. Declaration public MashupSource(InspectBuilder source, DialogTypeVisualizer visualizer) Parameters Type Name Description InspectBuilder source The source of runtime notifications to be visualized. DialogTypeVisualizer visualizer The type visualizer used to display notifications from the source in the context of the mashup combination. Properties | Improve this Doc View Source Source Gets the source of runtime notifications to be visualized. Declaration public InspectBuilder Source { get; } Property Value Type Description InspectBuilder | Improve this Doc View Source Visualizer Gets the type visualizer used to display notifications from the source in the context of the mashup combination. Declaration public DialogTypeVisualizer Visualizer { get; } Property Value Type Description DialogTypeVisualizer Implements ITypeVisualizerContext"
  },
  "api/Bonsai.Design.MashupSource-1.html": {
    "href": "api/Bonsai.Design.MashupSource-1.html",
    "title": "Class MashupSource<TMashupVisualizer>",
    "keywords": "Class MashupSource<TMashupVisualizer> Provides a generic type signature which can be used to declare that the specified mashup visualizer type accepts mashup combinations from any type visualizer object. Inheritance Object MashupSource<TMashupVisualizer> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public static class MashupSource<TMashupVisualizer> where TMashupVisualizer : MashupVisualizer Type Parameters Name Description TMashupVisualizer The type visualizer class which can be used to combine with any DialogTypeVisualizer instance."
  },
  "api/Bonsai.Design.MashupSource-2.html": {
    "href": "api/Bonsai.Design.MashupSource-2.html",
    "title": "Class MashupSource<TMashupVisualizer, TVisualizer>",
    "keywords": "Class MashupSource<TMashupVisualizer, TVisualizer> Represents a generic type signature which can be used to declare an association between the specified mashup visualizer type and compatible type visualizer objects. Inheritance Object MashupSource<TMashupVisualizer, TVisualizer> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public static class MashupSource<TMashupVisualizer, TVisualizer> where TMashupVisualizer : MashupVisualizer where TVisualizer : DialogTypeVisualizer Type Parameters Name Description TMashupVisualizer The type visualizer which will accept to be combined with TVisualizer . TVisualizer The type visualizer to be combined with TMashupVisualizer ."
  },
  "api/Bonsai.Design.MashupSourceCollection.html": {
    "href": "api/Bonsai.Design.MashupSourceCollection.html",
    "title": "Class MashupSourceCollection",
    "keywords": "Class MashupSourceCollection Represents a collection of visualizer sources to be combined in a mashup visualizer. Inheritance Object Collection < MashupSource > MashupSourceCollection Implements IList < MashupSource > ICollection < MashupSource > IList ICollection IReadOnlyList < MashupSource > IReadOnlyCollection < MashupSource > IEnumerable < MashupSource > IEnumerable Inherited Members Collection<MashupSource>.Add(MashupSource) Collection<MashupSource>.Clear() Collection<MashupSource>.CopyTo(MashupSource[], Int32) Collection<MashupSource>.Contains(MashupSource) Collection<MashupSource>.GetEnumerator() Collection<MashupSource>.IndexOf(MashupSource) Collection<MashupSource>.Insert(Int32, MashupSource) Collection<MashupSource>.Remove(MashupSource) Collection<MashupSource>.RemoveAt(Int32) Collection<MashupSource>.ClearItems() Collection<MashupSource>.InsertItem(Int32, MashupSource) Collection<MashupSource>.RemoveItem(Int32) Collection<MashupSource>.SetItem(Int32, MashupSource) Collection<MashupSource>.IEnumerable.GetEnumerator() Collection<MashupSource>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Design.MashupSource>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Design.MashupSource>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<MashupSource>.IList.Add(Object) Collection<MashupSource>.IList.Contains(Object) Collection<MashupSource>.IList.IndexOf(Object) Collection<MashupSource>.IList.Insert(Int32, Object) Collection<MashupSource>.IList.Remove(Object) Collection<MashupSource>.Count Collection<MashupSource>.Items Collection<MashupSource>.Item[Int32] Collection<MashupSource>.ICollection<MashupSource>.IsReadOnly Collection<MashupSource>.ICollection.IsSynchronized Collection<MashupSource>.ICollection.SyncRoot Collection<MashupSource>.IList.Item[Int32] Collection<MashupSource>.IList.IsReadOnly Collection<MashupSource>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class MashupSourceCollection : Collection<MashupSource>, IList<MashupSource>, ICollection<MashupSource>, IList, ICollection, IReadOnlyList<MashupSource>, IReadOnlyCollection<MashupSource>, IEnumerable<MashupSource>, IEnumerable Methods | Improve this Doc View Source Add(InspectBuilder, DialogTypeVisualizer) Adds a visualizer source to the end of the collection. Declaration public MashupSource Add(InspectBuilder source, DialogTypeVisualizer visualizer) Parameters Type Name Description InspectBuilder source The source of runtime notifications to be visualized. DialogTypeVisualizer visualizer The type visualizer used to display notifications from the source in the context of the mashup combination. Returns Type Description MashupSource A MashupSource representing the visualizer source being added to the collection. Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Design.MashupVisualizer.html": {
    "href": "api/Bonsai.Design.MashupVisualizer.html",
    "title": "Class MashupVisualizer",
    "keywords": "Class MashupVisualizer Provides an abstract base class for a visualizer which can be combined with other visualizers. Inheritance Object DialogTypeVisualizer MashupVisualizer TableLayoutPanelVisualizer Inherited Members DialogTypeVisualizer.Show(Object) DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public abstract class MashupVisualizer : DialogTypeVisualizer Properties | Improve this Doc View Source MashupSources Gets the collection of visualizer sources combined in the mashup visualizer. Declaration public MashupSourceCollection MashupSources { get; } Property Value Type Description MashupSourceCollection Methods | Improve this Doc View Source GetMashupSource(Int32, Int32) Finds the mashup source located at the specified coordinates. Declaration public virtual MashupSource GetMashupSource(int x, int y) Parameters Type Name Description Int32 x The x-coordinate used to search, in absolute screen coordinates. Int32 y The y-coordinate used to search, in absolute screen coordinates. Returns Type Description MashupSource The MashupSource representing the mashup source located at the specified coordinates, or null if there is no source at the specified point. | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source LoadMashups(IServiceProvider) Loads type visualizer resources for all sources combined in the mashup visualizer. Declaration public virtual void LoadMashups(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload() | Improve this Doc View Source UnloadMashups() Unloads resources for all sources combined in the mashup visualizer. Declaration public virtual void UnloadMashups()"
  },
  "api/Bonsai.Design.MemberSelectorEditor.html": {
    "href": "api/Bonsai.Design.MemberSelectorEditor.html",
    "title": "Class MemberSelectorEditor",
    "keywords": "Class MemberSelectorEditor Provides a user interface editor that displays a dialog for selecting members of a workflow expression type. Inheritance Object UITypeEditor DataSourceTypeEditor MemberSelectorEditor MultiMemberSelectorEditor Inherited Members DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class MemberSelectorEditor : DataSourceTypeEditor Constructors | Improve this Doc View Source MemberSelectorEditor() Initializes a new instance of the MemberSelectorEditor class. Declaration public MemberSelectorEditor() | Improve this Doc View Source MemberSelectorEditor(Boolean) Initializes a new instance of the MemberSelectorEditor class using either a multi- or single-selection dialog. Declaration public MemberSelectorEditor(bool allowMultiSelection) Parameters Type Name Description Boolean allowMultiSelection Indicates whether the interface allows selecting multiple members. | Improve this Doc View Source MemberSelectorEditor(Func<Expression, Type>, Boolean) Initializes a new instance of the MemberSelectorEditor class using either a multi- or single-selection dialog and the specified method for selecting the expression type. Declaration public MemberSelectorEditor(Func<Expression, Type> typeSelector, bool allowMultiSelection) Parameters Type Name Description Func < Expression , Type > typeSelector A method for selecting the type from which to select members. Boolean allowMultiSelection Indicates whether the interface allows selecting multiple members. Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext)"
  },
  "api/Bonsai.Design.MemberSelectorEditorDialog.html": {
    "href": "api/Bonsai.Design.MemberSelectorEditorDialog.html",
    "title": "Class MemberSelectorEditorDialog",
    "keywords": "Class MemberSelectorEditorDialog Represents a dialog for selecting members of a workflow expression type. Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl Form MemberSelectorEditorDialog Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IContainerControl IDisposable Inherited Members Form.SetVisibleCore(Boolean) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(Boolean) Form.Close() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(Message) Form.ProcessMnemonic(Char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(Char) Form.ProcessKeyPreview(Message) Form.ProcessTabKey(Boolean) Form.RemoveOwnedForm(Form) Form.Select(Boolean, Boolean) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Form.SetClientSizeCore(Int32, Int32) Form.SetDesktopBounds(Int32, Int32, Int32, Int32) Form.SetDesktopLocation(Int32, Int32) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.Menu Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiParent Form.MergedMenu Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.ResizeBegin Form.ResizeEnd ContainerControl.IContainerControl.ActivateControl(Control) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.Validate() ContainerControl.Validate(Boolean) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(Int32) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(Int32, Int32) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(Int32, Int32) ScrollableControl.SetScrollState(Int32, Boolean) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(Int32) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, Boolean) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsMnemonic(Char, String) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(Message) Control.PreProcessControlMessage(Message) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateZOrder() Control.UpdateStyles() Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragDrop(DragEventArgs) Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class MemberSelectorEditorDialog : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IContainerControl, IDisposable Constructors | Improve this Doc View Source MemberSelectorEditorDialog(Type) Initializes a new instance of the MemberSelectorEditorDialog class using the specified type. Declaration public MemberSelectorEditorDialog(Type type) Parameters Type Name Description Type type The type from which to select an inner property. Properties | Improve this Doc View Source Selector Gets or sets the selected inner property of the expression type. Declaration public string Selector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Dispose(Boolean) Clean up any resources being used. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if managed resources should be disposed; otherwise, false. Overrides Form.Dispose(Boolean) | Improve this Doc View Source OnFormClosed(FormClosedEventArgs) Declaration protected override void OnFormClosed(FormClosedEventArgs e) Parameters Type Name Description FormClosedEventArgs e Overrides Form.OnFormClosed(FormClosedEventArgs) Implements System.Windows.Forms.IDropTarget System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IWin32Window System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.Windows.Forms.IContainerControl System.IDisposable"
  },
  "api/Bonsai.Design.MultiMemberSelectorEditor.html": {
    "href": "api/Bonsai.Design.MultiMemberSelectorEditor.html",
    "title": "Class MultiMemberSelectorEditor",
    "keywords": "Class MultiMemberSelectorEditor Provides a user interface editor that displays a dialog for selecting multiple members of a workflow expression type. Inheritance Object UITypeEditor DataSourceTypeEditor MemberSelectorEditor MultiMemberSelectorEditor Inherited Members MemberSelectorEditor.GetEditStyle(ITypeDescriptorContext) MemberSelectorEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class MultiMemberSelectorEditor : MemberSelectorEditor Constructors | Improve this Doc View Source MultiMemberSelectorEditor() Initializes a new instance of the MultiMemberSelectorEditor class. Declaration public MultiMemberSelectorEditor()"
  },
  "api/Bonsai.Design.MultiMemberSelectorEditorDialog.html": {
    "href": "api/Bonsai.Design.MultiMemberSelectorEditorDialog.html",
    "title": "Class MultiMemberSelectorEditorDialog",
    "keywords": "Class MultiMemberSelectorEditorDialog Represents a dialog for selecting multiple members of a workflow expression type. Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl Form MultiMemberSelectorEditorDialog Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IContainerControl IDisposable Inherited Members Form.SetVisibleCore(Boolean) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(Boolean) Form.Close() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(Message) Form.ProcessMnemonic(Char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(Char) Form.ProcessKeyPreview(Message) Form.ProcessTabKey(Boolean) Form.RemoveOwnedForm(Form) Form.Select(Boolean, Boolean) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Form.SetClientSizeCore(Int32, Int32) Form.SetDesktopBounds(Int32, Int32, Int32, Int32) Form.SetDesktopLocation(Int32, Int32) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.Menu Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiParent Form.MergedMenu Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.ResizeBegin Form.ResizeEnd ContainerControl.IContainerControl.ActivateControl(Control) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.Validate() ContainerControl.Validate(Boolean) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(Int32) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(Int32, Int32) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(Int32, Int32) ScrollableControl.SetScrollState(Int32, Boolean) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(Int32) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, Boolean) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsMnemonic(Char, String) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(Message) Control.PreProcessControlMessage(Message) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateZOrder() Control.UpdateStyles() Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragDrop(DragEventArgs) Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class MultiMemberSelectorEditorDialog : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IContainerControl, IDisposable Constructors | Improve this Doc View Source MultiMemberSelectorEditorDialog(Type) Initializes a new instance of the MultiMemberSelectorEditorDialog class using the specified type. Declaration public MultiMemberSelectorEditorDialog(Type type) Parameters Type Name Description Type type The type from which to select inner properties. Properties | Improve this Doc View Source Selector Gets or sets the selected inner properties of the expression type. Declaration public string Selector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Dispose(Boolean) Clean up any resources being used. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if managed resources should be disposed; otherwise, false. Overrides Form.Dispose(Boolean) | Improve this Doc View Source OnFormClosed(FormClosedEventArgs) Declaration protected override void OnFormClosed(FormClosedEventArgs e) Parameters Type Name Description FormClosedEventArgs e Overrides Form.OnFormClosed(FormClosedEventArgs) | Improve this Doc View Source ScaleControl(SizeF, BoundsSpecified) Declaration protected override void ScaleControl(SizeF factor, BoundsSpecified specified) Parameters Type Name Description SizeF factor BoundsSpecified specified Overrides Form.ScaleControl(SizeF, BoundsSpecified) Implements System.Windows.Forms.IDropTarget System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IWin32Window System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.Windows.Forms.IContainerControl System.IDisposable"
  },
  "api/Bonsai.Design.NumericUpDownEditor.html": {
    "href": "api/Bonsai.Design.NumericUpDownEditor.html",
    "title": "Class NumericUpDownEditor",
    "keywords": "Class NumericUpDownEditor Provides a user interface editor that displays an up-down control for selecting numeric values. Inheritance Object UITypeEditor NumericUpDownEditor Inherited Members UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class NumericUpDownEditor : UITypeEditor Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext)"
  },
  "api/Bonsai.Design.ObjectTextVisualizer.html": {
    "href": "api/Bonsai.Design.ObjectTextVisualizer.html",
    "title": "Class ObjectTextVisualizer",
    "keywords": "Class ObjectTextVisualizer Provides a type visualizer for displaying any object type as text. Inheritance Object DialogTypeVisualizer ObjectTextVisualizer PointVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class ObjectTextVisualizer : DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Design.OpenFileNameEditor.html": {
    "href": "api/Bonsai.Design.OpenFileNameEditor.html",
    "title": "Class OpenFileNameEditor",
    "keywords": "Class OpenFileNameEditor Provides a user interface editor that prompts the user to open a file. Inheritance Object UITypeEditor FileNameEditor OpenFileNameEditor Inherited Members FileNameEditor.GetEditStyle(ITypeDescriptorContext) FileNameEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class OpenFileNameEditor : FileNameEditor Methods | Improve this Doc View Source CreateFileDialog() Initializes the dialog box from which the user can select a file. Declaration protected override FileDialog CreateFileDialog() Returns Type Description FileDialog The FileDialog object which will display the dialog box from which the user can select a file. Overrides FileNameEditor.CreateFileDialog()"
  },
  "api/Bonsai.Design.ParsePatternEditor.html": {
    "href": "api/Bonsai.Design.ParsePatternEditor.html",
    "title": "Class ParsePatternEditor",
    "keywords": "Class ParsePatternEditor Provides a drop-down user interface for selecting available format specifiers which can be passed to the Parse(Expression, String) method. Inheritance Object UITypeEditor ParsePatternEditor Inherited Members UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class ParsePatternEditor : UITypeEditor Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext)"
  },
  "api/Bonsai.Design.PathConvert.html": {
    "href": "api/Bonsai.Design.PathConvert.html",
    "title": "Class PathConvert",
    "keywords": "Class PathConvert Provides static methods for converting project paths. Inheritance Object PathConvert Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public static class PathConvert Methods | Improve this Doc View Source GetProjectPath(String) Converts an absolute path into a relative path, if the absolute path is relative to the project path. Declaration public static string GetProjectPath(string path) Parameters Type Name Description String path The path to convert. Returns Type Description String The project relative path, if the path is absolute but located in any subdirectory of the project path."
  },
  "api/Bonsai.Design.PropertyGrid.html": {
    "href": "api/Bonsai.Design.PropertyGrid.html",
    "title": "Class PropertyGrid",
    "keywords": "Class PropertyGrid Provides a user interface for browsing the properties of an object. Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl PropertyGrid PropertyGrid Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl IComPropertyBrowser Inherited Members PropertyGrid.CollapseAllGridItems() PropertyGrid.CreatePropertyTab(Type) PropertyGrid.Dispose(Boolean) PropertyGrid.IComPropertyBrowser.DropDownDone() PropertyGrid.IComPropertyBrowser.EnsurePendingChangesCommitted() PropertyGrid.ExpandAllGridItems() PropertyGrid.IComPropertyBrowser.HandleF4() PropertyGrid.IComPropertyBrowser.LoadState(RegistryKey) PropertyGrid.OnEnabledChanged(EventArgs) PropertyGrid.OnFontChanged(EventArgs) PropertyGrid.OnHandleCreated(EventArgs) PropertyGrid.OnHandleDestroyed(EventArgs) PropertyGrid.OnGotFocus(EventArgs) PropertyGrid.OnMouseDown(MouseEventArgs) PropertyGrid.OnMouseMove(MouseEventArgs) PropertyGrid.OnMouseUp(MouseEventArgs) PropertyGrid.OnResize(EventArgs) PropertyGrid.OnComComponentNameChanged(ComponentRenameEventArgs) PropertyGrid.OnNotifyPropertyValueUIItemsChanged(Object, EventArgs) PropertyGrid.OnPaint(PaintEventArgs) PropertyGrid.OnPropertySortChanged(EventArgs) PropertyGrid.OnPropertyTabChanged(PropertyTabChangedEventArgs) PropertyGrid.OnPropertyValueChanged(PropertyValueChangedEventArgs) PropertyGrid.OnSelectedGridItemChanged(SelectedGridItemChangedEventArgs) PropertyGrid.OnSelectedObjectsChanged(EventArgs) PropertyGrid.OnVisibleChanged(EventArgs) PropertyGrid.ProcessDialogKey(Keys) PropertyGrid.Refresh() PropertyGrid.RefreshTabs(PropertyTabScope) PropertyGrid.ResetSelectedProperty() PropertyGrid.IComPropertyBrowser.SaveState(RegistryKey) PropertyGrid.ShowEventsButton(Boolean) PropertyGrid.OnSystemColorsChanged(EventArgs) PropertyGrid.WndProc(Message) PropertyGrid.BackColor PropertyGrid.BrowsableAttributes PropertyGrid.CanShowCommands PropertyGrid.CategoryForeColor PropertyGrid.CommandsBackColor PropertyGrid.CommandsForeColor PropertyGrid.CommandsLinkColor PropertyGrid.CommandsActiveLinkColor PropertyGrid.CommandsDisabledLinkColor PropertyGrid.CommandsBorderColor PropertyGrid.CommandsVisible PropertyGrid.CommandsVisibleIfAvailable PropertyGrid.ContextMenuDefaultLocation PropertyGrid.DefaultSize PropertyGrid.DefaultTabType PropertyGrid.DrawFlatToolbar PropertyGrid.HelpBackColor PropertyGrid.HelpForeColor PropertyGrid.HelpBorderColor PropertyGrid.HelpVisible PropertyGrid.SelectedItemWithFocusBackColor PropertyGrid.SelectedItemWithFocusForeColor PropertyGrid.DisabledItemForeColor PropertyGrid.CategorySplitterColor PropertyGrid.CanShowVisualStyleGlyphs PropertyGrid.IComPropertyBrowser.InPropertySet PropertyGrid.LineColor PropertyGrid.PropertySort PropertyGrid.PropertyTabs PropertyGrid.SelectedObject PropertyGrid.SelectedObjects PropertyGrid.SelectedTab PropertyGrid.SelectedGridItem PropertyGrid.ShowFocusCues PropertyGrid.Site PropertyGrid.Text PropertyGrid.LargeButtons PropertyGrid.ToolbarVisible PropertyGrid.ToolStripRenderer PropertyGrid.ViewBackColor PropertyGrid.ViewForeColor PropertyGrid.ViewBorderColor PropertyGrid.SortByPropertyImage PropertyGrid.SortByCategoryImage PropertyGrid.ShowPropertyPageImage PropertyGrid.UseCompatibleTextRendering PropertyGrid.TextChanged PropertyGrid.KeyDown PropertyGrid.KeyPress PropertyGrid.KeyUp PropertyGrid.MouseDown PropertyGrid.MouseUp PropertyGrid.MouseMove PropertyGrid.MouseEnter PropertyGrid.MouseLeave PropertyGrid.PropertyValueChanged PropertyGrid.IComPropertyBrowser.ComComponentNameChanged PropertyGrid.PropertyTabChanged PropertyGrid.PropertySortChanged PropertyGrid.SelectedGridItemChanged PropertyGrid.SelectedObjectsChanged ContainerControl.IContainerControl.ActivateControl(Control) ContainerControl.AdjustFormScrollbars(Boolean) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnCreateControl() ContainerControl.OnLayout(LayoutEventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.ProcessDialogChar(Char) ContainerControl.ProcessCmdKey(Message, Keys) ContainerControl.ProcessMnemonic(Char) ContainerControl.ProcessTabKey(Boolean) ContainerControl.Select(Boolean, Boolean) ContainerControl.UpdateDefaultButton() ContainerControl.Validate() ContainerControl.Validate(Boolean) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CreateParams ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(Int32) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(Int32, Int32) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(Int32, Int32) ScrollableControl.SetScrollState(Int32, Boolean) ScrollableControl.AutoScroll ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(Int32) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateControlsInstance() Control.CreateGraphics() Control.CreateHandle() Control.CreateControl() Control.DefWndProc(Message) Control.DestroyHandle() Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Control.GetNextControl(Control, Boolean) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsMnemonic(Char, String) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBackgroundImageChanged(EventArgs) Control.OnBackgroundImageLayoutChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnTextChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.OnEnter(EventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMove(EventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnStyleChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(Message) Control.PreProcessControlMessage(Message) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.ProcessKeyPreview(Message) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetClientSizeCore(Int32, Int32) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.SetVisibleCore(Boolean) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateZOrder() Control.UpdateStyles() Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragDrop(DragEventArgs) Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.ClientSize Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Location Control.Margin Control.MaximumSize Control.MinimumSize Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Size Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.DefaultImeMode Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseHover Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.ToString() Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class PropertyGrid : PropertyGrid, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl, IComPropertyBrowser Methods | Improve this Doc View Source ScaleControl(SizeF, BoundsSpecified) Declaration protected override void ScaleControl(SizeF factor, BoundsSpecified specified) Parameters Type Name Description SizeF factor BoundsSpecified specified Overrides ScrollableControl.ScaleControl(SizeF, BoundsSpecified) Implements System.Windows.Forms.IDropTarget System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IWin32Window System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.IDisposable System.Windows.Forms.IContainerControl System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser"
  },
  "api/Bonsai.Design.SaveFileNameEditor.html": {
    "href": "api/Bonsai.Design.SaveFileNameEditor.html",
    "title": "Class SaveFileNameEditor",
    "keywords": "Class SaveFileNameEditor Provides a user interface editor that prompts the user to select a location for saving a file. Inheritance Object UITypeEditor FileNameEditor SaveFileNameEditor Inherited Members FileNameEditor.GetEditStyle(ITypeDescriptorContext) FileNameEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class SaveFileNameEditor : FileNameEditor Methods | Improve this Doc View Source CreateFileDialog() Initializes the dialog box from which the user can select a location for saving a file. Declaration protected override FileDialog CreateFileDialog() Returns Type Description FileDialog The FileDialog object which will display the dialog box from which the user can select a location for saving a file. Overrides FileNameEditor.CreateFileDialog()"
  },
  "api/Bonsai.Design.SeekBar.html": {
    "href": "api/Bonsai.Design.SeekBar.html",
    "title": "Class SeekBar",
    "keywords": "Class SeekBar Represents a horizontal seek bar. Inheritance Object MarshalByRefObject Component Control ScrollBar HScrollBar SeekBar Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable Inherited Members HScrollBar.CreateParams HScrollBar.DefaultSize ScrollBar.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) ScrollBar.OnEnabledChanged(EventArgs) ScrollBar.OnHandleCreated(EventArgs) ScrollBar.OnMouseWheel(MouseEventArgs) ScrollBar.OnValueChanged(EventArgs) ScrollBar.ToString() ScrollBar.UpdateScrollInfo() ScrollBar.DefaultImeMode ScrollBar.DefaultMargin ScrollBar.LargeChange ScrollBar.Maximum ScrollBar.Minimum ScrollBar.SmallChange ScrollBar.TabStop ScrollBar.Value ScrollBar.Scroll ScrollBar.ValueChanged Control.GetAccessibilityObjectById(Int32) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateControlsInstance() Control.CreateGraphics() Control.CreateHandle() Control.CreateControl() Control.DefWndProc(Message) Control.DestroyHandle() Control.Dispose(Boolean) Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, Boolean) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsMnemonic(Char, String) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBackgroundImageChanged(EventArgs) Control.OnBackgroundImageLayoutChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnFontChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnRightToLeftChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnTextChanged(EventArgs) Control.OnVisibleChanged(EventArgs) Control.OnParentChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnCreateControl() Control.OnLocationChanged(EventArgs) Control.OnHandleDestroyed(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.OnEnter(EventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLayout(LayoutEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnPaint(PaintEventArgs) Control.OnPaddingChanged(EventArgs) Control.OnPaintBackground(PaintEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnResize(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnStyleChanged(EventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(Message) Control.PreProcessControlMessage(Message) Control.ProcessCmdKey(Message, Keys) Control.ProcessDialogChar(Char) Control.ProcessDialogKey(Keys) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.ProcessKeyPreview(Message) Control.ProcessMnemonic(Char) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.Scale(SizeF) Control.ScaleControl(SizeF, BoundsSpecified) Control.Select() Control.Select(Boolean, Boolean) Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetClientSizeCore(Int32, Int32) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.SetVisibleCore(Boolean) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateZOrder() Control.UpdateStyles() Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragDrop(DragEventArgs) Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackColor Control.BackgroundImage Control.BackgroundImageLayout Control.BindingContext Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.ClientSize Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DisplayRectangle Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Location Control.Margin Control.MaximumSize Control.MinimumSize Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.Size Control.TabIndex Control.Tag Control.Text Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.CanEnableIme Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class SeekBar : HScrollBar, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable Methods | Improve this Doc View Source OnMouseDown(MouseEventArgs) Declaration protected override void OnMouseDown(MouseEventArgs e) Parameters Type Name Description MouseEventArgs e Overrides Control.OnMouseDown(MouseEventArgs) | Improve this Doc View Source OnScroll(ScrollEventArgs) Declaration protected override void OnScroll(ScrollEventArgs se) Parameters Type Name Description ScrollEventArgs se Overrides ScrollBar.OnScroll(ScrollEventArgs) | Improve this Doc View Source WndProc(ref Message) Declaration protected override void WndProc(ref Message m) Parameters Type Name Description Message m Overrides ScrollBar.WndProc(Message) Implements System.Windows.Forms.IDropTarget System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IWin32Window System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.IDisposable"
  },
  "api/Bonsai.Design.Slider.html": {
    "href": "api/Bonsai.Design.Slider.html",
    "title": "Class Slider",
    "keywords": "Class Slider Represents a slider control used to select values from a continuous range. Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl Slider Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members UserControl.ValidateChildren() UserControl.ValidateChildren(ValidationConstraints) UserControl.OnCreateControl() UserControl.OnLoad(EventArgs) UserControl.OnResize(EventArgs) UserControl.OnMouseDown(MouseEventArgs) UserControl.WndProc(Message) UserControl.AutoSize UserControl.AutoSizeMode UserControl.AutoValidate UserControl.BorderStyle UserControl.CreateParams UserControl.DefaultSize UserControl.AutoSizeChanged UserControl.AutoValidateChanged UserControl.Load ContainerControl.IContainerControl.ActivateControl(Control) ContainerControl.AdjustFormScrollbars(Boolean) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnFontChanged(EventArgs) ContainerControl.OnLayout(LayoutEventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.ProcessDialogChar(Char) ContainerControl.ProcessDialogKey(Keys) ContainerControl.ProcessCmdKey(Message, Keys) ContainerControl.ProcessMnemonic(Char) ContainerControl.ProcessTabKey(Boolean) ContainerControl.Select(Boolean, Boolean) ContainerControl.UpdateDefaultButton() ContainerControl.Validate() ContainerControl.Validate(Boolean) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(Int32) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.OnVisibleChanged(EventArgs) ScrollableControl.ScaleControl(SizeF, BoundsSpecified) ScrollableControl.SetDisplayRectLocation(Int32, Int32) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(Int32, Int32) ScrollableControl.SetScrollState(Int32, Boolean) ScrollableControl.AutoScroll ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(Int32) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateControlsInstance() Control.CreateGraphics() Control.CreateHandle() Control.CreateControl() Control.DefWndProc(Message) Control.DestroyHandle() Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Control.GetNextControl(Control, Boolean) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsMnemonic(Char, String) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBackgroundImageChanged(EventArgs) Control.OnBackgroundImageLayoutChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnEnabledChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnTextChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnHandleCreated(EventArgs) Control.OnLocationChanged(EventArgs) Control.OnHandleDestroyed(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.OnEnter(EventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnPaint(PaintEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnStyleChanged(EventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(Message) Control.PreProcessControlMessage(Message) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.ProcessKeyPreview(Message) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetClientSizeCore(Int32, Int32) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.SetVisibleCore(Boolean) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateZOrder() Control.UpdateStyles() Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragDrop(DragEventArgs) Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackColor Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.ClientSize Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Location Control.Margin Control.MaximumSize Control.MinimumSize Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.Size Control.TabIndex Control.TabStop Control.Tag Control.Text Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.DefaultImeMode Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.ToString() Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class Slider : UserControl, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Constructors | Improve this Doc View Source Slider() Initializes a new instance of the Slider class. Declaration public Slider() Properties | Improve this Doc View Source Converter Gets or sets the type converter used to convert the slider value to a text representation. Declaration public TypeConverter Converter { get; set; } Property Value Type Description TypeConverter | Improve this Doc View Source DecimalPlaces Gets or sets an optional maximum number of decimal places used when formatting the numeric display of the slider. Declaration public int? DecimalPlaces { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source Maximum Gets or sets the lower limit of values in the slider. Declaration public double Maximum { get; set; } Property Value Type Description Double | Improve this Doc View Source Minimum Gets or sets the upper limit of values in the slider. Declaration public double Minimum { get; set; } Property Value Type Description Double | Improve this Doc View Source Value Gets or sets a numeric value which represents the position of the slider. Declaration public double Value { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Dispose(Boolean) Clean up any resources being used. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if managed resources should be disposed; otherwise, false. Overrides ContainerControl.Dispose(Boolean) | Improve this Doc View Source OnSizeChanged(EventArgs) Declaration protected override void OnSizeChanged(EventArgs e) Parameters Type Name Description EventArgs e Overrides Control.OnSizeChanged(EventArgs) Events | Improve this Doc View Source ValueChanged Occurs when the slider value changes. Declaration public event EventHandler ValueChanged Event Type Type Description EventHandler Implements System.Windows.Forms.IDropTarget System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IWin32Window System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.IDisposable System.Windows.Forms.IContainerControl"
  },
  "api/Bonsai.Design.SliderEditor.html": {
    "href": "api/Bonsai.Design.SliderEditor.html",
    "title": "Class SliderEditor",
    "keywords": "Class SliderEditor Provides a user interface editor that displays a slider for selecting numeric values between a specified range. Inheritance Object UITypeEditor SliderEditor Inherited Members UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class SliderEditor : UITypeEditor Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext)"
  },
  "api/Bonsai.Design.TypeMappingEditor.html": {
    "href": "api/Bonsai.Design.TypeMappingEditor.html",
    "title": "Class TypeMappingEditor",
    "keywords": "Class TypeMappingEditor Provides a user interface for selecting method overloads from a workflow operator. Inheritance Object UITypeEditor TypeMappingEditor Inherited Members UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class TypeMappingEditor : UITypeEditor Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext)"
  },
  "api/Bonsai.Design.TypeVisualizerDialog.html": {
    "href": "api/Bonsai.Design.TypeVisualizerDialog.html",
    "title": "Class TypeVisualizerDialog",
    "keywords": "Class TypeVisualizerDialog Represents a window or panel where a type visualizer can be displayed. Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl Form TypeVisualizerDialog Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl IDialogTypeVisualizerService Inherited Members Form.SetVisibleCore(Boolean) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(Boolean) Form.Close() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(Message) Form.ProcessMnemonic(Char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(Char) Form.ProcessKeyPreview(Message) Form.ProcessTabKey(Boolean) Form.RemoveOwnedForm(Form) Form.Select(Boolean, Boolean) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Form.SetClientSizeCore(Int32, Int32) Form.SetDesktopBounds(Int32, Int32, Int32, Int32) Form.SetDesktopLocation(Int32, Int32) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.Menu Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiParent Form.MergedMenu Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.ResizeBegin Form.ResizeEnd ContainerControl.IContainerControl.ActivateControl(Control) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.Validate() ContainerControl.Validate(Boolean) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(Int32) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(Int32, Int32) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(Int32, Int32) ScrollableControl.SetScrollState(Int32, Boolean) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(Int32) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, Boolean) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsMnemonic(Char, String) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(Message) Control.PreProcessControlMessage(Message) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateZOrder() Control.UpdateStyles() Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragDrop(DragEventArgs) Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public class TypeVisualizerDialog : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl, IDialogTypeVisualizerService Constructors | Improve this Doc View Source TypeVisualizerDialog() Initializes a new instance of the TypeVisualizerDialog class. Declaration public TypeVisualizerDialog() Methods | Improve this Doc View Source AddControl(Control) Adds a control to the type visualizer dialog. Declaration public void AddControl(Control control) Parameters Type Name Description Control control The control to add to the type visualizer dialog. | Improve this Doc View Source Dispose(Boolean) Clean up any resources being used. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if managed resources should be disposed; otherwise, false. Overrides Form.Dispose(Boolean) | Improve this Doc View Source OnKeyDown(KeyEventArgs) Declaration protected override void OnKeyDown(KeyEventArgs e) Parameters Type Name Description KeyEventArgs e Overrides Control.OnKeyDown(KeyEventArgs) Implements System.Windows.Forms.IDropTarget System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IWin32Window System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.IDisposable System.Windows.Forms.IContainerControl IDialogTypeVisualizerService"
  },
  "api/Bonsai.Design.VisualizerDialogSettings.html": {
    "href": "api/Bonsai.Design.VisualizerDialogSettings.html",
    "title": "Class VisualizerDialogSettings",
    "keywords": "Class VisualizerDialogSettings Inheritance Object VisualizerDialogSettings WorkflowEditorSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Editor.dll Syntax public class VisualizerDialogSettings Properties | Improve this Doc View Source Bounds Declaration public Rectangle Bounds { get; set; } Property Value Type Description Rectangle | Improve this Doc View Source Location Declaration public Point Location { get; set; } Property Value Type Description Point | Improve this Doc View Source Mashups Declaration public Collection<int> Mashups { get; } Property Value Type Description Collection < Int32 > | Improve this Doc View Source MashupsSpecified Declaration public bool MashupsSpecified { get; } Property Value Type Description Boolean | Improve this Doc View Source Size Declaration public Size Size { get; set; } Property Value Type Description Size | Improve this Doc View Source Tag Declaration public object Tag { get; set; } Property Value Type Description Object | Improve this Doc View Source Visible Declaration public bool Visible { get; set; } Property Value Type Description Boolean | Improve this Doc View Source VisualizerSettings Declaration public XElement VisualizerSettings { get; set; } Property Value Type Description XElement | Improve this Doc View Source VisualizerTypeName Declaration public string VisualizerTypeName { get; set; } Property Value Type Description String | Improve this Doc View Source WindowState Declaration public FormWindowState WindowState { get; set; } Property Value Type Description FormWindowState"
  },
  "api/Bonsai.Design.VisualizerDialogSettingsCollection.html": {
    "href": "api/Bonsai.Design.VisualizerDialogSettingsCollection.html",
    "title": "Class VisualizerDialogSettingsCollection",
    "keywords": "Class VisualizerDialogSettingsCollection Inheritance Object Collection < VisualizerDialogSettings > VisualizerDialogSettingsCollection Implements IList < VisualizerDialogSettings > ICollection < VisualizerDialogSettings > IList ICollection IReadOnlyList < VisualizerDialogSettings > IReadOnlyCollection < VisualizerDialogSettings > IEnumerable < VisualizerDialogSettings > IEnumerable Inherited Members Collection<VisualizerDialogSettings>.Add(VisualizerDialogSettings) Collection<VisualizerDialogSettings>.Clear() Collection<VisualizerDialogSettings>.CopyTo(VisualizerDialogSettings[], Int32) Collection<VisualizerDialogSettings>.Contains(VisualizerDialogSettings) Collection<VisualizerDialogSettings>.GetEnumerator() Collection<VisualizerDialogSettings>.IndexOf(VisualizerDialogSettings) Collection<VisualizerDialogSettings>.Insert(Int32, VisualizerDialogSettings) Collection<VisualizerDialogSettings>.Remove(VisualizerDialogSettings) Collection<VisualizerDialogSettings>.RemoveAt(Int32) Collection<VisualizerDialogSettings>.ClearItems() Collection<VisualizerDialogSettings>.InsertItem(Int32, VisualizerDialogSettings) Collection<VisualizerDialogSettings>.RemoveItem(Int32) Collection<VisualizerDialogSettings>.SetItem(Int32, VisualizerDialogSettings) Collection<VisualizerDialogSettings>.IEnumerable.GetEnumerator() Collection<VisualizerDialogSettings>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Design.VisualizerDialogSettings>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Design.VisualizerDialogSettings>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<VisualizerDialogSettings>.IList.Add(Object) Collection<VisualizerDialogSettings>.IList.Contains(Object) Collection<VisualizerDialogSettings>.IList.IndexOf(Object) Collection<VisualizerDialogSettings>.IList.Insert(Int32, Object) Collection<VisualizerDialogSettings>.IList.Remove(Object) Collection<VisualizerDialogSettings>.Count Collection<VisualizerDialogSettings>.Items Collection<VisualizerDialogSettings>.Item[Int32] Collection<VisualizerDialogSettings>.ICollection<VisualizerDialogSettings>.IsReadOnly Collection<VisualizerDialogSettings>.ICollection.IsSynchronized Collection<VisualizerDialogSettings>.ICollection.SyncRoot Collection<VisualizerDialogSettings>.IList.Item[Int32] Collection<VisualizerDialogSettings>.IList.IsReadOnly Collection<VisualizerDialogSettings>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Editor.dll Syntax public class VisualizerDialogSettingsCollection : Collection<VisualizerDialogSettings>, IList<VisualizerDialogSettings>, ICollection<VisualizerDialogSettings>, IList, ICollection, IReadOnlyList<VisualizerDialogSettings>, IReadOnlyCollection<VisualizerDialogSettings>, IEnumerable<VisualizerDialogSettings>, IEnumerable Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Design.VisualizerLayout.html": {
    "href": "api/Bonsai.Design.VisualizerLayout.html",
    "title": "Class VisualizerLayout",
    "keywords": "Class VisualizerLayout Inheritance Object VisualizerLayout Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Editor.dll Syntax public class VisualizerLayout Properties | Improve this Doc View Source DialogSettings Declaration public VisualizerDialogSettingsCollection DialogSettings { get; } Property Value Type Description VisualizerDialogSettingsCollection | Improve this Doc View Source Serializer Declaration public static XmlSerializer Serializer { get; } Property Value Type Description XmlSerializer"
  },
  "api/Bonsai.Design.Visualizers.BarGraphBuilder.html": {
    "href": "api/Bonsai.Design.Visualizers.BarGraphBuilder.html",
    "title": "Class BarGraphBuilder",
    "keywords": "Class BarGraphBuilder Represents an operator that configures a visualizer to plot each element of the sequence as a bar graph. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder BarGraphBuilder Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax [TypeVisualizer(typeof(BarGraphVisualizer))] public class BarGraphBuilder : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source BarType Gets or sets a value specifying how the different bars in the graph will be visually arranged. Declaration public BarType BarType { get; set; } Property Value Type Description BarType | Improve this Doc View Source BaseAxis Gets or sets a value specifying the axis on which the bars in the graph will be displayed. Declaration [TypeConverter(typeof(BarGraphBuilder.BaseAxisConverter))] public BarBase BaseAxis { get; set; } Property Value Type Description BarBase | Improve this Doc View Source Capacity Gets or sets the optional capacity used for rolling bar graphs. If no capacity is specified, all data points will be displayed. Declaration public int? Capacity { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source IndexSelector Gets or sets the name of the property that will be used as index for the graph. Declaration public string IndexSelector { get; set; } Property Value Type Description String | Improve this Doc View Source Max Gets or sets a value specifying a fixed upper limit for the y-axis range. If no fixed range is specified, the graph limits can be edited online. Declaration public double? Max { get; set; } Property Value Type Description Nullable < Double > | Improve this Doc View Source Min Gets or sets a value specifying a fixed lower limit for the y-axis range. If no fixed range is specified, the graph limits can be edited online. Declaration public double? Min { get; set; } Property Value Type Description Nullable < Double > | Improve this Doc View Source ValueSelector Gets or sets the names of the properties that will be displayed in the graph. Declaration public string ValueSelector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Builds the expression tree for configuring and calling the bar graph visualizer on the specified input argument. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder"
  },
  "api/Bonsai.Design.Visualizers.BarGraphVisualizer.html": {
    "href": "api/Bonsai.Design.Visualizers.BarGraphVisualizer.html",
    "title": "Class BarGraphVisualizer",
    "keywords": "Class BarGraphVisualizer Provides a type visualizer to display an object as a bar graph. Inheritance Object DialogTypeVisualizer BarGraphVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax public class BarGraphVisualizer : DialogTypeVisualizer Properties | Improve this Doc View Source AutoScale Gets or sets a value indicating whether the y-axis range should be recalculated automatically as the graph updates. Declaration public bool AutoScale { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Capacity Gets or sets the maximum number of data points displayed at any one moment in the bar graph. Declaration public int Capacity { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Max Gets or sets the upper limit of the y-axis range when using a fixed scale. Declaration public double Max { get; set; } Property Value Type Description Double | Improve this Doc View Source Min Gets or sets the lower limit of the y-axis range when using a fixed scale. Declaration public double Min { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source SequenceCompleted() Updates the type visualizer when one of the active subscriptions gracefully terminates. Declaration public override void SequenceCompleted() Overrides DialogTypeVisualizer.SequenceCompleted() | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Design.Visualizers.BooleanTimeSeriesVisualizer.html": {
    "href": "api/Bonsai.Design.Visualizers.BooleanTimeSeriesVisualizer.html",
    "title": "Class BooleanTimeSeriesVisualizer",
    "keywords": "Class BooleanTimeSeriesVisualizer Provides a type visualizer for boolean time series data. Inheritance Object DialogTypeVisualizer TimeSeriesVisualizerBase BooleanTimeSeriesVisualizer Inherited Members TimeSeriesVisualizerBase.AddValue(DateTime, Double[]) TimeSeriesVisualizerBase.Show(Object) TimeSeriesVisualizerBase.Load(IServiceProvider) TimeSeriesVisualizerBase.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax public class BooleanTimeSeriesVisualizer : TimeSeriesVisualizerBase Properties | Improve this Doc View Source Capacity Gets or sets the maximum number of time points displayed at any one moment in the graph. Declaration public int Capacity { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.Design.Visualizers.GraphControl.html": {
    "href": "api/Bonsai.Design.Visualizers.GraphControl.html",
    "title": "Class GraphControl",
    "keywords": "Class GraphControl Provides a dynamic graph control with a built-in color cycle palette. Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl ZedGraphControl GraphControl Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members ZedGraphControl.MenuClick_Copy(Object, EventArgs) ZedGraphControl.Copy(Boolean) ZedGraphControl.CopyEmf(Boolean) ZedGraphControl.MenuClick_SaveAs(Object, EventArgs) ZedGraphControl.SaveAs() ZedGraphControl.SaveAs(String) ZedGraphControl.SaveAsBitmap() ZedGraphControl.SaveAsEmf() ZedGraphControl.MenuClick_ShowValues(Object, EventArgs) ZedGraphControl.MenuClick_RestoreScale(Object, EventArgs) ZedGraphControl.RestoreScale(GraphPane) ZedGraphControl.MenuClick_ZoomOut(Object, EventArgs) ZedGraphControl.ZoomOut(GraphPane) ZedGraphControl.MenuClick_ZoomOutAll(Object, EventArgs) ZedGraphControl.ZoomOutAll(GraphPane) ZedGraphControl.Dispose(Boolean) ZedGraphControl.ZedGraphControl_ReSize(Object, EventArgs) ZedGraphControl.AxisChange() ZedGraphControl.ZedGraphControl_MouseDown(Object, MouseEventArgs) ZedGraphControl.SetCursor() ZedGraphControl.SetCursor(Point) ZedGraphControl.ZedGraphControl_KeyUp(Object, KeyEventArgs) ZedGraphControl.ZedGraphControl_KeyDown(Object, KeyEventArgs) ZedGraphControl.ZedGraphControl_MouseUp(Object, MouseEventArgs) ZedGraphControl.MakeValueLabel(Axis, Double, Int32, Boolean) ZedGraphControl.ZedGraphControl_MouseMove(Object, MouseEventArgs) ZedGraphControl.ZedGraphControl_MouseWheel(Object, MouseEventArgs) ZedGraphControl.ZoomPane(GraphPane, Double, PointF, Boolean, Boolean) ZedGraphControl.ZoomPane(GraphPane, Double, PointF, Boolean) ZedGraphControl.ZoomScale(Axis, Double, Double, Boolean) ZedGraphControl.PanScale(Axis, Double, Double) ZedGraphControl.MenuClick_PageSetup(Object, EventArgs) ZedGraphControl.MenuClick_Print(Object, EventArgs) ZedGraphControl.DoPageSetup() ZedGraphControl.DoPrint() ZedGraphControl.DoPrintPreview() ZedGraphControl.GetImage() ZedGraphControl.SetScrollRangeFromData() ZedGraphControl.UseExtendedPrintDialog ZedGraphControl.PrintDocument ZedGraphControl.ZoomButtons ZedGraphControl.ZoomButtons2 ZedGraphControl.ZoomModifierKeys ZedGraphControl.ZoomModifierKeys2 ZedGraphControl.PanButtons ZedGraphControl.PanButtons2 ZedGraphControl.PanModifierKeys ZedGraphControl.PanModifierKeys2 ZedGraphControl.EditButtons ZedGraphControl.EditModifierKeys ZedGraphControl.SelectButtons ZedGraphControl.SelectModifierKeys ZedGraphControl.SelectAppendModifierKeys ZedGraphControl.LinkButtons ZedGraphControl.LinkModifierKeys ZedGraphControl.MasterPane ZedGraphControl.GraphPane ZedGraphControl.IsAntiAlias ZedGraphControl.IsShowPointValues ZedGraphControl.IsShowCursorValues ZedGraphControl.IsEnableHEdit ZedGraphControl.IsEnableVEdit ZedGraphControl.IsEnableZoom ZedGraphControl.IsEnableHZoom ZedGraphControl.IsEnableVZoom ZedGraphControl.IsEnableWheelZoom ZedGraphControl.IsEnableHPan ZedGraphControl.IsEnableVPan ZedGraphControl.IsShowContextMenu ZedGraphControl.IsShowCopyMessage ZedGraphControl.SaveFileDialog ZedGraphControl.IsPrintKeepAspectRatio ZedGraphControl.IsPrintFillPage ZedGraphControl.IsPrintScaleAll ZedGraphControl.IsAutoScrollRange ZedGraphControl.ScrollGrace ZedGraphControl.IsShowHScrollBar ZedGraphControl.IsShowVScrollBar ZedGraphControl.IsSynchronizeXAxes ZedGraphControl.IsSynchronizeYAxes ZedGraphControl.IsScrollY2 ZedGraphControl.YScrollRangeList ZedGraphControl.Y2ScrollRangeList ZedGraphControl.ScrollMinX ZedGraphControl.ScrollMaxX ZedGraphControl.ScrollMinY ZedGraphControl.ScrollMaxY ZedGraphControl.ScrollMinY2 ZedGraphControl.ScrollMaxY2 ZedGraphControl.IsScrolling ZedGraphControl.PointValueFormat ZedGraphControl.PointDateFormat ZedGraphControl.ZoomStepFraction ZedGraphControl.IsZoomOnMouseCenter ZedGraphControl.BeenDisposed ZedGraphControl.Selection ZedGraphControl.IsEnableSelection ZedGraphControl.ContextMenuBuilder ZedGraphControl.ZoomEvent ZedGraphControl.ScrollDoneEvent ZedGraphControl.ScrollProgressEvent ZedGraphControl.ScrollEvent ZedGraphControl.PointEditEvent ZedGraphControl.PointValueEvent ZedGraphControl.CursorValueEvent ZedGraphControl.MouseDownEvent ZedGraphControl.MouseUpEvent ZedGraphControl.MouseMoveEvent ZedGraphControl.DoubleClickEvent ZedGraphControl.LinkEvent UserControl.ValidateChildren() UserControl.ValidateChildren(ValidationConstraints) UserControl.OnCreateControl() UserControl.OnLoad(EventArgs) UserControl.OnResize(EventArgs) UserControl.OnMouseDown(MouseEventArgs) UserControl.WndProc(Message) UserControl.AutoSize UserControl.AutoSizeMode UserControl.AutoValidate UserControl.BorderStyle UserControl.CreateParams UserControl.DefaultSize UserControl.AutoSizeChanged UserControl.AutoValidateChanged UserControl.Load ContainerControl.IContainerControl.ActivateControl(Control) ContainerControl.AdjustFormScrollbars(Boolean) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnFontChanged(EventArgs) ContainerControl.OnLayout(LayoutEventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.ProcessDialogChar(Char) ContainerControl.ProcessDialogKey(Keys) ContainerControl.ProcessCmdKey(Message, Keys) ContainerControl.ProcessMnemonic(Char) ContainerControl.ProcessTabKey(Boolean) ContainerControl.Select(Boolean, Boolean) ContainerControl.UpdateDefaultButton() ContainerControl.Validate() ContainerControl.Validate(Boolean) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(Int32) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.OnVisibleChanged(EventArgs) ScrollableControl.ScaleControl(SizeF, BoundsSpecified) ScrollableControl.SetDisplayRectLocation(Int32, Int32) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(Int32, Int32) ScrollableControl.SetScrollState(Int32, Boolean) ScrollableControl.AutoScroll ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(Int32) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateControlsInstance() Control.CreateGraphics() Control.CreateHandle() Control.CreateControl() Control.DefWndProc(Message) Control.DestroyHandle() Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Control.GetNextControl(Control, Boolean) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsMnemonic(Char, String) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBackgroundImageChanged(EventArgs) Control.OnBackgroundImageLayoutChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnEnabledChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnTextChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnHandleCreated(EventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.OnEnter(EventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnStyleChanged(EventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(Message) Control.PreProcessControlMessage(Message) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.ProcessKeyPreview(Message) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetClientSizeCore(Int32, Int32) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.SetVisibleCore(Boolean) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateZOrder() Control.UpdateStyles() Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragDrop(DragEventArgs) Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackColor Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.ClientSize Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Location Control.Margin Control.MaximumSize Control.MinimumSize Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.Size Control.TabIndex Control.TabStop Control.Tag Control.Text Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.DefaultImeMode Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseEnter Control.MouseLeave Control.MouseHover Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.ToString() Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax public class GraphControl : ZedGraphControl, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Constructors | Improve this Doc View Source GraphControl() Initializes a new instance of the GraphControl class. Declaration public GraphControl() Properties | Improve this Doc View Source AutoScaleAxis Gets or sets a value indicating whether to recalculate the axis range automatically when redrawing the graph. Declaration public bool AutoScaleAxis { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MouseDown Occurs when the mouse pointer is over the control and a mouse button is pressed. Declaration public IObservable<MouseEventArgs> MouseDown { get; } Property Value Type Description IObservable < MouseEventArgs > | Improve this Doc View Source MouseMove Occurs when the mouse pointer is moved over the control. Declaration public IObservable<MouseEventArgs> MouseMove { get; } Property Value Type Description IObservable < MouseEventArgs > | Improve this Doc View Source MouseUp Occurs when the mouse pointer is over the control and a mouse button is released. Declaration public IObservable<MouseEventArgs> MouseUp { get; } Property Value Type Description IObservable < MouseEventArgs > Methods | Improve this Doc View Source GetColor(Int32) Returns the color in the color cycle at the specified index. Declaration public static Color GetColor(int colorIndex) Parameters Type Name Description Int32 colorIndex The index of the color to retrieve. Returns Type Description Color A Color value representing the color at the specified index of the color cycle. | Improve this Doc View Source GetNextColor() Returns the next color in the color cycle, and increments the color index. Declaration public Color GetNextColor() Returns Type Description Color A Color value representing the next color in the color cycle. | Improve this Doc View Source GetNormalizedRectangle(RectangleF, Point, Point) Computes a rectangle defined by the specified points which is also contained inside the pane boundaries. Declaration protected static Rectangle GetNormalizedRectangle(RectangleF bounds, Point p1, Point p2) Parameters Type Name Description RectangleF bounds The bounds of the pane on which to contain the rectangle. Point p1 The first point defining the selected rectangle. Point p2 The second point defining the selected rectangle. Returns Type Description Rectangle A Rectangle which is contained inside the pane boundaries and is defined by the specified points. | Improve this Doc View Source OnHandleDestroyed(EventArgs) Declaration protected override void OnHandleDestroyed(EventArgs e) Parameters Type Name Description EventArgs e Overrides Control.OnHandleDestroyed(EventArgs) | Improve this Doc View Source OnPaint(PaintEventArgs) Declaration protected override void OnPaint(PaintEventArgs e) Parameters Type Name Description PaintEventArgs e Overrides ZedGraphControl.OnPaint(PaintEventArgs) | Improve this Doc View Source ResetColorCycle() Resets the color cycle to the first color in the palette. Declaration public void ResetColorCycle() | Improve this Doc View Source SetLayout(Int32, Int32) Sets the number of rows and columns in the layout explicitly for graphs with multiple panes. Declaration public void SetLayout(int rows, int columns) Parameters Type Name Description Int32 rows The number of rows in the pane layout. Int32 columns The number of columns in the pane layout. | Improve this Doc View Source SetLayout(PaneLayout) Sets the auto layout strategy for graphs with multiple panes. Declaration public void SetLayout(PaneLayout layout) Parameters Type Name Description PaneLayout layout Specifies the auto layout options for graphs with multiple panes. | Improve this Doc View Source UpdateRubberBand(Rectangle, Rectangle) Updates the state of the rubber band selection overlay. Declaration protected void UpdateRubberBand(Rectangle bandRect, Rectangle invalidateRect) Parameters Type Name Description Rectangle bandRect The location and size of the rubber band selection. Rectangle invalidateRect The region of the control that should be invalidated following the rubber band update operation. See the Invalidate(Rectangle) method. Implements System.Windows.Forms.IDropTarget System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IWin32Window System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.IDisposable System.Windows.Forms.IContainerControl"
  },
  "api/Bonsai.Design.Visualizers.html": {
    "href": "api/Bonsai.Design.Visualizers.html",
    "title": "Namespace Bonsai.Design.Visualizers",
    "keywords": "Namespace Bonsai.Design.Visualizers Classes BarGraphBuilder Represents an operator that configures a visualizer to plot each element of the sequence as a bar graph. BarGraphVisualizer Provides a type visualizer to display an object as a bar graph. BooleanTimeSeriesVisualizer Provides a type visualizer for boolean time series data. GraphControl Provides a dynamic graph control with a built-in color cycle palette. LineGraphBuilder Represents an operator that configures a visualizer to plot each element of the sequence as a line graph. LineGraphVisualizer Provides a type visualizer to display an object as a line graph. RollingGraphBuilder Represents an operator that configures a visualizer to plot each element of the sequence as a rolling graph. RollingGraphVisualizer Provides a type visualizer to display an object as a rolling graph. StateTimeVisualizer Provides a type visualizer to display the duration of specific states as a bar graph. TableLayoutPanelBuilder Represents an operator that specifies a mashup visualizer panel that can be used to arrange other visualizers in a grid. TableLayoutPanelCellSpan Represents the vertical and horizontal span of a table layout cell. TableLayoutPanelVisualizer Provides a type visualizer that can be used to arrange other visualizers in a grid. TimeSeriesVisualizer Provides a type visualizer for multi-dimensional time series data. TimeSeriesVisualizerBase Provides a base class for rolling graph visualizers of multi-dimensional time series data. TimestampedTimeSeriesVisualizer<T> Provides a type visualizer for multi-dimensional timestamped data."
  },
  "api/Bonsai.Design.Visualizers.LineGraphBuilder.html": {
    "href": "api/Bonsai.Design.Visualizers.LineGraphBuilder.html",
    "title": "Class LineGraphBuilder",
    "keywords": "Class LineGraphBuilder Represents an operator that configures a visualizer to plot each element of the sequence as a line graph. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder LineGraphBuilder Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax [TypeVisualizer(typeof(LineGraphVisualizer))] public class LineGraphBuilder : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source Capacity Gets or sets the optional capacity used for rolling line graphs. If no capacity is specified, all data points will be displayed. Declaration public int? Capacity { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source LineWidth Gets or sets the width, in points, to be used for the line graph. Use a value of zero to hide the line. Declaration public float LineWidth { get; set; } Property Value Type Description Single | Improve this Doc View Source SymbolType Gets or sets the optional symbol type to use for the line graph. Declaration public SymbolType SymbolType { get; set; } Property Value Type Description SymbolType | Improve this Doc View Source ValueSelector Gets or sets the names of the properties to be displayed in the graph. Each selected property must have a point pair compatible type. Declaration public string ValueSelector { get; set; } Property Value Type Description String | Improve this Doc View Source XMax Gets or sets a value specifying a fixed upper limit for the x-axis range. If no fixed range is specified, the graph limits can be edited online. Declaration public double? XMax { get; set; } Property Value Type Description Nullable < Double > | Improve this Doc View Source XMin Gets or sets a value specifying a fixed lower limit for the x-axis range. If no fixed range is specified, the graph limits can be edited online. Declaration public double? XMin { get; set; } Property Value Type Description Nullable < Double > | Improve this Doc View Source YMax Gets or sets a value specifying a fixed upper limit for the y-axis range. If no fixed range is specified, the graph limits can be edited online. Declaration public double? YMax { get; set; } Property Value Type Description Nullable < Double > | Improve this Doc View Source YMin Gets or sets a value specifying a fixed lower limit for the y-axis range. If no fixed range is specified, the graph limits can be edited online. Declaration public double? YMin { get; set; } Property Value Type Description Nullable < Double > Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Builds the expression tree for configuring and calling the line graph visualizer on the specified input argument. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder"
  },
  "api/Bonsai.Design.Visualizers.LineGraphVisualizer.html": {
    "href": "api/Bonsai.Design.Visualizers.LineGraphVisualizer.html",
    "title": "Class LineGraphVisualizer",
    "keywords": "Class LineGraphVisualizer Provides a type visualizer to display an object as a line graph. Inheritance Object DialogTypeVisualizer LineGraphVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax public class LineGraphVisualizer : DialogTypeVisualizer Properties | Improve this Doc View Source AutoScaleX Gets or sets a value indicating whether the x-axis range should be recalculated automatically as the graph updates. Declaration public bool AutoScaleX { get; set; } Property Value Type Description Boolean | Improve this Doc View Source AutoScaleY Gets or sets a value indicating whether the y-axis range should be recalculated automatically as the graph updates. Declaration public bool AutoScaleY { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Capacity Gets or sets the maximum number of points displayed at any one moment in the graph. Declaration public int Capacity { get; set; } Property Value Type Description Int32 | Improve this Doc View Source XMax Gets or sets the upper limit of the x-axis range when using a fixed scale. Declaration public double XMax { get; set; } Property Value Type Description Double | Improve this Doc View Source XMin Gets or sets the lower limit of the x-axis range when using a fixed scale. Declaration public double XMin { get; set; } Property Value Type Description Double | Improve this Doc View Source YMax Gets or sets the upper limit of the y-axis range when using a fixed scale. Declaration public double YMax { get; set; } Property Value Type Description Double | Improve this Doc View Source YMin Gets or sets the lower limit of the y-axis range when using a fixed scale. Declaration public double YMin { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source SequenceCompleted() Updates the type visualizer when one of the active subscriptions gracefully terminates. Declaration public override void SequenceCompleted() Overrides DialogTypeVisualizer.SequenceCompleted() | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Design.Visualizers.RollingGraphBuilder.html": {
    "href": "api/Bonsai.Design.Visualizers.RollingGraphBuilder.html",
    "title": "Class RollingGraphBuilder",
    "keywords": "Class RollingGraphBuilder Represents an operator that configures a visualizer to plot each element of the sequence as a rolling graph. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder RollingGraphBuilder Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax [TypeVisualizer(typeof(RollingGraphVisualizer))] public class RollingGraphBuilder : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source Capacity Gets or sets the optional capacity used for rolling line graphs. If no capacity is specified, all data points will be displayed. Declaration public int? Capacity { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source IndexSelector Gets or sets the name of the property that will be used as index for the graph. Declaration public string IndexSelector { get; set; } Property Value Type Description String | Improve this Doc View Source LineWidth Gets or sets the width, in points, to be used for the line graph. Use a value of zero to hide the line. Declaration public float LineWidth { get; set; } Property Value Type Description Single | Improve this Doc View Source Max Gets or sets a value specifying a fixed upper limit for the y-axis range. If no fixed range is specified, the graph limits can be edited online. Declaration public double? Max { get; set; } Property Value Type Description Nullable < Double > | Improve this Doc View Source Min Gets or sets a value specifying a fixed lower limit for the y-axis range. If no fixed range is specified, the graph limits can be edited online. Declaration public double? Min { get; set; } Property Value Type Description Nullable < Double > | Improve this Doc View Source SymbolType Gets or sets the optional symbol type to use for the line graph. Declaration public SymbolType SymbolType { get; set; } Property Value Type Description SymbolType | Improve this Doc View Source ValueSelector Gets or sets the names of the properties that will be displayed in the graph. Declaration public string ValueSelector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Builds the expression tree for configuring and calling the line graph visualizer on the specified input argument. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder"
  },
  "api/Bonsai.Design.Visualizers.RollingGraphVisualizer.html": {
    "href": "api/Bonsai.Design.Visualizers.RollingGraphVisualizer.html",
    "title": "Class RollingGraphVisualizer",
    "keywords": "Class RollingGraphVisualizer Provides a type visualizer to display an object as a rolling graph. Inheritance Object DialogTypeVisualizer RollingGraphVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax public class RollingGraphVisualizer : DialogTypeVisualizer Properties | Improve this Doc View Source AutoScale Gets or sets a value indicating whether the y-axis range should be recalculated automatically as the graph updates. Declaration public bool AutoScale { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Capacity Gets or sets the maximum number of time points displayed at any one moment in the graph. Declaration public int Capacity { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Max Gets or sets the upper limit of the y-axis range when using a fixed scale. Declaration public double Max { get; set; } Property Value Type Description Double | Improve this Doc View Source Min Gets or sets the lower limit of the y-axis range when using a fixed scale. Declaration public double Min { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source SequenceCompleted() Updates the type visualizer when one of the active subscriptions gracefully terminates. Declaration public override void SequenceCompleted() Overrides DialogTypeVisualizer.SequenceCompleted() | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Design.Visualizers.StateTimeVisualizer.html": {
    "href": "api/Bonsai.Design.Visualizers.StateTimeVisualizer.html",
    "title": "Class StateTimeVisualizer",
    "keywords": "Class StateTimeVisualizer Provides a type visualizer to display the duration of specific states as a bar graph. Inheritance Object DialogTypeVisualizer StateTimeVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax public class StateTimeVisualizer : DialogTypeVisualizer Constructors | Improve this Doc View Source StateTimeVisualizer() Initializes a new instance of the StateTimeVisualizer class. Declaration public StateTimeVisualizer() Properties | Improve this Doc View Source Graph Gets the underlying graph control. Declaration protected GraphControl Graph { get; } Property Value Type Description GraphControl Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Design.Visualizers.TableLayoutPanelBuilder.html": {
    "href": "api/Bonsai.Design.Visualizers.TableLayoutPanelBuilder.html",
    "title": "Class TableLayoutPanelBuilder",
    "keywords": "Class TableLayoutPanelBuilder Represents an operator that specifies a mashup visualizer panel that can be used to arrange other visualizers in a grid. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder TableLayoutPanelBuilder Implements IExpressionBuilder INamedElement Inherited Members VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax [TypeVisualizer(typeof(TableLayoutPanelVisualizer))] public class TableLayoutPanelBuilder : VariableArgumentExpressionBuilder, IExpressionBuilder, INamedElement Constructors | Improve this Doc View Source TableLayoutPanelBuilder() Initializes a new instance of the TableLayoutPanelBuilder class. Declaration public TableLayoutPanelBuilder() Properties | Improve this Doc View Source CellSpans Gets a collection of TableLayoutPanelCellSpan objects specifying the column and row span of each cell in the visualizer grid layout. Declaration public Collection<TableLayoutPanelCellSpan> CellSpans { get; } Property Value Type Description Collection < TableLayoutPanelCellSpan > | Improve this Doc View Source ColumnCount Gets or sets the number of columns in the visualizer grid layout. Declaration public int ColumnCount { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ColumnStyles Gets a collection of ColumnStyle objects specifying the size ratio of the columns in the visualizer grid layout. Declaration public Collection<ColumnStyle> ColumnStyles { get; } Property Value Type Description Collection < ColumnStyle > | Improve this Doc View Source Name Gets or sets the name of the visualizer window. Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source RowCount Gets or sets the number of rows in the visualizer grid layout. Declaration public int RowCount { get; set; } Property Value Type Description Int32 | Improve this Doc View Source RowStyles Gets a collection of RowStyle objects specifying the size ratio of the rows in the visualizer grid layout. Declaration public Collection<RowStyle> RowStyles { get; } Property Value Type Description Collection < RowStyle > Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Builds the expression tree for configuring and calling the table layout panel visualizer. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement"
  },
  "api/Bonsai.Design.Visualizers.TableLayoutPanelCellSpan.html": {
    "href": "api/Bonsai.Design.Visualizers.TableLayoutPanelCellSpan.html",
    "title": "Class TableLayoutPanelCellSpan",
    "keywords": "Class TableLayoutPanelCellSpan Represents the vertical and horizontal span of a table layout cell. Inheritance Object TableLayoutPanelCellSpan Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax public class TableLayoutPanelCellSpan Constructors | Improve this Doc View Source TableLayoutPanelCellSpan() Initializes a new instance of the TableLayoutPanelCellSpan class. Declaration public TableLayoutPanelCellSpan() | Improve this Doc View Source TableLayoutPanelCellSpan(Int32, Int32) Initializes a new instance of the TableLayoutPanelCellSpan class using the specified column and row span. Declaration public TableLayoutPanelCellSpan(int columnSpan, int rowSpan) Parameters Type Name Description Int32 columnSpan The number of columns spanned by the table layout cell. Int32 rowSpan The number of rows spanned by the table layout cell. Properties | Improve this Doc View Source ColumnSpan Gets the number of columns spanned by this table layout cell. Declaration public int ColumnSpan { get; set; } Property Value Type Description Int32 | Improve this Doc View Source RowSpan Gets the number of rows spanned by this table layout cell. Declaration public int RowSpan { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Design.Visualizers.TableLayoutPanelVisualizer.html": {
    "href": "api/Bonsai.Design.Visualizers.TableLayoutPanelVisualizer.html",
    "title": "Class TableLayoutPanelVisualizer",
    "keywords": "Class TableLayoutPanelVisualizer Provides a type visualizer that can be used to arrange other visualizers in a grid. Inheritance Object DialogTypeVisualizer MashupVisualizer TableLayoutPanelVisualizer Inherited Members MashupVisualizer.MashupSources DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax public class TableLayoutPanelVisualizer : MashupVisualizer Methods | Improve this Doc View Source GetMashupSource(Int32, Int32) Finds the mashup source located at the specified coordinates. Declaration public override MashupSource GetMashupSource(int x, int y) Parameters Type Name Description Int32 x The x-coordinate used to search, in absolute screen coordinates. Int32 y The y-coordinate used to search, in absolute screen coordinates. Returns Type Description MashupSource The MashupSource representing the mashup source located at the specified coordinates, or null if there is no source at the specified point. Overrides MashupVisualizer.GetMashupSource(Int32, Int32) | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides MashupVisualizer.Load(IServiceProvider) | Improve this Doc View Source LoadMashups(IServiceProvider) Loads type visualizer resources for all sources combined in the mashup visualizer. Declaration public override void LoadMashups(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides MashupVisualizer.LoadMashups(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides MashupVisualizer.Unload() | Improve this Doc View Source UnloadMashups() Unloads resources for all sources combined in the mashup visualizer. Declaration public override void UnloadMashups() Overrides MashupVisualizer.UnloadMashups() | Improve this Doc View Source Visualize(IObservable<IObservable<Object>>, IServiceProvider) Creates an observable sequence used to visualize all notifications emitted by a workflow operator, using this type visualizer and the specified service provider. Declaration public override IObservable<object> Visualize(IObservable<IObservable<object>> source, IServiceProvider provider) Parameters Type Name Description IObservable < IObservable < Object >> source An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Returns Type Description IObservable < Object > An observable sequence where every notification updates the type visualizer object in the UI thread. Overrides DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider)"
  },
  "api/Bonsai.Design.Visualizers.TimeSeriesVisualizer.html": {
    "href": "api/Bonsai.Design.Visualizers.TimeSeriesVisualizer.html",
    "title": "Class TimeSeriesVisualizer",
    "keywords": "Class TimeSeriesVisualizer Provides a type visualizer for multi-dimensional time series data. Inheritance Object DialogTypeVisualizer TimeSeriesVisualizerBase TimeSeriesVisualizer TimestampedTimeSeriesVisualizer<T> ScalarVisualizer Inherited Members TimeSeriesVisualizerBase.AddValue(DateTime, Double[]) TimeSeriesVisualizerBase.Load(IServiceProvider) TimeSeriesVisualizerBase.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax public class TimeSeriesVisualizer : TimeSeriesVisualizerBase Constructors | Improve this Doc View Source TimeSeriesVisualizer() Initializes a new instance of the TimeSeriesVisualizer class. Declaration public TimeSeriesVisualizer() | Improve this Doc View Source TimeSeriesVisualizer(Int32) Initializes a new instance of the TimeSeriesVisualizer class using the specified number of dimensions. Declaration public TimeSeriesVisualizer(int numSeries) Parameters Type Name Description Int32 numSeries The number of dimensions in the time series graph. Each dimension will be plotted on its own visual trace. Properties | Improve this Doc View Source AutoScale Gets or sets a value indicating whether the y-axis range should be recalculated automatically as the graph updates. Declaration public bool AutoScale { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Capacity Gets or sets the maximum number of time points displayed at any one moment in the graph. Declaration public int Capacity { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Max Gets or sets the upper limit of the y-axis range when using a fixed scale. Declaration public double Max { get; set; } Property Value Type Description Double | Improve this Doc View Source Min Gets or sets the lower limit of the y-axis range when using a fixed scale. Declaration public double Min { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides TimeSeriesVisualizerBase.Show(Object)"
  },
  "api/Bonsai.Design.Visualizers.TimeSeriesVisualizerBase.html": {
    "href": "api/Bonsai.Design.Visualizers.TimeSeriesVisualizerBase.html",
    "title": "Class TimeSeriesVisualizerBase",
    "keywords": "Class TimeSeriesVisualizerBase Provides a base class for rolling graph visualizers of multi-dimensional time series data. Inheritance Object DialogTypeVisualizer TimeSeriesVisualizerBase BooleanTimeSeriesVisualizer TimeSeriesVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax public class TimeSeriesVisualizerBase : DialogTypeVisualizer Methods | Improve this Doc View Source AddValue(DateTime, Double[]) Adds a new data point to the multi-dimensional time series. Declaration protected void AddValue(DateTime time, params double[] value) Parameters Type Name Description DateTime time The timestamp associated with the data point. Double [] value A Double array representing all the attribute dimensions of the data point. | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Design.Visualizers.TimestampedTimeSeriesVisualizer-1.html": {
    "href": "api/Bonsai.Design.Visualizers.TimestampedTimeSeriesVisualizer-1.html",
    "title": "Class TimestampedTimeSeriesVisualizer<T>",
    "keywords": "Class TimestampedTimeSeriesVisualizer<T> Provides a type visualizer for multi-dimensional timestamped data. Inheritance Object DialogTypeVisualizer TimeSeriesVisualizerBase TimeSeriesVisualizer TimestampedTimeSeriesVisualizer<T> Inherited Members TimeSeriesVisualizer.Capacity TimeSeriesVisualizer.Min TimeSeriesVisualizer.Max TimeSeriesVisualizer.AutoScale TimeSeriesVisualizerBase.AddValue(DateTime, Double[]) TimeSeriesVisualizerBase.Load(IServiceProvider) TimeSeriesVisualizerBase.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design.Visualizers Assembly : Bonsai.Design.Visualizers.dll Syntax public class TimestampedTimeSeriesVisualizer<T> : TimeSeriesVisualizer Type Parameters Name Description T The type of the elements to visualize. Methods | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides TimeSeriesVisualizer.Show(Object)"
  },
  "api/Bonsai.Design.WorkflowComponentEditor.html": {
    "href": "api/Bonsai.Design.WorkflowComponentEditor.html",
    "title": "Class WorkflowComponentEditor",
    "keywords": "Class WorkflowComponentEditor Provides the abstract base class for a custom workflow component editor. Inheritance Object ComponentEditor WorkflowComponentEditor ShaderScriptComponentEditor Inherited Members ComponentEditor.EditComponent(Object) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Design.dll Syntax public abstract class WorkflowComponentEditor : ComponentEditor Methods | Improve this Doc View Source EditComponent(ITypeDescriptorContext, Object) Declaration public override bool EditComponent(ITypeDescriptorContext context, object component) Parameters Type Name Description ITypeDescriptorContext context Object component Returns Type Description Boolean Overrides ComponentEditor.EditComponent(ITypeDescriptorContext, Object) | Improve this Doc View Source EditComponent(ITypeDescriptorContext, Object, IServiceProvider, IWin32Window) Edits the component and returns a value indicating whether the component was modified using the specified context and a parent window handle. Declaration public abstract bool EditComponent(ITypeDescriptorContext context, object component, IServiceProvider provider, IWin32Window owner) Parameters Type Name Description ITypeDescriptorContext context An optional context object that can be used to obtain further information about the edit. Object component The component to be edited. IServiceProvider provider A service provider that this editor can use to obtain services. IWin32Window owner The window handle which contains any editor dialogs. Returns Type Description Boolean true if the component was modified; otherwise, false . | Improve this Doc View Source EditComponent(Object, IServiceProvider, IWin32Window) Edits the component and returns a value indicating whether the component was modified using the specified service provider and a parent window handle. Declaration public bool EditComponent(object component, IServiceProvider provider, IWin32Window owner) Parameters Type Name Description Object component The component to be edited. IServiceProvider provider A service provider that this editor can use to obtain services. IWin32Window owner The window handle which contains any editor dialogs. Returns Type Description Boolean true if the component was modified; otherwise, false ."
  },
  "api/Bonsai.Design.WorkflowEditorSettings.html": {
    "href": "api/Bonsai.Design.WorkflowEditorSettings.html",
    "title": "Class WorkflowEditorSettings",
    "keywords": "Class WorkflowEditorSettings Inheritance Object VisualizerDialogSettings WorkflowEditorSettings Inherited Members VisualizerDialogSettings.Tag VisualizerDialogSettings.Visible VisualizerDialogSettings.Location VisualizerDialogSettings.Size VisualizerDialogSettings.WindowState VisualizerDialogSettings.Bounds VisualizerDialogSettings.VisualizerTypeName VisualizerDialogSettings.VisualizerSettings VisualizerDialogSettings.Mashups VisualizerDialogSettings.MashupsSpecified Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Design Assembly : Bonsai.Editor.dll Syntax public class WorkflowEditorSettings : VisualizerDialogSettings Properties | Improve this Doc View Source EditorDialogSettings Declaration public VisualizerDialogSettings EditorDialogSettings { get; set; } Property Value Type Description VisualizerDialogSettings | Improve this Doc View Source EditorVisualizerLayout Declaration public VisualizerLayout EditorVisualizerLayout { get; set; } Property Value Type Description VisualizerLayout"
  },
  "api/Bonsai.DesignTypes.html": {
    "href": "api/Bonsai.DesignTypes.html",
    "title": "Class DesignTypes",
    "keywords": "Class DesignTypes Provides assembly qualified names for well-known designer types. Inheritance Object DesignTypes Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public static class DesignTypes Fields | Improve this Doc View Source FolderNameEditor The assembly qualified name of a UI editor that can edit folder name paths using a folder browser dialog. This field is read-only. Declaration public const string FolderNameEditor = \"Bonsai.Design.FolderNameEditor, Bonsai.Design\" Field Value Type Description String | Improve this Doc View Source MultilineStringEditor The assembly qualified name of a UI editor that can edit multiline string values using a text box. This field is read-only. Declaration public const string MultilineStringEditor = \"System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Field Value Type Description String | Improve this Doc View Source NumericUpDownEditor The assembly qualified name of a UI editor that can edit numeric values using a numeric spin box. This field is read-only. Declaration public const string NumericUpDownEditor = \"Bonsai.Design.NumericUpDownEditor, Bonsai.Design\" Field Value Type Description String | Improve this Doc View Source OpenFileNameEditor The assembly qualified name of a UI editor that can edit file name paths using an open file dialog. This field is read-only. Declaration public const string OpenFileNameEditor = \"Bonsai.Design.OpenFileNameEditor, Bonsai.Design\" Field Value Type Description String | Improve this Doc View Source SaveFileNameEditor The assembly qualified name of a UI editor that can edit file name paths using a save file dialog. This field is read-only. Declaration public const string SaveFileNameEditor = \"Bonsai.Design.SaveFileNameEditor, Bonsai.Design\" Field Value Type Description String | Improve this Doc View Source SliderEditor The assembly qualified name of a UI editor that can edit numeric values using a visual slider bar. This field is read-only. Declaration public const string SliderEditor = \"Bonsai.Design.SliderEditor, Bonsai.Design\" Field Value Type Description String | Improve this Doc View Source UITypeEditor The assembly qualified name of the UI editor base class. This field is read-only. Declaration public const string UITypeEditor = \"System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Field Value Type Description String"
  },
  "api/Bonsai.Dsp.Abs.html": {
    "href": "api/Bonsai.Dsp.Abs.html",
    "title": "Class Abs",
    "keywords": "Class Abs Represents an operator that calculates the absolute value of each element in the sequence. Inheritance Object ArrayTransform Abs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Abs : ArrayTransform Methods | Improve this Doc View Source Process(IObservable<Decimal>) Calculates the absolute value of each Decimal number in the sequence. Declaration public IObservable<decimal> Process(IObservable<decimal> source) Parameters Type Name Description IObservable < Decimal > source A sequence of Decimal numbers. Returns Type Description IObservable < Decimal > A sequence of Decimal numbers, where each value is greater than or equal to zero. | Improve this Doc View Source Process(IObservable<Double>) Calculates the absolute value of each 64-bit floating-point number in the sequence. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of 64-bit floating-point numbers. Returns Type Description IObservable < Double > A sequence of 64-bit floating-point numbers, where each value is greater than or equal to zero. | Improve this Doc View Source Process(IObservable<Int16>) Calculates the absolute value of each 16-bit signed integer in the sequence. Declaration public IObservable<short> Process(IObservable<short> source) Parameters Type Name Description IObservable < Int16 > source A sequence of 16-bit signed integer values. Returns Type Description IObservable < Int16 > A sequence of 16-bit signed integer values, where each value is greater than or equal to zero. | Improve this Doc View Source Process(IObservable<Int32>) Calculates the absolute value of each 32-bit signed integer in the sequence. Declaration public IObservable<int> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of 32-bit signed integer values. Returns Type Description IObservable < Int32 > A sequence of 32-bit signed integer values, where each value is greater than or equal to zero. | Improve this Doc View Source Process(IObservable<Int64>) Calculates the absolute value of each 64-bit signed integer in the sequence. Declaration public IObservable<long> Process(IObservable<long> source) Parameters Type Name Description IObservable < Int64 > source A sequence of 64-bit signed integer values. Returns Type Description IObservable < Int64 > A sequence of 64-bit signed integer values, where each value is greater than or equal to zero. | Improve this Doc View Source Process(IObservable<SByte>) Calculates the absolute value of each 8-bit signed integer in the sequence. Declaration public IObservable<sbyte> Process(IObservable<sbyte> source) Parameters Type Name Description IObservable < SByte > source A sequence of 8-bit signed integer values. Returns Type Description IObservable < SByte > A sequence of 8-bit signed integer values, where each value is greater than or equal to zero. | Improve this Doc View Source Process(IObservable<Single>) Calculates the absolute value of each 32-bit floating-point number in the sequence. Declaration public IObservable<float> Process(IObservable<float> source) Parameters Type Name Description IObservable < Single > source A sequence of 32-bit floating-point numbers. Returns Type Description IObservable < Single > A sequence of 32-bit floating-point numbers, where each value is greater than or equal to zero. | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Calculates the absolute value of individual elements for all arrays in the sequence. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of multi-channel array values. Returns Type Description IObservable <TArray> A sequence of multi-channel array values, where each element of the array is greater than or equal to zero. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>)"
  },
  "api/Bonsai.Dsp.AbsoluteDifference.html": {
    "href": "api/Bonsai.Dsp.AbsoluteDifference.html",
    "title": "Class AbsoluteDifference",
    "keywords": "Class AbsoluteDifference Represents an operator that calculates the absolute difference between all pairs of arrays in the sequence. Inheritance Object BinaryArrayTransform AbsoluteDifference Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class AbsoluteDifference : BinaryArrayTransform Methods | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray>>) Calculates the absolute difference between all pairs of arrays in an observable sequence. Declaration public override IObservable<TArray> Process<TArray>(IObservable<Tuple<TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray>> source A sequence of pairs of multi-channel array values. Returns Type Description IObservable <TArray> A sequence of multi-channel array values, where each array stores the absolute difference between each pair in the source sequence. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.BinaryArrayTransform.Process<TArray>(System.IObservable<System.Tuple<TArray, TArray>>)"
  },
  "api/Bonsai.Dsp.Accumulate.html": {
    "href": "api/Bonsai.Dsp.Accumulate.html",
    "title": "Class Accumulate",
    "keywords": "Class Accumulate Represents an operator that calculates the cumulative sum of the arrays in a sequence and returns each intermediate result. Inheritance Object ArrayTransform Accumulate Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Accumulate : ArrayTransform Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Calculates the cumulative sum of the arrays in an observable sequence and returns each intermediate result. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of multi-channel array values. Returns Type Description IObservable <TArray> A sequence of multi-channel array values, where each array stores the cumulative sum of all previous array values in the source sequence. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>)"
  },
  "api/Bonsai.Dsp.ArrayExtrema.html": {
    "href": "api/Bonsai.Dsp.ArrayExtrema.html",
    "title": "Struct ArrayExtrema",
    "keywords": "Struct ArrayExtrema Represents the minimum and maximum values of a 2D array, and their corresponding locations. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public struct ArrayExtrema Fields | Improve this Doc View Source MaxLocation The zero-based index of the maximum value in the 2D array. Declaration public Point MaxLocation Field Value Type Description Point | Improve this Doc View Source MaxValue The maximum value of the 2D array. Declaration public double MaxValue Field Value Type Description Double | Improve this Doc View Source MinLocation The zero-based index of the minimum value in the 2D array. Declaration public Point MinLocation Field Value Type Description Point | Improve this Doc View Source MinValue The minimum value of the 2D array. Declaration public double MinValue Field Value Type Description Double Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/Bonsai.Dsp.ArrayTransform.html": {
    "href": "api/Bonsai.Dsp.ArrayTransform.html",
    "title": "Class ArrayTransform",
    "keywords": "Class ArrayTransform Provides an abstract base class for operators that transform sequences of array-like objects. Inheritance Object ArrayTransform Abs Accumulate CartToPolar ConvertScale DiscreteFourierTransform Exp IncrementalMean Log Magnitude Phase PolarToCart Pow Reduce Rescale RunningAverage Tile Transpose Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public abstract class ArrayTransform Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) When overridden in a derived class, returns a sequence of array-like objects where each element is a transformation of the corresponding array in the original sequence. Declaration public abstract IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source The sequence of array-like objects to be transformed. Returns Type Description IObservable <TArray> A sequence of the transformed array-like objects. Type Parameters Name Description TArray The type of the array-like objects in the source sequence."
  },
  "api/Bonsai.Dsp.Average.html": {
    "href": "api/Bonsai.Dsp.Average.html",
    "title": "Class Average",
    "keywords": "Class Average Represents an operator that calculates the average, or arithmetic mean, of each channel for all the arrays in the sequence. Inheritance Object Average Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Average Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Calculates the average, or arithmetic mean, of each channel for all the arrays in an observable sequence. Declaration public IObservable<Scalar> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of array values for which to calculate the per-channel average. Returns Type Description IObservable < Scalar > A Scalar tuple containing the average of each channel for all the arrays in the source sequence. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Remarks For multi-channel images using BGR, RGB, or other color formats, the order of values in the Scalar tuple follows the order of channels in the color format, e.g. for a BGR image, the average for the blue-channel will be stored in Val0 , the average for the green-channel in Val1 , etc. For single-channel arrays such as a grayscale image or a 2D floating point array with signal processing data, the average will be stored in the first value of the tuple, Val0 . | Improve this Doc View Source Process<TArray, TMask>(IObservable<Tuple<TArray, TMask>>) Calculates the average, or arithmetic mean, of each channel for all the arrays in an observable sequence, where each array is paired with a mask where non-zero values indicate which elements in the array should be averaged. Declaration public IObservable<Scalar> Process<TArray, TMask>(IObservable<Tuple<TArray, TMask>> source) where TArray : Arr where TMask : Arr Parameters Type Name Description IObservable < Tuple <TArray, TMask>> source A sequence of array pairs, where the first array contains the elements used to compute the average, and the second array contains the operation mask, where non-zero values indicate which elements in the first array should be averaged. Returns Type Description IObservable < Scalar > A Scalar tuple containing the average of each channel for all the arrays in the source sequence. Type Parameters Name Description TArray The type of the array-like objects to average. TMask The type of the array-like objects used as an operation mask."
  },
  "api/Bonsai.Dsp.BinaryArrayTransform.html": {
    "href": "api/Bonsai.Dsp.BinaryArrayTransform.html",
    "title": "Class BinaryArrayTransform",
    "keywords": "Class BinaryArrayTransform Provides an abstract base class for operators that perform a binary transformation on pairs of array-like objects in an observable sequence. Inheritance Object BinaryArrayTransform AbsoluteDifference Concat Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public abstract class BinaryArrayTransform Methods | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray>>) When overridden in a derived class, applies a binary transformation to all pairs of array-like objects in an observable sequence. Declaration public abstract IObservable<TArray> Process<TArray>(IObservable<Tuple<TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray>> source A sequence containing the pairs of array-like objects for which to apply the binary transformation. Returns Type Description IObservable <TArray> A sequence containing the results of the binary transformation. Type Parameters Name Description TArray The type of the array-like objects in the source sequence."
  },
  "api/Bonsai.Dsp.BitBuffer.html": {
    "href": "api/Bonsai.Dsp.BitBuffer.html",
    "title": "Class BitBuffer",
    "keywords": "Class BitBuffer Represents an operator that demultiplexes individual bits of all the elements in a sequence into separate rows of a 2D array. Inheritance Object BitBuffer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class BitBuffer Methods | Improve this Doc View Source Process(IObservable<Mat>) Demultiplexes individual bits of all the 2D array values in a sequence into multiple separate rows of a 2D array. Declaration public IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of 2D array values. Returns Type Description IObservable < Mat > A sequence of Mat objects, where each array contains one row for each bit in the original 2D array value. | Improve this Doc View Source Process(IObservable<Byte>) Demultiplexes individual bits of all the 8-bit unsigned integers in a sequence into eight separate rows of a 2D array. Declaration public IObservable<Mat> Process(IObservable<byte> source) Parameters Type Name Description IObservable < Byte > source A sequence of 8-bit unsigned integer values. Returns Type Description IObservable < Mat > A sequence of Mat objects, where each array contains one row for each bit in the 8-bit unsigned integer value. | Improve this Doc View Source Process(IObservable<Int16>) Demultiplexes individual bits of all the 16-bit signed integers in a sequence into sixteen separate rows of a 2D array. Declaration public IObservable<Mat> Process(IObservable<short> source) Parameters Type Name Description IObservable < Int16 > source A sequence of 16-bit signed integer values. Returns Type Description IObservable < Mat > A sequence of Mat objects, where each array contains one row for each bit in the 16-bit signed integer value. | Improve this Doc View Source Process(IObservable<Int32>) Demultiplexes individual bits of all the 32-bit signed integers in a sequence into thirty-two separate rows of a 2D array. Declaration public IObservable<Mat> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of 32-bit signed integer values. Returns Type Description IObservable < Mat > A sequence of Mat objects, where each array contains one row for each bit in the 32-bit signed integer value. | Improve this Doc View Source Process(IObservable<Int64>) Demultiplexes individual bits of all the 64-bit signed integers in a sequence into sixty-four separate rows of a 2D array. Declaration public IObservable<Mat> Process(IObservable<long> source) Parameters Type Name Description IObservable < Int64 > source A sequence of 64-bit signed integer values. Returns Type Description IObservable < Mat > A sequence of Mat objects, where each array contains one row for each bit in the 64-bit signed integer value. | Improve this Doc View Source Process(IObservable<SByte>) Demultiplexes individual bits of all the 8-bit signed integers in a sequence into eight separate rows of a 2D array. Declaration public IObservable<Mat> Process(IObservable<sbyte> source) Parameters Type Name Description IObservable < SByte > source A sequence of 8-bit signed integer values. Returns Type Description IObservable < Mat > A sequence of Mat objects, where each array contains one row for each bit in the 8-bit signed integer value. | Improve this Doc View Source Process(IObservable<UInt16>) Demultiplexes individual bits of all the 16-bit unsigned integers in a sequence into sixteen separate rows of a 2D array. Declaration public IObservable<Mat> Process(IObservable<ushort> source) Parameters Type Name Description IObservable < UInt16 > source A sequence of 16-bit unsigned integer values. Returns Type Description IObservable < Mat > A sequence of Mat objects, where each array contains one row for each bit in the 16-bit unsigned integer value. | Improve this Doc View Source Process(IObservable<UInt32>) Demultiplexes individual bits of all the 32-bit unsigned integers in a sequence into thirty-two separate rows of a 2D array. Declaration public IObservable<Mat> Process(IObservable<uint> source) Parameters Type Name Description IObservable < UInt32 > source A sequence of 32-bit unsigned integer values. Returns Type Description IObservable < Mat > A sequence of Mat objects, where each array contains one row for each bit in the 32-bit unsigned integer value. | Improve this Doc View Source Process(IObservable<UInt64>) Demultiplexes individual bits of all the 64-bit unsigned integers in a sequence into sixty-four separate rows of a 2D array. Declaration public IObservable<Mat> Process(IObservable<ulong> source) Parameters Type Name Description IObservable < UInt64 > source A sequence of 64-bit unsigned integer values. Returns Type Description IObservable < Mat > A sequence of Mat objects, where each array contains one row for each bit in the 64-bit unsigned integer value."
  },
  "api/Bonsai.Dsp.Buffer.html": {
    "href": "api/Bonsai.Dsp.Buffer.html",
    "title": "Class Buffer",
    "keywords": "Class Buffer Represents an operator that collects each element of the sequence into zero or more array buffers based on element count information. Inheritance Object Buffer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Buffer Properties | Improve this Doc View Source Count Gets or sets the number of elements in each array buffer. Declaration public int Count { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Skip Gets or sets the optional number of elements to skip between the creation of consecutive buffers. Declaration public int? Skip { get; set; } Property Value Type Description Nullable < Int32 > Remarks If no value is specified, it is considered to be be equal to Count in order to generate consecutive non-overlapping buffers. If the value is less than Count this operator will generate overlapping sliding windows. Methods | Improve this Doc View Source Process(IObservable<Mat>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of array buffers containing the samples to buffer Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with the same number of rows as each element in each list, and column length equal to Count . | Improve this Doc View Source Process(IObservable<Byte>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<byte> source) Parameters Type Name Description IObservable < Byte > source A sequence of 8-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat vectors of length equal to Count containing the buffered data. | Improve this Doc View Source Process(IObservable<IList<Byte>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<IList<byte>> source) Parameters Type Name Description IObservable < IList < Byte >> source A sequence of lists of 8-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with as many rows as there are elements in each list, and column length equal to Count . | Improve this Doc View Source Process(IObservable<IList<Double>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<IList<double>> source) Parameters Type Name Description IObservable < IList < Double >> source A sequence of lists of 64-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with as many rows as there are elements in each list, and column length equal to Count . | Improve this Doc View Source Process(IObservable<IList<Int16>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<IList<short>> source) Parameters Type Name Description IObservable < IList < Int16 >> source A sequence of lists of 16-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with as many rows as there are elements in each list, and column length equal to Count . | Improve this Doc View Source Process(IObservable<IList<Int32>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<IList<int>> source) Parameters Type Name Description IObservable < IList < Int32 >> source A sequence of lists of 32-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with as many rows as there are elements in each list, and column length equal to Count . | Improve this Doc View Source Process(IObservable<IList<Single>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<IList<float>> source) Parameters Type Name Description IObservable < IList < Single >> source A sequence of lists of 32-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with as many rows as there are elements in each list, and column length equal to Count . | Improve this Doc View Source Process(IObservable<IList<UInt16>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<IList<ushort>> source) Parameters Type Name Description IObservable < IList < UInt16 >> source A sequence of lists of 16-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with as many rows as there are elements in each list, and column length equal to Count . | Improve this Doc View Source Process(IObservable<Double>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of 64-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat vectors of length equal to Count containing the buffered data. | Improve this Doc View Source Process(IObservable<Int16>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<short> source) Parameters Type Name Description IObservable < Int16 > source A sequence of 16-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat vectors of length equal to Count containing the buffered data. | Improve this Doc View Source Process(IObservable<Int32>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of 32-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat vectors of length equal to Count containing the buffered data. | Improve this Doc View Source Process(IObservable<Single>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<float> source) Parameters Type Name Description IObservable < Single > source A sequence of 32-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat vectors of length equal to Count containing the buffered data. | Improve this Doc View Source Process(IObservable<Tuple<Byte, Byte, Byte, Byte, Byte, Byte, Byte>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<byte, byte, byte, byte, byte, byte, byte>> source) Parameters Type Name Description IObservable < Tuple < Byte , Byte , Byte , Byte , Byte , Byte , Byte >> source A sequence of septuples of 8-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with seven rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Byte, Byte, Byte, Byte, Byte, Byte>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<byte, byte, byte, byte, byte, byte>> source) Parameters Type Name Description IObservable < Tuple < Byte , Byte , Byte , Byte , Byte , Byte >> source A sequence of sextuples of 8-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with six rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Byte, Byte, Byte, Byte, Byte>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<byte, byte, byte, byte, byte>> source) Parameters Type Name Description IObservable < Tuple < Byte , Byte , Byte , Byte , Byte >> source A sequence of quintuples of 8-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with five rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Byte, Byte, Byte, Byte>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<byte, byte, byte, byte>> source) Parameters Type Name Description IObservable < Tuple < Byte , Byte , Byte , Byte >> source A sequence of quadruples of 8-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with four rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Byte, Byte, Byte>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<byte, byte, byte>> source) Parameters Type Name Description IObservable < Tuple < Byte , Byte , Byte >> source A sequence of triples of 8-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with three rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Byte, Byte>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<byte, byte>> source) Parameters Type Name Description IObservable < Tuple < Byte , Byte >> source A sequence of pairs of 8-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with two rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Double, Double, Double, Double, Double, Double, Double>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<double, double, double, double, double, double, double>> source) Parameters Type Name Description IObservable < Tuple < Double , Double , Double , Double , Double , Double , Double >> source A sequence of septuples of 64-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with seven rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Double, Double, Double, Double, Double, Double>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<double, double, double, double, double, double>> source) Parameters Type Name Description IObservable < Tuple < Double , Double , Double , Double , Double , Double >> source A sequence of sextuples of 64-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with six rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Double, Double, Double, Double, Double>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<double, double, double, double, double>> source) Parameters Type Name Description IObservable < Tuple < Double , Double , Double , Double , Double >> source A sequence of quintuples of 64-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with five rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Double, Double, Double, Double>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<double, double, double, double>> source) Parameters Type Name Description IObservable < Tuple < Double , Double , Double , Double >> source A sequence of quadruples of 64-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with four rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Double, Double, Double>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<double, double, double>> source) Parameters Type Name Description IObservable < Tuple < Double , Double , Double >> source A sequence of triples of 64-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with three rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Double, Double>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<double, double>> source) Parameters Type Name Description IObservable < Tuple < Double , Double >> source A sequence of pairs of 64-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with two rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Int16, Int16, Int16, Int16, Int16, Int16, Int16>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<short, short, short, short, short, short, short>> source) Parameters Type Name Description IObservable < Tuple < Int16 , Int16 , Int16 , Int16 , Int16 , Int16 , Int16 >> source A sequence of septuples of 16-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with seven rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Int16, Int16, Int16, Int16, Int16, Int16>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<short, short, short, short, short, short>> source) Parameters Type Name Description IObservable < Tuple < Int16 , Int16 , Int16 , Int16 , Int16 , Int16 >> source A sequence of sextuples of 16-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with six rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Int16, Int16, Int16, Int16, Int16>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<short, short, short, short, short>> source) Parameters Type Name Description IObservable < Tuple < Int16 , Int16 , Int16 , Int16 , Int16 >> source A sequence of quintuples of 16-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with five rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Int16, Int16, Int16, Int16>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<short, short, short, short>> source) Parameters Type Name Description IObservable < Tuple < Int16 , Int16 , Int16 , Int16 >> source A sequence of quadruples of 16-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with four rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Int16, Int16, Int16>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<short, short, short>> source) Parameters Type Name Description IObservable < Tuple < Int16 , Int16 , Int16 >> source A sequence of triples of 16-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with three rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Int16, Int16>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<short, short>> source) Parameters Type Name Description IObservable < Tuple < Int16 , Int16 >> source A sequence of pairs of 16-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with two rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Int32, Int32, Int32, Int32, Int32, Int32, Int32>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<int, int, int, int, int, int, int>> source) Parameters Type Name Description IObservable < Tuple < Int32 , Int32 , Int32 , Int32 , Int32 , Int32 , Int32 >> source A sequence of septuples of 32-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with seven rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Int32, Int32, Int32, Int32, Int32, Int32>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<int, int, int, int, int, int>> source) Parameters Type Name Description IObservable < Tuple < Int32 , Int32 , Int32 , Int32 , Int32 , Int32 >> source A sequence of sextuples of 32-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with six rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Int32, Int32, Int32, Int32, Int32>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<int, int, int, int, int>> source) Parameters Type Name Description IObservable < Tuple < Int32 , Int32 , Int32 , Int32 , Int32 >> source A sequence of quintuples of 32-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with five rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Int32, Int32, Int32, Int32>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<int, int, int, int>> source) Parameters Type Name Description IObservable < Tuple < Int32 , Int32 , Int32 , Int32 >> source A sequence of quadruples of 32-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with four rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Int32, Int32, Int32>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<int, int, int>> source) Parameters Type Name Description IObservable < Tuple < Int32 , Int32 , Int32 >> source A sequence of triples of 32-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with three rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Int32, Int32>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<int, int>> source) Parameters Type Name Description IObservable < Tuple < Int32 , Int32 >> source A sequence of pairs of 32-bit signed integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with two rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Single, Single, Single, Single, Single, Single, Single>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<float, float, float, float, float, float, float>> source) Parameters Type Name Description IObservable < Tuple < Single , Single , Single , Single , Single , Single , Single >> source A sequence of septuples of 32-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with seven rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Single, Single, Single, Single, Single, Single>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<float, float, float, float, float, float>> source) Parameters Type Name Description IObservable < Tuple < Single , Single , Single , Single , Single , Single >> source A sequence of sextuples of 32-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with six rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Single, Single, Single, Single, Single>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<float, float, float, float, float>> source) Parameters Type Name Description IObservable < Tuple < Single , Single , Single , Single , Single >> source A sequence of quintuples of 32-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with five rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Single, Single, Single, Single>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<float, float, float, float>> source) Parameters Type Name Description IObservable < Tuple < Single , Single , Single , Single >> source A sequence of quadruples of 32-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with four rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Single, Single, Single>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<float, float, float>> source) Parameters Type Name Description IObservable < Tuple < Single , Single , Single >> source A sequence of triples of 32-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with three rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<Single, Single>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<float, float>> source) Parameters Type Name Description IObservable < Tuple < Single , Single >> source A sequence of pairs of 32-bit floating-point numbers to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with two rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<ushort, ushort, ushort, ushort, ushort, ushort, ushort>> source) Parameters Type Name Description IObservable < Tuple < UInt16 , UInt16 , UInt16 , UInt16 , UInt16 , UInt16 , UInt16 >> source A sequence of septuples of 16-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with seven rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<UInt16, UInt16, UInt16, UInt16, UInt16, UInt16>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<ushort, ushort, ushort, ushort, ushort, ushort>> source) Parameters Type Name Description IObservable < Tuple < UInt16 , UInt16 , UInt16 , UInt16 , UInt16 , UInt16 >> source A sequence of sextuples of 16-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with six rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<UInt16, UInt16, UInt16, UInt16, UInt16>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<ushort, ushort, ushort, ushort, ushort>> source) Parameters Type Name Description IObservable < Tuple < UInt16 , UInt16 , UInt16 , UInt16 , UInt16 >> source A sequence of quintuples of 16-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with five rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<UInt16, UInt16, UInt16, UInt16>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<ushort, ushort, ushort, ushort>> source) Parameters Type Name Description IObservable < Tuple < UInt16 , UInt16 , UInt16 , UInt16 >> source A sequence of quadruples of 16-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with four rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<UInt16, UInt16, UInt16>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<ushort, ushort, ushort>> source) Parameters Type Name Description IObservable < Tuple < UInt16 , UInt16 , UInt16 >> source A sequence of triples of 16-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with three rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<Tuple<UInt16, UInt16>>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<Tuple<ushort, ushort>> source) Parameters Type Name Description IObservable < Tuple < UInt16 , UInt16 >> source A sequence of pairs of 16-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects containing the buffered data, with two rows and column length equal to Count . | Improve this Doc View Source Process(IObservable<UInt16>) Collects each element of the sequence into zero or more array buffers based on element count information. Declaration public IObservable<Mat> Process(IObservable<ushort> source) Parameters Type Name Description IObservable < UInt16 > source A sequence of 16-bit unsigned integer values to buffer. Returns Type Description IObservable < Mat > A sequence of Mat vectors of length equal to Count containing the buffered data."
  },
  "api/Bonsai.Dsp.Butterworth.html": {
    "href": "api/Bonsai.Dsp.Butterworth.html",
    "title": "Class Butterworth",
    "keywords": "Class Butterworth Represents an operator that filters frequencies in the input signal using a Butterworth infinite-impulse response filter with the specified design parameters. Inheritance Object Combinator < Mat , Mat > Transform < Mat , Mat > Butterworth Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Butterworth : Transform<Mat, Mat> Properties | Improve this Doc View Source Cutoff1 Gets or sets the first cutoff frequency, in Hz, applied to the input signal. Declaration public double Cutoff1 { get; set; } Property Value Type Description Double | Improve this Doc View Source Cutoff2 Gets or sets the second cutoff frequency, in Hz, applied to the input signal. Declaration public double Cutoff2 { get; set; } Property Value Type Description Double | Improve this Doc View Source FilterOrder Gets or sets the order of the IIR filter. Declaration public int FilterOrder { get; set; } Property Value Type Description Int32 | Improve this Doc View Source FilterType Gets or sets the type of filter to apply on the signal. Declaration public FilterType FilterType { get; set; } Property Value Type Description FilterType | Improve this Doc View Source SampleRate Gets or sets the sample rate of the input signal, in Hz. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<Mat>) Filters frequencies in the input signal using a Butterworth infinite-impulse response filter with the specified design parameters. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the waveform of the signal to filter. Returns Type Description IObservable < Mat > A sequence of Mat objects representing the waveform of the filtered signal. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>) | Improve this Doc View Source Process(IObservable<Double>) Filters frequencies in the input signal using a Butterworth infinite-impulse response filter with the specified design parameters. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of floating-point numbers representing the waveform of the signal to filter. Returns Type Description IObservable < Double > A sequence of floating-point numbers representing the waveform of the filtered signal."
  },
  "api/Bonsai.Dsp.CartToPolar.html": {
    "href": "api/Bonsai.Dsp.CartToPolar.html",
    "title": "Class CartToPolar",
    "keywords": "Class CartToPolar Represents an operator that computes the magnitude and angle of each array of 2D vectors in the sequence. Inheritance Object ArrayTransform CartToPolar Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class CartToPolar : ArrayTransform Properties | Improve this Doc View Source AngleInDegrees Gets or sets a value specifying whether vector angle values are measured in degrees. Declaration public bool AngleInDegrees { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Process(IObservable<Point2d>) Computes the magnitude and angle for each pair of 2D points in the sequence. Declaration public IObservable<Point2d> Process(IObservable<Point2d> source) Parameters Type Name Description IObservable < Point2d > source A sequence of 2D points with double-precision cartesian coordinates, for which to compute the corresponding polar coordinates. Returns Type Description IObservable < Point2d > A sequence of points specifying the corresponding double-precision polar coordinates for each 2D vector in the source sequence. | Improve this Doc View Source Process(IObservable<Point2f>) Computes the magnitude and angle for each pair of 2D points in the sequence. Declaration public IObservable<Point2f> Process(IObservable<Point2f> source) Parameters Type Name Description IObservable < Point2f > source A sequence of 2D points with single-precision cartesian coordinates, for which to compute the corresponding polar coordinates. Returns Type Description IObservable < Point2f > A sequence of points specifying the corresponding single-precision polar coordinates for each 2D vector in the source sequence. | Improve this Doc View Source Process(IObservable<Tuple<Double, Double>>) Computes the polar coordinates for each pair of cartesian coordinates in the sequence. Declaration public IObservable<Tuple<double, double>> Process(IObservable<Tuple<double, double>> source) Parameters Type Name Description IObservable < Tuple < Double , Double >> source A sequence of pairs specifying double-precision cartesian coordinates, where the first item stores the x-coordinate, and the second item the y-coordinate of a 2D vector for which to compute the polar coordinates. Returns Type Description IObservable < Tuple < Double , Double >> A sequence of pairs specifying double-precision polar coordinates, where the first item stores the magnitude, and the second item the angle of a 2D vector. | Improve this Doc View Source Process(IObservable<Tuple<Single, Single>>) Computes the polar coordinates for each pair of cartesian coordinates in the sequence. Declaration public IObservable<Tuple<float, float>> Process(IObservable<Tuple<float, float>> source) Parameters Type Name Description IObservable < Tuple < Single , Single >> source A sequence of pairs specifying single-precision cartesian coordinates, where the first item stores the x-coordinate, and the second item the y-coordinate of a 2D vector for which to compute the polar coordinates. Returns Type Description IObservable < Tuple < Single , Single >> A sequence of pairs specifying single-precision polar coordinates, where the first item stores the magnitude, and the second item the angle of a 2D vector. | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Computes the magnitude and angle of each array of 2D vectors in the sequence. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of 2D vector fields represented by a 2-channel array or image, for which to compute the magnitude and angle. Returns Type Description IObservable <TArray> A sequence of 2-channel arrays or images, where the first channel of each element stores the magnitude and the second channel the angle of a 2D vector. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>) | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray>>) Computes the magnitude and angle for each pair of cartesian coordinates in the sequence. Declaration public IObservable<Tuple<TArray, TArray>> Process<TArray>(IObservable<Tuple<TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray>> source A sequence of pairs of arrays, where the first array stores the x-coordinates, and the second array the y-coordinates of a 2D vector field for which to compute the magnitude and angle. Returns Type Description IObservable < Tuple <TArray, TArray>> A sequence of pairs of arrays, where the first array stores the magnitude, and the second array stores the angle of a 2D vector. Type Parameters Name Description TArray The type of the array-like objects in the source sequence."
  },
  "api/Bonsai.Dsp.Concat.html": {
    "href": "api/Bonsai.Dsp.Concat.html",
    "title": "Class Concat",
    "keywords": "Class Concat Represents an operator that concatenates each set of arrays in the sequence into a single buffer. Inheritance Object BinaryArrayTransform Concat Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Concat : BinaryArrayTransform Properties | Improve this Doc View Source Axis Gets or sets the dimension along which to merge the arrays. Declaration public int Axis { get; set; } Property Value Type Description Int32 Remarks A value of zero specifies concatenating rows, and a value of one specifies concatenating columns. In the case of concatenating single-dimension arrays, the Axis property is ignored. Methods | Improve this Doc View Source Process<TElement>(IObservable<IList<TElement[]>>) Concatenates each list of arrays in the sequence into a single buffer. Declaration public IObservable<TElement[]> Process<TElement>(IObservable<IList<TElement[]>> source) Parameters Type Name Description IObservable < IList <TElement[]>> source A sequence of lists of arrays to concatenate into a single array. Returns Type Description IObservable <TElement[]> The sequence of concatenated arrays. Type Parameters Name Description TElement The type of the elements stored in the array sequence. | Improve this Doc View Source Process<TArray>(IObservable<IList<TArray>>) Concatenates each list of arrays in the sequence into a single buffer. Declaration public IObservable<TArray> Process<TArray>(IObservable<IList<TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < IList <TArray>> source A sequence of lists of arrays to concatenate into a single buffer. Returns Type Description IObservable <TArray> The sequence of concatenated buffers. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray, TArray, TArray, TArray, TArray, TArray>>) Concatenates each septuple of arrays in the sequence into a single buffer. Declaration public IObservable<TArray> Process<TArray>(IObservable<Tuple<TArray, TArray, TArray, TArray, TArray, TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray, TArray, TArray, TArray, TArray, TArray>> source A sequence of septuples of arrays to concatenate into a single buffer. Returns Type Description IObservable <TArray> The sequence of concatenated buffers. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray, TArray, TArray, TArray, TArray>>) Concatenates each sextuple of arrays in the sequence into a single buffer. Declaration public IObservable<TArray> Process<TArray>(IObservable<Tuple<TArray, TArray, TArray, TArray, TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray, TArray, TArray, TArray, TArray>> source A sequence of sextuples of arrays to concatenate into a single buffer. Returns Type Description IObservable <TArray> The sequence of concatenated buffers. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray, TArray, TArray, TArray>>) Concatenates each quintuple of arrays in the sequence into a single buffer. Declaration public IObservable<TArray> Process<TArray>(IObservable<Tuple<TArray, TArray, TArray, TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray, TArray, TArray, TArray>> source A sequence of quintuples of arrays to concatenate into a single buffer. Returns Type Description IObservable <TArray> The sequence of concatenated buffers. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray, TArray, TArray>>) Concatenates each quadruple of arrays in the sequence into a single buffer. Declaration public IObservable<TArray> Process<TArray>(IObservable<Tuple<TArray, TArray, TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray, TArray, TArray>> source A sequence of quadruples of arrays to concatenate into a single buffer. Returns Type Description IObservable <TArray> The sequence of concatenated buffers. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray, TArray>>) Concatenates each triple of arrays in the sequence into a single buffer. Declaration public IObservable<TArray> Process<TArray>(IObservable<Tuple<TArray, TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray, TArray>> source A sequence of triples of arrays to concatenate into a single buffer. Returns Type Description IObservable <TArray> The sequence of concatenated buffers. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray>>) Concatenates each pair of arrays in the sequence into a single buffer. Declaration public override IObservable<TArray> Process<TArray>(IObservable<Tuple<TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray>> source A sequence of pairs of arrays to concatenate into a single buffer. Returns Type Description IObservable <TArray> The sequence of concatenated buffers. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.BinaryArrayTransform.Process<TArray>(System.IObservable<System.Tuple<TArray, TArray>>) | Improve this Doc View Source Process<TElement>(IObservable<Tuple<TElement[], TElement[], TElement[], TElement[], TElement[], TElement[], TElement[]>>) Concatenates each septuple of arrays in the sequence into a single buffer. Declaration public IObservable<TElement[]> Process<TElement>(IObservable<Tuple<TElement[], TElement[], TElement[], TElement[], TElement[], TElement[], TElement[]>> source) Parameters Type Name Description IObservable < Tuple <TElement[], TElement[], TElement[], TElement[], TElement[], TElement[], TElement[]>> source A sequence of septuples of arrays to concatenate into a single array. Returns Type Description IObservable <TElement[]> The sequence of concatenated arrays. Type Parameters Name Description TElement The type of the elements stored in the array sequence. | Improve this Doc View Source Process<TElement>(IObservable<Tuple<TElement[], TElement[], TElement[], TElement[], TElement[], TElement[]>>) Concatenates each sextuple of arrays in the sequence into a single buffer. Declaration public IObservable<TElement[]> Process<TElement>(IObservable<Tuple<TElement[], TElement[], TElement[], TElement[], TElement[], TElement[]>> source) Parameters Type Name Description IObservable < Tuple <TElement[], TElement[], TElement[], TElement[], TElement[], TElement[]>> source A sequence of sextuples of arrays to concatenate into a single array. Returns Type Description IObservable <TElement[]> The sequence of concatenated arrays. Type Parameters Name Description TElement The type of the elements stored in the array sequence. | Improve this Doc View Source Process<TElement>(IObservable<Tuple<TElement[], TElement[], TElement[], TElement[], TElement[]>>) Concatenates each quintuple of arrays in the sequence into a single buffer. Declaration public IObservable<TElement[]> Process<TElement>(IObservable<Tuple<TElement[], TElement[], TElement[], TElement[], TElement[]>> source) Parameters Type Name Description IObservable < Tuple <TElement[], TElement[], TElement[], TElement[], TElement[]>> source A sequence of quintuples of arrays to concatenate into a single array. Returns Type Description IObservable <TElement[]> The sequence of concatenated arrays. Type Parameters Name Description TElement The type of the elements stored in the array sequence. | Improve this Doc View Source Process<TElement>(IObservable<Tuple<TElement[], TElement[], TElement[], TElement[]>>) Concatenates each quadruple of arrays in the sequence into a single buffer. Declaration public IObservable<TElement[]> Process<TElement>(IObservable<Tuple<TElement[], TElement[], TElement[], TElement[]>> source) Parameters Type Name Description IObservable < Tuple <TElement[], TElement[], TElement[], TElement[]>> source A sequence of quadruples of arrays to concatenate into a single array. Returns Type Description IObservable <TElement[]> The sequence of concatenated arrays. Type Parameters Name Description TElement The type of the elements stored in the array sequence. | Improve this Doc View Source Process<TElement>(IObservable<Tuple<TElement[], TElement[], TElement[]>>) Concatenates each triple of arrays in the sequence into a single buffer. Declaration public IObservable<TElement[]> Process<TElement>(IObservable<Tuple<TElement[], TElement[], TElement[]>> source) Parameters Type Name Description IObservable < Tuple <TElement[], TElement[], TElement[]>> source A sequence of triples of arrays to concatenate into a single array. Returns Type Description IObservable <TElement[]> The sequence of concatenated arrays. Type Parameters Name Description TElement The type of the elements stored in the array sequence. | Improve this Doc View Source Process<TElement>(IObservable<Tuple<TElement[], TElement[]>>) Concatenates each pair of arrays in the sequence into a single buffer. Declaration public IObservable<TElement[]> Process<TElement>(IObservable<Tuple<TElement[], TElement[]>> source) Parameters Type Name Description IObservable < Tuple <TElement[], TElement[]>> source A sequence of pairs of arrays to concatenate into a single array. Returns Type Description IObservable <TElement[]> The sequence of concatenated arrays. Type Parameters Name Description TElement The type of the elements stored in the array sequence."
  },
  "api/Bonsai.Dsp.ConvertFromArray.html": {
    "href": "api/Bonsai.Dsp.ConvertFromArray.html",
    "title": "Class ConvertFromArray",
    "keywords": "Class ConvertFromArray Represents an operator that converts each managed array in the sequence into a 2D array buffer with the specified size, depth and number of channels. Inheritance Object ConvertFromArray Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class ConvertFromArray Properties | Improve this Doc View Source Channels Gets or sets the number of channels in the output array buffer. Declaration public int? Channels { get; set; } Property Value Type Description Nullable < Int32 > Remarks If this property is not specified, the default number of channels will be one. | Improve this Doc View Source Depth Gets or sets the bit depth of each element in the output array buffer. Declaration public Depth? Depth { get; set; } Property Value Type Description Nullable < Depth > Remarks If this property is not specified, the default depth will be automatically selected based on the type of the input array elements. | Improve this Doc View Source Size Gets or sets the size of the output array buffer. Declaration public Size Size { get; set; } Property Value Type Description Size Remarks If one dimension is zero, the output will be either a row or column vector along the non-zero dimension. If both dimensions are zero, the output will be a row vector with the same number of elements as the length of each array in the sequence. Methods | Improve this Doc View Source Process(IObservable<Byte[]>) Converts each Byte array in an observable sequence into a 2D array buffer with the specified size, depth and number of channels. Declaration public IObservable<Mat> Process(IObservable<byte[]> source) Parameters Type Name Description IObservable < Byte []> source A sequence of 8-bit unsigned integer arrays to convert into a sequence of sample buffers. Returns Type Description IObservable < Mat > A sequence of Mat objects containing a copy of the managed array data reinterpreted as a 2D array buffer with the specified size, depth and number of channels. | Improve this Doc View Source Process(IObservable<Double[]>) Converts each Double array in an observable sequence into a 2D array buffer with the specified size, depth and number of channels. Declaration public IObservable<Mat> Process(IObservable<double[]> source) Parameters Type Name Description IObservable < Double []> source A sequence of 64-bit floating-point arrays to convert into a sequence of sample buffers. Returns Type Description IObservable < Mat > A sequence of Mat objects containing a copy of the managed array data reinterpreted as a 2D array buffer with the specified size, depth and number of channels. | Improve this Doc View Source Process(IObservable<Int16[]>) Converts each Int16 array in an observable sequence into a 2D array buffer with the specified size, depth and number of channels. Declaration public IObservable<Mat> Process(IObservable<short[]> source) Parameters Type Name Description IObservable < Int16 []> source A sequence of 16-bit signed integer arrays to convert into a sequence of sample buffers. Returns Type Description IObservable < Mat > A sequence of Mat objects containing a copy of the managed array data reinterpreted as a 2D array buffer with the specified size, depth and number of channels. | Improve this Doc View Source Process(IObservable<Int32[]>) Converts each Int32 array in an observable sequence into a 2D array buffer with the specified size, depth and number of channels. Declaration public IObservable<Mat> Process(IObservable<int[]> source) Parameters Type Name Description IObservable < Int32 []> source A sequence of 32-bit signed integer arrays to convert into a sequence of sample buffers. Returns Type Description IObservable < Mat > A sequence of Mat objects containing a copy of the managed array data reinterpreted as a 2D array buffer with the specified size, depth and number of channels. | Improve this Doc View Source Process(IObservable<Single[]>) Converts each Single array in an observable sequence into a 2D array buffer with the specified size, depth and number of channels. Declaration public IObservable<Mat> Process(IObservable<float[]> source) Parameters Type Name Description IObservable < Single []> source A sequence of 32-bit floating-point arrays to convert into a sequence of sample buffers. Returns Type Description IObservable < Mat > A sequence of Mat objects containing a copy of the managed array data reinterpreted as a 2D array buffer with the specified size, depth and number of channels. | Improve this Doc View Source Process(IObservable<UInt16[]>) Converts each UInt16 array in an observable sequence into a 2D array buffer with the specified size, depth and number of channels. Declaration public IObservable<Mat> Process(IObservable<ushort[]> source) Parameters Type Name Description IObservable < UInt16 []> source A sequence of 16-bit unsigned integer arrays to convert into a sequence of sample buffers. Returns Type Description IObservable < Mat > A sequence of Mat objects containing a copy of the managed array data reinterpreted as a 2D array buffer with the specified size, depth and number of channels. | Improve this Doc View Source Process<TData>(IObservable<TData[]>) Converts each array of type TData in an observable sequence into a 2D array buffer with the specified size, depth and number of channels. Declaration public IObservable<Mat> Process<TData>(IObservable<TData[]> source) where TData : struct Parameters Type Name Description IObservable <TData[]> source A sequence of arrays of type TData to convert into a sequence of sample buffers. Returns Type Description IObservable < Mat > A sequence of Mat objects containing a copy of the managed array data reinterpreted as a 2D array buffer with the specified size, depth and number of channels. Type Parameters Name Description TData The type of the values stored in each array."
  },
  "api/Bonsai.Dsp.ConvertScale.html": {
    "href": "api/Bonsai.Dsp.ConvertScale.html",
    "title": "Class ConvertScale",
    "keywords": "Class ConvertScale Represents an operator that converts each array in the sequence to the specified bit depth, with optional linear transformation. Inheritance Object ArrayTransform ConvertScale Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class ConvertScale : ArrayTransform Properties | Improve this Doc View Source Depth Gets or sets the bit depth of each element in the output array. Declaration [TypeConverter(typeof(DepthConverter))] public Depth? Depth { get; set; } Property Value Type Description Nullable < Depth > Remarks If this property is not specified, the bit depth of the output array will be the same as the bit depth of the input array. | Improve this Doc View Source Scale Gets or sets the optional scale factor to apply to the array elements. Declaration public double Scale { get; set; } Property Value Type Description Double | Improve this Doc View Source Shift Gets or sets the optional value to be added to the scaled array elements. Declaration public double Shift { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Converts each array in the sequence to the specified bit depth, with optional linear transformation. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source The sequence of arrays to be converted. Returns Type Description IObservable <TArray> A sequence containing the converted and scaled arrays. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>)"
  },
  "api/Bonsai.Dsp.ConvertToArray.html": {
    "href": "api/Bonsai.Dsp.ConvertToArray.html",
    "title": "Class ConvertToArray",
    "keywords": "Class ConvertToArray Represents an operator that converts each array or collection in the sequence into a managed array. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder ConvertToArray Implements IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [WorkflowElementCategory(ElementCategory.Transform)] public class ConvertToArray : SelectBuilder, IExpressionBuilder Properties | Improve this Doc View Source Depth Gets or sets the bit depth of each element in the input array. Declaration [TypeConverter(typeof(DepthConverter))] public Depth? Depth { get; set; } Property Value Type Description Nullable < Depth > Remarks If this property is not specified, the default depth will be automatically selected based on the type of the input array elements. Methods | Improve this Doc View Source BuildSelector(Expression) Returns the expression that maps the array or collection into a managed array. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that maps the input parameter to the selector result. Overrides SelectBuilder.BuildSelector(Expression) Implements IExpressionBuilder"
  },
  "api/Bonsai.Dsp.ConvertToMat.html": {
    "href": "api/Bonsai.Dsp.ConvertToMat.html",
    "title": "Class ConvertToMat",
    "keywords": "Class ConvertToMat Represents an operator that converts each array-like object in the sequence into a 2D matrix. Inheritance Object ConvertToMat Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class ConvertToMat Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Converts each array-like object in an observable sequence into a 2D matrix. Declaration public IObservable<Mat> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source The sequence of array-like objects to be converted. Returns Type Description IObservable < Mat > A sequence of Mat objects representing the matrix header for the arbitrary array. Type Parameters Name Description TArray The type of the array-like objects in the source sequence."
  },
  "api/Bonsai.Dsp.ConvertToSeq.html": {
    "href": "api/Bonsai.Dsp.ConvertToSeq.html",
    "title": "Class ConvertToSeq",
    "keywords": "Class ConvertToSeq Represents an operator that converts a fixed size array type into a sequence of elements. Inheritance Object ConvertToSeq Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class ConvertToSeq Properties | Improve this Doc View Source Flags Gets or sets the operation flags for the element sequence. Declaration [TypeConverter(typeof(ConvertToSeq.FlagsConverter))] public SequenceFlags Flags { get; set; } Property Value Type Description SequenceFlags Methods | Improve this Doc View Source Process(IObservable<IplImage>) Converts each image in an observable sequence into a growable sequence of elements. Declaration public IObservable<Seq> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source An observable sequence of images to convert into a growable sequence of elements. Returns Type Description IObservable < Seq > A sequence of Seq objects representing the growable sequence header for the image data. | Improve this Doc View Source Process(IObservable<Mat>) Converts each 2D array in an observable sequence into a growable sequence of elements. Declaration public IObservable<Seq> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source An observable sequence of multi-channel matrices to convert into a growable sequence of elements. Returns Type Description IObservable < Seq > A sequence of Seq objects representing the growable sequence header for the multi-channel matrix data. | Improve this Doc View Source Process(IObservable<Point[]>) Converts each fixed size array in an observable sequence into a growable sequence of elements. Declaration public IObservable<Seq> Process(IObservable<Point[]> source) Parameters Type Name Description IObservable < Point []> source An observable sequence of Point arrays to convert into a growable sequence of elements. Returns Type Description IObservable < Seq > A sequence of Seq objects representing the growable sequence header for the array data. | Improve this Doc View Source Process(IObservable<Point2d[]>) Converts each fixed size array in an observable sequence into a growable sequence of elements. Declaration public IObservable<Seq> Process(IObservable<Point2d[]> source) Parameters Type Name Description IObservable < Point2d []> source An observable sequence of Point2d arrays to convert into a growable sequence of elements. Returns Type Description IObservable < Seq > A sequence of Seq objects representing the growable sequence header for the array data. | Improve this Doc View Source Process(IObservable<Point2f[]>) Converts each fixed size array in an observable sequence into a growable sequence of elements. Declaration public IObservable<Seq> Process(IObservable<Point2f[]> source) Parameters Type Name Description IObservable < Point2f []> source An observable sequence of Point2f arrays to convert into a growable sequence of elements. Returns Type Description IObservable < Seq > A sequence of Seq objects representing the growable sequence header for the array data. | Improve this Doc View Source Process(IObservable<Byte[]>) Converts each fixed size array in an observable sequence into a growable sequence of elements. Declaration public IObservable<Seq> Process(IObservable<byte[]> source) Parameters Type Name Description IObservable < Byte []> source An observable sequence of 8-bit unsigned integer arrays to convert into a growable sequence of elements. Returns Type Description IObservable < Seq > A sequence of Seq objects representing the growable sequence header for the array data. | Improve this Doc View Source Process(IObservable<Double[]>) Converts each fixed size array in an observable sequence into a growable sequence of elements. Declaration public IObservable<Seq> Process(IObservable<double[]> source) Parameters Type Name Description IObservable < Double []> source An observable sequence of 64-bit floating-point arrays to convert into a growable sequence of elements. Returns Type Description IObservable < Seq > A sequence of Seq objects representing the growable sequence header for the array data. | Improve this Doc View Source Process(IObservable<Int16[]>) Converts each fixed size array in an observable sequence into a growable sequence of elements. Declaration public IObservable<Seq> Process(IObservable<short[]> source) Parameters Type Name Description IObservable < Int16 []> source An observable sequence of 16-bit signed integer arrays to convert into a growable sequence of elements. Returns Type Description IObservable < Seq > A sequence of Seq objects representing the growable sequence header for the array data. | Improve this Doc View Source Process(IObservable<Int32[]>) Converts each fixed size array in an observable sequence into a growable sequence of elements. Declaration public IObservable<Seq> Process(IObservable<int[]> source) Parameters Type Name Description IObservable < Int32 []> source An observable sequence of 32-bit signed integer arrays to convert into a growable sequence of elements. Returns Type Description IObservable < Seq > A sequence of Seq objects representing the growable sequence header for the array data. | Improve this Doc View Source Process(IObservable<Single[]>) Converts each fixed size array in an observable sequence into a growable sequence of elements. Declaration public IObservable<Seq> Process(IObservable<float[]> source) Parameters Type Name Description IObservable < Single []> source An observable sequence of 32-bit floating-point arrays to convert into a growable sequence of elements. Returns Type Description IObservable < Seq > A sequence of Seq objects representing the growable sequence header for the array data. | Improve this Doc View Source Process(IObservable<UInt16[]>) Converts each fixed size array in an observable sequence into a growable sequence of elements. Declaration public IObservable<Seq> Process(IObservable<ushort[]> source) Parameters Type Name Description IObservable < UInt16 []> source An observable sequence of 16-bit unsigned integer arrays to convert into a growable sequence of elements. Returns Type Description IObservable < Seq > A sequence of Seq objects representing the growable sequence header for the array data."
  },
  "api/Bonsai.Dsp.CountNonZero.html": {
    "href": "api/Bonsai.Dsp.CountNonZero.html",
    "title": "Class CountNonZero",
    "keywords": "Class CountNonZero Represents an operator that counts all the non-zero elements for each array in the sequence. Inheritance Object CountNonZero Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class CountNonZero Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Counts all the non-zero elements for each array in an observable sequence. Declaration public IObservable<int> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source The sequence of array-like objects for which to count non-zero elements. Returns Type Description IObservable < Int32 > A sequence of Int32 values representing the number of non-zero elements in each array. Type Parameters Name Description TArray The type of the array-like objects in the source sequence."
  },
  "api/Bonsai.Dsp.Decimate.html": {
    "href": "api/Bonsai.Dsp.Decimate.html",
    "title": "Class Decimate",
    "keywords": "Class Decimate Represents an operator that decreases the sampling rate of the input signal by the specified factor. Inheritance Object Combinator < Mat , Mat > Decimate Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Decimate : Combinator<Mat, Mat> Constructors | Improve this Doc View Source Decimate() Initializes a new instance of the Decimate class. Declaration public Decimate() Properties | Improve this Doc View Source BufferLength Gets or sets the length of each output array. If set to zero, the length of each input buffer will be used. Declaration public int BufferLength { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Downsampling Gets or sets a value specifying the downsampling method used to decimate the input signal. Declaration public DownsamplingMethod Downsampling { get; set; } Property Value Type Description DownsamplingMethod | Improve this Doc View Source Factor Gets or sets the integral factor by which to divide the sampling rate of the input signal. Declaration public int Factor { get; set; } Property Value Type Description Int32 | Improve this Doc View Source KernelLength Gets or sets the size of the finite-impulse response kernel used to design the downsampling filter. Declaration [TypeConverter(typeof(KernelLengthConverter))] public int KernelLength { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SampleRate Gets or sets the sample rate of the input signal, in Hz. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<Mat>) Decreases the sampling rate of the input signal by the specified factor. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the waveform of the signal to downsample. Returns Type Description IObservable < Mat > A sequence of Mat objects representing the waveform of the downsampled signal. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>)"
  },
  "api/Bonsai.Dsp.Delay.html": {
    "href": "api/Bonsai.Dsp.Delay.html",
    "title": "Class Delay",
    "keywords": "Class Delay Represents an operator that delays the input signal by the specified number of samples. Inheritance Object Combinator < Mat , Mat > Transform < Mat , Mat > Delay Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Delay : Transform<Mat, Mat> Properties | Improve this Doc View Source Count Gets or sets the number of samples by which to delay the input signal. Declaration public int Count { get; set; } Property Value Type Description Int32 Remarks To avoid changing the number of buffers in the sequence, the beginning of the signal will be padded with zeros. Methods | Improve this Doc View Source Process(IObservable<Mat>) Delays the input signal by the specified number of samples. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the waveform of the signal to delay. Returns Type Description IObservable < Mat > A sequence of Mat objects representing the waveform of the delayed signal. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>)"
  },
  "api/Bonsai.Dsp.Design.html": {
    "href": "api/Bonsai.Dsp.Design.html",
    "title": "Namespace Bonsai.Dsp.Design",
    "keywords": "Namespace Bonsai.Dsp.Design Classes MatVisualizer Provides a type visualizer for displaying a matrix as a waveform graph, using either separate or overlaying channels. MatVisualizer<TWaveformView> Provides a base class for displaying data as a waveform graph. SelectChannelEditor Provides a user interface editor that displays a drop-down dialog for selecting multiple channels of the input signal. SpikeThresholdEditor Provides a user interface editor that displays a drop-down dialog for setting spike detection thresholds on individual channels of the input signal. SpikeWaveformCollectionVisualizer Provides a type visualizer that displays a collection of spike waveforms and overlays a specified number of past spike waveforms for each independent channel. SpikeWaveformCollectionVisualizer<TWaveformView> Provides a base class to display a collection of spike waveforms. WaveformView Represents a dynamic waveform oscilloscope style control used to display multi-dimensional matrices where each row represents an independent channel."
  },
  "api/Bonsai.Dsp.Design.MatVisualizer.html": {
    "href": "api/Bonsai.Dsp.Design.MatVisualizer.html",
    "title": "Class MatVisualizer",
    "keywords": "Class MatVisualizer Provides a type visualizer for displaying a matrix as a waveform graph, using either separate or overlaying channels. Inheritance Object DialogTypeVisualizer MatVisualizer < WaveformView > MatVisualizer Inherited Members MatVisualizer<WaveformView>.XMin MatVisualizer<WaveformView>.XMax MatVisualizer<WaveformView>.YMin MatVisualizer<WaveformView>.YMax MatVisualizer<WaveformView>.AutoScaleX MatVisualizer<WaveformView>.AutoScaleY MatVisualizer<WaveformView>.SelectedPage MatVisualizer<WaveformView>.ChannelsPerPage MatVisualizer<WaveformView>.OverlayChannels MatVisualizer<WaveformView>.ChannelOffset MatVisualizer<WaveformView>.HistoryLength MatVisualizer<WaveformView>.WaveformBufferLength MatVisualizer<WaveformView>.SelectedChannels MatVisualizer<WaveformView>.Graph MatVisualizer<WaveformView>.InvalidateGraph() MatVisualizer<WaveformView>.Load(IServiceProvider) MatVisualizer<WaveformView>.Unload() MatVisualizer<WaveformView>.Show(Object) DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp.Design Assembly : Bonsai.Dsp.Design.dll Syntax public class MatVisualizer : MatVisualizer<WaveformView>"
  },
  "api/Bonsai.Dsp.Design.MatVisualizer-1.html": {
    "href": "api/Bonsai.Dsp.Design.MatVisualizer-1.html",
    "title": "Class MatVisualizer<TWaveformView>",
    "keywords": "Class MatVisualizer<TWaveformView> Provides a base class for displaying data as a waveform graph. Inheritance Object DialogTypeVisualizer MatVisualizer<TWaveformView> MatVisualizer SpikeWaveformCollectionVisualizer<TWaveformView> Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp.Design Assembly : Bonsai.Dsp.Design.dll Syntax public class MatVisualizer<TWaveformView> : DialogTypeVisualizer where TWaveformView : WaveformView, new() Type Parameters Name Description TWaveformView A type derived from WaveformView which will control how data is displayed. Properties | Improve this Doc View Source AutoScaleX Gets or sets a value indicating whether to compute the range of the x-axis automatically based on the range of the data that is included in the graph. Declaration public bool AutoScaleX { get; set; } Property Value Type Description Boolean | Improve this Doc View Source AutoScaleY Gets or sets a value indicating whether to compute the range of the y-axis automatically based on the range of the data that is included in the graph. Declaration public bool AutoScaleY { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ChannelOffset Gets or sets a value which will be added to the samples of each channel, proportional to channel index, for the purposes of visualization. Declaration public double ChannelOffset { get; set; } Property Value Type Description Double | Improve this Doc View Source ChannelsPerPage Gets or sets the maximum number of channels which should be included in a single page. Declaration public int ChannelsPerPage { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Graph Gets the graph control used to display the data. Declaration protected TWaveformView Graph { get; } Property Value Type Description TWaveformView | Improve this Doc View Source HistoryLength Gets or sets a value specifying how many previous data buffers to store and display in the graph. Declaration public int HistoryLength { get; set; } Property Value Type Description Int32 Remarks Each buffer can contain multiple samples, which means the total number of samples displayed in the graph will be HistoryLength * BufferLength , where BufferLength is the number of samples per buffer. | Improve this Doc View Source OverlayChannels Gets or sets a value indicating whether to overlay the traces of all the channels in the page into a single waveform graph. If this value is false , channels will be displayed individually in separate graph panes. Declaration public bool OverlayChannels { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SelectedChannels Gets or sets the indices of the channels to display when the visualizer is in overlay mode. Declaration public int[] SelectedChannels { get; set; } Property Value Type Description Int32 [] | Improve this Doc View Source SelectedPage Gets or sets the currently selected channel page. Channels in the currently selected page will be the ones displayed in the graph. Declaration public int SelectedPage { get; set; } Property Value Type Description Int32 | Improve this Doc View Source WaveformBufferLength Gets or sets a value specifying how many previous traces to overlay for each channel. Declaration public int WaveformBufferLength { get; set; } Property Value Type Description Int32 Remarks This allows overlaying historical traces rather than appending them in time. | Improve this Doc View Source XMax Gets or sets the upper bound of the x-axis displayed in the graph. Declaration public double XMax { get; set; } Property Value Type Description Double | Improve this Doc View Source XMin Gets or sets the lower bound of the x-axis displayed in the graph. Declaration public double XMin { get; set; } Property Value Type Description Double | Improve this Doc View Source YMax Gets or sets the upper bound of the y-axis displayed in the graph. Declaration public double YMax { get; set; } Property Value Type Description Double | Improve this Doc View Source YMin Gets or sets the lower bound of the y-axis displayed in the graph. Declaration public double YMin { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source InvalidateGraph() Invalidates the entire graph display at the next data update. This will send a paint message to the graph control. Declaration protected void InvalidateGraph() | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Dsp.Design.SelectChannelEditor.html": {
    "href": "api/Bonsai.Dsp.Design.SelectChannelEditor.html",
    "title": "Class SelectChannelEditor",
    "keywords": "Class SelectChannelEditor Provides a user interface editor that displays a drop-down dialog for selecting multiple channels of the input signal. Inheritance Object UITypeEditor DataSourceTypeEditor SelectChannelEditor Inherited Members DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp.Design Assembly : Bonsai.Dsp.Design.dll Syntax public class SelectChannelEditor : DataSourceTypeEditor Constructors | Improve this Doc View Source SelectChannelEditor() Initializes a new instance of the SelectChannelEditor class. Declaration public SelectChannelEditor() Properties | Improve this Doc View Source IsDropDownResizable Declaration public override bool IsDropDownResizable { get; } Property Value Type Description Boolean Overrides UITypeEditor.IsDropDownResizable Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext)"
  },
  "api/Bonsai.Dsp.Design.SpikeThresholdEditor.html": {
    "href": "api/Bonsai.Dsp.Design.SpikeThresholdEditor.html",
    "title": "Class SpikeThresholdEditor",
    "keywords": "Class SpikeThresholdEditor Provides a user interface editor that displays a drop-down dialog for setting spike detection thresholds on individual channels of the input signal. Inheritance Object UITypeEditor DataSourceTypeEditor SpikeThresholdEditor Inherited Members DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp.Design Assembly : Bonsai.Dsp.Design.dll Syntax public class SpikeThresholdEditor : DataSourceTypeEditor Constructors | Improve this Doc View Source SpikeThresholdEditor() Initializes a new instance of the SpikeThresholdEditor class. Declaration public SpikeThresholdEditor() Properties | Improve this Doc View Source IsDropDownResizable Declaration public override bool IsDropDownResizable { get; } Property Value Type Description Boolean Overrides UITypeEditor.IsDropDownResizable Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext)"
  },
  "api/Bonsai.Dsp.Design.SpikeWaveformCollectionVisualizer.html": {
    "href": "api/Bonsai.Dsp.Design.SpikeWaveformCollectionVisualizer.html",
    "title": "Class SpikeWaveformCollectionVisualizer",
    "keywords": "Class SpikeWaveformCollectionVisualizer Provides a type visualizer that displays a collection of spike waveforms and overlays a specified number of past spike waveforms for each independent channel. Inheritance Object DialogTypeVisualizer MatVisualizer < WaveformView > SpikeWaveformCollectionVisualizer < WaveformView > SpikeWaveformCollectionVisualizer Inherited Members SpikeWaveformCollectionVisualizer<WaveformView>.Show(Object) MatVisualizer<WaveformView>.XMin MatVisualizer<WaveformView>.XMax MatVisualizer<WaveformView>.YMin MatVisualizer<WaveformView>.YMax MatVisualizer<WaveformView>.AutoScaleX MatVisualizer<WaveformView>.AutoScaleY MatVisualizer<WaveformView>.SelectedPage MatVisualizer<WaveformView>.ChannelsPerPage MatVisualizer<WaveformView>.OverlayChannels MatVisualizer<WaveformView>.ChannelOffset MatVisualizer<WaveformView>.HistoryLength MatVisualizer<WaveformView>.WaveformBufferLength MatVisualizer<WaveformView>.SelectedChannels MatVisualizer<WaveformView>.Graph MatVisualizer<WaveformView>.InvalidateGraph() MatVisualizer<WaveformView>.Load(IServiceProvider) MatVisualizer<WaveformView>.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp.Design Assembly : Bonsai.Dsp.Design.dll Syntax public class SpikeWaveformCollectionVisualizer : SpikeWaveformCollectionVisualizer<WaveformView>"
  },
  "api/Bonsai.Dsp.Design.SpikeWaveformCollectionVisualizer-1.html": {
    "href": "api/Bonsai.Dsp.Design.SpikeWaveformCollectionVisualizer-1.html",
    "title": "Class SpikeWaveformCollectionVisualizer<TWaveformView>",
    "keywords": "Class SpikeWaveformCollectionVisualizer<TWaveformView> Provides a base class to display a collection of spike waveforms. Inheritance Object DialogTypeVisualizer MatVisualizer <TWaveformView> SpikeWaveformCollectionVisualizer<TWaveformView> SpikeWaveformCollectionVisualizer Inherited Members MatVisualizer<TWaveformView>.XMin MatVisualizer<TWaveformView>.XMax MatVisualizer<TWaveformView>.YMin MatVisualizer<TWaveformView>.YMax MatVisualizer<TWaveformView>.AutoScaleX MatVisualizer<TWaveformView>.AutoScaleY MatVisualizer<TWaveformView>.SelectedPage MatVisualizer<TWaveformView>.ChannelsPerPage MatVisualizer<TWaveformView>.OverlayChannels MatVisualizer<TWaveformView>.ChannelOffset MatVisualizer<TWaveformView>.HistoryLength MatVisualizer<TWaveformView>.WaveformBufferLength MatVisualizer<TWaveformView>.SelectedChannels MatVisualizer<TWaveformView>.Graph MatVisualizer<TWaveformView>.InvalidateGraph() MatVisualizer<TWaveformView>.Load(IServiceProvider) MatVisualizer<TWaveformView>.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp.Design Assembly : Bonsai.Dsp.Design.dll Syntax public class SpikeWaveformCollectionVisualizer<TWaveformView> : MatVisualizer<TWaveformView> where TWaveformView : WaveformView, new() Type Parameters Name Description TWaveformView A type derived from WaveformView which will control how data is displayed. Constructors | Improve this Doc View Source SpikeWaveformCollectionVisualizer() Initializes a new instance of the SpikeWaveformCollectionVisualizer class. Declaration public SpikeWaveformCollectionVisualizer() Methods | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides Bonsai.Dsp.Design.MatVisualizer<TWaveformView>.Show(System.Object)"
  },
  "api/Bonsai.Dsp.Design.WaveformView.html": {
    "href": "api/Bonsai.Dsp.Design.WaveformView.html",
    "title": "Class WaveformView",
    "keywords": "Class WaveformView Represents a dynamic waveform oscilloscope style control used to display multi-dimensional matrices where each row represents an independent channel. Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl WaveformView Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members UserControl.ValidateChildren() UserControl.ValidateChildren(ValidationConstraints) UserControl.OnCreateControl() UserControl.OnLoad(EventArgs) UserControl.OnResize(EventArgs) UserControl.OnMouseDown(MouseEventArgs) UserControl.WndProc(Message) UserControl.AutoSize UserControl.AutoSizeMode UserControl.AutoValidate UserControl.BorderStyle UserControl.CreateParams UserControl.DefaultSize UserControl.AutoSizeChanged UserControl.AutoValidateChanged UserControl.Load ContainerControl.IContainerControl.ActivateControl(Control) ContainerControl.AdjustFormScrollbars(Boolean) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnFontChanged(EventArgs) ContainerControl.OnLayout(LayoutEventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.ProcessDialogChar(Char) ContainerControl.ProcessCmdKey(Message, Keys) ContainerControl.ProcessMnemonic(Char) ContainerControl.ProcessTabKey(Boolean) ContainerControl.Select(Boolean, Boolean) ContainerControl.UpdateDefaultButton() ContainerControl.Validate() ContainerControl.Validate(Boolean) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(Int32) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.OnVisibleChanged(EventArgs) ScrollableControl.ScaleControl(SizeF, BoundsSpecified) ScrollableControl.SetDisplayRectLocation(Int32, Int32) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(Int32, Int32) ScrollableControl.SetScrollState(Int32, Boolean) ScrollableControl.AutoScroll ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(Int32) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateControlsInstance() Control.CreateGraphics() Control.CreateHandle() Control.CreateControl() Control.DefWndProc(Message) Control.DestroyHandle() Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Control.GetNextControl(Control, Boolean) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsMnemonic(Char, String) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBackgroundImageChanged(EventArgs) Control.OnBackgroundImageLayoutChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnEnabledChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnTextChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnHandleCreated(EventArgs) Control.OnLocationChanged(EventArgs) Control.OnHandleDestroyed(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.OnEnter(EventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnPaint(PaintEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnStyleChanged(EventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(Message) Control.PreProcessControlMessage(Message) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.ProcessKeyPreview(Message) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetClientSizeCore(Int32, Int32) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.SetVisibleCore(Boolean) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateZOrder() Control.UpdateStyles() Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragDrop(DragEventArgs) Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackColor Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.ClientSize Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Location Control.Margin Control.MaximumSize Control.MinimumSize Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.Size Control.TabIndex Control.TabStop Control.Tag Control.Text Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.DefaultImeMode Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.ToString() Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp.Design Assembly : Bonsai.Dsp.Design.dll Syntax public class WaveformView : UserControl, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Constructors | Improve this Doc View Source WaveformView() Initializes a new instance of the WaveformView class. Declaration public WaveformView() Properties | Improve this Doc View Source AutoScaleX Gets or sets a value indicating whether to compute the range of the x-axis automatically based on the range of the data that is included in the graph. Declaration public bool AutoScaleX { get; set; } Property Value Type Description Boolean | Improve this Doc View Source AutoScaleY Gets or sets a value indicating whether to compute the range of the y-axis automatically based on the range of the data that is included in the graph. Declaration public bool AutoScaleY { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ChannelOffset Gets or sets a value which will be added to the samples of each channel, proportional to channel index, for the purposes of visualization. Declaration public double ChannelOffset { get; set; } Property Value Type Description Double | Improve this Doc View Source ChannelsPerPage Gets or sets the maximum number of channels which should be included in a single page. Declaration public int ChannelsPerPage { get; set; } Property Value Type Description Int32 | Improve this Doc View Source HistoryLength Gets or sets a value specifying how many previous data buffers to store and display in the graph. Declaration public int HistoryLength { get; set; } Property Value Type Description Int32 Remarks Each buffer can contain multiple samples, which means the total number of samples displayed in the graph will be HistoryLength * BufferLength , where BufferLength is the number of samples per buffer. | Improve this Doc View Source OverlayChannels Gets or sets a value indicating whether to overlay the traces of all the channels in the page into a single waveform graph. If this value is false , channels will be displayed individually in separate graph panes. Declaration public bool OverlayChannels { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SelectedChannels Gets a collection of indices to the channels to display when the control is in overlay mode. Declaration public Collection<int> SelectedChannels { get; } Property Value Type Description Collection < Int32 > | Improve this Doc View Source SelectedPage Gets or sets the currently selected channel page. Channels in the currently selected page will be the ones displayed in the graph. Declaration public int SelectedPage { get; set; } Property Value Type Description Int32 | Improve this Doc View Source WaveformBufferLength Gets or sets a value specifying how many previous traces to overlay for each channel. Declaration public int WaveformBufferLength { get; set; } Property Value Type Description Int32 Remarks This allows overlaying historical traces rather than appending them in time. | Improve this Doc View Source XMax Gets or sets the upper bound of the x-axis displayed in the graph. Declaration public double XMax { get; set; } Property Value Type Description Double | Improve this Doc View Source XMin Gets or sets the lower bound of the x-axis displayed in the graph. Declaration public double XMin { get; set; } Property Value Type Description Double | Improve this Doc View Source YMax Gets or sets the upper bound of the y-axis displayed in the graph. Declaration public double YMax { get; set; } Property Value Type Description Double | Improve this Doc View Source YMin Gets or sets the lower bound of the y-axis displayed in the graph. Declaration public double YMin { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Dispose(Boolean) Clean up any resources being used. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if managed resources should be disposed; otherwise, false. Overrides ContainerControl.Dispose(Boolean) | Improve this Doc View Source InvalidateWaveform() Invalidates the entire waveform graph and causes the underlying control to be redrawn. Declaration public void InvalidateWaveform() | Improve this Doc View Source OnAxisChanged(EventArgs) Raises the AxisChanged event. Declaration protected virtual void OnAxisChanged(EventArgs e) Parameters Type Name Description EventArgs e An EventArgs that contains the event data. | Improve this Doc View Source OnSelectedPageChanged(EventArgs) Raises the SelectedPageChanged event. Declaration protected virtual void OnSelectedPageChanged(EventArgs e) Parameters Type Name Description EventArgs e An EventArgs that contains the event data. | Improve this Doc View Source ProcessDialogKey(Keys) Declaration protected override bool ProcessDialogKey(Keys keyData) Parameters Type Name Description Keys keyData Returns Type Description Boolean Overrides ContainerControl.ProcessDialogKey(Keys) Events | Improve this Doc View Source AutoScaleXChanged Occurs when the AutoScaleX property changes. Declaration public event EventHandler AutoScaleXChanged Event Type Type Description EventHandler | Improve this Doc View Source AutoScaleYChanged Occurs when the AutoScaleY property changes. Declaration public event EventHandler AutoScaleYChanged Event Type Type Description EventHandler | Improve this Doc View Source AxisChanged Occurs when the scale ranges of the axes of the waveform view are recalculated. Declaration public event EventHandler AxisChanged Event Type Type Description EventHandler | Improve this Doc View Source SelectedPageChanged Occurs when the SelectedPage property changes. Declaration public event EventHandler SelectedPageChanged Event Type Type Description EventHandler Implements System.Windows.Forms.IDropTarget System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IWin32Window System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.IDisposable System.Windows.Forms.IContainerControl"
  },
  "api/Bonsai.Dsp.DetectSpikes.html": {
    "href": "api/Bonsai.Dsp.DetectSpikes.html",
    "title": "Class DetectSpikes",
    "keywords": "Class DetectSpikes Represents an operator that detects spike events in the input signal and extracts their waveforms. Inheritance Object Combinator < Mat , SpikeWaveformCollection > DetectSpikes Inherited Members Combinator<Mat, SpikeWaveformCollection>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [WorkflowElementCategory(ElementCategory.Transform)] public class DetectSpikes : Combinator<Mat, SpikeWaveformCollection> Properties | Improve this Doc View Source Delay Gets or sets the delay of each spike waveform from its trigger, in samples. Declaration public int Delay { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Length Gets or sets the length of each spike waveform, in samples. Declaration public int Length { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Threshold Gets or sets the per-channel threshold for detecting individual spikes. Declaration [TypeConverter(typeof(UnidimensionalArrayConverter))] public double[] Threshold { get; set; } Property Value Type Description Double [] | Improve this Doc View Source WaveformRefinement Gets or sets a value specifying the waveform refinement method. Declaration public SpikeWaveformRefinement WaveformRefinement { get; set; } Property Value Type Description SpikeWaveformRefinement Methods | Improve this Doc View Source Process(IObservable<Mat>) Detects spike events in the input signal and extracts their waveforms. Declaration public override IObservable<SpikeWaveformCollection> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the waveform of the signal from which to extract spike waveforms. Returns Type Description IObservable < SpikeWaveformCollection > A sequence of SpikeWaveformCollection representing the spikes detected in each buffer of the signal waveform. Overrides Bonsai.Combinator<OpenCV.Net.Mat, Bonsai.Dsp.SpikeWaveformCollection>.Process(System.IObservable<OpenCV.Net.Mat>)"
  },
  "api/Bonsai.Dsp.Difference.html": {
    "href": "api/Bonsai.Dsp.Difference.html",
    "title": "Class Difference",
    "keywords": "Class Difference Represents an operator that calculates the Nth difference between adjacent samples in the input signal. Inheritance Object Combinator < Mat , Mat > Transform < Mat , Mat > Difference Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Difference : Transform<Mat, Mat> Constructors | Improve this Doc View Source Difference() Initializes a new instance of the Difference class. Declaration public Difference() Properties | Improve this Doc View Source Order Gets or sets the number of times to apply the difference operator. Declaration public int Order { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<Mat>) Calculates the Nth difference between adjacent samples in the input signal. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the waveform of the signal for which to compute the difference between adjacent samples. Returns Type Description IObservable < Mat > A sequence of Mat objects representing the differences between adjacent samples in the input signal. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>) | Improve this Doc View Source Process(IObservable<Point2f>) Calculates the Nth difference between adjacent values in an observable sequence. Declaration public IObservable<Point2f> Process(IObservable<Point2f> source) Parameters Type Name Description IObservable < Point2f > source A sequence of 2D points with single-precision floating-point coordinates. Returns Type Description IObservable < Point2f > A sequence of 2D vectors representing the differences between adjacent points in the original sequence. | Improve this Doc View Source Process(IObservable<Double>) Calculates the Nth difference between adjacent values in an observable sequence. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of floating-point numbers. Returns Type Description IObservable < Double > A sequence of floating-point numbers representing the differences between adjacent values in the original sequence."
  },
  "api/Bonsai.Dsp.DiscreteFourierTransform.html": {
    "href": "api/Bonsai.Dsp.DiscreteFourierTransform.html",
    "title": "Class DiscreteFourierTransform",
    "keywords": "Class DiscreteFourierTransform Represents an operator that performs a forward or inverse discrete Fourier transform on each 1D or 2D array in the sequence. Inheritance Object ArrayTransform DiscreteFourierTransform Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class DiscreteFourierTransform : ArrayTransform Properties | Improve this Doc View Source OperationFlags Gets or sets a value specifying the operation of the discrete Fourier transform. Declaration public DiscreteTransformFlags OperationFlags { get; set; } Property Value Type Description DiscreteTransformFlags Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Performs a forward or inverse discrete Fourier transform on each 1D or 2D array in an observable sequence. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source The sequence of array-like objects for which to compute the discrete Fourier transform. Returns Type Description IObservable <TArray> A sequence of two-channel array of complex numbers representing the discrete Fourier transform of each array in the input sequence. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>)"
  },
  "api/Bonsai.Dsp.DownsamplingMethod.html": {
    "href": "api/Bonsai.Dsp.DownsamplingMethod.html",
    "title": "Enum DownsamplingMethod",
    "keywords": "Enum DownsamplingMethod Specifies the downsampling method used to decimate digital signals. Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public enum DownsamplingMethod Fields Name Description Avg The downsampled signal will keep the average of every M samples, where M is the integral factor in Factor . Dithering The downsampled signal will keep a random sample out of every M samples, where M is the integral factor in Factor . LowPass A low-pass filter will be applied to the signal before downsampling. Max The downsampled signal will keep the largest of every M samples, where M is the integral factor in Factor . Min The downsampled signal will keep the smallest of every M samples, where M is the integral factor in Factor . None No preprocessing will be used before decimating the signal. The downsampled signal will keep only every Mth sample, where M is the integral factor in Factor . Sum The downsampled signal will keep the sum of every M samples, where M is the integral factor in Factor ."
  },
  "api/Bonsai.Dsp.Exp.html": {
    "href": "api/Bonsai.Dsp.Exp.html",
    "title": "Class Exp",
    "keywords": "Class Exp Represents an operator that calculates the exponent of every element in the sequence. Inheritance Object ArrayTransform Exp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Exp : ArrayTransform Methods | Improve this Doc View Source Process(IObservable<Double>) Calculates the exponent of each 64-bit floating-point number in the sequence. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of 64-bit floating-point numbers. Returns Type Description IObservable < Double > A sequence of 64-bit floating-point numbers, where each value represents e raised to the corresponding power. See Exp(Double) . | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Calculates the exponent of individual elements for all arrays in the sequence. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of multi-channel array values. Returns Type Description IObservable <TArray> A sequence of multi-channel array values, where each element of the array represents e raised to the corresponding power. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>)"
  },
  "api/Bonsai.Dsp.Extrema.html": {
    "href": "api/Bonsai.Dsp.Extrema.html",
    "title": "Class Extrema",
    "keywords": "Class Extrema Represents an operator that finds the global minimum and maximum of each array in the sequence. Inheritance Object Extrema Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Extrema Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Finds the global minimum and maximum of each array in an observable sequence. Declaration public IObservable<ArrayExtrema> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of multi-channel array values. Returns Type Description IObservable < ArrayExtrema > A sequence of ArrayExtrema values, representing the minimum and maximum of the 2D array, and their corresponding locations. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. | Improve this Doc View Source Process<TArray, TMask>(IObservable<Tuple<TArray, TMask>>) Finds the global minimum and maximum of each array in an observable sequence, where each array is paired with a mask where non-zero values indicate which elements in the array should be considered when computing the extrema. Declaration public IObservable<ArrayExtrema> Process<TArray, TMask>(IObservable<Tuple<TArray, TMask>> source) where TArray : Arr where TMask : Arr Parameters Type Name Description IObservable < Tuple <TArray, TMask>> source A sequence of array pairs, where the first array contains the elements over which to find the global minimum and maximum, and the second array contains the operation mask, where non-zero values indicate which elements in the first array should be considered, and which should be ignored, in the computation. Returns Type Description IObservable < ArrayExtrema > A sequence of ArrayExtrema values, representing the minimum and maximum of the 2D array, and their corresponding locations. Type Parameters Name Description TArray The type of the array-like objects over which to find the extrema. TMask The type of the array-like objects used as an operation mask."
  },
  "api/Bonsai.Dsp.FilterType.html": {
    "href": "api/Bonsai.Dsp.FilterType.html",
    "title": "Enum FilterType",
    "keywords": "Enum FilterType Specifies the type of digital pass filter to apply on a signal. Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public enum FilterType Fields Name Description BandPass A band-pass filter rejects frequencies outside the specified frequency range, i.e. frequencies below the first cutoff frequency and above the second cutoff frequency are rejected. BandStop A band-stop filter rejects frequencies within the specified frequency range, i.e. frequencies between the first cutoff frequency and the second cutoff frequency are rejected. HighPass A high-pass filter rejects frequencies below the cutoff frequency. LowPass A low-pass filter rejects frequencies above the cutoff frequency."
  },
  "api/Bonsai.Dsp.FirFilter.html": {
    "href": "api/Bonsai.Dsp.FirFilter.html",
    "title": "Class FirFilter",
    "keywords": "Class FirFilter Represents an operator that convolves the input signal with a finite-impulse response filter kernel. Inheritance Object Combinator < Mat , Mat > Transform < Mat , Mat > FirFilter Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class FirFilter : Transform<Mat, Mat> Properties | Improve this Doc View Source Anchor Gets or sets the anchor of the kernel that indicates the relative position of a filtered point within the kernel. Declaration public int Anchor { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Kernel Gets or sets the convolution kernel for the FIR filter. Declaration [TypeConverter(typeof(UnidimensionalArrayConverter))] public float[] Kernel { get; set; } Property Value Type Description Single [] | Improve this Doc View Source KernelXml Gets or sets an XML representation of the kernel value for serialization. Declaration [Browsable(false)] public string KernelXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<Mat>) Convolves the input signal with a finite-impulse response filter kernel. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the waveform of the signal to filter. Returns Type Description IObservable < Mat > A sequence of Mat objects representing the waveform of the filtered signal. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>) | Improve this Doc View Source Process(IObservable<Point2f>) Convolves the input position signal with a finite-impulse response filter kernel. Declaration public IObservable<Point2f> Process(IObservable<Point2f> source) Parameters Type Name Description IObservable < Point2f > source A sequence of 2D points representing the position signal to filter. Returns Type Description IObservable < Point2f > A sequence of 2D points representing the filtered position signal. | Improve this Doc View Source Process(IObservable<Double>) Convolves the input signal with a finite-impulse response filter kernel. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of floating-point numbers representing the waveform of the signal to filter. Returns Type Description IObservable < Double > A sequence of floating-point numbers representing the waveform of the filtered signal."
  },
  "api/Bonsai.Dsp.FrequencyFilter.html": {
    "href": "api/Bonsai.Dsp.FrequencyFilter.html",
    "title": "Class FrequencyFilter",
    "keywords": "Class FrequencyFilter Represents an operator that filters frequencies in the input signal using a linear phase filter with the specified design parameters. Inheritance Object Combinator < Mat , Mat > Transform < Mat , Mat > FrequencyFilter Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class FrequencyFilter : Transform<Mat, Mat> Properties | Improve this Doc View Source Cutoff1 Gets or sets the first cutoff frequency, in Hz, applied to the input signal. Declaration public double Cutoff1 { get; set; } Property Value Type Description Double | Improve this Doc View Source Cutoff2 Gets or sets the second cutoff frequency, in Hz, applied to the input signal. Declaration public double Cutoff2 { get; set; } Property Value Type Description Double | Improve this Doc View Source FilterType Gets or sets a value specifying the type of filter to apply on the signal. Declaration public FilterType FilterType { get; set; } Property Value Type Description FilterType | Improve this Doc View Source KernelLength Gets or sets the size of the finite-impulse response kernel used to design the linear filter. Declaration [TypeConverter(typeof(KernelLengthConverter))] public int KernelLength { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SampleRate Gets or sets the sample rate of the input signal, in Hz. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<Mat>) Filters frequencies in the input signal using a linear phase filter with the specified design parameters. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the waveform of the signal to filter. Returns Type Description IObservable < Mat > A sequence of Mat objects representing the waveform of the filtered signal. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>) | Improve this Doc View Source Process(IObservable<Double>) Filters frequencies in the input signal using a linear phase filter with the specified design parameters. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of floating-point numbers representing the waveform of the signal to filter. Returns Type Description IObservable < Double > A sequence of floating-point numbers representing the waveform of the filtered signal."
  },
  "api/Bonsai.Dsp.FunctionGenerator.html": {
    "href": "api/Bonsai.Dsp.FunctionGenerator.html",
    "title": "Class FunctionGenerator",
    "keywords": "Class FunctionGenerator Represents an operator that generates signal waveforms following any of a set of common periodic functions. Inheritance Object Source < Mat > FunctionGenerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class FunctionGenerator : Source<Mat> Properties | Improve this Doc View Source Amplitude Gets or sets the amplitude of the signal waveform. Declaration public double Amplitude { get; set; } Property Value Type Description Double | Improve this Doc View Source BufferLength Gets or sets the number of samples in each output buffer. Declaration public int BufferLength { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Depth Gets or sets the bit depth of each element in an output buffer. Declaration [TypeConverter(typeof(DepthConverter))] public Depth? Depth { get; set; } Property Value Type Description Nullable < Depth > Remarks If this property is not specified, the bit depth of output buffers will be F64 . | Improve this Doc View Source DepthSpecified Gets a value indicating whether the Depth property should be serialized. Declaration [Browsable(false)] public bool DepthSpecified { get; } Property Value Type Description Boolean | Improve this Doc View Source Frequency Gets or sets the frequency of the signal waveform, in Hz. Declaration [Range(1, 2147483647)] public double Frequency { get; set; } Property Value Type Description Double | Improve this Doc View Source Offset Gets or sets the optional DC-offset of the signal waveform. Declaration public double Offset { get; set; } Property Value Type Description Double | Improve this Doc View Source Phase Gets or sets the optional phase offset, in radians, of the signal waveform. Declaration [Range(-3.1415926535897931, 3.1415926535897931)] public double Phase { get; set; } Property Value Type Description Double | Improve this Doc View Source SampleRate Gets or sets the sampling rate of the generated signal waveform, in Hz. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Waveform Gets or sets a value specifying the periodic waveform used to sample the signal. Declaration public FunctionWaveform Waveform { get; set; } Property Value Type Description FunctionWaveform Methods | Improve this Doc View Source Generate() Generates an observable sequence of buffers sampled from a signal waveform following the specified periodic function. Declaration public override IObservable<Mat> Generate() Returns Type Description IObservable < Mat > A sequence of Mat objects representing signal sampling buffers of a fixed length. See BufferLength . Overrides Bonsai.Source<OpenCV.Net.Mat>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of buffers sampled from a signal waveform following the specified periodic function, and where each new buffer is emitted only when an observable sequence emits a notification. Declaration public IObservable<Mat> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting signal buffers. Returns Type Description IObservable < Mat > A sequence of Mat objects representing signal sampling buffers of a fixed length. See BufferLength . Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Dsp.FunctionWaveform.html": {
    "href": "api/Bonsai.Dsp.FunctionWaveform.html",
    "title": "Enum FunctionWaveform",
    "keywords": "Enum FunctionWaveform Specifies the periodic function used to generate a signal waveform. Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public enum FunctionWaveform Fields Name Description Sawtooth A periodic, non-symmetric and piecewise linear waveform in which the amplitude moves linearly between the fixed minimum and maximum values, and then drops sharply from the maximum back to the minimum value. Sine A sine wave describing a smooth periodic oscillation. Square A periodic waveform in which the amplitude alternates between fixed minimum and maximum values. Triangular A periodic, piecewise linear waveform in which the amplitude moves between fixed minimum and maximum values following a triangular shape."
  },
  "api/Bonsai.Dsp.Histogram1D.html": {
    "href": "api/Bonsai.Dsp.Histogram1D.html",
    "title": "Class Histogram1D",
    "keywords": "Class Histogram1D Represents an operator that computes a sequence of one-dimensional histograms from each element in the sequence. Inheritance Object Histogram1D Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Histogram1D Properties | Improve this Doc View Source Accumulate Gets or sets a value specifying whether the histogram should be continuously updated. Declaration public bool Accumulate { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Bins Gets or sets the number of bins in the histogram. Declaration public int Bins { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Max Gets or sets the upper range of the histogram bins. Declaration public float Max { get; set; } Property Value Type Description Single | Improve this Doc View Source Min Gets or sets the lower range of the histogram bins. Declaration public float Min { get; set; } Property Value Type Description Single | Improve this Doc View Source Normalize Gets or sets a value specifying whether the histogram should be normalized such that the sum of bins adds up to one. Declaration public bool Normalize { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Process(IObservable<Single>) Computes an observable sequence of one-dimensional histograms from each element in the source sequence. Declaration public IObservable<Mat> Process(IObservable<float> source) Parameters Type Name Description IObservable < Single > source A sequence of 32-bit floating-point numbers used to calculate the one-dimensional histogram. Returns Type Description IObservable < Mat > A sequence of Mat objects representing the one-dimensional histogram calculated from the values in the source sequence. | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Computes an observable sequence of one-dimensional histograms from each element in the source sequence. Declaration public IObservable<Mat> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of array values used to calculate the one-dimensional histogram. Returns Type Description IObservable < Mat > A sequence of Mat objects representing the one-dimensional histogram calculated from the array values in the source sequence. Type Parameters Name Description TArray The type of the array-like objects in the source sequence."
  },
  "api/Bonsai.Dsp.Histogram2D.html": {
    "href": "api/Bonsai.Dsp.Histogram2D.html",
    "title": "Class Histogram2D",
    "keywords": "Class Histogram2D Represents an operator that computes a sequence of two-dimensional histograms from each element in the sequence. Inheritance Object Histogram2D Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Histogram2D Properties | Improve this Doc View Source Accumulate Gets or sets a value specifying whether the histogram should be continuously updated. Declaration public bool Accumulate { get; set; } Property Value Type Description Boolean | Improve this Doc View Source BinsX Gets or sets the number of bins in the horizontal dimension of the histogram. Declaration public int BinsX { get; set; } Property Value Type Description Int32 | Improve this Doc View Source BinsY Gets or sets the number of bins in the vertical dimension of the histogram. Declaration public int BinsY { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MaxX Gets or sets the upper range of the histogram bins in the horizontal dimension. Declaration public float MaxX { get; set; } Property Value Type Description Single | Improve this Doc View Source MaxY Gets or sets the upper range of the histogram bins in the vertical dimension. Declaration public float MaxY { get; set; } Property Value Type Description Single | Improve this Doc View Source MinX Gets or sets the lower range of the histogram bins in the horizontal dimension. Declaration public float MinX { get; set; } Property Value Type Description Single | Improve this Doc View Source MinY Gets or sets the lower range of the histogram bins in the vertical dimension. Declaration public float MinY { get; set; } Property Value Type Description Single | Improve this Doc View Source Normalize Gets or sets a value specifying whether the histogram should be normalized such that the sum of bins adds up to one. Declaration public bool Normalize { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Process(IObservable<Mat>) Computes a sequence of two-dimensional histograms from an observable sequence of multi-channel arrays of point coordinates. Declaration public IObservable<IplImage> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of two-channel arrays, or single-channel arrays with two rows, where the different elements in an array represent the horizontal and vertical dimensions used to calculate the two-dimensional histogram. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the two-dimensional histogram calculated from the values in the source sequence. | Improve this Doc View Source Process(IObservable<Point>) Computes a sequence of two-dimensional histograms from an observable sequence of 2D points with integer coordinates. Declaration public IObservable<IplImage> Process(IObservable<Point> source) Parameters Type Name Description IObservable < Point > source A sequence of 2D points with integer coordinates used to calculate the two-dimensional histogram. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the two-dimensional histogram calculated from the values in the source sequence. | Improve this Doc View Source Process(IObservable<Point2f>) Computes a sequence of two-dimensional histograms from an observable sequence of 2D points with single-precision floating-point coordinates. Declaration public IObservable<IplImage> Process(IObservable<Point2f> source) Parameters Type Name Description IObservable < Point2f > source A sequence of 2D points with single-precision floating-point coordinates used to calculate the two-dimensional histogram. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the two-dimensional histogram calculated from the values in the source sequence. | Improve this Doc View Source Process(IObservable<Tuple<Int32, Int32>>) Computes a sequence of two-dimensional histograms from an observable sequence of pairs of integer coordinates. Declaration public IObservable<IplImage> Process(IObservable<Tuple<int, int>> source) Parameters Type Name Description IObservable < Tuple < Int32 , Int32 >> source A sequence of pairs of integer coordinates used to calculate the two-dimensional histogram. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the two-dimensional histogram calculated from the values in the source sequence. | Improve this Doc View Source Process(IObservable<Tuple<Single, Single>>) Computes a sequence of two-dimensional histograms from an observable sequence of pairs of single-precision floating-point coordinates. Declaration public IObservable<IplImage> Process(IObservable<Tuple<float, float>> source) Parameters Type Name Description IObservable < Tuple < Single , Single >> source A sequence of pairs of single-precision floating-point coordinates used to calculate the two-dimensional histogram. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the two-dimensional histogram calculated from the values in the source sequence. | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray>>) Computes a sequence of two-dimensional histograms from an observable sequence of pairs of one-dimensional arrays of coordinates. Declaration public IObservable<IplImage> Process<TArray>(IObservable<Tuple<TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray>> source A sequence of pairs of one-dimensional arrays, where each array represents respectively the horizontal and vertical dimensions used to calculate the two-dimensional histogram. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the two-dimensional histogram calculated from the values in the source sequence. Type Parameters Name Description TArray The type of the array-like objects in the source sequence."
  },
  "api/Bonsai.Dsp.html": {
    "href": "api/Bonsai.Dsp.html",
    "title": "Namespace Bonsai.Dsp",
    "keywords": "Namespace Bonsai.Dsp Classes Abs Represents an operator that calculates the absolute value of each element in the sequence. AbsoluteDifference Represents an operator that calculates the absolute difference between all pairs of arrays in the sequence. Accumulate Represents an operator that calculates the cumulative sum of the arrays in a sequence and returns each intermediate result. ArrayTransform Provides an abstract base class for operators that transform sequences of array-like objects. Average Represents an operator that calculates the average, or arithmetic mean, of each channel for all the arrays in the sequence. BinaryArrayTransform Provides an abstract base class for operators that perform a binary transformation on pairs of array-like objects in an observable sequence. BitBuffer Represents an operator that demultiplexes individual bits of all the elements in a sequence into separate rows of a 2D array. Buffer Represents an operator that collects each element of the sequence into zero or more array buffers based on element count information. Butterworth Represents an operator that filters frequencies in the input signal using a Butterworth infinite-impulse response filter with the specified design parameters. CartToPolar Represents an operator that computes the magnitude and angle of each array of 2D vectors in the sequence. Concat Represents an operator that concatenates each set of arrays in the sequence into a single buffer. ConvertFromArray Represents an operator that converts each managed array in the sequence into a 2D array buffer with the specified size, depth and number of channels. ConvertScale Represents an operator that converts each array in the sequence to the specified bit depth, with optional linear transformation. ConvertToArray Represents an operator that converts each array or collection in the sequence into a managed array. ConvertToMat Represents an operator that converts each array-like object in the sequence into a 2D matrix. ConvertToSeq Represents an operator that converts a fixed size array type into a sequence of elements. CountNonZero Represents an operator that counts all the non-zero elements for each array in the sequence. Decimate Represents an operator that decreases the sampling rate of the input signal by the specified factor. Delay Represents an operator that delays the input signal by the specified number of samples. DetectSpikes Represents an operator that detects spike events in the input signal and extracts their waveforms. Difference Represents an operator that calculates the Nth difference between adjacent samples in the input signal. DiscreteFourierTransform Represents an operator that performs a forward or inverse discrete Fourier transform on each 1D or 2D array in the sequence. Exp Represents an operator that calculates the exponent of every element in the sequence. Extrema Represents an operator that finds the global minimum and maximum of each array in the sequence. FirFilter Represents an operator that convolves the input signal with a finite-impulse response filter kernel. FrequencyFilter Represents an operator that filters frequencies in the input signal using a linear phase filter with the specified design parameters. FunctionGenerator Represents an operator that generates signal waveforms following any of a set of common periodic functions. Histogram1D Represents an operator that computes a sequence of one-dimensional histograms from each element in the sequence. Histogram2D Represents an operator that computes a sequence of two-dimensional histograms from each element in the sequence. IirFilter Represents an operator that filters the input signal using an infinite-impulse response. IncrementalMean Represents an operator that incrementally computes the mean of the arrays in the sequence and returns each intermediate result. Log Represents an operator that calculates the natural logarithm of the absolute value of every element in the sequence. Magnitude Represents an operator that calculates the magnitude of 2D vector elements in the sequence. MatchTemplate Represents an operator that compares a template against overlapping regions of each array in the sequence. MatConverter Provides a type converter to convert two-dimensional Mat objects to and from various other representations. MatrixReader Represents an operator that generates a sequence of signal sample buffers from the specified raw binary input stream. MatrixWriter Represents an operator that writes each array-like object in the sequence to a raw binary output stream. Merge Represents an operator that merges each set of arrays in the sequence into a single multi-channel array. Norm Represents an operator that calculates the absolute array norm, absolute difference norm, or relative difference norm for each array in the sequence. Phase Represents an operator that calculates the phase of 2D vector elements in the sequence. PolarToCart Represents an operator that computes the cartesian coordinates of 2D vectors represented in polar form. Pow Represents an operator that raises every element in the sequence to the specified power. Range Represents an operator that generates a sequence of buffers filled with a specified range of numbers. RasterSpikes Represents an operator that rasterizes a sequence of spike waveforms into sample buffers where spike timepoints are the only non-zero values. Reduce Represents an operator that reduces every array in the sequence to a 1D vector using the specified operation. ReferenceChannels Represents an operator that subtracts a reference channel from all the individual rows in a 2D array sequence. Rescale Represents an operator that rescales each element in the sequence to a new range following the specified linear relationship. Reshape Represents an operator that changes the shape of each array in the sequence without copying data. RunningAverage Represents an operator that computes the running average of all the arrays in the sequence. ScalarBuffer Represents an operator that generates a sequence with a single buffer where all elements are set to the same scalar value. SelectChannels Represents an operator that selects a subset of the input channels or reorganizes channel layout for each array in the sequence. Shift Represents an operator that shifts the elements of each array in the sequence by a specified offset. Skip Represents an operator that skips a specified number of samples in the input signal. Slice Represents an operator that splits each array in the sequence into multiple sub-arrays along the specified dimension. SpikeWaveform Represents a single spike event extracted from an input signal. SpikeWaveformCollection Represents a collection of spike waveforms detected by the DetectSpikes operator. Split Represents an operator that splits the channels of each array in the sequence into separate arrays. Submatrix Represents an operator that extracts a submatrix from each array in the sequence. Sum Represents an operator that calculates the sum of each channel for all the arrays in the sequence. Threshold Represents an operator that applies a fixed threshold to each element in the sequence. Tile Represents an operator that replicates each array in the sequence along the horizontal or vertical dimensions. Transpose Represents an operator that transposes every array in the sequence. TriggeredBuffer Represents an operator that extracts a number of samples from the input signal whenever a trigger rises. Structs ArrayExtrema Represents the minimum and maximum values of a 2D array, and their corresponding locations. Enums DownsamplingMethod Specifies the downsampling method used to decimate digital signals. FilterType Specifies the type of digital pass filter to apply on a signal. FunctionWaveform Specifies the periodic function used to generate a signal waveform. MatrixLayout Specifies how to store the elements of a multi-channel array or matrix in sequential memory. RescaleMethod Specifies the method used to rescale values in the Rescale operator. SpikeWaveformRefinement Specifies the spike waveform refinement method used in the DetectSpikes operator."
  },
  "api/Bonsai.Dsp.IirFilter.html": {
    "href": "api/Bonsai.Dsp.IirFilter.html",
    "title": "Class IirFilter",
    "keywords": "Class IirFilter Represents an operator that filters the input signal using an infinite-impulse response. Inheritance Object Combinator < Mat , Mat > Transform < Mat , Mat > IirFilter Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class IirFilter : Transform<Mat, Mat> Properties | Improve this Doc View Source FeedbackCoefficients Gets or sets the feedback filter coefficients for the infinite-impulse response. Declaration [TypeConverter(typeof(UnidimensionalArrayConverter))] public double[] FeedbackCoefficients { get; set; } Property Value Type Description Double [] | Improve this Doc View Source FeedbackCoefficientsXml Gets or sets an XML representation of the feedback coefficients for serialization. Declaration [Browsable(false)] public string FeedbackCoefficientsXml { get; set; } Property Value Type Description String | Improve this Doc View Source FeedforwardCoefficients Gets or sets the feedforward filter coefficients for the infinite-impulse response. Declaration [TypeConverter(typeof(UnidimensionalArrayConverter))] public double[] FeedforwardCoefficients { get; set; } Property Value Type Description Double [] | Improve this Doc View Source FeedforwardCoefficientsXml Gets or sets an XML representation of the feedforward coefficients for serialization. Declaration [Browsable(false)] public string FeedforwardCoefficientsXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<Mat>) Filters the input signal using the specified infinite-impulse response. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the waveform of the signal to filter. Returns Type Description IObservable < Mat > A sequence of Mat objects representing the waveform of the filtered signal. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>) | Improve this Doc View Source Process(IObservable<Point2f>) Filters the input position signal using the specified infinite-impulse response. Declaration public IObservable<Point2f> Process(IObservable<Point2f> source) Parameters Type Name Description IObservable < Point2f > source A sequence of 2D points representing the position signal to filter. Returns Type Description IObservable < Point2f > A sequence of 2D points representing the filtered position signal. | Improve this Doc View Source Process(IObservable<Double>) Filters the input signal using the specified infinite-impulse response. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of floating-point numbers representing the waveform of the signal to filter. Returns Type Description IObservable < Double > A sequence of floating-point numbers representing the waveform of the filtered signal."
  },
  "api/Bonsai.Dsp.IncrementalMean.html": {
    "href": "api/Bonsai.Dsp.IncrementalMean.html",
    "title": "Class IncrementalMean",
    "keywords": "Class IncrementalMean Represents an operator that incrementally computes the mean of the arrays in the sequence and returns each intermediate result. Inheritance Object ArrayTransform IncrementalMean Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class IncrementalMean : ArrayTransform Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Incrementally computes the mean of the arrays in an observable sequence and returns each intermediate result. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of multi-channel array values. Returns Type Description IObservable <TArray> A sequence of multi-channel array values, where each array stores the incremental mean of all previous array values in the source sequence. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>)"
  },
  "api/Bonsai.Dsp.Log.html": {
    "href": "api/Bonsai.Dsp.Log.html",
    "title": "Class Log",
    "keywords": "Class Log Represents an operator that calculates the natural logarithm of the absolute value of every element in the sequence. Inheritance Object ArrayTransform Log Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Log : ArrayTransform Methods | Improve this Doc View Source Process(IObservable<Double>) Calculates the natural logarithm of each 64-bit floating-point number in the sequence. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of 64-bit floating-point numbers. Returns Type Description IObservable < Double > A sequence of 64-bit floating-point numbers, where each value represents the natural logarithm of the corresponding number in the source sequence. See Log(Double) . | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Calculates the natural logarithm of the absolute value of every element for each array in the sequence. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of multi-channel array values. Returns Type Description IObservable <TArray> A sequence of multi-channel array values, where each element of the array represents the natural logarithm of the corresponding element in the source sequence. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>)"
  },
  "api/Bonsai.Dsp.Magnitude.html": {
    "href": "api/Bonsai.Dsp.Magnitude.html",
    "title": "Class Magnitude",
    "keywords": "Class Magnitude Represents an operator that calculates the magnitude of 2D vector elements in the sequence. Inheritance Object ArrayTransform Magnitude Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Magnitude : ArrayTransform Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Calculates the magnitude of 2D vector elements in an observable sequence. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of two-channel arrays where each element represents a 2D vector. Returns Type Description IObservable <TArray> A sequence of single-channel arrays where each element represents the magnitude of the corresponding 2D vector. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>) | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray>>) Calculates the magnitude of pairs of one-dimensional arrays in an observable sequence, where each pair represents a 2D vector element. Declaration public IObservable<TArray> Process<TArray>(IObservable<Tuple<TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray>> source Returns Type Description IObservable <TArray> A sequence of single-channel arrays where each element represents the magnitude of the corresponding 2D vector. Type Parameters Name Description TArray The type of the array-like objects in the source sequence."
  },
  "api/Bonsai.Dsp.MatchTemplate.html": {
    "href": "api/Bonsai.Dsp.MatchTemplate.html",
    "title": "Class MatchTemplate",
    "keywords": "Class MatchTemplate Represents an operator that compares a template against overlapping regions of each array in the sequence. Inheritance Object MatchTemplate Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class MatchTemplate Properties | Improve this Doc View Source MatchingMethod Gets or sets a value specifying the method used to compare the template with overlapping array regions. Declaration public TemplateMatchingMethod MatchingMethod { get; set; } Property Value Type Description TemplateMatchingMethod Methods | Improve this Doc View Source Process<TArray, TTemplate>(IObservable<Tuple<TArray, TTemplate>>) Compares a template against overlapping regions of each array in an observable sequence. Declaration public IObservable<TArray> Process<TArray, TTemplate>(IObservable<Tuple<TArray, TTemplate>> source) where TArray : Arr where TTemplate : Arr Parameters Type Name Description IObservable < Tuple <TArray, TTemplate>> source A sequence of pairs of multi-channel arrays representing respectively the values and the template used to compute the map of comparison results. Returns Type Description IObservable <TArray> A single-channel array of 32-bit floating-point values representing a map of the comparison results for each overlapping region. Type Parameters Name Description TArray The type of the array-like objects to compare with the template. TTemplate The type of the array-like objects representing the template to compare against arrays in the sequence."
  },
  "api/Bonsai.Dsp.MatConverter.html": {
    "href": "api/Bonsai.Dsp.MatConverter.html",
    "title": "Class MatConverter",
    "keywords": "Class MatConverter Provides a type converter to convert two-dimensional Mat objects to and from various other representations. Inheritance Object TypeConverter MatConverter Inherited Members TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class MatConverter : TypeConverter Methods | Improve this Doc View Source CanConvertFrom(ITypeDescriptorContext, Type) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context. Declaration public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Type sourceType A Type that represents the type you want to convert from. Returns Type Description Boolean true if this converter can perform the conversion; otherwise, false . Overrides TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type) | Improve this Doc View Source ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) Converts the given object to the type of this converter, using the specified context and culture information. Declaration public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture The CultureInfo to use as the current culture. Object value The Object to convert. Returns Type Description Object An Object that represents the converted value. Overrides TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) | Improve this Doc View Source ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) Converts the given value object to the specified type, using the specified context and culture information. Declaration public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture A CultureInfo . If null is passed, the current culture is assumed. Object value The Object to convert. Type destinationType The Type to convert the value parameter to. Returns Type Description Object An Object that represents the converted value. Overrides TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)"
  },
  "api/Bonsai.Dsp.MatrixLayout.html": {
    "href": "api/Bonsai.Dsp.MatrixLayout.html",
    "title": "Enum MatrixLayout",
    "keywords": "Enum MatrixLayout Specifies how to store the elements of a multi-channel array or matrix in sequential memory. Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public enum MatrixLayout Fields Name Description ColumnMajor The elements in each column of the matrix will be contiguous in memory. RowMajor The elements in each row of the matrix will be contiguous in memory."
  },
  "api/Bonsai.Dsp.MatrixReader.html": {
    "href": "api/Bonsai.Dsp.MatrixReader.html",
    "title": "Class MatrixReader",
    "keywords": "Class MatrixReader Represents an operator that generates a sequence of signal sample buffers from the specified raw binary input stream. Inheritance Object Source < Mat > MatrixReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class MatrixReader : Source<Mat> Properties | Improve this Doc View Source BufferLength Gets or sets the number of samples in each output buffer. Declaration public int BufferLength { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ChannelCount Gets or sets the number of channels in the stored signal. Declaration public int ChannelCount { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Depth Gets or sets the bit depth of each element in an output buffer. Declaration public Depth Depth { get; set; } Property Value Type Description Depth | Improve this Doc View Source Layout Gets or sets a value specifying the sequential memory layout used to store the sample buffers. Declaration public MatrixLayout Layout { get; set; } Property Value Type Description MatrixLayout | Improve this Doc View Source Offset Gets or sets the byte offset at which to start reading the raw binary file. Declaration public long Offset { get; set; } Property Value Type Description Int64 | Improve this Doc View Source Path Gets or sets the identifier of the named stream from which to read the samples. Declaration public string Path { get; set; } Property Value Type Description String Remarks If the identifier uses the named pipe prefix \\.\\pipe</code>, a corresponding NamedPipeClientStream object is created; otherwise a regular FileStream is used. | Improve this Doc View Source SampleRate Gets or sets the sample rate of the stored signal, in Hz. Declaration public int SampleRate { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Generate() Generates an observable sequence of signal sample buffers from the specified raw binary input stream. Declaration public override IObservable<Mat> Generate() Returns Type Description IObservable < Mat > A sequence of Mat objects representing fixed-size buffers of samples from the signal stored in the specified file. Overrides Bonsai.Source<OpenCV.Net.Mat>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of signal sample buffers from the specified raw binary input stream, where each new buffer is emitted only when an observable sequence emits a notification. Declaration public IObservable<Mat> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting sample buffers. Returns Type Description IObservable < Mat > A sequence of Mat objects representing fixed-size buffers of samples from the signal stored in the specified file. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Dsp.MatrixWriter.html": {
    "href": "api/Bonsai.Dsp.MatrixWriter.html",
    "title": "Class MatrixWriter",
    "keywords": "Class MatrixWriter Represents an operator that writes each array-like object in the sequence to a raw binary output stream. Inheritance Object StreamSink StreamSink < ArraySegment < Byte >, BinaryWriter > MatrixWriter Inherited Members StreamSink<ArraySegment<Byte>, BinaryWriter>.CreateWriter(Stream) StreamSink<ArraySegment<Byte>, BinaryWriter>.Write(BinaryWriter, ArraySegment<Byte>) StreamSink<ArraySegment<Byte>, BinaryWriter>.Process<TElement>(IObservable<TElement>, Func<TElement, ArraySegment<Byte>>) StreamSink<ArraySegment<Byte>, BinaryWriter>.Process(IObservable<ArraySegment<Byte>>) StreamSink.Path StreamSink.Suffix StreamSink.Overwrite Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class MatrixWriter : StreamSink<ArraySegment<byte>, BinaryWriter> Properties | Improve this Doc View Source Layout Gets or sets a value specifying the sequential memory layout used to store the sample buffers. Declaration public MatrixLayout Layout { get; set; } Property Value Type Description MatrixLayout Methods | Improve this Doc View Source CreateWriter(Stream) Creates a binary writer over the specified Stream . Declaration protected override BinaryWriter CreateWriter(Stream stream) Parameters Type Name Description Stream stream The stream on which the elements should be written. Returns Type Description BinaryWriter A BinaryWriter object used to write binary array data into the stream. Overrides Bonsai.IO.StreamSink<System.ArraySegment<System.Byte>, System.IO.BinaryWriter>.CreateWriter(System.IO.Stream) | Improve this Doc View Source Process(IObservable<Mat>) Writes all multi-channel matrices in an observable sequence to the specified raw binary output stream. Declaration public IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source The sequence of multi-channel matrices to write. Returns Type Description IObservable < Mat > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the matrices to a stream. | Improve this Doc View Source Process(IObservable<Byte[]>) Writes all of the Byte arrays in an observable sequence to the specified raw binary output stream. Declaration public IObservable<byte[]> Process(IObservable<byte[]> source) Parameters Type Name Description IObservable < Byte []> source The sequence of Byte arrays to write. Returns Type Description IObservable < Byte []> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the arrays to a stream. | Improve this Doc View Source Process<TElement>(IObservable<TElement[]>) Writes all of the arrays in an observable sequence to the specified raw binary output stream. Declaration public IObservable<TElement[]> Process<TElement>(IObservable<TElement[]> source) where TElement : struct Parameters Type Name Description IObservable <TElement[]> source The sequence of arrays to write. The elements stored in each array must be of an unmanaged type. Returns Type Description IObservable <TElement[]> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the arrays to a stream. Type Parameters Name Description TElement | Improve this Doc View Source Write(BinaryWriter, ArraySegment<Byte>) Writes a new array to the raw binary output stream. Declaration protected override void Write(BinaryWriter writer, ArraySegment<byte> input) Parameters Type Name Description BinaryWriter writer A BinaryWriter object used to write binary array data to the output stream. ArraySegment < Byte > input The array segment containing the binary data to write into the output stream. Overrides Bonsai.IO.StreamSink<System.ArraySegment<System.Byte>, System.IO.BinaryWriter>.Write(System.IO.BinaryWriter, System.ArraySegment<System.Byte>)"
  },
  "api/Bonsai.Dsp.Merge.html": {
    "href": "api/Bonsai.Dsp.Merge.html",
    "title": "Class Merge",
    "keywords": "Class Merge Represents an operator that merges each set of arrays in the sequence into a single multi-channel array. Inheritance Object Merge Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Merge Methods | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray, TArray, TArray>>) Merges each tuple of arrays in the sequence into a single multi-channel array. Declaration public IObservable<TArray> Process<TArray>(IObservable<Tuple<TArray, TArray, TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray, TArray, TArray>> source A sequence of tuples of arrays to merge into a single multi-channel array. Returns Type Description IObservable <TArray> The sequence of merged multi-channel arrays. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray, TArray>>) Merges each triple of arrays in the sequence into a single multi-channel array. Declaration public IObservable<TArray> Process<TArray>(IObservable<Tuple<TArray, TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray, TArray>> source A sequence of triples of arrays to merge into a single multi-channel array. Returns Type Description IObservable <TArray> The sequence of merged multi-channel arrays. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray>>) Merges each pair of arrays in the sequence into a single multi-channel array. Declaration public IObservable<TArray> Process<TArray>(IObservable<Tuple<TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray>> source A sequence of pairs of arrays to merge into a single multi-channel array. Returns Type Description IObservable <TArray> The sequence of merged multi-channel arrays. Type Parameters Name Description TArray The type of the array-like objects in the source sequence."
  },
  "api/Bonsai.Dsp.Norm.html": {
    "href": "api/Bonsai.Dsp.Norm.html",
    "title": "Class Norm",
    "keywords": "Class Norm Represents an operator that calculates the absolute array norm, absolute difference norm, or relative difference norm for each array in the sequence. Inheritance Object Norm Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Norm Properties | Improve this Doc View Source NormType Gets or sets the type of array norm to calculate. Declaration public NormTypes NormType { get; set; } Property Value Type Description NormTypes Methods | Improve this Doc View Source Process(IObservable<Point>) Calculates the absolute norm for each 2D point in an observable sequence. Declaration public IObservable<double> Process(IObservable<Point> source) Parameters Type Name Description IObservable < Point > source A sequence of 2D points with integer coordinates for which to calculate the norm. Returns Type Description IObservable < Double > A sequence containing the absolute norm for each point in the source sequence. | Improve this Doc View Source Process(IObservable<Point2d>) Calculates the absolute norm for each 2D point in an observable sequence. Declaration public IObservable<double> Process(IObservable<Point2d> source) Parameters Type Name Description IObservable < Point2d > source A sequence of 2D points with double-precision floating-point coordinates for which to calculate the norm. Returns Type Description IObservable < Double > A sequence containing the absolute norm for each point in the source sequence. | Improve this Doc View Source Process(IObservable<Point2f>) Calculates the absolute norm for each 2D point in an observable sequence. Declaration public IObservable<double> Process(IObservable<Point2f> source) Parameters Type Name Description IObservable < Point2f > source A sequence of 2D points with single-precision floating-point coordinates for which to calculate the norm. Returns Type Description IObservable < Double > A sequence containing the absolute norm for each point in the source sequence. | Improve this Doc View Source Process(IObservable<Point3d>) Calculates the absolute norm for each 3D point in an observable sequence. Declaration public IObservable<double> Process(IObservable<Point3d> source) Parameters Type Name Description IObservable < Point3d > source A sequence of 3D points with double-precision floating-point coordinates for which to calculate the norm. Returns Type Description IObservable < Double > A sequence containing the absolute norm for each point in the source sequence. | Improve this Doc View Source Process(IObservable<Point3f>) Calculates the absolute norm for each 3D point in an observable sequence. Declaration public IObservable<double> Process(IObservable<Point3f> source) Parameters Type Name Description IObservable < Point3f > source A sequence of 3D points with single-precision floating-point coordinates for which to calculate the norm. Returns Type Description IObservable < Double > A sequence containing the absolute norm for each point in the source sequence. | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Calculates the absolute array norm for each array in an observable sequence. Declaration public IObservable<double> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of multi-dimensional arrays for which to calculate the norm. Returns Type Description IObservable < Double > A sequence containing the absolute norm for each array in the source sequence. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. | Improve this Doc View Source Process<TArray1, TArray2>(IObservable<Tuple<TArray1, TArray2>>) Calculates the absolute difference norm, or relative difference norm, between each pair of arrays in an observable sequence. Declaration public IObservable<double> Process<TArray1, TArray2>(IObservable<Tuple<TArray1, TArray2>> source) where TArray1 : Arr where TArray2 : Arr Parameters Type Name Description IObservable < Tuple <TArray1, TArray2>> source A sequence of pairs of multi-dimensional arrays for which to calculate the absolute difference norm or relative difference norm. Returns Type Description IObservable < Double > A sequence containing the absolute difference norm, or relative difference norm, between each pair of arrays in the source sequence. Type Parameters Name Description TArray1 The type of the first array-like object. TArray2 The type of the second array-like object. | Improve this Doc View Source Process<TArray1, TArray2, TMask>(IObservable<Tuple<TArray1, TArray2, TMask>>) Calculates the absolute difference norm, or relative difference norm, between each pair of arrays in an observable sequence with an additional operation mask. Declaration public IObservable<double> Process<TArray1, TArray2, TMask>(IObservable<Tuple<TArray1, TArray2, TMask>> source) where TArray1 : Arr where TArray2 : Arr where TMask : Arr Parameters Type Name Description IObservable < Tuple <TArray1, TArray2, TMask>> source A sequence of pairs of multi-dimensional arrays for which to calculate the absolute difference norm or relative difference norm, for elements in which the operation mask is non-zero. Returns Type Description IObservable < Double > A sequence containing the absolute difference norm, or relative difference norm, between each pair of arrays in the source sequence, for elements in which the operation mask is non-zero. Type Parameters Name Description TArray1 The type of the first array-like object. TArray2 The type of the second array-like object. TMask The type of the array-like objects used in the operation mask."
  },
  "api/Bonsai.Dsp.Phase.html": {
    "href": "api/Bonsai.Dsp.Phase.html",
    "title": "Class Phase",
    "keywords": "Class Phase Represents an operator that calculates the phase of 2D vector elements in the sequence. Inheritance Object ArrayTransform Phase Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Phase : ArrayTransform Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Calculates the phase of 2D vector elements in an observable sequence. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of two-channel arrays where each element represents a 2D vector. Returns Type Description IObservable <TArray> A sequence of single-channel arrays where each element represents the phase of the corresponding 2D vector. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>) | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray>>) Calculates the phase of pairs of one-dimensional arrays in an observable sequence, where each pair represents a 2D vector element. Declaration public IObservable<TArray> Process<TArray>(IObservable<Tuple<TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray>> source Returns Type Description IObservable <TArray> A sequence of single-channel arrays where each element represents the phase of the corresponding 2D vector. Type Parameters Name Description TArray The type of the array-like objects in the source sequence."
  },
  "api/Bonsai.Dsp.PolarToCart.html": {
    "href": "api/Bonsai.Dsp.PolarToCart.html",
    "title": "Class PolarToCart",
    "keywords": "Class PolarToCart Represents an operator that computes the cartesian coordinates of 2D vectors represented in polar form. Inheritance Object ArrayTransform PolarToCart Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class PolarToCart : ArrayTransform Properties | Improve this Doc View Source AngleInDegrees Gets or sets a value specifying whether vector angle values are measured in degrees. Declaration public bool AngleInDegrees { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Process(IObservable<Point2d>) Computes the cartesian coordinates for each pair of polar coordinates in the sequence. Declaration public IObservable<Point2d> Process(IObservable<Point2d> source) Parameters Type Name Description IObservable < Point2d > source A sequence of points in double-precision polar coordinates, where the first coordinate stores the magnitude, and the second coordinate the angle of a vector for which to compute the cartesian coordinates. Returns Type Description IObservable < Point2d > A sequence of 2D points with double-precision cartesian coordinates. | Improve this Doc View Source Process(IObservable<Point2f>) Computes the cartesian coordinates for each pair of polar coordinates in the sequence. Declaration public IObservable<Point2f> Process(IObservable<Point2f> source) Parameters Type Name Description IObservable < Point2f > source A sequence of points in single-precision polar coordinates, where the first coordinate stores the magnitude, and the second coordinate the angle of a vector for which to compute the cartesian coordinates. Returns Type Description IObservable < Point2f > A sequence of 2D points with single-precision cartesian coordinates. | Improve this Doc View Source Process(IObservable<Tuple<Double, Double>>) Computes the cartesian coordinates for each pair of polar coordinates in the sequence. Declaration public IObservable<Tuple<double, double>> Process(IObservable<Tuple<double, double>> source) Parameters Type Name Description IObservable < Tuple < Double , Double >> source A sequence of pairs specifying double-precision polar coordinates, where the first coordinate stores the magnitude, and the second coordinate the angle of a vector for which to compute the cartesian coordinates. Returns Type Description IObservable < Tuple < Double , Double >> A sequence of pairs specifying double-precision cartesian coordinates, where the first item stores the x-coordinate, and the second item the y-coordinate of a 2D vector. | Improve this Doc View Source Process(IObservable<Tuple<Single, Single>>) Computes the cartesian coordinates for each pair of polar coordinates in the sequence. Declaration public IObservable<Tuple<float, float>> Process(IObservable<Tuple<float, float>> source) Parameters Type Name Description IObservable < Tuple < Single , Single >> source A sequence of pairs specifying single-precision polar coordinates, where the first coordinate stores the magnitude, and the second coordinate the angle of a vector for which to compute the cartesian coordinates. Returns Type Description IObservable < Tuple < Single , Single >> A sequence of pairs specifying single-precision cartesian coordinates, where the first item stores the x-coordinate, and the second item the y-coordinate of a 2D vector. | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Computes the cartesian coordinates for each array of vectors in polar form in the sequence. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of 2D vector fields represented by a 2-channel array or image, for which to compute the cartesian coordinates. Returns Type Description IObservable <TArray> A sequence of 2-channel arrays or images, where the first channel of each element stores the x-coordinates and the second channel the y-coordinates of a 2D vector. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>) | Improve this Doc View Source Process<TArray>(IObservable<Tuple<TArray, TArray>>) Computes the cartesian coordinates for each pair of polar coordinates in the sequence. Declaration public IObservable<Tuple<TArray, TArray>> Process<TArray>(IObservable<Tuple<TArray, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple <TArray, TArray>> source A sequence of pairs of arrays, where the first array stores the magnitude, and the second array the angle of a 2D vector field for which to compute the cartesian coordinates. Returns Type Description IObservable < Tuple <TArray, TArray>> A sequence of pairs of arrays, where the first array stores the x-coordinates, and the second array the y-coordinates of a 2D vector. Type Parameters Name Description TArray The type of the array-like objects in the source sequence."
  },
  "api/Bonsai.Dsp.Pow.html": {
    "href": "api/Bonsai.Dsp.Pow.html",
    "title": "Class Pow",
    "keywords": "Class Pow Represents an operator that raises every element in the sequence to the specified power. Inheritance Object ArrayTransform Pow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Pow : ArrayTransform Properties | Improve this Doc View Source Power Gets or sets the specified power. Declaration public double Power { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Process(IObservable<Double>) Raises every 64-bit floating-point number in an observable sequence to the specified power. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of 64-bit floating-point numbers. Returns Type Description IObservable < Double > A sequence of 64-bit floating-point numbers, where each value represents a number raised to the specified power. See Pow(Double, Double) . | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Raises every individual element for all arrays in an observable sequence to the specified power. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of multi-channel array values. Returns Type Description IObservable <TArray> A sequence of multi-channel array values, where each element of the array represents a value raised to the specified power. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>)"
  },
  "api/Bonsai.Dsp.Range.html": {
    "href": "api/Bonsai.Dsp.Range.html",
    "title": "Class Range",
    "keywords": "Class Range Represents an operator that generates a sequence of buffers filled with a specified range of numbers. Inheritance Object Source < Mat > Range Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Range : Source<Mat> Properties | Improve this Doc View Source BufferLength Gets or sets the number of samples in each output buffer. Declaration public int BufferLength { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Depth Gets or sets the bit depth of each element in the output buffer. Declaration [TypeConverter(typeof(Range.DepthConverter))] public Depth Depth { get; set; } Property Value Type Description Depth | Improve this Doc View Source End Gets or sets the exclusive upper bound of the range. Declaration public double End { get; set; } Property Value Type Description Double | Improve this Doc View Source Start Gets or sets the inclusive lower bound of the range. Declaration public double Start { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Generate() Generates an observable sequence of buffers filled with a specified range of numbers. Declaration public override IObservable<Mat> Generate() Returns Type Description IObservable < Mat > A sequence of Mat objects representing fixed-size buffers linearly filled with values between the inclusive lower bound and exclusive upper bound. Overrides Bonsai.Source<OpenCV.Net.Mat>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of buffers filled with a specified range of numbers, and where each new buffer is emitted only when an observable sequence emits a notification. Declaration public IObservable<Mat> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting sample buffers. Returns Type Description IObservable < Mat > A sequence of Mat objects representing fixed-size buffers linearly filled with values between the inclusive lower bound and exclusive upper bound. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Dsp.RasterSpikes.html": {
    "href": "api/Bonsai.Dsp.RasterSpikes.html",
    "title": "Class RasterSpikes",
    "keywords": "Class RasterSpikes Represents an operator that rasterizes a sequence of spike waveforms into sample buffers where spike timepoints are the only non-zero values. Inheritance Object Combinator < SpikeWaveformCollection , Mat > Transform < SpikeWaveformCollection , Mat > RasterSpikes Inherited Members Combinator<SpikeWaveformCollection, Mat>.Process(IObservable<SpikeWaveformCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class RasterSpikes : Transform<SpikeWaveformCollection, Mat> Methods | Improve this Doc View Source Process(IObservable<SpikeWaveformCollection>) Rasterizes an observable sequence of spike waveforms into sample buffers where spike timepoints are the only non-zero values. Declaration public override IObservable<Mat> Process(IObservable<SpikeWaveformCollection> source) Parameters Type Name Description IObservable < SpikeWaveformCollection > source A sequence of SpikeWaveformCollection objects representing all detected spike events in each continuous signal buffer. Returns Type Description IObservable < Mat > A sequence of Mat objects representing continuous sample buffers in which only indices where spikes were detected will have non-zero values. Overrides Bonsai.Combinator<Bonsai.Dsp.SpikeWaveformCollection, OpenCV.Net.Mat>.Process(System.IObservable<Bonsai.Dsp.SpikeWaveformCollection>)"
  },
  "api/Bonsai.Dsp.Reduce.html": {
    "href": "api/Bonsai.Dsp.Reduce.html",
    "title": "Class Reduce",
    "keywords": "Class Reduce Represents an operator that reduces every array in the sequence to a 1D vector using the specified operation. Inheritance Object ArrayTransform Reduce Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Reduce : ArrayTransform Properties | Improve this Doc View Source Axis Gets or sets the dimension along which to reduce the array. Declaration public int Axis { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Operation Gets or sets a value specifying the reduction operation to be applied. Declaration public ReduceOperation Operation { get; set; } Property Value Type Description ReduceOperation Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Reduces every array in an observable sequence to a 1D vector using the specified operation. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of multi-channel array values. Returns Type Description IObservable <TArray> A sequence of 1D vector arrays storing the results of the reduction operation. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>)"
  },
  "api/Bonsai.Dsp.ReferenceChannels.html": {
    "href": "api/Bonsai.Dsp.ReferenceChannels.html",
    "title": "Class ReferenceChannels",
    "keywords": "Class ReferenceChannels Represents an operator that subtracts a reference channel from all the individual rows in a 2D array sequence. Inheritance Object Combinator < Mat , Mat > Transform < Mat , Mat > ReferenceChannels Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class ReferenceChannels : Transform<Mat, Mat> Properties | Improve this Doc View Source Channels Gets or sets the indices of the channels to use as reference. If not specified, the average of all the array channels is used. Declaration [TypeConverter(typeof(UnidimensionalArrayConverter))] public int[] Channels { get; set; } Property Value Type Description Int32 [] Methods | Improve this Doc View Source Process(IObservable<Mat>) Subtracts a reference channel from all the individual rows in an observable sequence of 2D array values. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of 2D array values. Returns Type Description IObservable < Mat > A sequence of 2D array values, where the reference channel for each array has been subtracted from every row. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>)"
  },
  "api/Bonsai.Dsp.Rescale.html": {
    "href": "api/Bonsai.Dsp.Rescale.html",
    "title": "Class Rescale",
    "keywords": "Class Rescale Represents an operator that rescales each element in the sequence to a new range following the specified linear relationship. Inheritance Object ArrayTransform Rescale Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Rescale : ArrayTransform Properties | Improve this Doc View Source Max Gets or sets the upper bound of the range of values in the input sequence. Declaration public double Max { get; set; } Property Value Type Description Double | Improve this Doc View Source Min Gets or sets the lower bound of the range of values in the input sequence. Declaration public double Min { get; set; } Property Value Type Description Double | Improve this Doc View Source RangeMax Gets or sets the upper bound of the range of values after the rescale operation. Declaration public double RangeMax { get; set; } Property Value Type Description Double | Improve this Doc View Source RangeMin Gets or sets the lower bound of the range of values after the rescale operation. Declaration public double RangeMin { get; set; } Property Value Type Description Double | Improve this Doc View Source RescaleType Gets or sets a value specifying the method used to rescale the values in the input sequence. Declaration public RescaleMethod RescaleType { get; set; } Property Value Type Description RescaleMethod Methods | Improve this Doc View Source Process(IObservable<Double>) Rescales every 64-bit floating-point number in an observable sequence to a new range following the specified linear relationship. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of 64-bit floating-point numbers. Returns Type Description IObservable < Double > A sequence of 64-bit floating-point numbers, where each value has been rescaled following the specified linear relationship. | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Rescales every individual element for all arrays in an observable sequence to a new range following the specified linear relationship. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of multi-channel array values. Returns Type Description IObservable <TArray> A sequence of multi-channel array values, where each element of the array has been rescaled following the specified linear relationship. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>)"
  },
  "api/Bonsai.Dsp.RescaleMethod.html": {
    "href": "api/Bonsai.Dsp.RescaleMethod.html",
    "title": "Enum RescaleMethod",
    "keywords": "Enum RescaleMethod Specifies the method used to rescale values in the Rescale operator. Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public enum RescaleMethod Fields Name Description Clamp Values outside the specified range are clamped to the lower or upper bounds of the output range. Linear Values outside the specified range are extrapolated linearly."
  },
  "api/Bonsai.Dsp.Reshape.html": {
    "href": "api/Bonsai.Dsp.Reshape.html",
    "title": "Class Reshape",
    "keywords": "Class Reshape Represents an operator that changes the shape of each array in the sequence without copying data. Inheritance Object Reshape Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Reshape Properties | Improve this Doc View Source Channels Gets or sets the new number of channels. Zero means the number of channels will not change. Declaration public int Channels { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Rows Gets or sets the new number of rows. Zero means the number of rows will not change. Declaration public int Rows { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<IplImage>) Changes the shape of each image in an observable sequence without copying data. Declaration public IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to be reshaped. Returns Type Description IObservable < IplImage > The sequence of reshaped images. | Improve this Doc View Source Process(IObservable<Mat>) Changes the shape of each matrix in an observable sequence without copying data. Declaration public IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source The sequence of multi-channel matrices to be reshaped. Returns Type Description IObservable < Mat > The sequence of reshaped multi-channel matrices."
  },
  "api/Bonsai.Dsp.RunningAverage.html": {
    "href": "api/Bonsai.Dsp.RunningAverage.html",
    "title": "Class RunningAverage",
    "keywords": "Class RunningAverage Represents an operator that computes the running average of all the arrays in the sequence. Inheritance Object ArrayTransform RunningAverage Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class RunningAverage : ArrayTransform Properties | Improve this Doc View Source Alpha Gets or sets the weight to assign to each new array in the sequence. This parameter determines how fast the average forgets previous values. Declaration [Range(0, 1)] public double Alpha { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Computes the running average of all the arrays in an observable sequence. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of multi-channel array values. Returns Type Description IObservable <TArray> A sequence of multi-channel arrays, where each element represents the weighted sum of the corresponding input value and the accumulated average. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>)"
  },
  "api/Bonsai.Dsp.ScalarBuffer.html": {
    "href": "api/Bonsai.Dsp.ScalarBuffer.html",
    "title": "Class ScalarBuffer",
    "keywords": "Class ScalarBuffer Represents an operator that generates a sequence with a single buffer where all elements are set to the same scalar value. Inheritance Object Source < Mat > ScalarBuffer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class ScalarBuffer : Source<Mat> Properties | Improve this Doc View Source Channels Gets or sets the number of channels in the output buffer. Declaration public int Channels { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Depth Gets or sets the bit depth of each element in the output buffer. Declaration public Depth Depth { get; set; } Property Value Type Description Depth | Improve this Doc View Source Size Gets or sets the size of the output buffer. Declaration public Size Size { get; set; } Property Value Type Description Size | Improve this Doc View Source Value Gets or sets the scalar value to which all elements in the output buffer will be set to. Declaration public Scalar Value { get; set; } Property Value Type Description Scalar Methods | Improve this Doc View Source Generate() Generates an observable sequence with a single buffer where all elements are set to the same scalar value. Declaration public override IObservable<Mat> Generate() Returns Type Description IObservable < Mat > A sequence with a single Mat object with the specified element type and where all the elements are set to the same scalar value. Overrides Bonsai.Source<OpenCV.Net.Mat>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of buffers where all elements are set to the same scalar value, and where each new buffer is emitted only when an observable sequence emits a notification. Declaration public IObservable<Mat> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new buffers. Returns Type Description IObservable < Mat > A sequence of Mat objects with the specified element type and where all the elements are set to the same scalar value. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Dsp.SelectChannels.html": {
    "href": "api/Bonsai.Dsp.SelectChannels.html",
    "title": "Class SelectChannels",
    "keywords": "Class SelectChannels Represents an operator that selects a subset of the input channels or reorganizes channel layout for each array in the sequence. Inheritance Object Combinator < Mat , Mat > Transform < Mat , Mat > SelectChannels Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class SelectChannels : Transform<Mat, Mat> Properties | Improve this Doc View Source Channels Gets or sets the indices of the channels to include in the output buffer. Reordering and duplicating channels is allowed. Declaration [TypeConverter(typeof(UnidimensionalArrayConverter))] public int[] Channels { get; set; } Property Value Type Description Int32 [] Methods | Improve this Doc View Source Process(IObservable<Mat>) Selects a subset of the input channels or reorganizes channel layout for each array in an observable sequence. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of 2D array values. Returns Type Description IObservable < Mat > A sequence of 2D array values, where the data for each row is selected from the specified channels of the original multi-dimensional data. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>)"
  },
  "api/Bonsai.Dsp.Shift.html": {
    "href": "api/Bonsai.Dsp.Shift.html",
    "title": "Class Shift",
    "keywords": "Class Shift Represents an operator that shifts the elements of each array in the sequence by a specified offset. Inheritance Object Combinator < Mat , Mat > Transform < Mat , Mat > Shift Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Shift : Transform<Mat, Mat> Properties | Improve this Doc View Source BorderType Gets or sets a value specifying the method used to generate values on the border of the shift. Declaration public IplBorder BorderType { get; set; } Property Value Type Description IplBorder | Improve this Doc View Source FillValue Gets or sets the value to which constant border pixels will be set to. Declaration public Scalar FillValue { get; set; } Property Value Type Description Scalar | Improve this Doc View Source Offset Gets or sets the offset by which to shift the input buffer in the horizontal and vertical direction. Declaration public Point Offset { get; set; } Property Value Type Description Point Methods | Improve this Doc View Source Process(IObservable<IplImage>) Shifts the elements of each image in an observable sequence by a specified offset. Declaration public IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source A sequence of image values. Returns Type Description IObservable < IplImage > A sequence of image values, where the elements in each image are shifted by the specified offset in the horizontal and vertical direction. | Improve this Doc View Source Process(IObservable<Mat>) Shifts the elements of each matrix in an observable sequence by a specified offset. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of 2D matrix values. Returns Type Description IObservable < Mat > A sequence of 2D matrix values, where the elements in each matrix are shifted by the specified offset in the horizontal and vertical direction. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>)"
  },
  "api/Bonsai.Dsp.Skip.html": {
    "href": "api/Bonsai.Dsp.Skip.html",
    "title": "Class Skip",
    "keywords": "Class Skip Represents an operator that skips a specified number of samples in the input signal. Inheritance Object Combinator < Mat , Mat > Skip Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Skip : Combinator<Mat, Mat> Properties | Improve this Doc View Source Count Gets or sets the number of samples to skip. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<Mat>) Skips a specified number of samples in the input signal. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing buffers of samples from the source signal. Returns Type Description IObservable < Mat > A sequence of Mat objects representing buffers of samples from the source signal, but where a specified number of samples has been removed from the start of the sequence. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>)"
  },
  "api/Bonsai.Dsp.Slice.html": {
    "href": "api/Bonsai.Dsp.Slice.html",
    "title": "Class Slice",
    "keywords": "Class Slice Represents an operator that splits each array in the sequence into multiple sub-arrays along the specified dimension. Inheritance Object Slice Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] public class Slice Properties | Improve this Doc View Source Axis Gets or sets the dimension along which to slice the array. Declaration public int Axis { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Count Gets or sets the number of elements in each slice. Declaration public int Count { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Skip Gets or sets the number of elements to skip between the creation of each slice. If it is not specified, it will be set to the number of elements in each slice. Declaration public int? Skip { get; set; } Property Value Type Description Nullable < Int32 > Methods | Improve this Doc View Source Process(IObservable<IplImage>) Splits each image in an observable sequence into multiple sub-images along the specified dimension. Declaration public IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source A sequence of image values. Returns Type Description IObservable < IplImage > A sequence of image values, where each image represents a slice of the original image, along the specified direction, with the specified number of elements. Remarks If Count is smaller than the size of the images, this operator will return multiple sub-images for each image in the source sequence. | Improve this Doc View Source Process(IObservable<Mat>) Splits each matrix in an observable sequence into multiple sub-matrices along the specified dimension. Declaration public IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of 2D matrix values. Returns Type Description IObservable < Mat > A sequence of 2D matrix values, where each matrix represents a slice of the original matrix, along the specified direction, with the specified number of elements. Remarks If Count is smaller than the size of the matrices, this operator will return multiple sub-matrices for each matrix in the source sequence."
  },
  "api/Bonsai.Dsp.SpikeWaveform.html": {
    "href": "api/Bonsai.Dsp.SpikeWaveform.html",
    "title": "Class SpikeWaveform",
    "keywords": "Class SpikeWaveform Represents a single spike event extracted from an input signal. Inheritance Object SpikeWaveform Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class SpikeWaveform Properties | Improve this Doc View Source ChannelIndex Gets or sets a value indicating in which channel the spike event was detected. Declaration public int ChannelIndex { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SampleIndex Gets or sets a value indicating in which sample the spike event was detected. Declaration public long SampleIndex { get; set; } Property Value Type Description Int64 | Improve this Doc View Source Waveform Gets or sets the optional waveform of the spike event. Declaration public Mat Waveform { get; set; } Property Value Type Description Mat"
  },
  "api/Bonsai.Dsp.SpikeWaveformCollection.html": {
    "href": "api/Bonsai.Dsp.SpikeWaveformCollection.html",
    "title": "Class SpikeWaveformCollection",
    "keywords": "Class SpikeWaveformCollection Represents a collection of spike waveforms detected by the DetectSpikes operator. Inheritance Object Collection < SpikeWaveform > SpikeWaveformCollection Implements IList < SpikeWaveform > ICollection < SpikeWaveform > IList ICollection IReadOnlyList < SpikeWaveform > IReadOnlyCollection < SpikeWaveform > IEnumerable < SpikeWaveform > IEnumerable Inherited Members Collection<SpikeWaveform>.Add(SpikeWaveform) Collection<SpikeWaveform>.Clear() Collection<SpikeWaveform>.CopyTo(SpikeWaveform[], Int32) Collection<SpikeWaveform>.Contains(SpikeWaveform) Collection<SpikeWaveform>.GetEnumerator() Collection<SpikeWaveform>.IndexOf(SpikeWaveform) Collection<SpikeWaveform>.Insert(Int32, SpikeWaveform) Collection<SpikeWaveform>.Remove(SpikeWaveform) Collection<SpikeWaveform>.RemoveAt(Int32) Collection<SpikeWaveform>.ClearItems() Collection<SpikeWaveform>.InsertItem(Int32, SpikeWaveform) Collection<SpikeWaveform>.RemoveItem(Int32) Collection<SpikeWaveform>.SetItem(Int32, SpikeWaveform) Collection<SpikeWaveform>.IEnumerable.GetEnumerator() Collection<SpikeWaveform>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Dsp.SpikeWaveform>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Dsp.SpikeWaveform>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<SpikeWaveform>.IList.Add(Object) Collection<SpikeWaveform>.IList.Contains(Object) Collection<SpikeWaveform>.IList.IndexOf(Object) Collection<SpikeWaveform>.IList.Insert(Int32, Object) Collection<SpikeWaveform>.IList.Remove(Object) Collection<SpikeWaveform>.Count Collection<SpikeWaveform>.Items Collection<SpikeWaveform>.Item[Int32] Collection<SpikeWaveform>.ICollection<SpikeWaveform>.IsReadOnly Collection<SpikeWaveform>.ICollection.IsSynchronized Collection<SpikeWaveform>.ICollection.SyncRoot Collection<SpikeWaveform>.IList.Item[Int32] Collection<SpikeWaveform>.IList.IsReadOnly Collection<SpikeWaveform>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class SpikeWaveformCollection : Collection<SpikeWaveform>, IList<SpikeWaveform>, ICollection<SpikeWaveform>, IList, ICollection, IReadOnlyList<SpikeWaveform>, IReadOnlyCollection<SpikeWaveform>, IEnumerable<SpikeWaveform>, IEnumerable Constructors | Improve this Doc View Source SpikeWaveformCollection(Size) Initializes a new instance of the SpikeWaveformCollection class with the specified buffer size. Declaration public SpikeWaveformCollection(Size bufferSize) Parameters Type Name Description Size bufferSize The size of the original buffer in which the spikes in this collection were detected. | Improve this Doc View Source SpikeWaveformCollection(IList<SpikeWaveform>, Size) Initializes a new instance of the SpikeWaveformCollection class as a wrapper to the specified list of spikes and buffer size. Declaration public SpikeWaveformCollection(IList<SpikeWaveform> spikes, Size bufferSize) Parameters Type Name Description IList < SpikeWaveform > spikes The list of spikes that is wrapped by the new collection. Size bufferSize The size of the original buffer in which the spikes in the list were detected. Properties | Improve this Doc View Source BufferSize Gets the size of the original buffer in which the spikes in this collection were detected. Declaration public Size BufferSize { get; } Property Value Type Description Size Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Dsp.SpikeWaveformRefinement.html": {
    "href": "api/Bonsai.Dsp.SpikeWaveformRefinement.html",
    "title": "Enum SpikeWaveformRefinement",
    "keywords": "Enum SpikeWaveformRefinement Specifies the spike waveform refinement method used in the DetectSpikes operator. Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public enum SpikeWaveformRefinement Fields Name Description AlignPeaks The waveform is aligned to either the positive or negative peak of the spike. None The waveform is aligned to the first sample crossing the threshold."
  },
  "api/Bonsai.Dsp.Split.html": {
    "href": "api/Bonsai.Dsp.Split.html",
    "title": "Class Split",
    "keywords": "Class Split Represents an operator that splits the channels of each array in the sequence into separate arrays. Inheritance Object Split Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Split Methods | Improve this Doc View Source Process(IObservable<IplImage>) Splits the channels of each image in an observable sequence into separate images. Declaration public IObservable<Tuple<IplImage, IplImage, IplImage, IplImage>> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source A sequence of image values. Returns Type Description IObservable < Tuple < IplImage , IplImage , IplImage , IplImage >> A sequence of tuples of image values, where each image represents a different channel from the original matrix. If the image has less than four channels, the remaining elements in the tuple after the last channel will be set to null . | Improve this Doc View Source Process(IObservable<Mat>) Splits the channels of each matrix in an observable sequence into separate matrices. Declaration public IObservable<Tuple<Mat, Mat, Mat, Mat>> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of 2D matrix values. Returns Type Description IObservable < Tuple < Mat , Mat , Mat , Mat >> A sequence of tuples of 2D matrix values, where each matrix represents a different channel from the original matrix. If the matrix has less than four channels, the remaining elements in the tuple after the last channel will be set to null ."
  },
  "api/Bonsai.Dsp.Submatrix.html": {
    "href": "api/Bonsai.Dsp.Submatrix.html",
    "title": "Class Submatrix",
    "keywords": "Class Submatrix Represents an operator that extracts a submatrix from each array in the sequence. Inheritance Object Combinator < Mat , Mat > Transform < Mat , Mat > Submatrix Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Submatrix : Transform<Mat, Mat> Properties | Improve this Doc View Source EndCol Gets or sets the last column of the submatrix. If it is not specified, the submatrix will end at the last column of the array. Declaration public int? EndCol { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source EndRow Gets or sets the last row of the submatrix. If it is not specified, the submatrix will end at the last row of the array. Declaration public int? EndRow { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source StartCol Gets or sets the first column of the submatrix. Declaration public int StartCol { get; set; } Property Value Type Description Int32 | Improve this Doc View Source StartRow Gets or sets the first row of the submatrix. Declaration public int StartRow { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<Mat>) Extracts a submatrix from each array in an observable sequence. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of 2D matrix values. Returns Type Description IObservable < Mat > A sequence of 2D matrix values, where each matrix stores the range of rows and columns specified by the submatrix. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>)"
  },
  "api/Bonsai.Dsp.Sum.html": {
    "href": "api/Bonsai.Dsp.Sum.html",
    "title": "Class Sum",
    "keywords": "Class Sum Represents an operator that calculates the sum of each channel for all the arrays in the sequence. Inheritance Object Sum Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Sum Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Calculates the sum of each channel for all the arrays in an observable sequence. Declaration public IObservable<Scalar> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of array values for which to calculate the per-channel sum. Returns Type Description IObservable < Scalar > A Scalar tuple containing the sum of each channel for all the arrays in the source sequence. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Remarks For multi-channel images using BGR, RGB, or other color formats, the order of values in the Scalar tuple follows the order of channels in the color format, e.g. for a BGR image, the sum for the blue-channel will be stored in Val0 , the sum for the green-channel in Val1 , etc. For single-channel arrays such as a grayscale image or a 2D floating point array with signal processing data, the sum will be stored in the first value of the tuple, Val0 ."
  },
  "api/Bonsai.Dsp.Threshold.html": {
    "href": "api/Bonsai.Dsp.Threshold.html",
    "title": "Class Threshold",
    "keywords": "Class Threshold Represents an operator that applies a fixed threshold to each element in the sequence. Inheritance Object Combinator < Mat , Mat > Transform < Mat , Mat > Threshold Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Threshold : Transform<Mat, Mat> Properties | Improve this Doc View Source MaxValue Gets or sets the value assigned to samples determined to be above the threshold. Declaration public double MaxValue { get; set; } Property Value Type Description Double | Improve this Doc View Source ThresholdType Gets or sets a value specifying the type of threshold to apply to individual samples. Declaration public ThresholdTypes ThresholdType { get; set; } Property Value Type Description ThresholdTypes | Improve this Doc View Source ThresholdValue Gets or sets the threshold value used to test individual samples. Declaration [Range(0, 1)] public double ThresholdValue { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Process(IObservable<Mat>) Applies a fixed threshold to each element in an observable sequence. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of 2D matrix values. Returns Type Description IObservable < Mat > A sequence of 2D matrix values, where the values in each matrix are set by applying the threshold operation specified in ThresholdType . Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>)"
  },
  "api/Bonsai.Dsp.Tile.html": {
    "href": "api/Bonsai.Dsp.Tile.html",
    "title": "Class Tile",
    "keywords": "Class Tile Represents an operator that replicates each array in the sequence along the horizontal or vertical dimensions. Inheritance Object ArrayTransform Tile Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Tile : ArrayTransform Properties | Improve this Doc View Source ColumnTiles Gets or sets the number of times to repeat each array in the horizontal dimension. Declaration [Range(1, 2147483647)] public int ColumnTiles { get; set; } Property Value Type Description Int32 | Improve this Doc View Source RowTiles Gets or sets the number of times to repeat each array in the vertical dimension. Declaration [Range(1, 2147483647)] public int RowTiles { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Replicates each array in an observable sequence along the horizontal or vertical dimensions. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of multi-channel array values. Returns Type Description IObservable <TArray> A sequence of multi-channel array values, where each array is created by replicating the original array along the horizontal or vertical dimension. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>)"
  },
  "api/Bonsai.Dsp.Transpose.html": {
    "href": "api/Bonsai.Dsp.Transpose.html",
    "title": "Class Transpose",
    "keywords": "Class Transpose Represents an operator that transposes every array in the sequence. Inheritance Object ArrayTransform Transpose Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class Transpose : ArrayTransform Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Transposes every array in an observable sequence. Declaration public override IObservable<TArray> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source A sequence of multi-channel array values. Returns Type Description IObservable <TArray> A sequence of multi-channel array values, where each new array is the transpose of the original array. Type Parameters Name Description TArray The type of the array-like objects in the source sequence. Overrides Bonsai.Dsp.ArrayTransform.Process<TArray>(System.IObservable<TArray>)"
  },
  "api/Bonsai.Dsp.TriggeredBuffer.html": {
    "href": "api/Bonsai.Dsp.TriggeredBuffer.html",
    "title": "Class TriggeredBuffer",
    "keywords": "Class TriggeredBuffer Represents an operator that extracts a number of samples from the input signal whenever a trigger rises. Inheritance Object Combinator < Tuple < Mat , Mat >, Mat > TriggeredBuffer Inherited Members Combinator<Tuple<Mat, Mat>, Mat>.Process(IObservable<Tuple<Mat, Mat>>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Dsp Assembly : Bonsai.Dsp.dll Syntax public class TriggeredBuffer : Combinator<Tuple<Mat, Mat>, Mat> Properties | Improve this Doc View Source Count Gets or sets the number of samples in each triggered buffer. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<Tuple<Mat, Mat>>) Extracts a number of samples from the input signal whenever a trigger rises. Declaration public override IObservable<Mat> Process(IObservable<Tuple<Mat, Mat>> source) Parameters Type Name Description IObservable < Tuple < Mat , Mat >> source A sequence of pairs of 2D matrices, where the first matrix contains the signal to extract samples from, and the second matrix contains the binary trigger signal, where zero values represent the trigger is in a LOW state, and positive values represent the trigger is in a HIGH state. Returns Type Description IObservable < Mat > A sequence of Mat objects storing the extracted samples whenever the trigger line changes from LOW to HIGH. Overrides Bonsai.Combinator<System.Tuple<OpenCV.Net.Mat, OpenCV.Net.Mat>, OpenCV.Net.Mat>.Process(System.IObservable<System.Tuple<OpenCV.Net.Mat, OpenCV.Net.Mat>>)"
  },
  "api/Bonsai.Editor.EditorForm.html": {
    "href": "api/Bonsai.Editor.EditorForm.html",
    "title": "Class EditorForm",
    "keywords": "Class EditorForm Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl Form EditorForm Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(Boolean) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(Boolean) Form.Close() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(Message) Form.ProcessMnemonic(Char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnCreateControl() Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(Int32, Int32, Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(Char) Form.ProcessKeyPreview(Message) Form.ProcessTabKey(Boolean) Form.RemoveOwnedForm(Form) Form.Select(Boolean, Boolean) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Form.SetClientSizeCore(Int32, Int32) Form.SetDesktopBounds(Int32, Int32, Int32, Int32) Form.SetDesktopLocation(Int32, Int32) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.Menu Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiParent Form.MergedMenu Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.IContainerControl.ActivateControl(Control) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.Validate() ContainerControl.Validate(Boolean) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(Int32) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(Int32, Int32) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(Int32, Int32) ScrollableControl.SetScrollState(Int32, Boolean) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(Int32) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, Boolean) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsMnemonic(Char, String) Control.LogicalToDeviceUnits(Int32) Control.ScaleBitmapLogicalToDevice(Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.RescaleConstantsForDpi(Int32, Int32) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(Message) Control.PreProcessControlMessage(Message) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateZOrder() Control.UpdateStyles() Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragDrop(DragEventArgs) Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Editor Assembly : Bonsai.Editor.dll Syntax public class EditorForm : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Constructors | Improve this Doc View Source EditorForm(IObservable<IGrouping<String, WorkflowElementDescriptor>>, IObservable<TypeVisualizerDescriptor>) Declaration public EditorForm(IObservable<IGrouping<string, WorkflowElementDescriptor>> elementProvider, IObservable<TypeVisualizerDescriptor> visualizerProvider) Parameters Type Name Description IObservable < IGrouping < String , WorkflowElementDescriptor >> elementProvider IObservable < TypeVisualizerDescriptor > visualizerProvider | Improve this Doc View Source EditorForm(IObservable<IGrouping<String, WorkflowElementDescriptor>>, IObservable<TypeVisualizerDescriptor>, IServiceProvider) Declaration public EditorForm(IObservable<IGrouping<string, WorkflowElementDescriptor>> elementProvider, IObservable<TypeVisualizerDescriptor> visualizerProvider, IServiceProvider provider) Parameters Type Name Description IObservable < IGrouping < String , WorkflowElementDescriptor >> elementProvider IObservable < TypeVisualizerDescriptor > visualizerProvider IServiceProvider provider | Improve this Doc View Source EditorForm(IObservable<IGrouping<String, WorkflowElementDescriptor>>, IObservable<TypeVisualizerDescriptor>, IServiceProvider, Single) Declaration public EditorForm(IObservable<IGrouping<string, WorkflowElementDescriptor>> elementProvider, IObservable<TypeVisualizerDescriptor> visualizerProvider, IServiceProvider provider, float editorScale) Parameters Type Name Description IObservable < IGrouping < String , WorkflowElementDescriptor >> elementProvider IObservable < TypeVisualizerDescriptor > visualizerProvider IServiceProvider provider Single editorScale Properties | Improve this Doc View Source EditorResult Declaration public EditorResult EditorResult { get; set; } Property Value Type Description EditorResult | Improve this Doc View Source FileName Declaration public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source LoadAction Declaration public LoadAction LoadAction { get; set; } Property Value Type Description LoadAction | Improve this Doc View Source PropertyAssignments Declaration public IDictionary<string, string> PropertyAssignments { get; } Property Value Type Description IDictionary < String , String > | Improve this Doc View Source UpdatesAvailable Declaration public bool UpdatesAvailable { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Dispose(Boolean) Clean up any resources being used. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if managed resources should be disposed; otherwise, false. Overrides Form.Dispose(Boolean) | Improve this Doc View Source OnDeactivate(EventArgs) Declaration protected override void OnDeactivate(EventArgs e) Parameters Type Name Description EventArgs e Overrides Form.OnDeactivate(EventArgs) | Improve this Doc View Source OnFormClosed(FormClosedEventArgs) Declaration protected override void OnFormClosed(FormClosedEventArgs e) Parameters Type Name Description FormClosedEventArgs e Overrides Form.OnFormClosed(FormClosedEventArgs) | Improve this Doc View Source OnFormClosing(FormClosingEventArgs) Declaration protected override void OnFormClosing(FormClosingEventArgs e) Parameters Type Name Description FormClosingEventArgs e Overrides Form.OnFormClosing(FormClosingEventArgs) | Improve this Doc View Source OnLoad(EventArgs) Declaration protected override void OnLoad(EventArgs e) Parameters Type Name Description EventArgs e Overrides Form.OnLoad(EventArgs) | Improve this Doc View Source ScaleControl(SizeF, BoundsSpecified) Declaration protected override void ScaleControl(SizeF factor, BoundsSpecified specified) Parameters Type Name Description SizeF factor BoundsSpecified specified Overrides Form.ScaleControl(SizeF, BoundsSpecified) Implements System.Windows.Forms.IDropTarget System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IWin32Window System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.IDisposable System.Windows.Forms.IContainerControl"
  },
  "api/Bonsai.Editor.EditorResult.html": {
    "href": "api/Bonsai.Editor.EditorResult.html",
    "title": "Enum EditorResult",
    "keywords": "Enum EditorResult Namespace : Bonsai.Editor Assembly : Bonsai.Editor.dll Syntax public enum EditorResult Fields Name Description Exit ExportPackage ManagePackages OpenGallery ReloadEditor"
  },
  "api/Bonsai.Editor.html": {
    "href": "api/Bonsai.Editor.html",
    "title": "Namespace Bonsai.Editor",
    "keywords": "Namespace Bonsai.Editor Classes EditorForm StartScreen TypeVisualizerDescriptor WorkflowExporter WorkflowRunner Structs WorkflowElementDescriptor Interfaces IDocumentationProvider IScriptEnvironment Enums EditorResult LoadAction"
  },
  "api/Bonsai.Editor.IDocumentationProvider.html": {
    "href": "api/Bonsai.Editor.IDocumentationProvider.html",
    "title": "Interface IDocumentationProvider",
    "keywords": "Interface IDocumentationProvider Namespace : Bonsai.Editor Assembly : Bonsai.Editor.dll Syntax public interface IDocumentationProvider Methods | Improve this Doc View Source GetDocumentationUrl(String) Declaration string GetDocumentationUrl(string assemblyName) Parameters Type Name Description String assemblyName Returns Type Description String"
  },
  "api/Bonsai.Editor.IScriptEnvironment.html": {
    "href": "api/Bonsai.Editor.IScriptEnvironment.html",
    "title": "Interface IScriptEnvironment",
    "keywords": "Interface IScriptEnvironment Namespace : Bonsai.Editor Assembly : Bonsai.Editor.dll Syntax public interface IScriptEnvironment Properties | Improve this Doc View Source AssemblyName Declaration AssemblyName AssemblyName { get; } Property Value Type Description AssemblyName | Improve this Doc View Source DebugScripts Declaration bool DebugScripts { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ProjectFileName Declaration string ProjectFileName { get; } Property Value Type Description String Methods | Improve this Doc View Source AddAssemblyReferences(IEnumerable<String>) Declaration void AddAssemblyReferences(IEnumerable<string> assemblyReferences) Parameters Type Name Description IEnumerable < String > assemblyReferences"
  },
  "api/Bonsai.Editor.LoadAction.html": {
    "href": "api/Bonsai.Editor.LoadAction.html",
    "title": "Enum LoadAction",
    "keywords": "Enum LoadAction Namespace : Bonsai.Editor Assembly : Bonsai.Editor.dll Syntax public enum LoadAction Fields Name Description None Start StartWithoutDebugging"
  },
  "api/Bonsai.Editor.StartScreen.html": {
    "href": "api/Bonsai.Editor.StartScreen.html",
    "title": "Class StartScreen",
    "keywords": "Class StartScreen Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl Form StartScreen Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(Boolean) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(Boolean) Form.Close() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(Message) Form.ProcessMnemonic(Char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(Int32, Int32, Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(Char) Form.ProcessKeyPreview(Message) Form.RemoveOwnedForm(Form) Form.Select(Boolean, Boolean) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Form.SetClientSizeCore(Int32, Int32) Form.SetDesktopBounds(Int32, Int32, Int32, Int32) Form.SetDesktopLocation(Int32, Int32) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.Menu Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiParent Form.MergedMenu Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.IContainerControl.ActivateControl(Control) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.Validate() ContainerControl.Validate(Boolean) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(Int32) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(Int32, Int32) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(Int32, Int32) ScrollableControl.SetScrollState(Int32, Boolean) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(Int32) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, Boolean) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsMnemonic(Char, String) Control.LogicalToDeviceUnits(Int32) Control.ScaleBitmapLogicalToDevice(Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.RescaleConstantsForDpi(Int32, Int32) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(Message) Control.PreProcessControlMessage(Message) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateZOrder() Control.UpdateStyles() Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragDrop(DragEventArgs) Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Editor Assembly : Bonsai.Editor.dll Syntax public class StartScreen : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Constructors | Improve this Doc View Source StartScreen() Declaration public StartScreen() Properties | Improve this Doc View Source EditorResult Declaration public EditorResult EditorResult { get; } Property Value Type Description EditorResult | Improve this Doc View Source FileName Declaration public string FileName { get; } Property Value Type Description String Methods | Improve this Doc View Source Dispose(Boolean) Clean up any resources being used. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if managed resources should be disposed; otherwise, false. Overrides Form.Dispose(Boolean) | Improve this Doc View Source OnKeyDown(KeyEventArgs) Declaration protected override void OnKeyDown(KeyEventArgs e) Parameters Type Name Description KeyEventArgs e Overrides Control.OnKeyDown(KeyEventArgs) | Improve this Doc View Source OnLoad(EventArgs) Declaration protected override void OnLoad(EventArgs e) Parameters Type Name Description EventArgs e Overrides Form.OnLoad(EventArgs) | Improve this Doc View Source ProcessTabKey(Boolean) Declaration protected override bool ProcessTabKey(bool forward) Parameters Type Name Description Boolean forward Returns Type Description Boolean Overrides Form.ProcessTabKey(Boolean) | Improve this Doc View Source ScaleControl(SizeF, BoundsSpecified) Declaration protected override void ScaleControl(SizeF factor, BoundsSpecified specified) Parameters Type Name Description SizeF factor BoundsSpecified specified Overrides Form.ScaleControl(SizeF, BoundsSpecified) Implements System.Windows.Forms.IDropTarget System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IWin32Window System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.IDisposable System.Windows.Forms.IContainerControl"
  },
  "api/Bonsai.Editor.TypeVisualizerDescriptor.html": {
    "href": "api/Bonsai.Editor.TypeVisualizerDescriptor.html",
    "title": "Class TypeVisualizerDescriptor",
    "keywords": "Class TypeVisualizerDescriptor Inheritance Object TypeVisualizerDescriptor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Editor Assembly : Bonsai.Editor.dll Syntax [Serializable] public class TypeVisualizerDescriptor Constructors | Improve this Doc View Source TypeVisualizerDescriptor(TypeVisualizerAttribute) Declaration public TypeVisualizerDescriptor(TypeVisualizerAttribute typeVisualizer) Parameters Type Name Description TypeVisualizerAttribute typeVisualizer Fields | Improve this Doc View Source TargetTypeName Declaration public string TargetTypeName Field Value Type Description String | Improve this Doc View Source VisualizerTypeName Declaration public string VisualizerTypeName Field Value Type Description String"
  },
  "api/Bonsai.Editor.WorkflowElementDescriptor.html": {
    "href": "api/Bonsai.Editor.WorkflowElementDescriptor.html",
    "title": "Struct WorkflowElementDescriptor",
    "keywords": "Struct WorkflowElementDescriptor Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Bonsai.Editor Assembly : Bonsai.Editor.dll Syntax [Serializable] public struct WorkflowElementDescriptor Properties | Improve this Doc View Source Description Declaration public string Description { readonly get; set; } Property Value Type Description String | Improve this Doc View Source ElementTypes Declaration public ElementCategory[] ElementTypes { readonly get; set; } Property Value Type Description ElementCategory [] | Improve this Doc View Source FullyQualifiedName Declaration public string FullyQualifiedName { readonly get; set; } Property Value Type Description String | Improve this Doc View Source Name Declaration public string Name { readonly get; set; } Property Value Type Description String | Improve this Doc View Source Namespace Declaration public string Namespace { readonly get; set; } Property Value Type Description String"
  },
  "api/Bonsai.Editor.WorkflowExporter.html": {
    "href": "api/Bonsai.Editor.WorkflowExporter.html",
    "title": "Class WorkflowExporter",
    "keywords": "Class WorkflowExporter Inheritance Object WorkflowExporter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Editor Assembly : Bonsai.Editor.dll Syntax public static class WorkflowExporter Methods | Improve this Doc View Source ExportImage(String, String) Declaration public static void ExportImage(string fileName, string imageFileName) Parameters Type Name Description String fileName String imageFileName"
  },
  "api/Bonsai.Editor.WorkflowRunner.html": {
    "href": "api/Bonsai.Editor.WorkflowRunner.html",
    "title": "Class WorkflowRunner",
    "keywords": "Class WorkflowRunner Inheritance Object WorkflowRunner Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Editor Assembly : Bonsai.Editor.dll Syntax public class WorkflowRunner Methods | Improve this Doc View Source Run(String, Dictionary<String, String>, IObservable<TypeVisualizerDescriptor>) Declaration public static void Run(string fileName, Dictionary<string, string> propertyAssignments, IObservable<TypeVisualizerDescriptor> visualizerProvider = null) Parameters Type Name Description String fileName Dictionary < String , String > propertyAssignments IObservable < TypeVisualizerDescriptor > visualizerProvider | Improve this Doc View Source Run(String, Dictionary<String, String>, IObservable<TypeVisualizerDescriptor>, String) Declaration public static void Run(string fileName, Dictionary<string, string> propertyAssignments, IObservable<TypeVisualizerDescriptor> visualizerProvider = null, string layoutPath = null) Parameters Type Name Description String fileName Dictionary < String , String > propertyAssignments IObservable < TypeVisualizerDescriptor > visualizerProvider String layoutPath"
  },
  "api/Bonsai.ElementCategory.html": {
    "href": "api/Bonsai.ElementCategory.html",
    "title": "Enum ElementCategory",
    "keywords": "Enum ElementCategory Specifies the category of a workflow element. Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public enum ElementCategory Fields Name Description Combinator An operator that can be applied to one or more observable sequences to produce a new observable sequence. Nested A combinator that allows the user to specify its operation in terms of a nested workflow. Property A generator of observable elements that can be used as a named workflow property. Sink A combinator that introduces side effects on an observable sequence without modifying its elements. Source A generator of observable sequences of data elements. Transform A combinator that transforms every element of an observable sequence into a new data element. Workflow A set of operators defining a data processing workflow."
  },
  "api/Bonsai.ExpressionHelper.html": {
    "href": "api/Bonsai.ExpressionHelper.html",
    "title": "Class ExpressionHelper",
    "keywords": "Class ExpressionHelper Provides a set of static methods to manipulate expression trees. Inheritance Object ExpressionHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public static class ExpressionHelper Fields | Improve this Doc View Source ArgumentSeparator Represents the character separating selected members in a member selector expression. Declaration public const string ArgumentSeparator = \",\" Field Value Type Description String | Improve this Doc View Source ImplicitParameterName Represents the name of the implicit parameter in a member selector expression. Declaration public const string ImplicitParameterName = \"it\" Field Value Type Description String | Improve this Doc View Source MemberSeparator Represents the character separating class members in a member selector expression. Declaration public const string MemberSeparator = \".\" Field Value Type Description String Methods | Improve this Doc View Source GetGenericTypeBindings(Type, Type) Returns an array of Type objects that represent the bounded type parameters resulting from matching the specified generic type with a concrete type. Declaration public static Type[] GetGenericTypeBindings(Type genericType, Type type) Parameters Type Name Description Type genericType The generic type definition used to test for bindings. Type type The Type used to bind against genericType . Returns Type Description Type [] The array of Type objects representing the bounded type parameters, or an empty array, in case no compatible bindings are found. | Improve this Doc View Source IsCollectionType(Type) Tests whether the specified type implements a serialization compatible collection. Declaration public static bool IsCollectionType(Type type) Parameters Type Name Description Type type The Type to test. Returns Type Description Boolean true if the type implements a serialization compatible collection; otherwise, false . | Improve this Doc View Source IsEnumerableType(Type) Tests whether the specified type implements the generic enumerable interface. Declaration public static bool IsEnumerableType(Type type) Parameters Type Name Description Type type The Type to test. Returns Type Description Boolean true if the type implements the generic enumerable interface; otherwise, false . | Improve this Doc View Source MemberAccess(Expression, String) Creates an Expression representing a chained access to a member variable. Declaration public static Expression MemberAccess(Expression instance, string memberPath) Parameters Type Name Description Expression instance The object to which the member chain belongs. String memberPath The path to an inner member variable, separated by a dot. Indexed accessors are also allowed. Returns Type Description Expression The created Expression . | Improve this Doc View Source Parse(Expression, String) Creates an Expression representing the result of parsing a string with the specified pattern. Declaration public static Expression Parse(Expression expression, string pattern) Parameters Type Name Description Expression expression An Expression that represents the string to parse. String pattern The parse pattern to match, including data type format specifiers. If pattern is null , the input string is returned. Returns Type Description Expression An Expression that represents the result of parsing the specified string. | Improve this Doc View Source Parse(Expression, String, String[]) Creates an Expression representing the result of first splitting a string using separator tokens and then parsing each of the elements against the specified pattern. Declaration public static Expression Parse(Expression expression, string pattern, params string[] separator) Parameters Type Name Description Expression expression An Expression that represents the string to parse. String pattern The parse pattern to match, including data type format specifiers. If pattern is null , each of the resulting element strings is returned unchanged. String [] separator An optional array of delimiters used for splitting the string into individual elements before parsing. If the array is empty, the input string is parsed directly without further processing. Returns Type Description Expression An Expression that represents the result of splitting and parsing the specified string. If a separator array is specified, the resulting expression will be of type Array . | Improve this Doc View Source SelectMemberNames(String) Extracts the set of member accessor paths from a composite selector string. Declaration public static IEnumerable<string> SelectMemberNames(string selector) Parameters Type Name Description String selector The comma-separated selector string used to extract multiple members. Returns Type Description IEnumerable < String > An enumerator of the set of member accessor paths extracted from the composite selector string. | Improve this Doc View Source SelectMembers(Expression, String) Returns the set of member selector expressions specified by a composite selector string. Declaration public static IEnumerable<Expression> SelectMembers(Expression expression, string selector) Parameters Type Name Description Expression expression The object to which the members belong. String selector The comma-separated selector string used to extract multiple members. Returns Type Description IEnumerable < Expression > A set of Expression instances representing the member variables accessed by the composite selector string."
  },
  "api/Bonsai.Expressions.AddBuilder.html": {
    "href": "api/Bonsai.Expressions.AddBuilder.html",
    "title": "Class AddBuilder",
    "keywords": "Class AddBuilder Represents an expression builder that applies the arithmetic addition operation on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder AddBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class AddBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies the arithmetic addition operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the arithmetic addition operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.BinaryOperatorBuilder.html": {
    "href": "api/Bonsai.Expressions.BinaryOperatorBuilder.html",
    "title": "Class BinaryOperatorBuilder",
    "keywords": "Class BinaryOperatorBuilder Provides a base class for expression builders that define a simple binary operator on paired elements of an observable sequence. This is an abstract class. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder AddBuilder BitwiseAndBuilder BitwiseOrBuilder DivideBuilder EqualBuilder GetValueOrDefaultBuilder GreaterThanBuilder GreaterThanOrEqualBuilder IndexBuilder LessThanBuilder LessThanOrEqualBuilder LogicalAndBuilder LogicalOrBuilder ModBuilder MultiplyBuilder NotEqualBuilder SubtractBuilder XorBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class BinaryOperatorBuilder : SelectBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Properties | Improve this Doc View Source Operand Gets or sets the value of the right hand operand which will be paired with elements of the observable sequence in case the sequence itself is not composed of paired elements. Declaration [Browsable(false)] public WorkflowProperty Operand { get; set; } Property Value Type Description WorkflowProperty Methods | Improve this Doc View Source BuildSelector(Expression) Returns the expression that maps the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that maps the input parameter to the selector result. Overrides SelectBuilder.BuildSelector(Expression) | Improve this Doc View Source BuildSelector(Expression, Expression) When overridden in a derived class, returns the expression that applies a binary operator to the left and right parameters. Declaration protected abstract Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the binary operator to the left and right parameters. Explicit Interface Implementations | Improve this Doc View Source ICustomTypeDescriptor.GetAttributes() Declaration AttributeCollection ICustomTypeDescriptor.GetAttributes() Returns Type Description AttributeCollection | Improve this Doc View Source ICustomTypeDescriptor.GetClassName() Declaration string ICustomTypeDescriptor.GetClassName() Returns Type Description String | Improve this Doc View Source ICustomTypeDescriptor.GetComponentName() Declaration string ICustomTypeDescriptor.GetComponentName() Returns Type Description String | Improve this Doc View Source ICustomTypeDescriptor.GetConverter() Declaration TypeConverter ICustomTypeDescriptor.GetConverter() Returns Type Description TypeConverter | Improve this Doc View Source ICustomTypeDescriptor.GetDefaultEvent() Declaration EventDescriptor ICustomTypeDescriptor.GetDefaultEvent() Returns Type Description EventDescriptor | Improve this Doc View Source ICustomTypeDescriptor.GetDefaultProperty() Declaration PropertyDescriptor ICustomTypeDescriptor.GetDefaultProperty() Returns Type Description PropertyDescriptor | Improve this Doc View Source ICustomTypeDescriptor.GetEditor(Type) Declaration object ICustomTypeDescriptor.GetEditor(Type editorBaseType) Parameters Type Name Description Type editorBaseType Returns Type Description Object | Improve this Doc View Source ICustomTypeDescriptor.GetEvents() Declaration EventDescriptorCollection ICustomTypeDescriptor.GetEvents() Returns Type Description EventDescriptorCollection | Improve this Doc View Source ICustomTypeDescriptor.GetEvents(Attribute[]) Declaration EventDescriptorCollection ICustomTypeDescriptor.GetEvents(Attribute[] attributes) Parameters Type Name Description Attribute [] attributes Returns Type Description EventDescriptorCollection | Improve this Doc View Source ICustomTypeDescriptor.GetProperties() Declaration PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties() Returns Type Description PropertyDescriptorCollection | Improve this Doc View Source ICustomTypeDescriptor.GetProperties(Attribute[]) Declaration PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties(Attribute[] attributes) Parameters Type Name Description Attribute [] attributes Returns Type Description PropertyDescriptorCollection | Improve this Doc View Source ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) Declaration object ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd) Parameters Type Name Description PropertyDescriptor pd Returns Type Description Object Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.BitwiseAndBuilder.html": {
    "href": "api/Bonsai.Expressions.BitwiseAndBuilder.html",
    "title": "Class BitwiseAndBuilder",
    "keywords": "Class BitwiseAndBuilder Represents an expression builder that applies a bitwise AND operation on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder BitwiseAndBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class BitwiseAndBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies a bitwise AND operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies a bitwise AND operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.BitwiseNotBuilder.html": {
    "href": "api/Bonsai.Expressions.BitwiseNotBuilder.html",
    "title": "Class BitwiseNotBuilder",
    "keywords": "Class BitwiseNotBuilder Represents an expression builder that applies a bitwise complement operation on elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BitwiseNotBuilder Implements IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class BitwiseNotBuilder : SelectBuilder, IExpressionBuilder Methods | Improve this Doc View Source BuildSelector(Expression) Returns the expression that applies a bitwise complement operation on the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that applies a bitwise complement operation on the input parameter to the selector result. Overrides SelectBuilder.BuildSelector(Expression) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.BitwiseOrBuilder.html": {
    "href": "api/Bonsai.Expressions.BitwiseOrBuilder.html",
    "title": "Class BitwiseOrBuilder",
    "keywords": "Class BitwiseOrBuilder Represents an expression builder that applies a bitwise OR operation on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder BitwiseOrBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class BitwiseOrBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies a bitwise OR operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies a bitwise OR operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.BooleanProperty.html": {
    "href": "api/Bonsai.Expressions.BooleanProperty.html",
    "title": "Class BooleanProperty",
    "keywords": "Class BooleanProperty Represents a workflow property containing a Boolean value. Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName . Inheritance Object WorkflowProperty WorkflowProperty < Boolean > BooleanProperty Inherited Members WorkflowProperty<Boolean>.Value WorkflowProperty<Boolean>.Generate() WorkflowProperty<Boolean>.Generate<TSource>(IObservable<TSource>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class BooleanProperty : WorkflowProperty<bool>"
  },
  "api/Bonsai.Expressions.ByteProperty.html": {
    "href": "api/Bonsai.Expressions.ByteProperty.html",
    "title": "Class ByteProperty",
    "keywords": "Class ByteProperty Represents a workflow property containing an 8-bit unsigned integer. Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName . Inheritance Object WorkflowProperty ByteProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ByteProperty : WorkflowProperty Properties | Improve this Doc View Source Value Gets or sets the value of the property. Declaration [Range(0, 255)] public byte Value { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<byte> Generate() Returns Type Description IObservable < Byte > An observable sequence of property values. | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<byte> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable < Byte > An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.CombinatorBuilder.html": {
    "href": "api/Bonsai.Expressions.CombinatorBuilder.html",
    "title": "Class CombinatorBuilder",
    "keywords": "Class CombinatorBuilder Represents an expression builder which uses a specified combinator instance to process one or more input observable sequences. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder CombinatorExpressionBuilder CombinatorBuilder Implements IPropertyMappingBuilder IExpressionBuilder INamedElement Inherited Members VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class CombinatorBuilder : CombinatorExpressionBuilder, IPropertyMappingBuilder, IExpressionBuilder, INamedElement Constructors | Improve this Doc View Source CombinatorBuilder() Initializes a new instance of the CombinatorBuilder class. Declaration public CombinatorBuilder() Properties | Improve this Doc View Source Combinator Gets or sets the combinator instance used to process input observable sequences. Declaration public object Combinator { get; set; } Property Value Type Description Object | Improve this Doc View Source Name Gets the display name of the combinator. Declaration public string Name { get; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides CombinatorExpressionBuilder.Build(IEnumerable<Expression>) | Improve this Doc View Source BuildCombinator(IEnumerable<Expression>) Generates an Expression node that will be combined with any existing property mappings to produce the final output of the expression builder. Declaration protected override Expression BuildCombinator(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node that represents the combinator output. Overrides CombinatorExpressionBuilder.BuildCombinator(IEnumerable<Expression>) Implements IPropertyMappingBuilder IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.CombinatorExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.CombinatorExpressionBuilder.html",
    "title": "Class CombinatorExpressionBuilder",
    "keywords": "Class CombinatorExpressionBuilder Provides a base class for expression builders that will generate combinator outputs that can be combined with dynamic property mappings. This is an abstract class. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder CombinatorExpressionBuilder CombinatorBuilder CsvReader CsvWriter Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class CombinatorExpressionBuilder : VariableArgumentExpressionBuilder, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source CombinatorExpressionBuilder(Int32, Int32) Initializes a new instance of the CombinatorExpressionBuilder class with the specified argument range. Declaration protected CombinatorExpressionBuilder(int minArguments, int maxArguments) Parameters Type Name Description Int32 minArguments The inclusive lower bound of the argument range. Int32 maxArguments The inclusive upper bound of the argument range. Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) | Improve this Doc View Source BuildCombinator(IEnumerable<Expression>) When overridden in a derived class, generates an Expression node that will be combined with any existing property mappings to produce the final output of the expression builder. Declaration protected abstract Expression BuildCombinator(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node that represents the combinator output. Implements IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.DateTimeOffsetProperty.html": {
    "href": "api/Bonsai.Expressions.DateTimeOffsetProperty.html",
    "title": "Class DateTimeOffsetProperty",
    "keywords": "Class DateTimeOffsetProperty Represents a workflow property containing a timestamp in Coordinated Universal Time (UTC). Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName . Inheritance Object WorkflowProperty DateTimeOffsetProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class DateTimeOffsetProperty : WorkflowProperty Properties | Improve this Doc View Source Value Gets or sets the value of the property. Declaration public DateTimeOffset Value { get; set; } Property Value Type Description DateTimeOffset | Improve this Doc View Source ValueXml Gets or sets an XML representation of the property value for serialization. Declaration [Browsable(false)] public string ValueXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<DateTimeOffset> Generate() Returns Type Description IObservable < DateTimeOffset > An observable sequence of property values. | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<DateTimeOffset> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable < DateTimeOffset > An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.DateTimeProperty.html": {
    "href": "api/Bonsai.Expressions.DateTimeProperty.html",
    "title": "Class DateTimeProperty",
    "keywords": "Class DateTimeProperty Represents a workflow property containing a date and time of day. Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName . Inheritance Object WorkflowProperty WorkflowProperty < DateTime > DateTimeProperty Inherited Members WorkflowProperty<DateTime>.Value WorkflowProperty<DateTime>.Generate() WorkflowProperty<DateTime>.Generate<TSource>(IObservable<TSource>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class DateTimeProperty : WorkflowProperty<DateTime>"
  },
  "api/Bonsai.Expressions.DisableBuilder.html": {
    "href": "api/Bonsai.Expressions.DisableBuilder.html",
    "title": "Class DisableBuilder",
    "keywords": "Class DisableBuilder Represents an expression builder that disables the generation of expression tree nodes from its decorated builder. The Disable decorator is used to remove expressions from the workflow build process without actually removing the expressions themselves from the workflow. It is most frequently used for rapid-prototyping of alternative solutions, or during debugging to quickly activate or deactivate branches for testing. Inheritance Object ExpressionBuilder DisableBuilder Implements IExpressionBuilder INamedElement Inherited Members ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class DisableBuilder : ExpressionBuilder, IExpressionBuilder, INamedElement Constructors | Improve this Doc View Source DisableBuilder() Initializes a new instance of the DisableBuilder class. Declaration public DisableBuilder() | Improve this Doc View Source DisableBuilder(ExpressionBuilder) Initializes a new instance of the DisableBuilder class with the specified expression builder. Declaration public DisableBuilder(ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder The expression builder instance to be disabled. Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that the decorated expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange | Improve this Doc View Source Builder Gets or sets the expression builder to be disabled by this decorator. Declaration public ExpressionBuilder Builder { get; set; } Property Value Type Description ExpressionBuilder | Improve this Doc View Source Name Gets the display name of the decorated expression builder. Declaration public string Name { get; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.DivideBuilder.html": {
    "href": "api/Bonsai.Expressions.DivideBuilder.html",
    "title": "Class DivideBuilder",
    "keywords": "Class DivideBuilder Represents an expression builder that applies the arithmetic division operation on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder DivideBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class DivideBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies the arithmetic division operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the arithmetic division operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.DoubleProperty.html": {
    "href": "api/Bonsai.Expressions.DoubleProperty.html",
    "title": "Class DoubleProperty",
    "keywords": "Class DoubleProperty Represents a workflow property containing a double-precision floating-point number. Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName . Inheritance Object WorkflowProperty DoubleProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class DoubleProperty : WorkflowProperty Properties | Improve this Doc View Source Value Gets or sets the value of the property. Declaration [Range(0, 1)] public double Value { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<double> Generate() Returns Type Description IObservable < Double > An observable sequence of property values. | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<double> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable < Double > An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.EqualBuilder.html": {
    "href": "api/Bonsai.Expressions.EqualBuilder.html",
    "title": "Class EqualBuilder",
    "keywords": "Class EqualBuilder Represents an expression builder that applies an equality comparison on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder EqualBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class EqualBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies an equality comparison to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies an equality comparison to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.ExpressionBuilder.html",
    "title": "Class ExpressionBuilder",
    "keywords": "Class ExpressionBuilder Provides the abstract base class for all expression tree node builders. Inheritance Object ExpressionBuilder DisableBuilder ExternalizedProperty InspectBuilder PropertySource SingleArgumentExpressionBuilder UnitBuilder UnknownTypeBuilder VariableArgumentExpressionBuilder WorkflowExpressionBuilder ZeroArgumentExpressionBuilder Implements IExpressionBuilder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [TypeConverter(\"Bonsai.Design.ExpressionBuilderTypeConverter, Bonsai.Design\")] public abstract class ExpressionBuilder : IExpressionBuilder Constructors | Improve this Doc View Source ExpressionBuilder() Initializes a new instance of the ExpressionBuilder class. Declaration protected ExpressionBuilder() Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration [Browsable(false)] public abstract Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public abstract Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. | Improve this Doc View Source FromWorkflowElement(Object, ElementCategory) Creates a new expression builder from the specified editor browsable element and category. Declaration public static ExpressionBuilder FromWorkflowElement(object element, ElementCategory elementCategory) Parameters Type Name Description Object element The editor browsable element for which to build a new expression builder. ElementCategory elementCategory The workflow category of the specified element. Returns Type Description ExpressionBuilder A new ExpressionBuilder object. | Improve this Doc View Source GetElementDisplayName(Object) Gets the display name for the specified element. Declaration public static string GetElementDisplayName(object element) Parameters Type Name Description Object element The element for which to retrieve the display name. Returns Type Description String The name of the element. | Improve this Doc View Source GetElementDisplayName(Type) Gets the display name for the specified type. Declaration public static string GetElementDisplayName(Type type) Parameters Type Name Description Type type The Type for which to retrieve the display name. Returns Type Description String The display name for the specified type . | Improve this Doc View Source GetVisualizerElement(ExpressionBuilder) Returns the InspectBuilder instance that should be used to visualize the specified workflow element. Declaration public static InspectBuilder GetVisualizerElement(ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder The ExpressionBuilder for which to retrieve the visualizer element. Returns Type Description InspectBuilder The InspectBuilder instance that should be used to visualize the specified workflow element. Exceptions Type Condition ArgumentNullException builder is null . | Improve this Doc View Source GetVisualizerMappings(ExpressionBuilder) Returns the read-only collection of visualizer mappings that have been assigned to the specified workflow element. Declaration public static IReadOnlyList<VisualizerMapping> GetVisualizerMappings(ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder The ExpressionBuilder for which to retrieve visualizer mappings. Returns Type Description IReadOnlyList < VisualizerMapping > The read-only collection of VisualizerMapping objects that have been assigned to the specified workflow element. Exceptions Type Condition ArgumentNullException builder is null . | Improve this Doc View Source GetWorkflowElement(ExpressionBuilder) Returns the editor browsable element for the specified ExpressionBuilder . Declaration public static object GetWorkflowElement(ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder The ExpressionBuilder for which to retrieve the editor browsable element. Returns Type Description Object An Object that is the editor browsable element for the specified builder . | Improve this Doc View Source ToString() Returns a string that represents the display name of this ExpressionBuilder instance. Declaration public override string ToString() Returns Type Description String The string representation of this ExpressionBuilder object. Overrides Object.ToString() | Improve this Doc View Source Unwrap(ExpressionBuilder) Removes all decorators from a specified ExpressionBuilder instance and returns the first non-decorated (i.e. primitive) builder. Declaration public static ExpressionBuilder Unwrap(ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder An ExpressionBuilder instance from which to remove decorators. Returns Type Description ExpressionBuilder The non-decorated ExpressionBuilder instance. Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ExpressionBuilderArgument.html": {
    "href": "api/Bonsai.Expressions.ExpressionBuilderArgument.html",
    "title": "Class ExpressionBuilderArgument",
    "keywords": "Class ExpressionBuilderArgument Represents a workflow argument assignment. This class determines the index of a workflow connection and is used to specify the order of input connections to any given node. Inheritance Object ExpressionBuilderArgument Implements IEquatable < ExpressionBuilderArgument > IComparable < ExpressionBuilderArgument > IComparable Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [TypeConverter(\"Bonsai.Design.ExpressionBuilderArgumentTypeConverter, Bonsai.Design\")] public class ExpressionBuilderArgument : IEquatable<ExpressionBuilderArgument>, IComparable<ExpressionBuilderArgument>, IComparable Constructors | Improve this Doc View Source ExpressionBuilderArgument() Initializes a new instance of the ExpressionBuilderArgument class. Declaration public ExpressionBuilderArgument() | Improve this Doc View Source ExpressionBuilderArgument(Int32) Initializes a new instance of the ExpressionBuilderArgument class with the specified argument index. Declaration public ExpressionBuilderArgument(int index) Parameters Type Name Description Int32 index The zero-based index of the input argument. | Improve this Doc View Source ExpressionBuilderArgument(String) Initializes a new instance of the ExpressionBuilderArgument class with the specified argument name. Declaration public ExpressionBuilderArgument(string name) Parameters Type Name Description String name The name of the input argument. Arbitrary named arguments are not supported, so all names must start with the ArgumentNamePrefix followed by the one-based argument index. Fields | Improve this Doc View Source ArgumentNamePrefix The prefix that starts every input argument name. Declaration public const string ArgumentNamePrefix = \"Source\" Field Value Type Description String Properties | Improve this Doc View Source Index Gets or sets the zero-based index of the input argument. Declaration public int Index { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Name Gets or sets the name of the input argument. Arbitrary named arguments are not supported, so all names must start with the ArgumentNamePrefix followed by the one-based argument index. Declaration public string Name { get; set; } Property Value Type Description String Methods | Improve this Doc View Source CompareTo(ExpressionBuilderArgument) Compares the current object with another object of the same type. Declaration public int CompareTo(ExpressionBuilderArgument other) Parameters Type Name Description ExpressionBuilderArgument other An object to compare with this object. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. Less than zero means this object is less than the other parameter. Zero means this object is equal to other . Greater than zero means this object is greater than other . | Improve this Doc View Source Equals(ExpressionBuilderArgument) Indicates whether the specified argument is equal to the current argument. Declaration public bool Equals(ExpressionBuilderArgument other) Parameters Type Name Description ExpressionBuilderArgument other The argument object to compare with the current argument. Returns Type Description Boolean true if the specified argument object is equal to the current argument; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj An object to compare with this instance. Returns Type Description Boolean true if obj is an instance of ExpressionBuilderArgument and its index equals the index value of this instance; otherwise, false. Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators | Improve this Doc View Source Equality(ExpressionBuilderArgument, ExpressionBuilderArgument) Tests whether two ExpressionBuilderArgument instances are equal. Declaration public static bool operator ==(ExpressionBuilderArgument left, ExpressionBuilderArgument right) Parameters Type Name Description ExpressionBuilderArgument left The ExpressionBuilderArgument instance on the left of the equality operator. ExpressionBuilderArgument right The ExpressionBuilderArgument instance on the right of the equality operator. Returns Type Description Boolean true if left and right have equal index; otherwise, false . | Improve this Doc View Source GreaterThan(ExpressionBuilderArgument, ExpressionBuilderArgument) Tests whether an ExpressionBuilderArgument object is greater than another object of the same type. Declaration public static bool operator>(ExpressionBuilderArgument left, ExpressionBuilderArgument right) Parameters Type Name Description ExpressionBuilderArgument left The ExpressionBuilderArgument object on the left of the greater than operator. ExpressionBuilderArgument right The ExpressionBuilderArgument object on the right of the greater than operator. Returns Type Description Boolean true if left has an index greater than right ; otherwise, false . | Improve this Doc View Source Inequality(ExpressionBuilderArgument, ExpressionBuilderArgument) Tests whether two ExpressionBuilderArgument instances are different. Declaration public static bool operator !=(ExpressionBuilderArgument left, ExpressionBuilderArgument right) Parameters Type Name Description ExpressionBuilderArgument left The ExpressionBuilderArgument instance on the left of the inequality operator. ExpressionBuilderArgument right The ExpressionBuilderArgument instance on the right of the inequality operator. Returns Type Description Boolean true if left and right differ in index; false if left and right are equal. | Improve this Doc View Source LessThan(ExpressionBuilderArgument, ExpressionBuilderArgument) Tests whether an ExpressionBuilderArgument object is less than another object of the same type. Declaration public static bool operator <(ExpressionBuilderArgument left, ExpressionBuilderArgument right) Parameters Type Name Description ExpressionBuilderArgument left The ExpressionBuilderArgument object on the left of the less than operator. ExpressionBuilderArgument right The ExpressionBuilderArgument object on the right of the less than operator. Returns Type Description Boolean true if left has an index smaller than right ; otherwise, false . Explicit Interface Implementations | Improve this Doc View Source IComparable.CompareTo(Object) Declaration int IComparable.CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IEquatable<T> System.IComparable<T> System.IComparable"
  },
  "api/Bonsai.Expressions.ExpressionBuilderArgumentDescriptor.html": {
    "href": "api/Bonsai.Expressions.ExpressionBuilderArgumentDescriptor.html",
    "title": "Class ExpressionBuilderArgumentDescriptor",
    "keywords": "Class ExpressionBuilderArgumentDescriptor Represents a serializable descriptor of an edge connecting two nodes in an expression builder graph. Inheritance Object ExpressionBuilderArgumentDescriptor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ExpressionBuilderArgumentDescriptor Constructors | Improve this Doc View Source ExpressionBuilderArgumentDescriptor() Initializes a new instance of the ExpressionBuilderArgumentDescriptor class. Declaration public ExpressionBuilderArgumentDescriptor() | Improve this Doc View Source ExpressionBuilderArgumentDescriptor(Int32, Int32, String) Initializes a new instance of the ExpressionBuilderArgumentDescriptor class with the specified indices for source and target nodes and a label value. Declaration public ExpressionBuilderArgumentDescriptor(int from, int to, string label) Parameters Type Name Description Int32 from The zero-based index of the node that is the source of the edge. Int32 to The zero-based index of the node that is the target of the edge. String label The value of the edge label. Properties | Improve this Doc View Source From Gets or sets the zero-based index of the node that is the source of the edge. Declaration public int From { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Label Gets or sets the value of the edge label. Declaration public string Label { get; set; } Property Value Type Description String | Improve this Doc View Source To Gets or sets the zero-based index of the node that is the target of the edge. Declaration public int To { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.Expressions.ExpressionBuilderGraph.html": {
    "href": "api/Bonsai.Expressions.ExpressionBuilderGraph.html",
    "title": "Class ExpressionBuilderGraph",
    "keywords": "Class ExpressionBuilderGraph Represents a directed acyclic graph of expression generator nodes. Edges between generator nodes represent input assignments that chain the output of one generator to the input of the next. The order of the inputs is determined by the indices of the input arguments. Inheritance Object DirectedGraph < ExpressionBuilder , ExpressionBuilderArgument > ExpressionBuilderGraph Implements IEnumerable < Node < ExpressionBuilder , ExpressionBuilderArgument >> IEnumerable Inherited Members DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.Comparer DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.Count DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.Add(ExpressionBuilder) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.Add(Node<ExpressionBuilder, ExpressionBuilderArgument>) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.AddEdge(Node<ExpressionBuilder, ExpressionBuilderArgument>, Node<ExpressionBuilder, ExpressionBuilderArgument>, ExpressionBuilderArgument) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.AddEdge(Node<ExpressionBuilder, ExpressionBuilderArgument>, Edge<ExpressionBuilder, ExpressionBuilderArgument>) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.InsertEdge(Node<ExpressionBuilder, ExpressionBuilderArgument>, Int32, Node<ExpressionBuilder, ExpressionBuilderArgument>, ExpressionBuilderArgument) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.InsertEdge(Node<ExpressionBuilder, ExpressionBuilderArgument>, Int32, Edge<ExpressionBuilder, ExpressionBuilderArgument>) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.SetEdge(Node<ExpressionBuilder, ExpressionBuilderArgument>, Int32, Node<ExpressionBuilder, ExpressionBuilderArgument>, ExpressionBuilderArgument) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.SetEdge(Node<ExpressionBuilder, ExpressionBuilderArgument>, Int32, Edge<ExpressionBuilder, ExpressionBuilderArgument>) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.Contains(Node<ExpressionBuilder, ExpressionBuilderArgument>) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.Remove(Node<ExpressionBuilder, ExpressionBuilderArgument>) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.RemoveEdge(Node<ExpressionBuilder, ExpressionBuilderArgument>, Edge<ExpressionBuilder, ExpressionBuilderArgument>) DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.Clear() DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.GetEnumerator() DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>.IEnumerable.GetEnumerator() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ExpressionBuilderGraph : DirectedGraph<ExpressionBuilder, ExpressionBuilderArgument>, IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>>, IEnumerable Constructors | Improve this Doc View Source ExpressionBuilderGraph() Initializes a new instance of the ExpressionBuilderGraph class. Declaration public ExpressionBuilderGraph() Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods DirectedGraphExtensions.Predecessors<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.PredecessorEdges<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Successors<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>, Node<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Sources<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Sinks<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.DepthFirstSearch<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.TopologicalSort<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) DirectedGraphExtensions.Acyclic<TNodeValue, TEdgeLabel>(DirectedGraph<TNodeValue, TEdgeLabel>) ExpressionBuilderGraphExtensions.SetWorkflowProperty(ExpressionBuilderGraph, String, Object) ExpressionBuilderGraphExtensions.InspectErrorsEx(ExpressionBuilderGraph) ExpressionBuilderGraphExtensions.Build(ExpressionBuilderGraph) ExpressionBuilderGraphExtensions.Build(ExpressionBuilderGraph, ExpressionBuilder) ExpressionBuilderGraphExtensions.Build(ExpressionBuilderGraph, Expression[]) ExpressionBuilderGraphExtensions.Build(ExpressionBuilderGraph, IEnumerable<Expression>) ExpressionBuilderGraphExtensions.Build(ExpressionBuilderGraph, ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.Build(ExpressionBuilderGraph, ExpressionBuilder, IEnumerable<Expression>) ExpressionBuilderGraphExtensions.BuildObservable(ExpressionBuilderGraph) ExpressionBuilderGraphExtensions.Convert(IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>>, Func<ExpressionBuilder, ExpressionBuilder>) ExpressionBuilderGraphExtensions.Convert(IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>>, Func<ExpressionBuilder, ExpressionBuilder>, Boolean) ExpressionBuilderGraphExtensions.ToInspectableGraph(ExpressionBuilderGraph) ExpressionBuilderGraphExtensions.ToInspectableGraph(ExpressionBuilderGraph, Boolean) ExpressionBuilderGraphExtensions.FromInspectableGraph(ExpressionBuilderGraph) ExpressionBuilderGraphExtensions.FromInspectableGraph(IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>>, Boolean) ExpressionBuilderGraphExtensions.ToDescriptor(ExpressionBuilderGraph) ExpressionBuilderGraphExtensions.AddDescriptor(ExpressionBuilderGraph, ExpressionBuilderGraphDescriptor) ExpressionBuilderGraphExtensions.Elements(ExpressionBuilderGraph) ExpressionBuilderGraphExtensions.Descendants(ExpressionBuilderGraph)"
  },
  "api/Bonsai.Expressions.ExpressionBuilderGraphDescriptor.html": {
    "href": "api/Bonsai.Expressions.ExpressionBuilderGraphDescriptor.html",
    "title": "Class ExpressionBuilderGraphDescriptor",
    "keywords": "Class ExpressionBuilderGraphDescriptor Represents a serializable descriptor of the nodes and edges in an expression builder graph. Inheritance Object ExpressionBuilderGraphDescriptor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ExpressionBuilderGraphDescriptor Properties | Improve this Doc View Source Edges Gets a collection of descriptors corresponding to each edge in the expression builder graph. Declaration public Collection<ExpressionBuilderArgumentDescriptor> Edges { get; } Property Value Type Description Collection < ExpressionBuilderArgumentDescriptor > | Improve this Doc View Source Nodes Gets the collection of labels associated with each node in the expression builder graph. Declaration public Collection<ExpressionBuilder> Nodes { get; } Property Value Type Description Collection < ExpressionBuilder >"
  },
  "api/Bonsai.Expressions.ExpressionBuilderGraphExtensions.html": {
    "href": "api/Bonsai.Expressions.ExpressionBuilderGraphExtensions.html",
    "title": "Class ExpressionBuilderGraphExtensions",
    "keywords": "Class ExpressionBuilderGraphExtensions Provides a set of static methods for serializing, building and otherwise manipulating expression builder workflows. Inheritance Object ExpressionBuilderGraphExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public static class ExpressionBuilderGraphExtensions Methods | Improve this Doc View Source AddDescriptor(ExpressionBuilderGraph, ExpressionBuilderGraphDescriptor) Adds the contents of the specified graph descriptor to the ExpressionBuilderGraph . Declaration public static void AddDescriptor(this ExpressionBuilderGraph source, ExpressionBuilderGraphDescriptor descriptor) Parameters Type Name Description ExpressionBuilderGraph source The directed graph on which to add the contents of descriptor . ExpressionBuilderGraphDescriptor descriptor The serializable descriptor whose contents should be added to the ExpressionBuilderGraph . | Improve this Doc View Source AsInspectBuilder(ExpressionBuilder) Decorates the specified expression builder with an InspectBuilder instance allowing for runtime inspection and error redirection. Declaration public static InspectBuilder AsInspectBuilder(this ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder The expression builder instance to decorate. Returns Type Description InspectBuilder An InspectBuilder instance decorating the specified expression builder. | Improve this Doc View Source Build(ExpressionBuilder, Expression[]) Generates an Expression node from a collection of zero or more input arguments. The result can be chained with other builders in a workflow. Declaration public static Expression Build(this ExpressionBuilder builder, params Expression[] arguments) Parameters Type Name Description ExpressionBuilder builder The expression builder. Expression [] arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. | Improve this Doc View Source Build(ExpressionBuilderGraph) Generates an expression tree from the specified expression builder workflow. Declaration public static Expression Build(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to generate the expression tree. Returns Type Description Expression An Expression tree representing the evaluation of the full expression builder workflow. | Improve this Doc View Source Build(ExpressionBuilderGraph, ExpressionBuilder) Generates an expression tree from the specified expression builder workflow evaluated up to the specified build target. Declaration public static Expression Build(this ExpressionBuilderGraph source, ExpressionBuilder buildTarget) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to generate the expression tree. ExpressionBuilder buildTarget The expression builder node up to which the workflow will be evaluated. Returns Type Description Expression An Expression tree representing the evaluation of the expression builder workflow up to the specified buildTarget . | Improve this Doc View Source Build(ExpressionBuilderGraph, ExpressionBuilder, IEnumerable<Expression>) Generates an expression tree from the specified expression builder workflow and a sequence of build arguments, evaluated up to the specified build target. Declaration public static Expression Build(this ExpressionBuilderGraph source, ExpressionBuilder buildTarget, IEnumerable<Expression> buildArguments) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to generate the expression tree. ExpressionBuilder buildTarget The expression builder node up to which the workflow will be evaluated. IEnumerable < Expression > buildArguments The sequence of Expression objects to be assigned as workflow input arguments in the context of generating the expression tree. Returns Type Description Expression An Expression tree representing the evaluation of the expression builder workflow up to the specified buildTarget . | Improve this Doc View Source Build(ExpressionBuilderGraph, ExpressionBuilder, Expression[]) Generates an expression tree from the specified expression builder workflow and array of build arguments, evaluated up to the specified build target. Declaration public static Expression Build(this ExpressionBuilderGraph source, ExpressionBuilder buildTarget, params Expression[] buildArguments) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to generate the expression tree. ExpressionBuilder buildTarget The expression builder node up to which the workflow will be evaluated. Expression [] buildArguments The array of Expression objects to be assigned as workflow input arguments in the context of generating the expression tree. Returns Type Description Expression An Expression tree representing the evaluation of the expression builder workflow up to the specified buildTarget . | Improve this Doc View Source Build(ExpressionBuilderGraph, IEnumerable<Expression>) Generates an expression tree from the specified expression builder workflow and a sequence of build arguments. Declaration public static Expression Build(this ExpressionBuilderGraph source, IEnumerable<Expression> buildArguments) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to generate the expression tree. IEnumerable < Expression > buildArguments The sequence of Expression objects to be assigned as workflow input arguments in the context of generating the expression tree. Returns Type Description Expression An Expression tree representing the evaluation of the full expression builder workflow. | Improve this Doc View Source Build(ExpressionBuilderGraph, Expression[]) Generates an expression tree from the specified expression builder workflow and array of build arguments. Declaration public static Expression Build(this ExpressionBuilderGraph source, params Expression[] buildArguments) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to generate the expression tree. Expression [] buildArguments The array of Expression objects to be assigned as workflow input arguments in the context of generating the expression tree. Returns Type Description Expression An Expression tree representing the evaluation of the full expression builder workflow. | Improve this Doc View Source BuildObservable(ExpressionBuilderGraph) Builds and compiles an expression builder workflow into an observable that can be subscribed for its side-effects. Declaration public static IObservable<Unit> BuildObservable(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow to compile. Returns Type Description IObservable < Unit > An observable sequence with no elements except for termination messages. | Improve this Doc View Source Convert(IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>>, Func<ExpressionBuilder, ExpressionBuilder>) Converts the specified expression builder workflow into an equivalent representation where each node has been replaced by its projection as specified by a selector function. Declaration public static ExpressionBuilderGraph Convert(this IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>> source, Func<ExpressionBuilder, ExpressionBuilder> selector) Parameters Type Name Description IEnumerable < Node < ExpressionBuilder , ExpressionBuilderArgument >> source The expression builder workflow to convert. Func < ExpressionBuilder , ExpressionBuilder > selector A transform function to apply to each node. Returns Type Description ExpressionBuilderGraph A new expression builder workflow where all nodes have been replaced by their projections as specified by the selector function. | Improve this Doc View Source Convert(IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>>, Func<ExpressionBuilder, ExpressionBuilder>, Boolean) Converts the specified expression builder workflow into an equivalent representation where each node has been replaced by its projection as specified by a selector function. Declaration public static ExpressionBuilderGraph Convert(this IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>> source, Func<ExpressionBuilder, ExpressionBuilder> selector, bool recurse) Parameters Type Name Description IEnumerable < Node < ExpressionBuilder , ExpressionBuilderArgument >> source The expression builder workflow to convert. Func < ExpressionBuilder , ExpressionBuilder > selector A transform function to apply to each node. Boolean recurse A value indicating whether to recurse the conversion into nested workflows. Returns Type Description ExpressionBuilderGraph A new expression builder workflow where all nodes have been replaced by their projections as specified by the selector function. | Improve this Doc View Source Descendants(ExpressionBuilderGraph) Returns a filtered collection of the descendant elements for this workflow, including elements nested inside grouped workflows. Any descendants of disabled groups will not be included in the result. Declaration public static IEnumerable<ExpressionBuilder> Descendants(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow to search. Returns Type Description IEnumerable < ExpressionBuilder > An enumerable sequence of all the descendant elements in this workflow. | Improve this Doc View Source Elements(ExpressionBuilderGraph) Returns a filtered collection of the child elements for this workflow. Declaration public static IEnumerable<ExpressionBuilder> Elements(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow to search. Returns Type Description IEnumerable < ExpressionBuilder > An enumerable sequence of all the elements in this workflow. | Improve this Doc View Source FromInspectableGraph(ExpressionBuilderGraph) Converts the specified expression builder workflow into an equivalent representation where all the InspectBuilder nodes have been replaced by their decorated children. Declaration public static ExpressionBuilderGraph FromInspectableGraph(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow to convert. Returns Type Description ExpressionBuilderGraph A new expression builder workflow where all InspectBuilder nodes have been replaced by their decorated children. | Improve this Doc View Source FromInspectableGraph(IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>>, Boolean) Converts the specified expression builder workflow into an equivalent representation where all the InspectBuilder nodes have been replaced by their decorated children. Declaration public static ExpressionBuilderGraph FromInspectableGraph(this IEnumerable<Node<ExpressionBuilder, ExpressionBuilderArgument>> source, bool recurse) Parameters Type Name Description IEnumerable < Node < ExpressionBuilder , ExpressionBuilderArgument >> source The expression builder workflow to convert. Boolean recurse A value indicating whether to recurse the conversion into nested workflows. Returns Type Description ExpressionBuilderGraph A new expression builder workflow where all InspectBuilder nodes have been replaced by their decorated children. | Improve this Doc View Source InspectErrorsEx(ExpressionBuilderGraph) Redirects any build or execution errors signaled by InspectBuilder nodes in the specified expression builder workflow into a single observable sequence. Declaration public static IObservable<Exception> InspectErrorsEx(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to redirect errors. Returns Type Description IObservable < Exception > An observable sequence where all elements are errors raised by InspectBuilder nodes. | Improve this Doc View Source IsBuildDependency(ExpressionBuilder) Determines whether the specified ExpressionBuilder represents a build dependency. Declaration public static bool IsBuildDependency(this ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder The ExpressionBuilder to test. Returns Type Description Boolean true if the specified ExpressionBuilder represents a build dependency; otherwise, false. | Improve this Doc View Source SetWorkflowProperty(ExpressionBuilderGraph, String, Object) Sets the value of a workflow property to a different value. Declaration public static void SetWorkflowProperty(this ExpressionBuilderGraph source, string name, object value) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow for which to set the property. String name The name of the workflow property. Object value The new value. | Improve this Doc View Source ToDescriptor(ExpressionBuilderGraph) Converts an expression builder workflow into its serializable representation. Declaration public static ExpressionBuilderGraphDescriptor ToDescriptor(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow to convert. Returns Type Description ExpressionBuilderGraphDescriptor The serializable descriptor of the specified expression builder workflow. | Improve this Doc View Source ToInspectableGraph(ExpressionBuilderGraph) Converts the specified expression builder workflow into an equivalent representation where all the nodes are decorated by InspectBuilder instances that allow for runtime inspection and error redirection of workflow values. Declaration public static ExpressionBuilderGraph ToInspectableGraph(this ExpressionBuilderGraph source) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow to convert. Returns Type Description ExpressionBuilderGraph A new expression builder workflow where all nodes have been decorated by InspectBuilder instances. | Improve this Doc View Source ToInspectableGraph(ExpressionBuilderGraph, Boolean) Converts the specified expression builder workflow into an equivalent representation where all the nodes are decorated by InspectBuilder instances that allow for runtime inspection and error redirection of workflow values. Declaration public static ExpressionBuilderGraph ToInspectableGraph(this ExpressionBuilderGraph source, bool recurse) Parameters Type Name Description ExpressionBuilderGraph source The expression builder workflow to convert. Boolean recurse Returns Type Description ExpressionBuilderGraph A value indicating whether to recurse the conversion into nested workflows. A new expression builder workflow where all nodes have been decorated by InspectBuilder instances."
  },
  "api/Bonsai.Expressions.ExternalizedMapping.html": {
    "href": "api/Bonsai.Expressions.ExternalizedMapping.html",
    "title": "Class ExternalizedMapping",
    "keywords": "Class ExternalizedMapping Represents an externalized property of a workflow element. Inheritance Object ExternalizedMapping Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public sealed class ExternalizedMapping Properties | Improve this Doc View Source Category Gets or sets an optional category for the externalized property. Declaration public string Category { get; set; } Property Value Type Description String | Improve this Doc View Source Description Gets or sets an optional description for the externalized property. Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source DisplayName Gets or sets an optional display name of the externalized property. Declaration public string DisplayName { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the member name of the externalized property. Declaration [TypeConverter(typeof(ExternalizedMappingNameConverter))] public string Name { get; set; } Property Value Type Description String"
  },
  "api/Bonsai.Expressions.ExternalizedMappingBuilder.html": {
    "href": "api/Bonsai.Expressions.ExternalizedMappingBuilder.html",
    "title": "Class ExternalizedMappingBuilder",
    "keywords": "Class ExternalizedMappingBuilder Specifies a set of properties to be externalized from a workflow element. Warning In any one workflow, it is not possible to have more than one externalized property with the same name. When externalizing multiple conflicting properties, you can use the DisplayName property of the externalized mapping to provide distinct unique names for each property. It is also possible to specify different category or description strings to the externalized property for documentation purposes. When externalized properties are nested inside an operator group, for example inside a GroupWorkflow , they will be exposed as member properties of the node group itself. This means that when the group node is selected, all named externalized properties will show up in the Properties panel. Inheritance Object ExpressionBuilder ZeroArgumentExpressionBuilder ExternalizedMappingBuilder Implements IExpressionBuilder INamedElement Inherited Members ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Property)] public class ExternalizedMappingBuilder : ZeroArgumentExpressionBuilder, IExpressionBuilder, INamedElement Properties | Improve this Doc View Source ExternalizedProperties Gets the collection of properties to be externalized from the workflow element. Declaration [Externalizable(false)] public ExternalizedMappingCollection ExternalizedProperties { get; } Property Value Type Description ExternalizedMappingCollection Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Explicit Interface Implementations | Improve this Doc View Source INamedElement.Name Declaration string INamedElement.Name { get; } Returns Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ExternalizedMappingCollection.html": {
    "href": "api/Bonsai.Expressions.ExternalizedMappingCollection.html",
    "title": "Class ExternalizedMappingCollection",
    "keywords": "Class ExternalizedMappingCollection Represents a collection of externalized property mappings. Inheritance Object Collection < ExternalizedMapping > KeyedCollection < String , ExternalizedMapping > ExternalizedMappingCollection Implements IList < ExternalizedMapping > ICollection < ExternalizedMapping > IList ICollection IReadOnlyList < ExternalizedMapping > IReadOnlyCollection < ExternalizedMapping > IEnumerable < ExternalizedMapping > IEnumerable Inherited Members KeyedCollection<String, ExternalizedMapping>.Contains(String) KeyedCollection<String, ExternalizedMapping>.Remove(String) KeyedCollection<String, ExternalizedMapping>.ChangeItemKey(ExternalizedMapping, String) KeyedCollection<String, ExternalizedMapping>.ClearItems() KeyedCollection<String, ExternalizedMapping>.GetKeyForItem(ExternalizedMapping) KeyedCollection<String, ExternalizedMapping>.InsertItem(Int32, ExternalizedMapping) KeyedCollection<String, ExternalizedMapping>.RemoveItem(Int32) KeyedCollection<String, ExternalizedMapping>.SetItem(Int32, ExternalizedMapping) KeyedCollection<String, ExternalizedMapping>.Comparer KeyedCollection<String, ExternalizedMapping>.Item[String] KeyedCollection<String, ExternalizedMapping>.Dictionary Collection<ExternalizedMapping>.Add(ExternalizedMapping) Collection<ExternalizedMapping>.Clear() Collection<ExternalizedMapping>.CopyTo(ExternalizedMapping[], Int32) Collection<ExternalizedMapping>.Contains(ExternalizedMapping) Collection<ExternalizedMapping>.GetEnumerator() Collection<ExternalizedMapping>.IndexOf(ExternalizedMapping) Collection<ExternalizedMapping>.Insert(Int32, ExternalizedMapping) Collection<ExternalizedMapping>.Remove(ExternalizedMapping) Collection<ExternalizedMapping>.RemoveAt(Int32) Collection<ExternalizedMapping>.ClearItems() Collection<ExternalizedMapping>.InsertItem(Int32, ExternalizedMapping) Collection<ExternalizedMapping>.RemoveItem(Int32) Collection<ExternalizedMapping>.SetItem(Int32, ExternalizedMapping) Collection<ExternalizedMapping>.IEnumerable.GetEnumerator() Collection<ExternalizedMapping>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Expressions.ExternalizedMapping>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Expressions.ExternalizedMapping>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<ExternalizedMapping>.IList.Add(Object) Collection<ExternalizedMapping>.IList.Contains(Object) Collection<ExternalizedMapping>.IList.IndexOf(Object) Collection<ExternalizedMapping>.IList.Insert(Int32, Object) Collection<ExternalizedMapping>.IList.Remove(Object) Collection<ExternalizedMapping>.Count Collection<ExternalizedMapping>.Items Collection<ExternalizedMapping>.Item[Int32] Collection<ExternalizedMapping>.ICollection<ExternalizedMapping>.IsReadOnly Collection<ExternalizedMapping>.ICollection.IsSynchronized Collection<ExternalizedMapping>.ICollection.SyncRoot Collection<ExternalizedMapping>.IList.Item[Int32] Collection<ExternalizedMapping>.IList.IsReadOnly Collection<ExternalizedMapping>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ExternalizedMappingCollection : KeyedCollection<string, ExternalizedMapping>, IList<ExternalizedMapping>, ICollection<ExternalizedMapping>, IList, ICollection, IReadOnlyList<ExternalizedMapping>, IReadOnlyCollection<ExternalizedMapping>, IEnumerable<ExternalizedMapping>, IEnumerable Methods | Improve this Doc View Source GetKeyForItem(ExternalizedMapping) Extracts the key from the specified externalized property. Declaration protected override string GetKeyForItem(ExternalizedMapping item) Parameters Type Name Description ExternalizedMapping item The externalized property from which to extract the key. Returns Type Description String The key for the specified externalized property. The current key is the name of the externalized property. Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Bonsai.Expressions.ExternalizedMapping>.GetKeyForItem(Bonsai.Expressions.ExternalizedMapping) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Expressions.ExternalizedProperty.html": {
    "href": "api/Bonsai.Expressions.ExternalizedProperty.html",
    "title": "Class ExternalizedProperty",
    "keywords": "Class ExternalizedProperty Represents a property that has been externalized from a workflow element. Inheritance Object ExpressionBuilder ExternalizedProperty Implements IExpressionBuilder INamedElement Inherited Members ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Property)] public class ExternalizedProperty : ExpressionBuilder, IExpressionBuilder, INamedElement Constructors | Improve this Doc View Source ExternalizedProperty() Initializes a new instance of the ExternalizedProperty class. Declaration public ExternalizedProperty() Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange | Improve this Doc View Source Category Gets or sets an optional category for the externalized property. Declaration [Externalizable(false)] public string Category { get; set; } Property Value Type Description String | Improve this Doc View Source Description Gets or sets an optional description for the externalized property. Declaration [Externalizable(false)] public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source MemberName Gets or sets the name of the externalized class member. Declaration [Browsable(false)] public string MemberName { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the name of the externalized property. Declaration [Externalizable(false)] public string Name { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Explicit Interface Implementations | Improve this Doc View Source INamedElement.Name Declaration string INamedElement.Name { get; } Returns Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.FloatProperty.html": {
    "href": "api/Bonsai.Expressions.FloatProperty.html",
    "title": "Class FloatProperty",
    "keywords": "Class FloatProperty Represents a workflow property containing a single-precision floating-point number. Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName . Inheritance Object WorkflowProperty FloatProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class FloatProperty : WorkflowProperty Properties | Improve this Doc View Source Value Gets or sets the value of the property. Declaration [Range(0, 1)] public float Value { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<float> Generate() Returns Type Description IObservable < Single > An observable sequence of property values. | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<float> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable < Single > An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.FormatBuilder.html": {
    "href": "api/Bonsai.Expressions.FormatBuilder.html",
    "title": "Class FormatBuilder",
    "keywords": "Class FormatBuilder Represents an expression builder that applies a string formatting operation on elements of an observable sequence. The Format operator is a Transform that can be applied on sequences of any type. Each of the elements in the sequence will be converted to a String value using the specified Format . The format string follows the same syntax of the String.Format method. The Selector property can be used to specify the order of the values that will be converted to strings and inserted at a specified place in the format string. If no format string is specified, the default ToString method is used to convert each value in the sequence. Examples Note Below you can find various applications of the Format operator. For more formatting examples and a comprehensive list of supported format strings for different data types, see the extended discussion section of the String.Format method. Insert a string You can use the Format operator to insert the value of a sequence into another string. For example, the following workflow and format string visualizes the value and timestamp of each tick of a timer: Received value {0} at time {1}. Both {0} and {1} are format items. The index 0 refers to the first member specified in the Selector property of the Format node (in this case Value ). Index 1 refers to the second member (in this case Timestamp ). The output will be similar to: Received value 9 at time 12/25/2022 22:15:06 +00:00. We can specify a format string for the second member to remove the date part of the timestamp: Received value {0} at time {1:T}. Which will then produce the following output: Received value 9 at time 22:15:06. Format a file name You can format the names of data files dynamically using the Format operator. This is useful to generate file names relative to a common base path which can be easily changed in only one place: Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder FormatBuilder Implements IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class FormatBuilder : SelectBuilder, IExpressionBuilder Properties | Improve this Doc View Source Format Gets or sets the composite format string used to specify the output representation. Declaration public string Format { get; set; } Property Value Type Description String | Improve this Doc View Source Selector Gets or sets a string used to specify the properties that will be included in the output representation. Declaration public string Selector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source BuildSelector(Expression) Returns the expression that applies a string formatting operation on the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that applies a string formatting operation on the input parameter to the selector result. Overrides SelectBuilder.BuildSelector(Expression) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.GetValueOrDefaultBuilder.html": {
    "href": "api/Bonsai.Expressions.GetValueOrDefaultBuilder.html",
    "title": "Class GetValueOrDefaultBuilder",
    "keywords": "Class GetValueOrDefaultBuilder Represents an expression builder that retrieves the value of each nullable element in the sequence, or the specified default value. Note If the operator is applied to a sequence of single values, a workflow property will be inferred based on compatible operator overloads and exposed in the property grid. The value of this property will be used as the argument when applying the operator to the elements in the source sequence. If the operator is applied to a sequence of pairs of values, the second element in the pair is considered to be the argument to the operator. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder GetValueOrDefaultBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class GetValueOrDefaultBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression) Returns the expression that maps the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that maps the input parameter to the selector result. Overrides BinaryOperatorBuilder.BuildSelector(Expression) | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that retrieves the value of the left parameter, or the default value specified by the right parameter. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that retrieves the value of the left parameter, or the default value specified by the right parameter. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.GreaterThanBuilder.html": {
    "href": "api/Bonsai.Expressions.GreaterThanBuilder.html",
    "title": "Class GreaterThanBuilder",
    "keywords": "Class GreaterThanBuilder Represents an expression builder that applies a \"greater than\" numeric comparison on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder GreaterThanBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class GreaterThanBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies a \"greater than\" numeric comparison to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies a \"greater than\" numeric comparison to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.GreaterThanOrEqualBuilder.html": {
    "href": "api/Bonsai.Expressions.GreaterThanOrEqualBuilder.html",
    "title": "Class GreaterThanOrEqualBuilder",
    "keywords": "Class GreaterThanOrEqualBuilder Represents an expression builder that applies a \"greater than or equal\" numeric comparison on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder GreaterThanOrEqualBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class GreaterThanOrEqualBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies a \"greater than or equal\" numeric comparison to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies a \"greater than or equal\" numeric comparison to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.GroupWorkflowBuilder.html": {
    "href": "api/Bonsai.Expressions.GroupWorkflowBuilder.html",
    "title": "Class GroupWorkflowBuilder",
    "keywords": "Class GroupWorkflowBuilder Represents an expression builder that encapsulates complex expression builder logic into a single workflow element. The workflow nested inside GroupWorkflow specifies the entire behavior of this operator. Group nodes are used to organize larger workflows into modular building blocks. For most purposes, moving operations into a group workflow will not have any effects on the performance or function of the program. All observable sequences passed as arguments to the outer GroupWorkflow will be routed to the inner WorkflowInput nodes. Conversely, all notifications emitted by the sequence connected to the single WorkflowOutput node will be passed to any observers of the group node. It is possible to subscribe multiple times to the same group, in which case the nested workflow will run potentially in parallel and is considered to be reentrant. Tip Use ExternalizedMapping operators to expose configurable properties when selecting the nested workflow node. Externalized properties in a nested workflow work the same way as regular properties in other operators. They can be further externalized as part of other nested operators or dynamically assigned using PropertyMapping or InputMapping operators. Warning If the nested workflow is reentrant, properties of inner nodes are shared by all asynchronous operations which are running simultaneously. If the shared state never changes across reentrant operations (i.e. the state is immutable), this is not a problem. If shared state is changing dynamically, you should consider using synchronization primitives to make sure that state updates are coordinated across the different asynchronous operations. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder GroupWorkflowBuilder Implements INamedElement IPropertyMappingBuilder IWorkflowExpressionBuilder IExpressionBuilder Inherited Members WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Workflow)] public class GroupWorkflowBuilder : WorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IWorkflowExpressionBuilder, IExpressionBuilder Constructors | Improve this Doc View Source GroupWorkflowBuilder() Initializes a new instance of the GroupWorkflowBuilder class. Declaration public GroupWorkflowBuilder() | Improve this Doc View Source GroupWorkflowBuilder(ExpressionBuilderGraph) Initializes a new instance of the GroupWorkflowBuilder class with the specified expression builder workflow. Declaration public GroupWorkflowBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements INamedElement IPropertyMappingBuilder IWorkflowExpressionBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.html": {
    "href": "api/Bonsai.Expressions.html",
    "title": "Namespace Bonsai.Expressions",
    "keywords": "Namespace Bonsai.Expressions Classes AddBuilder Represents an expression builder that applies the arithmetic addition operation on paired elements of an observable sequence. BinaryOperatorBuilder Provides a base class for expression builders that define a simple binary operator on paired elements of an observable sequence. This is an abstract class. BitwiseAndBuilder Represents an expression builder that applies a bitwise AND operation on paired elements of an observable sequence. BitwiseNotBuilder Represents an expression builder that applies a bitwise complement operation on elements of an observable sequence. BitwiseOrBuilder Represents an expression builder that applies a bitwise OR operation on paired elements of an observable sequence. BooleanProperty Represents a workflow property containing a Boolean value. ByteProperty Represents a workflow property containing an 8-bit unsigned integer. CombinatorBuilder Represents an expression builder which uses a specified combinator instance to process one or more input observable sequences. CombinatorExpressionBuilder Provides a base class for expression builders that will generate combinator outputs that can be combined with dynamic property mappings. This is an abstract class. DateTimeOffsetProperty Represents a workflow property containing a timestamp in Coordinated Universal Time (UTC). DateTimeProperty Represents a workflow property containing a date and time of day. DisableBuilder Represents an expression builder that disables the generation of expression tree nodes from its decorated builder. DivideBuilder Represents an expression builder that applies the arithmetic division operation on paired elements of an observable sequence. DoubleProperty Represents a workflow property containing a double-precision floating-point number. EqualBuilder Represents an expression builder that applies an equality comparison on paired elements of an observable sequence. ExpressionBuilder Provides the abstract base class for all expression tree node builders. ExpressionBuilderArgument Represents a workflow argument assignment. This class determines the index of a workflow connection and is used to specify the order of input connections to any given node. ExpressionBuilderArgumentDescriptor Represents a serializable descriptor of an edge connecting two nodes in an expression builder graph. ExpressionBuilderGraph Represents a directed acyclic graph of expression generator nodes. Edges between generator nodes represent input assignments that chain the output of one generator to the input of the next. The order of the inputs is determined by the indices of the input arguments. ExpressionBuilderGraphDescriptor Represents a serializable descriptor of the nodes and edges in an expression builder graph. ExpressionBuilderGraphExtensions Provides a set of static methods for serializing, building and otherwise manipulating expression builder workflows. ExternalizedMapping Represents an externalized property of a workflow element. ExternalizedMappingBuilder Specifies a set of properties to be externalized from a workflow element. ExternalizedMappingCollection Represents a collection of externalized property mappings. ExternalizedProperty Represents a property that has been externalized from a workflow element. FloatProperty Represents a workflow property containing a single-precision floating-point number. FormatBuilder Represents an expression builder that applies a string formatting operation on elements of an observable sequence. GetValueOrDefaultBuilder Represents an expression builder that retrieves the value of each nullable element in the sequence, or the specified default value. GreaterThanBuilder Represents an expression builder that applies a \"greater than\" numeric comparison on paired elements of an observable sequence. GreaterThanOrEqualBuilder Represents an expression builder that applies a \"greater than or equal\" numeric comparison on paired elements of an observable sequence. GroupWorkflowBuilder Represents an expression builder that encapsulates complex expression builder logic into a single workflow element. IncludeWorkflowBuilder Represents an expression builder that uses an encapsulated workflow stored externally to generate its output. IndexBuilder Represents an expression builder that applies an index operator to the elements of an observable sequence. InputMappingBuilder Represents an expression builder that selects inner properties of elements of the sequence and assigns their values to properties of a workflow element. InspectBuilder Represents an expression builder that replays the latest notification from all the subscriptions made to its decorated builder. Int64Property Represents a workflow property containing a 64-bit signed integer. IntProperty Represents a workflow property containing a 32-bit signed integer. LeftShiftBuilder Represents an expression builder that applies a bitwise left-shift operation on elements of an observable sequence. LessThanBuilder Represents an expression builder that applies a \"less than\" numeric comparison on paired elements of an observable sequence. LessThanOrEqualBuilder Represents an expression builder that applies a \"less than or equal\" numeric comparison on paired elements of an observable sequence. LogicalAndBuilder Represents an expression builder that applies a conditional AND operation on paired elements of an observable sequence. LogicalOrBuilder Represents an expression builder that applies a conditional OR operation on paired elements of an observable sequence. MemberSelectorBuilder Represents an expression builder that defines a simple selector on the elements of an observable sequence by mapping specified member values into the output data type. ModBuilder Represents an expression builder that applies the arithmetic remainder operation on paired elements of an observable sequence. MulticastBuilder Provides a base class for expression builders that handle sharing of sequences between multiple branches of an expression builder workflow by means of an observable query. This is an abstract class. MulticastSubject Represents an expression builder that pushes a sequence of values into a shared subject. MultiplyBuilder Represents an expression builder that applies the arithmetic multiplication operation on paired elements of an observable sequence. NegateBuilder Represents an expression builder that applies an arithmetic negation operation on elements of an observable sequence. NotEqualBuilder Represents an expression builder that applies an inequality comparison on paired elements of an observable sequence. ParseBuilder Represents an expression builder that applies a pattern matching operation on elements of an observable sequence. PropertyMapping Represents a dynamic assignment between a selected input source and a property of a workflow element. PropertyMappingBuilder Represents an expression builder that assigns values of an observable sequence to properties of a workflow element. PropertyMappingCollection Represents a collection of dynamic property mappings. PropertySource Represents a data source compatible with the specified workflow element property. PropertySource<TElement, TValue> Represents a data source compatible with the specified workflow element property. RightShiftBuilder Represents an expression builder that applies a bitwise right-shift operation on elements of an observable sequence. SelectBuilder Provides a base class for expression builders that define a simple selector on the elements of an observable sequence. This is an abstract class. SingleArgumentExpressionBuilder Provides a base class for expression builders that require a single input argument. This is an abstract class. SingleArgumentWorkflowExpressionBuilder Provides a base class for workflow expression builders that require a single input argument. This is an abstract class. StringProperty Represents a workflow property containing Unicode text. SubjectBuilder Provides a base class for expression builders that broadcast the values of an observable sequence to multiple subscribers using a shared subject. This is an abstract class. SubjectBuilder<T> Provides a base class for expression builders that declare a shared subject of the specified type. This is an abstract class. SubjectExpressionBuilder Provides a base class for expression builders that declare shared subjects. This is an abstract class. SubscribeSubject Represents an expression builder that generates a sequence of values by subscribing to a shared subject. SubscribeSubject<T> Represents an expression builder that generates a sequence of values by subscribing to a shared subject of the specified type. SubtractBuilder Represents an expression builder that applies the arithmetic subtraction operation on paired elements of an observable sequence. TimeSpanProperty Represents a workflow property containing a time interval. TypeMapping Represents the target type to be created from selected member variables. This type is manipulated internally by InputMappingBuilder , MemberSelectorBuilder and VisualizerMappingBuilder to specify output and visualizer types. TypeMapping<T> Represents the target type to be created from selected member variables. This type is manipulated internally by InputMappingBuilder and MemberSelectorBuilder to force a specific output type. UnitBuilder Represents an expression builder that generates a sequence of Unit elements. UnknownTypeBuilder Represents an expression builder that is a proxy for an unknown type. VariableArgumentExpressionBuilder Provides a base class for expression builders that can have a variable number of input arguments. This is an abstract class. VisualizerMapping Represents the assignment of a specified input source and its corresponding visualizer to a workflow element. VisualizerMappingBuilder Represents an expression builder specifying an observable sequence to be combined in a mashup visualizer. WorkflowExpressionBuilder Provides a base class for expression builders that generate their output by means of an encapsulated workflow. WorkflowInputBuilder Represents an expression builder that generates an observable sequence to be used as input to an encapsulated workflow. WorkflowInputBuilder<TSource> Represents an expression builder that generates an observable sequence of the specified type to be used as input to an encapsulated workflow. WorkflowOutputBuilder Represents the expression that is used as the output of an encapsulated workflow. WorkflowProperty Represents a workflow property. WorkflowProperty<TValue> Represents a strongly typed workflow property. XorBuilder Represents an expression builder that applies a bitwise XOR operation on paired elements of an observable sequence. ZeroArgumentExpressionBuilder Provides a base class for expression builders that require zero input arguments. This is an abstract class. Interfaces IExpressionBuilder Defines methods that support the generation of expression tree nodes from a collection of expression input arguments. IPropertyMappingBuilder Represents expression builder instances that can dynamically remap input sources into object property assignments. IWorkflowExpressionBuilder Represents expression builder instances that generate their output by means of an encapsulated workflow."
  },
  "api/Bonsai.Expressions.IExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.IExpressionBuilder.html",
    "title": "Interface IExpressionBuilder",
    "keywords": "Interface IExpressionBuilder Defines methods that support the generation of expression tree nodes from a collection of expression input arguments. Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public interface IExpressionBuilder Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node."
  },
  "api/Bonsai.Expressions.IncludeWorkflowBuilder.html": {
    "href": "api/Bonsai.Expressions.IncludeWorkflowBuilder.html",
    "title": "Class IncludeWorkflowBuilder",
    "keywords": "Class IncludeWorkflowBuilder Represents an expression builder that uses an encapsulated workflow stored externally to generate its output. The IncludeWorkflow operator works in exactly the same way as GroupWorkflow , with the difference that the nested workflow definition is stored externally in a file, rather than locally in the node itself. Include nodes are used to organize larger workflows into modular building blocks. They allow reusing functionality across different parts of a workflow, or even across different projects. Changing the definition of an included workflow will be automatically reflected in all places where that workflow is reused. All observable sequences passed as arguments to the outer IncludeWorkflow will be routed to the inner WorkflowInput nodes. Conversely, all notifications emitted by the sequence connected to the single WorkflowOutput node will be passed to any observers of the include workflow node. It is possible to subscribe multiple times to the same include workflow, in which case the nested workflow will run potentially in parallel and is considered to be reentrant. Note Externalized properties contained inside the included workflow will be exposed when selecting the IncludeWorkflow node. Any changes to the values of these properties can be recovered, even if the included workflow is reused multiple times in different parts of the program. They can also be further externalized as part of other nested operators or dynamically assigned using PropertyMapping or InputMapping operators. Warning If the nested workflow is reentrant, properties of inner nodes are shared by all asynchronous operations which are running simultaneously. If the shared state never changes across reentrant operations (i.e. the state is immutable), this is not a problem. If shared state is changing dynamically, you should consider using synchronization primitives to make sure that state updates are coordinated across the different asynchronous operations. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder IncludeWorkflowBuilder Implements IWorkflowExpressionBuilder IExpressionBuilder INamedElement Inherited Members VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Workflow)] public sealed class IncludeWorkflowBuilder : VariableArgumentExpressionBuilder, IWorkflowExpressionBuilder, IExpressionBuilder, INamedElement Constructors | Improve this Doc View Source IncludeWorkflowBuilder() Initializes a new instance of the IncludeWorkflowBuilder class. Declaration public IncludeWorkflowBuilder() Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments the included workflow accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides VariableArgumentExpressionBuilder.ArgumentRange | Improve this Doc View Source Description Gets a description for the included workflow. Declaration [Browsable(false)] public string Description { get; } Property Value Type Description String | Improve this Doc View Source Name Gets the name of the included workflow. Declaration [Browsable(false)] public string Name { get; } Property Value Type Description String | Improve this Doc View Source Path Gets or sets the path of the workflow to include. Declaration [Externalizable(false)] [FileNameFilter(\"Bonsai Files (*.bonsai)|*.bonsai\")] public string Path { get; set; } Property Value Type Description String | Improve this Doc View Source PropertiesXml Gets or sets the XML representation of externalized property values from the included workflow. Declaration [Browsable(false)] public XElement[] PropertiesXml { get; set; } Property Value Type Description XElement [] | Improve this Doc View Source Workflow Gets the expression builder workflow that will be used to generate the output expression tree. Declaration [Browsable(false)] public ExpressionBuilderGraph Workflow { get; } Property Value Type Description ExpressionBuilderGraph Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.IndexBuilder.html": {
    "href": "api/Bonsai.Expressions.IndexBuilder.html",
    "title": "Class IndexBuilder",
    "keywords": "Class IndexBuilder Represents an expression builder that applies an index operator to the elements of an observable sequence. Note If the operator is applied to a sequence of single values, a workflow property will be inferred based on compatible operator overloads and exposed in the property grid. The value of this property will be used as the argument when applying the operator to the elements in the source sequence. If the operator is applied to a sequence of pairs of values, the second element in the pair is considered to be the argument to the operator. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder IndexBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class IndexBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression) Returns the expression that maps the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that maps the input parameter to the selector result. Overrides BinaryOperatorBuilder.BuildSelector(Expression) | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies an index operator to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies an index operator to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.InputMappingBuilder.html": {
    "href": "api/Bonsai.Expressions.InputMappingBuilder.html",
    "title": "Class InputMappingBuilder",
    "keywords": "Class InputMappingBuilder Represents an expression builder that selects inner properties of elements of the sequence and assigns their values to properties of a workflow element. Fundamentally, the InputMapping operator works exactly the same way as PropertyMapping , but now the connection from the mapping operator to its target node is done through the upstream sources. In this case, only values from the source sequence can be used to map properties in the target node. However, it is possible to specify which specific member of the original data source will be selected as input to the target node by setting the Selector property. Whenever the original input sequence sends out a new data item, all the specified property mappings will be updated at the same time before this item is finally allowed to go through and notify the target. In this way, you can be sure that no property changes are performed between upstream notifications. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder PropertyMappingBuilder InputMappingBuilder Implements IExpressionBuilder INamedElement Inherited Members PropertyMappingBuilder.PropertyMappings PropertyMappingBuilder.INamedElement.Name PropertyMappingBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class InputMappingBuilder : PropertyMappingBuilder, IExpressionBuilder, INamedElement Properties | Improve this Doc View Source Selector Gets or sets a string used to select the input element member to project as output of the sequence. Declaration public string Selector { get; set; } Property Value Type Description String | Improve this Doc View Source TypeMapping Gets or sets an optional type mapping specifying the data type which the selected properties will be projected into. Declaration [Externalizable(false)] [TypeConverter(typeof(TypeMappingConverter))] public TypeMapping TypeMapping { get; set; } Property Value Type Description TypeMapping Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.InspectBuilder.html": {
    "href": "api/Bonsai.Expressions.InspectBuilder.html",
    "title": "Class InspectBuilder",
    "keywords": "Class InspectBuilder Represents an expression builder that replays the latest notification from all the subscriptions made to its decorated builder. Inheritance Object ExpressionBuilder InspectBuilder Implements IExpressionBuilder INamedElement Inherited Members ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public sealed class InspectBuilder : ExpressionBuilder, IExpressionBuilder, INamedElement Constructors | Improve this Doc View Source InspectBuilder(ExpressionBuilder) Initializes a new instance of the InspectBuilder class with the specified expression builder. Declaration public InspectBuilder(ExpressionBuilder builder) Parameters Type Name Description ExpressionBuilder builder The expression builder whose notifications will be replayed by this inspector. Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that the decorated expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange | Improve this Doc View Source Builder Gets the expression builder that is being decorated by this inspector. Declaration public ExpressionBuilder Builder { get; } Property Value Type Description ExpressionBuilder | Improve this Doc View Source ErrorEx Gets an observable sequence that multicasts error notifications from all subscriptions made to the output of the decorated expression builder. Declaration public IObservable<Exception> ErrorEx { get; } Property Value Type Description IObservable < Exception > | Improve this Doc View Source Name Gets the display name of the decorated expression builder. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source ObservableType Gets the type of the elements in the output observable sequence. Declaration public Type ObservableType { get; } Property Value Type Description Type | Improve this Doc View Source Output Gets an observable sequence that multicasts notifications from all the subscriptions made to the output of the decorated expression builder. Declaration public IObservable<IObservable<object>> Output { get; } Property Value Type Description IObservable < IObservable < Object >> | Improve this Doc View Source PublishNotifications Gets or sets a value indicating whether runtime notifications from the decorated expression builder should be multicast by this inspector. Declaration public bool PublishNotifications { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.Int64Property.html": {
    "href": "api/Bonsai.Expressions.Int64Property.html",
    "title": "Class Int64Property",
    "keywords": "Class Int64Property Represents a workflow property containing a 64-bit signed integer. Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName . Inheritance Object WorkflowProperty Int64Property Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class Int64Property : WorkflowProperty Properties | Improve this Doc View Source Value Gets or sets the value of the property. Declaration [Range(-9223372036854775808L, 9223372036854775807L)] public long Value { get; set; } Property Value Type Description Int64 Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<long> Generate() Returns Type Description IObservable < Int64 > An observable sequence of property values. | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<long> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable < Int64 > An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.IntProperty.html": {
    "href": "api/Bonsai.Expressions.IntProperty.html",
    "title": "Class IntProperty",
    "keywords": "Class IntProperty Represents a workflow property containing a 32-bit signed integer. Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName . Inheritance Object WorkflowProperty IntProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class IntProperty : WorkflowProperty Properties | Improve this Doc View Source Value Gets or sets the value of the property. Declaration [Range(-2147483648, 2147483647)] public int Value { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<int> Generate() Returns Type Description IObservable < Int32 > An observable sequence of property values. | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<int> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable < Int32 > An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.IPropertyMappingBuilder.html": {
    "href": "api/Bonsai.Expressions.IPropertyMappingBuilder.html",
    "title": "Interface IPropertyMappingBuilder",
    "keywords": "Interface IPropertyMappingBuilder Represents expression builder instances that can dynamically remap input sources into object property assignments. Inherited Members IExpressionBuilder.ArgumentRange IExpressionBuilder.Build(IEnumerable<Expression>) Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public interface IPropertyMappingBuilder : IExpressionBuilder"
  },
  "api/Bonsai.Expressions.IWorkflowExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.IWorkflowExpressionBuilder.html",
    "title": "Interface IWorkflowExpressionBuilder",
    "keywords": "Interface IWorkflowExpressionBuilder Represents expression builder instances that generate their output by means of an encapsulated workflow. Inherited Members IExpressionBuilder.ArgumentRange IExpressionBuilder.Build(IEnumerable<Expression>) Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public interface IWorkflowExpressionBuilder : IExpressionBuilder Properties | Improve this Doc View Source Workflow Gets the expression builder workflow that will be used to generate the output expression tree. Declaration ExpressionBuilderGraph Workflow { get; } Property Value Type Description ExpressionBuilderGraph"
  },
  "api/Bonsai.Expressions.LeftShiftBuilder.html": {
    "href": "api/Bonsai.Expressions.LeftShiftBuilder.html",
    "title": "Class LeftShiftBuilder",
    "keywords": "Class LeftShiftBuilder Represents an expression builder that applies a bitwise left-shift operation on elements of an observable sequence. Note If the operator is applied to a sequence of single values, a workflow property will be inferred based on compatible operator overloads and exposed in the property grid. The value of this property will be used as the argument when applying the operator to the elements in the source sequence. If the operator is applied to a sequence of pairs of values, the second element in the pair is considered to be the argument to the operator. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder LeftShiftBuilder Implements IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class LeftShiftBuilder : SelectBuilder, IExpressionBuilder Properties | Improve this Doc View Source Value Gets or sets the number of positions by which to shift the bits of the input elements. Declaration public int Value { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source BuildSelector(Expression) Returns the expression that applies a bitwise left-shift operation to the input parameter. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that applies a bitwise left-shift operation to the input parameter. Overrides SelectBuilder.BuildSelector(Expression) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.LessThanBuilder.html": {
    "href": "api/Bonsai.Expressions.LessThanBuilder.html",
    "title": "Class LessThanBuilder",
    "keywords": "Class LessThanBuilder Represents an expression builder that applies a \"less than\" numeric comparison on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder LessThanBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class LessThanBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies a \"less than\" numeric comparison to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies a \"less than\" numeric comparison to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.LessThanOrEqualBuilder.html": {
    "href": "api/Bonsai.Expressions.LessThanOrEqualBuilder.html",
    "title": "Class LessThanOrEqualBuilder",
    "keywords": "Class LessThanOrEqualBuilder Represents an expression builder that applies a \"less than or equal\" numeric comparison on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder LessThanOrEqualBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class LessThanOrEqualBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies a \"less than or equal\" numeric comparison to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies a \"less than or equal\" numeric comparison to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.LogicalAndBuilder.html": {
    "href": "api/Bonsai.Expressions.LogicalAndBuilder.html",
    "title": "Class LogicalAndBuilder",
    "keywords": "Class LogicalAndBuilder Represents an expression builder that applies a conditional AND operation on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder LogicalAndBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class LogicalAndBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies the conditional AND operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the conditional AND operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.LogicalOrBuilder.html": {
    "href": "api/Bonsai.Expressions.LogicalOrBuilder.html",
    "title": "Class LogicalOrBuilder",
    "keywords": "Class LogicalOrBuilder Represents an expression builder that applies a conditional OR operation on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder LogicalOrBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class LogicalOrBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies the conditional OR operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the conditional OR operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.MemberSelectorBuilder.html": {
    "href": "api/Bonsai.Expressions.MemberSelectorBuilder.html",
    "title": "Class MemberSelectorBuilder",
    "keywords": "Class MemberSelectorBuilder Represents an expression builder that defines a simple selector on the elements of an observable sequence by mapping specified member values into the output data type. The MemberSelector operator is used to quickly extract member fields and properties out of the elements of the source sequence. Multiple members can be specified using a comma-separated list in the Selector property, in which case the output type will be a tuple of all selected member types. The TypeMapping property can be used to specify which type conversion to use when chaining the selected members into downstream operators. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder MemberSelectorBuilder Implements IExpressionBuilder INamedElement Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class MemberSelectorBuilder : SelectBuilder, IExpressionBuilder, INamedElement Properties | Improve this Doc View Source Selector Gets or sets a string used to select the input element members that will be projected as output of the sequence. Declaration public string Selector { get; set; } Property Value Type Description String | Improve this Doc View Source TypeMapping Gets or sets an optional type mapping specifying the data type which the selected properties will be projected into. Declaration [Externalizable(false)] [TypeConverter(typeof(TypeMappingConverter))] public TypeMapping TypeMapping { get; set; } Property Value Type Description TypeMapping Methods | Improve this Doc View Source BuildSelector(Expression) Returns the expression that maps the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that maps the input parameter to the selector result. Overrides SelectBuilder.BuildSelector(Expression) Explicit Interface Implementations | Improve this Doc View Source INamedElement.Name Declaration string INamedElement.Name { get; } Returns Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ModBuilder.html": {
    "href": "api/Bonsai.Expressions.ModBuilder.html",
    "title": "Class ModBuilder",
    "keywords": "Class ModBuilder Represents an expression builder that applies the arithmetic remainder operation on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder ModBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ModBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies the arithmetic remainder operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the arithmetic remainder operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.MulticastBuilder.html": {
    "href": "api/Bonsai.Expressions.MulticastBuilder.html",
    "title": "Class MulticastBuilder",
    "keywords": "Class MulticastBuilder Provides a base class for expression builders that handle sharing of sequences between multiple branches of an expression builder workflow by means of an observable query. This is an abstract class. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder MulticastBuilder Publish Replay Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class MulticastBuilder : SingleArgumentWorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.MulticastSubject.html": {
    "href": "api/Bonsai.Expressions.MulticastSubject.html",
    "title": "Class MulticastSubject",
    "keywords": "Class MulticastSubject Represents an expression builder that pushes a sequence of values into a shared subject. The MulticastSubject operator works like a sink which accesses the subject with the specified name, at the same scope level or above, and forwards any values emitted by the source sequence to the shared subject. Depending on the behavior of the subject, these values will then be passed to any operators subscribed to the subject, including any termination and error notifications. For more information on subjects, the different types of subject available, and the rules for naming and finding subjects, see the Subjects section of the manual. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder MulticastSubject Implements IExpressionBuilder INamedElement Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public class MulticastSubject : SingleArgumentExpressionBuilder, IExpressionBuilder, INamedElement Properties | Improve this Doc View Source Name Gets or sets the name of the shared subject. Declaration [TypeConverter(typeof(SubjectNameConverter))] public string Name { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.MultiplyBuilder.html": {
    "href": "api/Bonsai.Expressions.MultiplyBuilder.html",
    "title": "Class MultiplyBuilder",
    "keywords": "Class MultiplyBuilder Represents an expression builder that applies the arithmetic multiplication operation on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder MultiplyBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class MultiplyBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies the arithmetic multiplication operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the arithmetic multiplication operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.NegateBuilder.html": {
    "href": "api/Bonsai.Expressions.NegateBuilder.html",
    "title": "Class NegateBuilder",
    "keywords": "Class NegateBuilder Represents an expression builder that applies an arithmetic negation operation on elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder NegateBuilder Implements IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class NegateBuilder : SelectBuilder, IExpressionBuilder Methods | Improve this Doc View Source BuildSelector(Expression) Returns the expression that applies an arithmetic negation operation on the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that applies an arithmetic negation operation on the input parameter to the selector result. Overrides SelectBuilder.BuildSelector(Expression) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.NotEqualBuilder.html": {
    "href": "api/Bonsai.Expressions.NotEqualBuilder.html",
    "title": "Class NotEqualBuilder",
    "keywords": "Class NotEqualBuilder Represents an expression builder that applies an inequality comparison on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder NotEqualBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class NotEqualBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies an inequality comparison to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies an inequality comparison to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ParseBuilder.html": {
    "href": "api/Bonsai.Expressions.ParseBuilder.html",
    "title": "Class ParseBuilder",
    "keywords": "Class ParseBuilder Represents an expression builder that applies a pattern matching operation on elements of an observable sequence. The Parse operator is a Transform on sequences of String values. Each of the strings in the sequence will be matched against the specified Pattern using the .NET regular expression engine ( Regex ). If a Separator is specified, every input string will first be split using the delimiter, and each substring will then be matched against the regular expression. The output type is automatically inferred from the structure of the parse pattern. If a separator is used, the output will be an array containing the results of matching each delimited substring against the parse pattern. If any of the values in the input sequence fails to match, an error will be raised and the sequence will be terminated. Note Multi-character strings can be used to specify both the pattern and the separator. This can sometimes help to parse text formats with more complex tokens. For more flexible or conditional parsing, it is also possible to chain multiple Parse operators in a sequence, by matching against the placeholder %s at the end of the sequence. This will match and capture any remaining text for downstream processing. Warning For convenience, both Pattern and Separator properties will accept the use of character escapes to represent specific white space or unicode characters. See the list of supported character escapes in .NET for more information. Examples The following examples illustrate using different combinations of the Pattern and Separator properties to match different kinds of formatted text data. Pattern Separator Type Description Example %f float Match a floating-point number. 5.0 %f;%i Tuple < float , int > Match a floating-point number and an integer separated by a semicolon. 5.1;5 %f , float [] Match each comma-delimited substring with a floating-point number. 3.2, 5.6, 8.9 \\(%f,%f\\) ; Tuple < float , float >[] Match each semicolon-delimited substring with a pair of floating-point numbers surrounded by parentheses. (1, 2); (3.14, 4.5) %s,msg:%b \\t Tuple < string , bool >[] Match each tab-delimited substring with a pattern containing a string and boolean. tag1,msg:true tag2,msg:false Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder ParseBuilder Implements IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class ParseBuilder : SelectBuilder, IExpressionBuilder Properties | Improve this Doc View Source Pattern Gets or sets the parse pattern to match, including data type format specifiers. Declaration [TypeConverter(typeof(ParseBuilder.PatternConverter))] public string Pattern { get; set; } Property Value Type Description String Remarks The parse pattern may contain zero or more placeholder characters. Each placeholder is always preceded by the character % , and must specify one of the allowed data type format specifiers (see table below). For each placeholder in the pattern, the Parse method of the corresponding data type will be called to convert the matched string to an equivalent instance of that type. Note Some placeholder conversions will account for white space characters surrounding the input, e.g. the parse pattern %i,%i will work the same for 1,2 or 1, 2 . Warning All parse conversions are done using the invariant culture . Specifying culture-specific conversions is not currently supported. There is also no support for implicit numeric conversions, e.g. attempting to parse 5.0 using %i will throw an error. If the parse pattern is null or empty, the operator will simply return the raw input value. If a non-empty parse pattern is provided, but no placeholder characters are specified, the result type will be of type Unit . Otherwise, the output type will be a tuple of the types corresponding to each of the placeholder characters, in order of their appearance in the parse pattern. Pattern Description %B Match an unsigned 8-bit integer ( byte ). %h Match a signed 16-bit integer ( short ). %H Match an unsigned 16-bit integer ( ushort ). %i Match a signed 32-bit integer ( int ). %I Match an unsigned 32-bit integer ( uint ). %l Match a signed 64-bit integer ( long ). %L Match an unsigned 64-bit integer ( ulong ). %f Match a single-precision floating-point number ( float ). %d Match a double-precision floating-point number ( double ). %b Match a Boolean ( true or false ) value ( bool ). %c Match a single character as a UTF-16 code unit ( char ). %s Match a text fragment using UTF-16 encoding ( string ). %t Match a timestamp measured relative to UTC time ( DateTimeOffset ). %T Match a time interval ( TimeSpan ). Warning The parse pattern is a regular expression string and certain characters are reserved as special tokens, such as parentheses. It is possible to use these special characters by prefixing them with a backslash (e.g. \\( for a left parentheses). | Improve this Doc View Source Separator Gets or sets the optional separator used to delimit elements in variable length patterns. Declaration public string Separator { get; set; } Property Value Type Description String Remarks If both Separator and Pattern are specified, the separator will be used first to split the input strings. Each delimited substring will then be matched against the regular expression specified in the parse pattern. The result will be an array of the output type inferred from the structure of the parse pattern. Methods | Improve this Doc View Source BuildSelector(Expression) Returns the expression that applies a pattern matching operation on the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that applies a pattern matching operation on the input parameter to the selector result. Overrides SelectBuilder.BuildSelector(Expression) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.PropertyMapping.html": {
    "href": "api/Bonsai.Expressions.PropertyMapping.html",
    "title": "Class PropertyMapping",
    "keywords": "Class PropertyMapping Represents a dynamic assignment between a selected input source and a property of a workflow element. Inheritance Object PropertyMapping Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public sealed class PropertyMapping Constructors | Improve this Doc View Source PropertyMapping() Initializes a new instance of the PropertyMapping class. Declaration public PropertyMapping() | Improve this Doc View Source PropertyMapping(String, String) Initializes a new instance of the PropertyMapping class with the specified property name and source selector. Declaration public PropertyMapping(string name, string selector) Parameters Type Name Description String name The name of the property that will be assigned by this mapping. String selector A string that will be used to select the input source that will assign values to this property mapping. Properties | Improve this Doc View Source Name Gets or sets the name of the property that will be assigned by this mapping. Declaration [TypeConverter(typeof(PropertyMappingNameConverter))] public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Selector Gets or sets a string that will be used to select the input source that will assign values to this property mapping. Declaration public string Selector { get; set; } Property Value Type Description String"
  },
  "api/Bonsai.Expressions.PropertyMappingBuilder.html": {
    "href": "api/Bonsai.Expressions.PropertyMappingBuilder.html",
    "title": "Class PropertyMappingBuilder",
    "keywords": "Class PropertyMappingBuilder Represents an expression builder that assigns values of an observable sequence to properties of a workflow element. The connection between the property mapping and its target node only affects the state of properties. The behaviour of the operator will otherwise remain unaffected, since the subscription to the mapping is not considered as a proper upstream source. This is indicated in the editor by the dashed line linking the property mapping operator to its target. Warning Because property values are updated independently, this means that values can change even while the target operator is reacting to notifications from other nodes. Care must be taken to ensure that changing the property state in this way does not break the behaviour of the workflow. Specifically, some operators respond to changes in their parameters only at specific moments. For example, the parameters of the Timer operator must be set before the observable sequence is initialized. In this case, the input to the externalized property needs to be emitted immediately during the subscription phase for the mapping to work. Multiple properties can be mapped simultaneously from the same source sequence when using PropertyMapping . You can select which properties to map by using the editors available in the property grid. For each mapped property you must specify a source selector, i.e. an expression specifying which members of the input data type are used to assign values to the mapped property. Note If the type of the selected member does not match the type of the property, a conversion is attempted. If no compatible conversion is available, the compiler checks whether it is possible to construct the corresponding data type from the selected members. For example, it would be possible to map to a Point type by selecting two numeric values from the source sequence. In this case, the values would be used to construct a new point instance by assigning them to the X and Y parameters of the type constructor. In each property mapping operator, all mapped properties are updated at the same time every time the source sequence sends out a new value. It is also possible to connect property mapping operators to multiple target nodes. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder PropertyMappingBuilder InputMappingBuilder Implements IExpressionBuilder INamedElement Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Property)] public class PropertyMappingBuilder : SingleArgumentExpressionBuilder, IExpressionBuilder, INamedElement Properties | Improve this Doc View Source PropertyMappings Gets a collection of property mappings that specify how input values are assigned to properties of the workflow element. Declaration public PropertyMappingCollection PropertyMappings { get; } Property Value Type Description PropertyMappingCollection Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Explicit Interface Implementations | Improve this Doc View Source INamedElement.Name Declaration string INamedElement.Name { get; } Returns Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.PropertyMappingCollection.html": {
    "href": "api/Bonsai.Expressions.PropertyMappingCollection.html",
    "title": "Class PropertyMappingCollection",
    "keywords": "Class PropertyMappingCollection Represents a collection of dynamic property mappings. Inheritance Object Collection < PropertyMapping > KeyedCollection < String , PropertyMapping > PropertyMappingCollection Implements IList < PropertyMapping > ICollection < PropertyMapping > IList ICollection IReadOnlyList < PropertyMapping > IReadOnlyCollection < PropertyMapping > IEnumerable < PropertyMapping > IEnumerable Inherited Members KeyedCollection<String, PropertyMapping>.Contains(String) KeyedCollection<String, PropertyMapping>.Remove(String) KeyedCollection<String, PropertyMapping>.ChangeItemKey(PropertyMapping, String) KeyedCollection<String, PropertyMapping>.ClearItems() KeyedCollection<String, PropertyMapping>.GetKeyForItem(PropertyMapping) KeyedCollection<String, PropertyMapping>.InsertItem(Int32, PropertyMapping) KeyedCollection<String, PropertyMapping>.RemoveItem(Int32) KeyedCollection<String, PropertyMapping>.SetItem(Int32, PropertyMapping) KeyedCollection<String, PropertyMapping>.Comparer KeyedCollection<String, PropertyMapping>.Item[String] KeyedCollection<String, PropertyMapping>.Dictionary Collection<PropertyMapping>.Add(PropertyMapping) Collection<PropertyMapping>.Clear() Collection<PropertyMapping>.CopyTo(PropertyMapping[], Int32) Collection<PropertyMapping>.Contains(PropertyMapping) Collection<PropertyMapping>.GetEnumerator() Collection<PropertyMapping>.IndexOf(PropertyMapping) Collection<PropertyMapping>.Insert(Int32, PropertyMapping) Collection<PropertyMapping>.Remove(PropertyMapping) Collection<PropertyMapping>.RemoveAt(Int32) Collection<PropertyMapping>.ClearItems() Collection<PropertyMapping>.InsertItem(Int32, PropertyMapping) Collection<PropertyMapping>.RemoveItem(Int32) Collection<PropertyMapping>.SetItem(Int32, PropertyMapping) Collection<PropertyMapping>.IEnumerable.GetEnumerator() Collection<PropertyMapping>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Expressions.PropertyMapping>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Expressions.PropertyMapping>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<PropertyMapping>.IList.Add(Object) Collection<PropertyMapping>.IList.Contains(Object) Collection<PropertyMapping>.IList.IndexOf(Object) Collection<PropertyMapping>.IList.Insert(Int32, Object) Collection<PropertyMapping>.IList.Remove(Object) Collection<PropertyMapping>.Count Collection<PropertyMapping>.Items Collection<PropertyMapping>.Item[Int32] Collection<PropertyMapping>.ICollection<PropertyMapping>.IsReadOnly Collection<PropertyMapping>.ICollection.IsSynchronized Collection<PropertyMapping>.ICollection.SyncRoot Collection<PropertyMapping>.IList.Item[Int32] Collection<PropertyMapping>.IList.IsReadOnly Collection<PropertyMapping>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class PropertyMappingCollection : KeyedCollection<string, PropertyMapping>, IList<PropertyMapping>, ICollection<PropertyMapping>, IList, ICollection, IReadOnlyList<PropertyMapping>, IReadOnlyCollection<PropertyMapping>, IEnumerable<PropertyMapping>, IEnumerable Methods | Improve this Doc View Source GetKeyForItem(PropertyMapping) Extracts the key from the specified property mapping. Declaration protected override string GetKeyForItem(PropertyMapping item) Parameters Type Name Description PropertyMapping item The property mapping from which to extract the key. Returns Type Description String The key for the specified property mapping. The current key is the name of the property mapping. Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Bonsai.Expressions.PropertyMapping>.GetKeyForItem(Bonsai.Expressions.PropertyMapping) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Expressions.PropertySource.html": {
    "href": "api/Bonsai.Expressions.PropertySource.html",
    "title": "Class PropertySource",
    "keywords": "Class PropertySource Represents a data source compatible with the specified workflow element property. Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName . Inheritance Object ExpressionBuilder PropertySource PropertySource<TElement, TValue> Implements IExpressionBuilder INamedElement Inherited Members ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public abstract class PropertySource : ExpressionBuilder, IExpressionBuilder, INamedElement Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange | Improve this Doc View Source MemberName Gets or sets the name of the externalized class member. Declaration [Browsable(false)] public string MemberName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Explicit Interface Implementations | Improve this Doc View Source INamedElement.Name Declaration string INamedElement.Name { get; } Returns Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.PropertySource-2.html": {
    "href": "api/Bonsai.Expressions.PropertySource-2.html",
    "title": "Class PropertySource<TElement, TValue>",
    "keywords": "Class PropertySource<TElement, TValue> Represents a data source compatible with the specified workflow element property. Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName . Inheritance Object ExpressionBuilder PropertySource PropertySource<TElement, TValue> Implements IExpressionBuilder INamedElement Inherited Members PropertySource.ArgumentRange PropertySource.MemberName PropertySource.INamedElement.Name PropertySource.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class PropertySource<TElement, TValue> : PropertySource, IExpressionBuilder, INamedElement Type Parameters Name Description TElement The type of the workflow element from which the property data source was constructed. TValue The type of the property values. Properties | Improve this Doc View Source Value Gets or sets the value of the property. Declaration public TValue Value { get; set; } Property Value Type Description TValue Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.RightShiftBuilder.html": {
    "href": "api/Bonsai.Expressions.RightShiftBuilder.html",
    "title": "Class RightShiftBuilder",
    "keywords": "Class RightShiftBuilder Represents an expression builder that applies a bitwise right-shift operation on elements of an observable sequence. Note If the operator is applied to a sequence of single values, a workflow property will be inferred based on compatible operator overloads and exposed in the property grid. The value of this property will be used as the argument when applying the operator to the elements in the source sequence. If the operator is applied to a sequence of pairs of values, the second element in the pair is considered to be the argument to the operator. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder RightShiftBuilder Implements IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class RightShiftBuilder : SelectBuilder, IExpressionBuilder Properties | Improve this Doc View Source Value Gets or sets the number of positions by which to shift the bits of the input elements. Declaration public int Value { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source BuildSelector(Expression) Returns the expression that applies a bitwise right-shift operation to the input parameter. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that applies a bitwise right-shift operation to the input parameter. Overrides SelectBuilder.BuildSelector(Expression) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SelectBuilder.html": {
    "href": "api/Bonsai.Expressions.SelectBuilder.html",
    "title": "Class SelectBuilder",
    "keywords": "Class SelectBuilder Provides a base class for expression builders that define a simple selector on the elements of an observable sequence. This is an abstract class. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder ConvertToArray BinaryOperatorBuilder BitwiseNotBuilder FormatBuilder LeftShiftBuilder MemberSelectorBuilder NegateBuilder ParseBuilder RightShiftBuilder Format Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Transform)] public abstract class SelectBuilder : SingleArgumentExpressionBuilder, IExpressionBuilder Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) | Improve this Doc View Source BuildSelector(Expression) When overridden in a derived class, returns the expression that maps the specified input parameter to the selector result. Declaration protected abstract Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that maps the input parameter to the selector result. Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SingleArgumentExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.SingleArgumentExpressionBuilder.html",
    "title": "Class SingleArgumentExpressionBuilder",
    "keywords": "Class SingleArgumentExpressionBuilder Provides a base class for expression builders that require a single input argument. This is an abstract class. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder BarGraphBuilder LineGraphBuilder RollingGraphBuilder MulticastSubject PropertyMappingBuilder SelectBuilder VisualizerMappingBuilder WorkflowOutputBuilder Parse SendMessage Accumulate DistinctBy DistinctUntilChangedBy GroupBy MaxBy MinBy OrderBy OrderByDescending ThenBy ThenByDescending ToDictionary ToLookup ExpressionCondition ExpressionSink ExpressionTransform PythonSelectMany PythonTransform Implements IExpressionBuilder Inherited Members ExpressionBuilder.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class SingleArgumentExpressionBuilder : ExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SingleArgumentWorkflowExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.SingleArgumentWorkflowExpressionBuilder.html",
    "title": "Class SingleArgumentWorkflowExpressionBuilder",
    "keywords": "Class SingleArgumentWorkflowExpressionBuilder Provides a base class for workflow expression builders that require a single input argument. This is an abstract class. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder MulticastBuilder Condition SelectMany Sink Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class SingleArgumentWorkflowExpressionBuilder : WorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides WorkflowExpressionBuilder.ArgumentRange Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.StringProperty.html": {
    "href": "api/Bonsai.Expressions.StringProperty.html",
    "title": "Class StringProperty",
    "keywords": "Class StringProperty Represents a workflow property containing Unicode text. Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName . Inheritance Object WorkflowProperty WorkflowProperty < String > StringProperty Inherited Members WorkflowProperty<String>.Value WorkflowProperty<String>.Generate() WorkflowProperty<String>.Generate<TSource>(IObservable<TSource>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class StringProperty : WorkflowProperty<string>"
  },
  "api/Bonsai.Expressions.SubjectBuilder.html": {
    "href": "api/Bonsai.Expressions.SubjectBuilder.html",
    "title": "Class SubjectBuilder",
    "keywords": "Class SubjectBuilder Provides a base class for expression builders that broadcast the values of an observable sequence to multiple subscribers using a shared subject. This is an abstract class. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder AsyncSubject BehaviorSubject PublishSubject ReplaySubject ResourceSubject Implements IExpressionBuilder INamedElement Inherited Members SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public abstract class SubjectBuilder : SubjectExpressionBuilder, IExpressionBuilder, INamedElement Constructors | Improve this Doc View Source SubjectBuilder() Initializes a new instance of the SubjectBuilder class. Declaration protected SubjectBuilder() Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) | Improve this Doc View Source BuildSubject(Expression) When overridden in a derived class, returns the expression that creates the shared subject. Declaration protected abstract Expression BuildSubject(Expression expression) Parameters Type Name Description Expression expression The expression representing the observable input sequence. Returns Type Description Expression The Expression that creates the shared subject. Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SubjectBuilder-1.html": {
    "href": "api/Bonsai.Expressions.SubjectBuilder-1.html",
    "title": "Class SubjectBuilder<T>",
    "keywords": "Class SubjectBuilder<T> Provides a base class for expression builders that declare a shared subject of the specified type. This is an abstract class. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder<T> AsyncSubject<T> BehaviorSubject<T> PublishSubject<T> ReplaySubject<T> ResourceSubject<T> Implements IExpressionBuilder INamedElement Inherited Members SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public abstract class SubjectBuilder<T> : SubjectExpressionBuilder, IExpressionBuilder, INamedElement Type Parameters Name Description T The type of the elements processed by the subject. Constructors | Improve this Doc View Source SubjectBuilder() Initializes a new instance of the SubjectBuilder<T> class. Declaration protected SubjectBuilder() Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) | Improve this Doc View Source CreateSubject() When overridden in a derived class, creates the shared subject. Declaration protected abstract ISubject<T> CreateSubject() Returns Type Description ISubject <T> A new instance of ISubject<T> . Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SubjectExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.SubjectExpressionBuilder.html",
    "title": "Class SubjectExpressionBuilder",
    "keywords": "Class SubjectExpressionBuilder Provides a base class for expression builders that declare shared subjects. This is an abstract class. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder SubjectBuilder<T> Implements IExpressionBuilder INamedElement Inherited Members VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(SubjectExpressionBuilder), \"SubjectExpressionBuilder\")] public abstract class SubjectExpressionBuilder : VariableArgumentExpressionBuilder, IExpressionBuilder, INamedElement Constructors | Improve this Doc View Source SubjectExpressionBuilder(Int32, Int32) Initializes a new instance of the SubjectExpressionBuilder class with the specified argument range. Declaration protected SubjectExpressionBuilder(int minArguments, int maxArguments) Parameters Type Name Description Int32 minArguments The inclusive lower bound of the argument range. Int32 maxArguments The inclusive upper bound of the argument range. Properties | Improve this Doc View Source Name Gets or sets the name of the shared subject. Declaration public string Name { get; set; } Property Value Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SubscribeSubject.html": {
    "href": "api/Bonsai.Expressions.SubscribeSubject.html",
    "title": "Class SubscribeSubject",
    "keywords": "Class SubscribeSubject Represents an expression builder that generates a sequence of values by subscribing to a shared subject. The SubscribeSubject operator is essentially a source which accesses a subject with the specified name, at the same scope level or above, and subscribes to it. The behavior of SubscribeSubject is defined by the type of the subject which is accessed, and values from the shared underlying sequence will then be passed to any operators downstream from SubscribeSubject , as if these operators were connected to the subject directly. Note If the definition of the underlying subject changes, there is no need to change the SubscribeSubject as long as the name remains the same. For more information on subjects, the different types of subject available, and the rules for naming and finding subjects, see the Subjects section of the manual. Inheritance Object ExpressionBuilder ZeroArgumentExpressionBuilder SubscribeSubject SubscribeSubject<T> Implements IExpressionBuilder INamedElement Inherited Members ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public class SubscribeSubject : ZeroArgumentExpressionBuilder, IExpressionBuilder, INamedElement Properties | Improve this Doc View Source Name Gets or sets the name of the shared subject. Declaration [TypeConverter(typeof(SubjectNameConverter))] public string Name { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SubscribeSubject-1.html": {
    "href": "api/Bonsai.Expressions.SubscribeSubject-1.html",
    "title": "Class SubscribeSubject<T>",
    "keywords": "Class SubscribeSubject<T> Represents an expression builder that generates a sequence of values by subscribing to a shared subject of the specified type. Inheritance Object ExpressionBuilder ZeroArgumentExpressionBuilder SubscribeSubject SubscribeSubject<T> Implements IExpressionBuilder INamedElement Inherited Members SubscribeSubject.Build(IEnumerable<Expression>) ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(SubscribeSubject), \"SubscribeSubject\")] public class SubscribeSubject<T> : SubscribeSubject, IExpressionBuilder, INamedElement Type Parameters Name Description T The type of the elements processed by the subject. Properties | Improve this Doc View Source Name Gets or sets the name of the shared subject. Declaration [TypeConverter(typeof(SubjectNameConverter))] public string Name { get; set; } Property Value Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.SubtractBuilder.html": {
    "href": "api/Bonsai.Expressions.SubtractBuilder.html",
    "title": "Class SubtractBuilder",
    "keywords": "Class SubtractBuilder Represents an expression builder that applies the arithmetic subtraction operation on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder SubtractBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class SubtractBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies the arithmetic subtraction operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies the arithmetic subtraction operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.TimeSpanProperty.html": {
    "href": "api/Bonsai.Expressions.TimeSpanProperty.html",
    "title": "Class TimeSpanProperty",
    "keywords": "Class TimeSpanProperty Represents a workflow property containing a time interval. Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName . Inheritance Object WorkflowProperty TimeSpanProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class TimeSpanProperty : WorkflowProperty Properties | Improve this Doc View Source Value Gets or sets the value of the property. Declaration public TimeSpan Value { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source ValueXml Gets or sets an XML representation of the property value for serialization. Declaration [Browsable(false)] public string ValueXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<TimeSpan> Generate() Returns Type Description IObservable < TimeSpan > An observable sequence of property values. | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<TimeSpan> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable < TimeSpan > An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.TypeMapping.html": {
    "href": "api/Bonsai.Expressions.TypeMapping.html",
    "title": "Class TypeMapping",
    "keywords": "Class TypeMapping Represents the target type to be created from selected member variables. This type is manipulated internally by InputMappingBuilder , MemberSelectorBuilder and VisualizerMappingBuilder to specify output and visualizer types. Inheritance Object TypeMapping TypeMapping<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class TypeMapping"
  },
  "api/Bonsai.Expressions.TypeMapping-1.html": {
    "href": "api/Bonsai.Expressions.TypeMapping-1.html",
    "title": "Class TypeMapping<T>",
    "keywords": "Class TypeMapping<T> Represents the target type to be created from selected member variables. This type is manipulated internally by InputMappingBuilder and MemberSelectorBuilder to force a specific output type. Inheritance Object TypeMapping TypeMapping<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class TypeMapping<T> : TypeMapping Type Parameters Name Description T The target type to be created from selected member variables."
  },
  "api/Bonsai.Expressions.UnitBuilder.html": {
    "href": "api/Bonsai.Expressions.UnitBuilder.html",
    "title": "Class UnitBuilder",
    "keywords": "Class UnitBuilder Represents an expression builder that generates a sequence of Unit elements. The Unit operator generates a sequence returning the singleton unit object, if no input sequence is provided. Otherwise, it will convert all elements in the source sequence to the Unit type. Tip Unit is most commonly used for converting separate branches with different types into a common type signature, so they can be combined using control flow operators such as Merge or Concat . Inheritance Object ExpressionBuilder UnitBuilder Implements IExpressionBuilder Inherited Members ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public class UnitBuilder : ExpressionBuilder, IExpressionBuilder Remarks This expression builder generates its elements by either returning the single default Unit instance if no input sequence is provided; or applying a selector on the elements of the source sequence that will convert each input element into the default Unit instance. Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.UnknownTypeBuilder.html": {
    "href": "api/Bonsai.Expressions.UnknownTypeBuilder.html",
    "title": "Class UnknownTypeBuilder",
    "keywords": "Class UnknownTypeBuilder Represents an expression builder that is a proxy for an unknown type. Important Unknown types are created when the compiler is unable to resolve a type reference specified in the workflow. This is usually caused by a missing package that needs to be installed, but sometimes it might also indicate missing native dependencies required by the package. Please refer to the specific package documentation for guidance when debugging unknown types. Inheritance Object ExpressionBuilder UnknownTypeBuilder Implements IExpressionBuilder Inherited Members ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class UnknownTypeBuilder : ExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange | Improve this Doc View Source PropertiesXml Gets or sets the XML representation of externalized property values from the unknown type. Declaration [Browsable(false)] public XElement[] PropertiesXml { get; set; } Property Value Type Description XElement [] Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Throws a NotImplementedException by design in order to indicate the current builder is a proxy for an unknown type. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression This method never returns. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Exceptions Type Condition NotImplementedException This method always throws this exception, by design. Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.VariableArgumentExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.VariableArgumentExpressionBuilder.html",
    "title": "Class VariableArgumentExpressionBuilder",
    "keywords": "Class VariableArgumentExpressionBuilder Provides a base class for expression builders that can have a variable number of input arguments. This is an abstract class. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder TableLayoutPanelBuilder CombinatorExpressionBuilder IncludeWorkflowBuilder SubjectExpressionBuilder Implements IExpressionBuilder Inherited Members ExpressionBuilder.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class VariableArgumentExpressionBuilder : ExpressionBuilder, IExpressionBuilder Constructors | Improve this Doc View Source VariableArgumentExpressionBuilder(Int32, Int32) Initializes a new instance of the VariableArgumentExpressionBuilder class with the specified argument range. Declaration protected VariableArgumentExpressionBuilder(int minArguments, int maxArguments) Parameters Type Name Description Int32 minArguments The inclusive lower bound of the argument range. Int32 maxArguments The inclusive upper bound of the argument range. Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange Methods | Improve this Doc View Source SetArgumentRange(Int32, Int32) Updates the argument range of the expression builder. Declaration protected void SetArgumentRange(int minArguments, int maxArguments) Parameters Type Name Description Int32 minArguments The inclusive lower bound of the argument range. Int32 maxArguments The inclusive upper bound of the argument range. Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.VisualizerMapping.html": {
    "href": "api/Bonsai.Expressions.VisualizerMapping.html",
    "title": "Class VisualizerMapping",
    "keywords": "Class VisualizerMapping Represents the assignment of a specified input source and its corresponding visualizer to a workflow element. Inheritance Object VisualizerMapping Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public sealed class VisualizerMapping Properties | Improve this Doc View Source Source Gets the source of runtime notifications to be visualized. Declaration public InspectBuilder Source { get; } Property Value Type Description InspectBuilder | Improve this Doc View Source VisualizerType Gets the type of the visualizer used to display notifications from the source. Declaration public Type VisualizerType { get; } Property Value Type Description Type"
  },
  "api/Bonsai.Expressions.VisualizerMappingBuilder.html": {
    "href": "api/Bonsai.Expressions.VisualizerMappingBuilder.html",
    "title": "Class VisualizerMappingBuilder",
    "keywords": "Class VisualizerMappingBuilder Represents an expression builder specifying an observable sequence to be combined in a mashup visualizer. The VisualizerMapping operator specifies that the visualizer of the current node should be combined with the target node. The behaviour of the target operator will otherwise remain unaffected, since the subscription to the mapping is not considered as a proper upstream source. This is indicated in the editor by the dashed line linking the property mapping operator to its target. Note If multiple visualizer mappings are specified for the target node, the order of visualizer combination follows the connection order, from top to bottom. Warning The visualizer of the target node must be a type derived from MashupVisualizer . Furthermore, the target mashup must also support the specified visualizer type as a mashup source. Otherwise, the visualizer mapping will have no effect. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder VisualizerMappingBuilder Implements IExpressionBuilder INamedElement Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Property)] [WorkflowElementIcon(typeof(ElementCategory), \"ElementIcon.Visualizer\")] public sealed class VisualizerMappingBuilder : SingleArgumentExpressionBuilder, IExpressionBuilder, INamedElement Properties | Improve this Doc View Source VisualizerType Gets or sets a value specifying the visualizer type used to combine the observable sequence with a mashup visualizer. Declaration [Externalizable(false)] [TypeConverter(typeof(TypeMappingConverter))] public TypeMapping VisualizerType { get; set; } Property Value Type Description TypeMapping Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Explicit Interface Implementations | Improve this Doc View Source INamedElement.Name Declaration string INamedElement.Name { get; } Returns Type Description String Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.WorkflowExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.WorkflowExpressionBuilder.html",
    "title": "Class WorkflowExpressionBuilder",
    "keywords": "Class WorkflowExpressionBuilder Provides a base class for expression builders that generate their output by means of an encapsulated workflow. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder GroupWorkflowBuilder SingleArgumentWorkflowExpressionBuilder CreateObservable Defer Scan Window Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members ExpressionBuilder.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Combinator)] public abstract class WorkflowExpressionBuilder : ExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source WorkflowExpressionBuilder() Initializes a new instance of the WorkflowExpressionBuilder class. Declaration protected WorkflowExpressionBuilder() | Improve this Doc View Source WorkflowExpressionBuilder(ExpressionBuilderGraph) Initializes a new instance of the WorkflowExpressionBuilder class with the specified expression builder workflow. Declaration protected WorkflowExpressionBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange | Improve this Doc View Source Description Gets or sets a description for the encapsulated workflow. Declaration [Externalizable(false)] public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the name of the encapsulated workflow. Declaration [Externalizable(false)] public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Workflow Gets the expression builder workflow that will be used to generate the output expression tree. Declaration [Browsable(false)] public ExpressionBuilderGraph Workflow { get; } Property Value Type Description ExpressionBuilderGraph | Improve this Doc View Source WorkflowDescriptor Gets the XML serializable representation of the encapsulated workflow. Declaration [Browsable(false)] public ExpressionBuilderGraphDescriptor WorkflowDescriptor { get; set; } Property Value Type Description ExpressionBuilderGraphDescriptor Methods | Improve this Doc View Source BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) Builds the output of the encapsulated workflow for the specified source and applies a selector taking into account any available workflow mappings. Declaration protected Expression BuildWorkflow(IEnumerable<Expression> arguments, Expression source, Func<Expression, Expression> selector) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Expression source The expression tree that will be used as input to the encapsulated workflow. Func < Expression , Expression > selector A selector that will be applied to the output of the encapsulated workflow to determine the final output of the expression builder. Returns Type Description Expression An Expression tree that is the result of applying the encapsulated workflow to the specified input source . Property mappings are also resolved in the correct sequence. Explicit Interface Implementations | Improve this Doc View Source INamedElement.Name Declaration string INamedElement.Name { get; } Returns Type Description String Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.WorkflowInputBuilder.html": {
    "href": "api/Bonsai.Expressions.WorkflowInputBuilder.html",
    "title": "Class WorkflowInputBuilder",
    "keywords": "Class WorkflowInputBuilder Represents an expression builder that generates an observable sequence to be used as input to an encapsulated workflow. The WorkflowInput operator is used inside nested workflows to route input arguments from the outside. The type of the input sequence and its behavior is dependent on the exact operator in which they are nested. Each WorkflowInput is uniquely numbered starting from Source1 . Warning The numbering of the WorkfklowInput nodes usually reflects the order of arguments in the outer operator, but this is not always required. In fact, how many input arguments are available in the nested workflow is entirely dependent on the nesting operator. Inheritance Object ExpressionBuilder ZeroArgumentExpressionBuilder WorkflowInputBuilder WorkflowInputBuilder<TSource> Implements IExpressionBuilder INamedElement Inherited Members ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public class WorkflowInputBuilder : ZeroArgumentExpressionBuilder, IExpressionBuilder, INamedElement Properties | Improve this Doc View Source Index Gets or sets the zero-based index of the input parameter. Declaration [Browsable(false)] public int Index { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Name Gets or sets the name of the input parameter. Arbitrary named arguments are not supported, so all names must start with the ArgumentNamePrefix followed by the one-based argument index. Declaration [Browsable(false)] public string Name { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Returns the source input expression specified in Bonsai.Expressions.WorkflowInputBuilder.Source . Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments Returns Type Description Expression A collection of Expression nodes that represents the input arguments. An Expression that will be used as the source of an encapsulated workflow. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.WorkflowInputBuilder-1.html": {
    "href": "api/Bonsai.Expressions.WorkflowInputBuilder-1.html",
    "title": "Class WorkflowInputBuilder<TSource>",
    "keywords": "Class WorkflowInputBuilder<TSource> Represents an expression builder that generates an observable sequence of the specified type to be used as input to an encapsulated workflow. The WorkflowInput operator is used inside nested workflows to route input arguments from the outside. The type of the input sequence and its behavior is dependent on the exact operator in which they are nested. Each WorkflowInput is uniquely numbered starting from Source1 . Warning The numbering of the WorkfklowInput nodes usually reflects the order of arguments in the outer operator, but this is not always required. In fact, how many input arguments are available in the nested workflow is entirely dependent on the nesting operator. Inheritance Object ExpressionBuilder ZeroArgumentExpressionBuilder WorkflowInputBuilder WorkflowInputBuilder<TSource> Implements IExpressionBuilder INamedElement Inherited Members WorkflowInputBuilder.Index WorkflowInputBuilder.Name ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(WorkflowInputBuilder), \"WorkflowInputBuilder\")] public class WorkflowInputBuilder<TSource> : WorkflowInputBuilder, IExpressionBuilder, INamedElement Type Parameters Name Description TSource The type of the elements in the generated observable sequence. Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Returns the source input expression specified in Bonsai.Expressions.WorkflowInputBuilder.Source . Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments Returns Type Description Expression A collection of Expression nodes that represents the input arguments. An Expression that will be used as the source of an encapsulated workflow. Overrides WorkflowInputBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.WorkflowOutputBuilder.html": {
    "href": "api/Bonsai.Expressions.WorkflowOutputBuilder.html",
    "title": "Class WorkflowOutputBuilder",
    "keywords": "Class WorkflowOutputBuilder Represents the expression that is used as the output of an encapsulated workflow. The WorkflowOutput operator is used inside nested workflows to specify the sequence of notifications providing the result of the nested function. In each workflow there can only be at most one WorkflowOutput node. How this result sequence is converted into the sequence of notifications of the outer nesting node is dependent on the exact operator in which the output is nested. If no WorkflowOutput is specified, the result sequence of any nested workflow (including the top-level workflow) will be of type Unit and will not emit any notifications except for successful termination if all inner sequences terminate successfully, or exceptional termination if any of the inner sequences raises an error. Note If the sequence connected to WorkflowOutput terminates successfully, all other nested operators will be immediately cancelled. This is also true for the top-level workflow, in which case the entire program execution is terminated. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder WorkflowOutputBuilder Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public class WorkflowOutputBuilder : SingleArgumentExpressionBuilder, IExpressionBuilder Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Returns the single output expression specified in arguments . Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments Returns Type Description Expression A collection of Expression nodes that represents the input arguments. An Expression that will be used as the output of an encapsulated workflow. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.WorkflowProperty.html": {
    "href": "api/Bonsai.Expressions.WorkflowProperty.html",
    "title": "Class WorkflowProperty",
    "keywords": "Class WorkflowProperty Represents a workflow property. Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName . Inheritance Object WorkflowProperty ByteProperty DateTimeOffsetProperty DoubleProperty FloatProperty Int64Property IntProperty TimeSpanProperty WorkflowProperty<TValue> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax [Combinator(MethodName = \"Generate\")] [WorkflowElementCategory(ElementCategory.Source)] public abstract class WorkflowProperty"
  },
  "api/Bonsai.Expressions.WorkflowProperty-1.html": {
    "href": "api/Bonsai.Expressions.WorkflowProperty-1.html",
    "title": "Class WorkflowProperty<TValue>",
    "keywords": "Class WorkflowProperty<TValue> Represents a strongly typed workflow property. Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName . Inheritance Object WorkflowProperty WorkflowProperty<TValue> BooleanProperty DateTimeProperty StringProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class WorkflowProperty<TValue> : WorkflowProperty Type Parameters Name Description TValue The type of the property value. Properties | Improve this Doc View Source Value Gets or sets the value of the property. Declaration public TValue Value { get; set; } Property Value Type Description TValue Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever the workflow property changes, starting with the initial property value. Declaration public virtual IObservable<TValue> Generate() Returns Type Description IObservable <TValue> An observable sequence of property values. | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence that produces a value whenever the source sequence emits a new element. Declaration public IObservable<TValue> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate new values. Returns Type Description IObservable <TValue> An observable sequence of property values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Expressions.XorBuilder.html": {
    "href": "api/Bonsai.Expressions.XorBuilder.html",
    "title": "Class XorBuilder",
    "keywords": "Class XorBuilder Represents an expression builder that applies a bitwise XOR operation on paired elements of an observable sequence. Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder BinaryOperatorBuilder XorBuilder Implements IPropertyMappingBuilder IExpressionBuilder ICustomTypeDescriptor Inherited Members BinaryOperatorBuilder.Operand BinaryOperatorBuilder.BuildSelector(Expression) BinaryOperatorBuilder.ICustomTypeDescriptor.GetAttributes() BinaryOperatorBuilder.ICustomTypeDescriptor.GetClassName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetComponentName() BinaryOperatorBuilder.ICustomTypeDescriptor.GetConverter() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultEvent() BinaryOperatorBuilder.ICustomTypeDescriptor.GetDefaultProperty() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEditor(Type) BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents() BinaryOperatorBuilder.ICustomTypeDescriptor.GetEvents(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties() BinaryOperatorBuilder.ICustomTypeDescriptor.GetProperties(Attribute[]) BinaryOperatorBuilder.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor) SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public class XorBuilder : BinaryOperatorBuilder, IPropertyMappingBuilder, IExpressionBuilder, ICustomTypeDescriptor Methods | Improve this Doc View Source BuildSelector(Expression, Expression) Returns the expression that applies a bitwise XOR operation to the left and right parameters. Declaration protected override Expression BuildSelector(Expression left, Expression right) Parameters Type Name Description Expression left The left input parameter. Expression right The right input parameter. Returns Type Description Expression The Expression that applies a bitwise XOR operation to the left and right parameters. Overrides BinaryOperatorBuilder.BuildSelector(Expression, Expression) Implements IPropertyMappingBuilder IExpressionBuilder System.ComponentModel.ICustomTypeDescriptor Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Expressions.ZeroArgumentExpressionBuilder.html": {
    "href": "api/Bonsai.Expressions.ZeroArgumentExpressionBuilder.html",
    "title": "Class ZeroArgumentExpressionBuilder",
    "keywords": "Class ZeroArgumentExpressionBuilder Provides a base class for expression builders that require zero input arguments. This is an abstract class. Inheritance Object ExpressionBuilder ZeroArgumentExpressionBuilder ExternalizedMappingBuilder SubscribeSubject WorkflowInputBuilder PythonSource Implements IExpressionBuilder Inherited Members ExpressionBuilder.Build(IEnumerable<Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Expressions Assembly : Bonsai.Core.dll Syntax public abstract class ZeroArgumentExpressionBuilder : ExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides ExpressionBuilder.ArgumentRange Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.ExternalizableAttribute.html": {
    "href": "api/Bonsai.ExternalizableAttribute.html",
    "title": "Class ExternalizableAttribute",
    "keywords": "Class ExternalizableAttribute Specifies whether a property is allowed to be explicitly externalized on a workflow editor. Inheritance Object Attribute ExternalizableAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Match(Object) Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class ExternalizableAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ExternalizableAttribute(Boolean) Initializes a new instance of the ExternalizableAttribute class. Declaration public ExternalizableAttribute(bool externalizable) Parameters Type Name Description Boolean externalizable true if the property can be explicitly externalized on a workflow editor; otherwise, false . The default is true . Fields | Improve this Doc View Source Default Specifies the default value for the ExternalizableAttribute which is set to allow a property to be explicitly externalized on a workflow editor. Declaration public static readonly ExternalizableAttribute Default Field Value Type Description ExternalizableAttribute | Improve this Doc View Source No Specifies that a property cannot be explicitly externalized on a workflow editor. Declaration public static readonly ExternalizableAttribute No Field Value Type Description ExternalizableAttribute | Improve this Doc View Source Yes Specifies that a property can be explicitly externalized on a workflow editor. Declaration public static readonly ExternalizableAttribute Yes Field Value Type Description ExternalizableAttribute Properties | Improve this Doc View Source Externalizable Gets a value indicating whether a property is externalizable. Declaration public bool Externalizable { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj An object to compare with this instance. Returns Type Description Boolean true if obj is an instance of ExternalizableAttribute and the externalizable state equals the state of this instance; otherwise, false. Overrides Attribute.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Attribute.GetHashCode() | Improve this Doc View Source IsDefaultAttribute() When overridden in a derived class, indicates whether the value of this instance is the default value for the derived class. Declaration public override bool IsDefaultAttribute() Returns Type Description Boolean true if this instance is the default attribute for the class; otherwise, false . Overrides Attribute.IsDefaultAttribute() Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.FileNameFilterAttribute.html": {
    "href": "api/Bonsai.FileNameFilterAttribute.html",
    "title": "Class FileNameFilterAttribute",
    "keywords": "Class FileNameFilterAttribute Specifies the file name filter which determines the choices that appear in the file type selection box of a file dialog. Inheritance Object Attribute FileNameFilterAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class FileNameFilterAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source FileNameFilterAttribute(String) Initializes a new instance of the FileNameFilterAttribute class with the specified file name filter. Declaration public FileNameFilterAttribute(string filter) Parameters Type Name Description String filter The file name filter string which determines the choices that appear in the file type selection box of a file dialog. Properties | Improve this Doc View Source Filter Gets the file name filter string used to determine the choices in the file type selection box of a file dialog. Declaration public string Filter { get; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.HighResolutionScheduler.html": {
    "href": "api/Bonsai.HighResolutionScheduler.html",
    "title": "Class HighResolutionScheduler",
    "keywords": "Class HighResolutionScheduler Provides a set of static properties to access schedulers that use the Stopwatch class for generating timestamps. Inheritance Object HighResolutionScheduler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public static class HighResolutionScheduler Properties | Improve this Doc View Source Default Gets a scheduler that schedules work on the platform's default scheduler but provides high resolution timestamps. Declaration public static IScheduler Default { get; } Property Value Type Description IScheduler | Improve this Doc View Source Now Gets the current time according to the timer used by the Stopwatch class. Declaration public static DateTimeOffset Now { get; } Property Value Type Description DateTimeOffset"
  },
  "api/Bonsai.html": {
    "href": "api/Bonsai.html",
    "title": "Namespace Bonsai",
    "keywords": "Namespace Bonsai Classes ArrayConvert Provides methods for converting between instances of the Array class and String . Combinator Provides an abstract base class for operators that preserve the type of the source sequence. Combinator<TResult> Provides an abstract base class for operators that process an observable sequence into another sequence of the specified element type. Combinator<TSource, TResult> Provides an abstract base class for operators that process an observable sequence of a fixed type into another sequence of the specified element type. CombinatorAttribute Specifies that a class provides a method that can combine one or more observable sequences into a new observable sequence. DesignTypes Provides assembly qualified names for well-known designer types. ExpressionHelper Provides a set of static methods to manipulate expression trees. ExternalizableAttribute Specifies whether a property is allowed to be explicitly externalized on a workflow editor. FileNameFilterAttribute Specifies the file name filter which determines the choices that appear in the file type selection box of a file dialog. HighResolutionScheduler Provides a set of static properties to access schedulers that use the Stopwatch class for generating timestamps. MultidimensionalArrayConverter Provides a type converter to convert two-dimensional Array objects to and from various other representations. NumericRecordConverter Provides a type converter to convert numeric records to and from various other representations. NumericRecordConverter.PropertyDescriptorWrapper Represents a class used for providing custom property metadata for an object. ObservableCombinators Provides a set of static methods to aid in writing queries over observable sequences. PrecisionAttribute Specifies the number of decimal places and the smallest incremental step that should be used when editing values for a property. ProxyTypeAttribute Specifies a type used to replace the class this attribute is bound to. This attribute is meant for internal use only. Range Provides static methods for creating range objects. Range<TValue> Represents a range of values defined by an inclusive lower and upper bounds. RangeAttribute Specifies the valid range of values for a numeric property. ResetCombinatorAttribute Instructs the build process to reset non-serializable public properties marked with XmlIgnoreAttribute . Sink Represents a generic operation which introduces side effects on an observable sequence without modifying its elements. Sink<TSource> Represents an operation which introduces side effects on observable sequences of a specific type without modifying its elements. Source<TSource> Represents a generator of observable sequences of data elements. Transform<TSource, TResult> Represents an operation on observable sequences which transforms every element of the source sequence into an element in the result sequence. TypeVisualizerAttribute Determines the type of visualizer used to display the target of the attribute. UnidimensionalArrayConverter Provides a type converter to convert one-dimensional Array objects to and from various other representations. WindowCombinator Represents a generic operation which projects each element of an observable sequence into a sequence of windows. WorkflowBuilder Represents an XML serializable expression builder workflow container. WorkflowBuildException Represents errors that occur during the build phase of an expression builder workflow. WorkflowElementCategoryAttribute Determines the category of the workflow element this attribute is bound to. WorkflowElementIconAttribute Specifies the icon that should represent the element this attribute is bound to when drawing the workflow. WorkflowException Represents errors that occur in expression builder workflows. WorkflowMetadata Represents metadata retrieved from a serializable XML workflow. WorkflowNamespaceIconAttribute Specifies the icon that should represent a given namespace in the assembly this attribute is bound to when drawing the workflow. WorkflowRuntimeException Represents errors that occur during the execution of an expression builder workflow. XmlNamespacePrefixAttribute Specifies a recommended prefix to associate with a XML namespace identifier when serializing a workflow file. Interfaces INamedElement Represents workflow elements that have a name. Enums ElementCategory Specifies the category of a workflow element."
  },
  "api/Bonsai.INamedElement.html": {
    "href": "api/Bonsai.INamedElement.html",
    "title": "Interface INamedElement",
    "keywords": "Interface INamedElement Represents workflow elements that have a name. Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public interface INamedElement Properties | Improve this Doc View Source Name Gets the name of the element. Declaration string Name { get; } Property Value Type Description String"
  },
  "api/Bonsai.IO.BaudRateConverter.html": {
    "href": "api/Bonsai.IO.BaudRateConverter.html",
    "title": "Class BaudRateConverter",
    "keywords": "Class BaudRateConverter Provides a type converter to convert serial baud rates to and from other representations. Inheritance Object TypeConverter BaseNumberConverter Int32Converter BaudRateConverter Inherited Members BaseNumberConverter.CanConvertFrom(ITypeDescriptorContext, Type) BaseNumberConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) BaseNumberConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) BaseNumberConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class BaudRateConverter : Int32Converter Methods | Improve this Doc View Source GetStandardValues(ITypeDescriptorContext) Returns a collection of standard serial baud rates. Declaration public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description TypeConverter.StandardValuesCollection A TypeConverter.StandardValuesCollection containing a set of standard serial baud rates. Overrides TypeConverter.GetStandardValues(ITypeDescriptorContext) | Improve this Doc View Source GetStandardValuesSupported(ITypeDescriptorContext) Declaration public override bool GetStandardValuesSupported(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description Boolean Overrides TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)"
  },
  "api/Bonsai.IO.ChangeExtension.html": {
    "href": "api/Bonsai.IO.ChangeExtension.html",
    "title": "Class ChangeExtension",
    "keywords": "Class ChangeExtension Represents an operator that changes the extension of each path string in the sequence. Inheritance Object Combinator < String , String > Transform < String , String > ChangeExtension Inherited Members Combinator<String, String>.Process(IObservable<String>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class ChangeExtension : Transform<string, string> Properties | Improve this Doc View Source Extension Gets or sets the new extension, with or without a leading period. Specify null to remove any extension from the path. Declaration public string Extension { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<String>) Changes the extension of each path string in an observable sequence. Declaration public override IObservable<string> Process(IObservable<string> source) Parameters Type Name Description IObservable < String > source A sequence of String values for which to change the extension. Returns Type Description IObservable < String > A sequence of String values representing the path string with the changed extension, for each path in the original sequence. Overrides Bonsai.Combinator<System.String, System.String>.Process(System.IObservable<System.String>)"
  },
  "api/Bonsai.IO.CreateSerialPort.html": {
    "href": "api/Bonsai.IO.CreateSerialPort.html",
    "title": "Class CreateSerialPort",
    "keywords": "Class CreateSerialPort Represents an operator that creates and configures a connection to a system serial port. Inheritance Object Source < SerialPort > CreateSerialPort Implements INamedElement Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class CreateSerialPort : Source<SerialPort>, INamedElement Properties | Improve this Doc View Source BaudRate Gets or sets the serial baud rate. Declaration [TypeConverter(typeof(BaudRateConverter))] public int BaudRate { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DataBits Gets or sets the number of data bits per byte. Declaration public int DataBits { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DiscardNull Gets or sets a value indicating whether null bytes are ignored when transmitted between the port and the receive buffer. Declaration public bool DiscardNull { get; set; } Property Value Type Description Boolean | Improve this Doc View Source DtrEnable Gets or sets a value indicating whether the Data Terminal Ready (DTR) signal should be enabled during serial communication. Declaration public bool DtrEnable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Encoding Gets or sets the byte encoding used for pre- and post-transmission conversion of text. Declaration [TypeConverter(typeof(SerialPortEncodingConverter))] public string Encoding { get; set; } Property Value Type Description String | Improve this Doc View Source Handshake Gets or sets the handshaking protocol for serial port transmission of data. Declaration public Handshake Handshake { get; set; } Property Value Type Description Handshake | Improve this Doc View Source Name Gets or sets the optional alias for the serial port connection. Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Parity Gets or sets the parity bit for the SerialPort object. Declaration public Parity Parity { get; set; } Property Value Type Description Parity | Improve this Doc View Source ParityReplace Gets or sets the byte that replaces invalid bytes in the data stream when a parity error occurs. Declaration public byte ParityReplace { get; set; } Property Value Type Description Byte | Improve this Doc View Source PortName Gets or sets the name of the serial port. Declaration [TypeConverter(typeof(SerialPortNameConverter))] public string PortName { get; set; } Property Value Type Description String | Improve this Doc View Source ReadBufferSize Gets or sets the size of the read buffer, in bytes. This is the maximum number of read bytes which can be buffered. Declaration public int ReadBufferSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ReceivedBytesThreshold Gets or sets the number of bytes received into the internal input buffer before the read event is fired. Declaration public int ReceivedBytesThreshold { get; set; } Property Value Type Description Int32 | Improve this Doc View Source RtsEnable Gets or sets a value indicating whether the Request to Send (RTS) signal should be enabled during serial communication. Declaration public bool RtsEnable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source StopBits Gets or sets the number of stop bits per byte. Declaration public StopBits StopBits { get; set; } Property Value Type Description StopBits | Improve this Doc View Source WriteBufferSize Gets or sets the size of the write buffer, in bytes. This is the maximum number of bytes which can be queued for write. Declaration public int WriteBufferSize { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains the serial port connection object. Declaration public override IObservable<SerialPort> Generate() Returns Type Description IObservable < SerialPort > A sequence containing a single instance of the SerialPort class representing the serial connection. Overrides Bonsai.Source<System.IO.Ports.SerialPort>.Generate() Implements INamedElement"
  },
  "api/Bonsai.IO.CsvReader.html": {
    "href": "api/Bonsai.IO.CsvReader.html",
    "title": "Class CsvReader",
    "keywords": "Class CsvReader Represents an operator that generates a sequence of values for every line in a text file. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder CombinatorExpressionBuilder CsvReader Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members CombinatorExpressionBuilder.Build(IEnumerable<Expression>) VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public class CsvReader : CombinatorExpressionBuilder, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source CsvReader() Initializes a new instance of the CsvReader class. Declaration public CsvReader() Properties | Improve this Doc View Source FileName Gets or sets the name of the CSV file. Declaration [FileNameFilter(\"CSV (Comma delimited)|*.csv|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source ListSeparator Gets or sets the separator used to delimit elements in variable length rows. This argument is optional. Declaration public string ListSeparator { get; set; } Property Value Type Description String | Improve this Doc View Source ScanPattern Gets or sets the optional parse pattern for scanning individual lines. In case of variable length rows, the pattern will be applied to each individual element. Declaration [TypeConverter(\"Bonsai.Expressions.ParseBuilder+PatternConverter, Bonsai.Core\")] public string ScanPattern { get; set; } Property Value Type Description String | Improve this Doc View Source SkipRows Gets or sets the number of lines to skip at the start of the file. Declaration public int SkipRows { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source BuildCombinator(IEnumerable<Expression>) When overridden in a derived class, generates an Expression node that will be combined with any existing property mappings to produce the final output of the expression builder. Declaration protected override Expression BuildCombinator(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node that represents the combinator output. Overrides CombinatorExpressionBuilder.BuildCombinator(IEnumerable<Expression>) Implements IPropertyMappingBuilder IExpressionBuilder"
  },
  "api/Bonsai.IO.CsvWriter.html": {
    "href": "api/Bonsai.IO.CsvWriter.html",
    "title": "Class CsvWriter",
    "keywords": "Class CsvWriter Represents an operator that writes a delimited text representation of each element of the sequence to a text file. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder CombinatorExpressionBuilder CsvWriter Implements IPropertyMappingBuilder IExpressionBuilder Inherited Members CombinatorExpressionBuilder.Build(IEnumerable<Expression>) VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public class CsvWriter : CombinatorExpressionBuilder, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source CsvWriter() Initializes a new instance of the CsvWriter class. Declaration public CsvWriter() Properties | Improve this Doc View Source Append Gets or sets a value indicating whether data should be appended to the output file if it already exists. Declaration public bool Append { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Delimiter Gets or sets the optional delimiter used to separate columns in the output file. Declaration public string Delimiter { get; set; } Property Value Type Description String | Improve this Doc View Source FileName Gets or sets the name of the output CSV file. Declaration [FileNameFilter(\"CSV (Comma delimited)|*.csv|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source IncludeHeader Gets or sets a value indicating whether to include a text header with column names for multi-attribute values. Declaration public bool IncludeHeader { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ListSeparator Gets or sets the separator used to delimit elements in variable length rows. This argument is optional. Declaration public string ListSeparator { get; set; } Property Value Type Description String | Improve this Doc View Source Overwrite Gets or sets a value indicating whether the output file should be overwritten if it already exists. Declaration public bool Overwrite { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Selector Gets or sets the inner properties that will be selected when writing each element of the sequence. Declaration public string Selector { get; set; } Property Value Type Description String | Improve this Doc View Source Suffix Gets or sets the suffix used to generate file names. Declaration public PathSuffix Suffix { get; set; } Property Value Type Description PathSuffix Methods | Improve this Doc View Source BuildCombinator(IEnumerable<Expression>) When overridden in a derived class, generates an Expression node that will be combined with any existing property mappings to produce the final output of the expression builder. Declaration protected override Expression BuildCombinator(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node that represents the combinator output. Overrides CombinatorExpressionBuilder.BuildCombinator(IEnumerable<Expression>) Implements IPropertyMappingBuilder IExpressionBuilder"
  },
  "api/Bonsai.IO.EnumerateDirectories.html": {
    "href": "api/Bonsai.IO.EnumerateDirectories.html",
    "title": "Class EnumerateDirectories",
    "keywords": "Class EnumerateDirectories Represents an operator that generates a sequence of directory names matching the specified search pattern. Inheritance Object Source < String > EnumerateDirectories Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class EnumerateDirectories : Source<string> Properties | Improve this Doc View Source Path Gets or sets the relative or absolute path of the directory to search. Declaration public string Path { get; set; } Property Value Type Description String | Improve this Doc View Source SearchOption Gets or sets a value specifying whether the search should include only the current directory or all subdirectories. Declaration public SearchOption SearchOption { get; set; } Property Value Type Description SearchOption | Improve this Doc View Source SearchPattern Gets or sets the search string used to match against the names of subdirectories in the path. This parameter can contain a combination of valid literal path and wildcard characters (see EnumerateDirectories(String, String, SearchOption) ). Declaration public string SearchPattern { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence of directory names that match the search pattern in a specified path, and optionally searches subdirectories. Declaration public override IObservable<string> Generate() Returns Type Description IObservable < String > An observable sequence containing the full names (including paths) for the directories in Path that match the specified SearchPattern and SearchOption . Overrides Bonsai.Source<System.String>.Generate()"
  },
  "api/Bonsai.IO.EnumerateFiles.html": {
    "href": "api/Bonsai.IO.EnumerateFiles.html",
    "title": "Class EnumerateFiles",
    "keywords": "Class EnumerateFiles Represents an operator that generates a sequence of file names matching the specified search pattern. Inheritance Object Source < String > EnumerateFiles Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class EnumerateFiles : Source<string> Properties | Improve this Doc View Source Path Gets or sets the relative or absolute path of the directory to search. Declaration public string Path { get; set; } Property Value Type Description String | Improve this Doc View Source SearchOption Gets or sets a value specifying whether the search should include only the current directory or all subdirectories. Declaration public SearchOption SearchOption { get; set; } Property Value Type Description SearchOption | Improve this Doc View Source SearchPattern Gets or sets the search string used to match against the names of files in the path. This parameter can contain a combination of valid literal path and wildcard characters (see EnumerateFiles(String, String, SearchOption) ). Declaration public string SearchPattern { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence of file names that match the search pattern in a specified path, and optionally searches subdirectories. Declaration public override IObservable<string> Generate() Returns Type Description IObservable < String > An observable sequence containing the full names (including paths) for the files in Path that match the specified SearchPattern and SearchOption . Overrides Bonsai.Source<System.String>.Generate()"
  },
  "api/Bonsai.IO.EnumerateFileSystemEntries.html": {
    "href": "api/Bonsai.IO.EnumerateFileSystemEntries.html",
    "title": "Class EnumerateFileSystemEntries",
    "keywords": "Class EnumerateFileSystemEntries Represents an operator that generates a sequence of file names and directory names matching the specified search pattern. Inheritance Object Source < String > EnumerateFileSystemEntries Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class EnumerateFileSystemEntries : Source<string> Properties | Improve this Doc View Source Path Gets or sets the relative or absolute path of the directory to search. Declaration public string Path { get; set; } Property Value Type Description String | Improve this Doc View Source SearchOption Gets or sets a value specifying whether the search should include only the current directory or all subdirectories. Declaration public SearchOption SearchOption { get; set; } Property Value Type Description SearchOption | Improve this Doc View Source SearchPattern Gets or sets the search string used to match against the names of file-system entries in the path. This parameter can contain a combination of valid literal path and wildcard characters (see EnumerateFileSystemEntries(String, String, SearchOption) ). Declaration public string SearchPattern { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence of file names and directory names that match the search pattern in a specified path, and optionally searches subdirectories. Declaration public override IObservable<string> Generate() Returns Type Description IObservable < String > An observable sequence containing the full names (including paths) for the file-system entries in Path that match the specified SearchPattern and SearchOption . Overrides Bonsai.Source<System.String>.Generate()"
  },
  "api/Bonsai.IO.FileSink.html": {
    "href": "api/Bonsai.IO.FileSink.html",
    "title": "Class FileSink",
    "keywords": "Class FileSink Provides a non-generic base class for sinks that write the elements from the input sequence into a file. Inheritance Object FileSink FileSink <TSource, TWriter> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Sink)] public abstract class FileSink Constructors | Improve this Doc View Source FileSink() Initializes a new instance of the FileSink<TSource, TWriter> class. Declaration protected FileSink() Properties | Improve this Doc View Source Buffered Gets or sets a value indicating whether element writing should be buffered. If true , the write commands will be queued in memory as fast as possible and will be processed by the writer in a different thread. Otherwise, writing will be done in the same thread in which notifications arrive. Declaration public bool Buffered { get; set; } Property Value Type Description Boolean | Improve this Doc View Source FileName Gets or sets the name of the file on which to write the elements. Declaration public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source Overwrite Gets or sets a value indicating whether to overwrite the output file if it already exists. Declaration public bool Overwrite { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Suffix Gets or sets the suffix used to generate file names. Declaration public PathSuffix Suffix { get; set; } Property Value Type Description PathSuffix"
  },
  "api/Bonsai.IO.FileSink-2.html": {
    "href": "api/Bonsai.IO.FileSink-2.html",
    "title": "Class FileSink<TSource, TWriter>",
    "keywords": "Class FileSink<TSource, TWriter> Provides a base class for sinks that write the elements from the input sequence into a file. Inheritance Object FileSink FileSink<TSource, TWriter> AudioWriter VideoWriter Inherited Members FileSink.FileName FileSink.Suffix FileSink.Buffered FileSink.Overwrite Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public abstract class FileSink<TSource, TWriter> : FileSink where TWriter : class, IDisposable Type Parameters Name Description TSource The type of the elements in the source sequence. TWriter The type of writer that should be used to write the elements. Methods | Improve this Doc View Source CreateWriter(String, TSource) When overridden in a derived class, creates the writer over the specified fileName that will be responsible for handling the input elements. Declaration protected abstract TWriter CreateWriter(string fileName, TSource input) Parameters Type Name Description String fileName The name of the file on which the elements should be written. TSource input The first input element that needs to be pushed into the file. Returns Type Description TWriter The writer that will be used to push elements into the file. | Improve this Doc View Source Process(IObservable<TSource>) Writes all elements of an observable sequence into the specified file. Declaration public virtual IObservable<TSource> Process(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence for which to write elements. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the elements to a file. | Improve this Doc View Source Process<TElement>(IObservable<TElement>, Func<TElement, TSource>) Writes all elements of an observable sequence into the specified file. Declaration protected IObservable<TElement> Process<TElement>(IObservable<TElement> source, Func<TElement, TSource> selector) Parameters Type Name Description IObservable <TElement> source The source sequence for which to write elements. Func <TElement, TSource> selector The transform function used to convert each element of the sequence into the type of inputs accepted by the file writer. Returns Type Description IObservable <TElement> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the elements to a file. Type Parameters Name Description TElement | Improve this Doc View Source Write(TWriter, TSource) When overridden in a derived class, writes a new element into the specified writer. Declaration protected abstract void Write(TWriter writer, TSource input) Parameters Type Name Description TWriter writer The writer that is used to push elements into the file. TSource input The input element that should be pushed into the file."
  },
  "api/Bonsai.IO.GetDirectories.html": {
    "href": "api/Bonsai.IO.GetDirectories.html",
    "title": "Class GetDirectories",
    "keywords": "Class GetDirectories Represents an operator that generates a sequence containing an array with the names of the subdirectories matching the specified search pattern. Inheritance Object Source < String []> GetDirectories Inherited Members Source<String[]>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetDirectories : Source<string[]> Properties | Improve this Doc View Source Path Gets or sets the relative or absolute path of the directory to search. Declaration public string Path { get; set; } Property Value Type Description String | Improve this Doc View Source SearchOption Gets or sets a value specifying whether the search should include only the current directory or all subdirectories. Declaration public SearchOption SearchOption { get; set; } Property Value Type Description SearchOption | Improve this Doc View Source SearchPattern Gets or sets the search string used to match against the names of subdirectories in the path. This parameter can contain a combination of valid literal path and wildcard characters (see GetDirectories(String, String, SearchOption) ). Declaration public string SearchPattern { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence containing an array of directory names that match the search pattern in a specified path, and optionally searches subdirectories. Declaration public override IObservable<string[]> Generate() Returns Type Description IObservable < String []> An observable sequence containing an array with the full names (including paths) for the directories in Path that match the specified SearchPattern and SearchOption . Overrides Bonsai.Source<System.String[]>.Generate()"
  },
  "api/Bonsai.IO.GetDirectoryName.html": {
    "href": "api/Bonsai.IO.GetDirectoryName.html",
    "title": "Class GetDirectoryName",
    "keywords": "Class GetDirectoryName Represents an operator that returns the directory information for each path string in the sequence. Inheritance Object Combinator < String , String > Transform < String , String > GetDirectoryName Inherited Members Combinator<String, String>.Process(IObservable<String>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetDirectoryName : Transform<string, string> Methods | Improve this Doc View Source Process(IObservable<String>) Returns the directory information for each path string in an observable sequence. Declaration public override IObservable<string> Process(IObservable<string> source) Parameters Type Name Description IObservable < String > source A sequence of String values representing the path to a file or directory. Returns Type Description IObservable < String > A sequence of String values representing directory information for each path in the original sequence, or null (see GetDirectoryName(String) ). Overrides Bonsai.Combinator<System.String, System.String>.Process(System.IObservable<System.String>)"
  },
  "api/Bonsai.IO.GetExtension.html": {
    "href": "api/Bonsai.IO.GetExtension.html",
    "title": "Class GetExtension",
    "keywords": "Class GetExtension Represents an operator that returns the extension of each path string in the sequence. Inheritance Object Combinator < String , String > Transform < String , String > GetExtension Inherited Members Combinator<String, String>.Process(IObservable<String>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetExtension : Transform<string, string> Methods | Improve this Doc View Source Process(IObservable<String>) Returns the extension of each path string in an observable sequence. Declaration public override IObservable<string> Process(IObservable<string> source) Parameters Type Name Description IObservable < String > source A sequence of String values from which to get the extension. Returns Type Description IObservable < String > A sequence of String values representing the extension of each path in the original sequence, or null (see GetExtension(String) ). Overrides Bonsai.Combinator<System.String, System.String>.Process(System.IObservable<System.String>)"
  },
  "api/Bonsai.IO.GetFileName.html": {
    "href": "api/Bonsai.IO.GetFileName.html",
    "title": "Class GetFileName",
    "keywords": "Class GetFileName Represents an operator that returns the file name and extension of each path string in the sequence. Inheritance Object Combinator < String , String > Transform < String , String > GetFileName Inherited Members Combinator<String, String>.Process(IObservable<String>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetFileName : Transform<string, string> Methods | Improve this Doc View Source Process(IObservable<String>) Returns the file name and extension of each path string in an observable sequence. Declaration public override IObservable<string> Process(IObservable<string> source) Parameters Type Name Description IObservable < String > source A sequence of String values from which to obtain the file name and extension. Returns Type Description IObservable < String > A sequence of String values containing the characters after the last directory character of each path in the original sequence (see GetExtension(String) ). Overrides Bonsai.Combinator<System.String, System.String>.Process(System.IObservable<System.String>)"
  },
  "api/Bonsai.IO.GetFileNameWithoutExtension.html": {
    "href": "api/Bonsai.IO.GetFileNameWithoutExtension.html",
    "title": "Class GetFileNameWithoutExtension",
    "keywords": "Class GetFileNameWithoutExtension Represents an operator that returns the file name without the extension for each path string in the sequence. Inheritance Object Combinator < String , String > Transform < String , String > GetFileNameWithoutExtension Inherited Members Combinator<String, String>.Process(IObservable<String>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetFileNameWithoutExtension : Transform<string, string> Methods | Improve this Doc View Source Process(IObservable<String>) Returns the file name without the extension for each path string in an observable sequence. Declaration public override IObservable<string> Process(IObservable<string> source) Parameters Type Name Description IObservable < String > source A sequence of path String values. Returns Type Description IObservable < String > A sequence of String values returned by GetFileName(String) , minus the last period (.) and all characters following it (see GetFileNameWithoutExtension(String) ). Overrides Bonsai.Combinator<System.String, System.String>.Process(System.IObservable<System.String>)"
  },
  "api/Bonsai.IO.GetFiles.html": {
    "href": "api/Bonsai.IO.GetFiles.html",
    "title": "Class GetFiles",
    "keywords": "Class GetFiles Represents an operator that generates a sequence containing an array with the names of the files matching the specified search pattern. Inheritance Object Source < String []> GetFiles Inherited Members Source<String[]>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetFiles : Source<string[]> Properties | Improve this Doc View Source Path Gets or sets the relative or absolute path of the directory to search. Declaration public string Path { get; set; } Property Value Type Description String | Improve this Doc View Source SearchOption Gets or sets a value specifying whether the search should include only the current directory or all subdirectories. Declaration public SearchOption SearchOption { get; set; } Property Value Type Description SearchOption | Improve this Doc View Source SearchPattern Gets or sets the search string used to match against the names of files in the path. This parameter can contain a combination of valid literal path and wildcard characters (see GetFiles(String, String, SearchOption) ). Declaration public string SearchPattern { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence containing an array of file names that match the search pattern in a specified path, and optionally searches subdirectories. Declaration public override IObservable<string[]> Generate() Returns Type Description IObservable < String []> An observable sequence containing an array with the full names (including paths) for the files in Path that match the specified SearchPattern and SearchOption . Overrides Bonsai.Source<System.String[]>.Generate()"
  },
  "api/Bonsai.IO.GetFileSystemEntries.html": {
    "href": "api/Bonsai.IO.GetFileSystemEntries.html",
    "title": "Class GetFileSystemEntries",
    "keywords": "Class GetFileSystemEntries Represents an operator that generates a sequence containing an array with the names of the files and directories matching the specified search pattern. Inheritance Object Source < String []> GetFileSystemEntries Inherited Members Source<String[]>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetFileSystemEntries : Source<string[]> Properties | Improve this Doc View Source Path Gets or sets the relative or absolute path of the directory to search. Declaration public string Path { get; set; } Property Value Type Description String | Improve this Doc View Source SearchOption Gets or sets a value specifying whether the search should include only the current directory or all subdirectories. Declaration public SearchOption SearchOption { get; set; } Property Value Type Description SearchOption | Improve this Doc View Source SearchPattern Gets or sets the search string used to match against the names of file-system entries in the path. This parameter can contain a combination of valid literal path and wildcard characters (see GetFileSystemEntries(String, String, SearchOption) ). Declaration public string SearchPattern { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence containing an array of file names and directory names that match the search pattern in a specified path, and optionally searches subdirectories. Declaration public override IObservable<string[]> Generate() Returns Type Description IObservable < String []> An observable sequence containing an array with the full names (including paths) for the file-system entries in Path that match the specified SearchPattern and SearchOption . Overrides Bonsai.Source<System.String[]>.Generate()"
  },
  "api/Bonsai.IO.GetFullPath.html": {
    "href": "api/Bonsai.IO.GetFullPath.html",
    "title": "Class GetFullPath",
    "keywords": "Class GetFullPath Represents an operator that returns the absolute path for each path string in the sequence. Inheritance Object Combinator < String , String > Transform < String , String > GetFullPath Inherited Members Combinator<String, String>.Process(IObservable<String>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetFullPath : Transform<string, string> Methods | Improve this Doc View Source Process(IObservable<String>) Represents an operator that returns the absolute path for each path string in an observable sequence. Declaration public override IObservable<string> Process(IObservable<string> source) Parameters Type Name Description IObservable < String > source A sequence of String values for which to obtain absolute path information. Returns Type Description IObservable < String > A sequence of String values representing the fully qualified location for each path in the original sequence (see GetFullPath(String) ). Overrides Bonsai.Combinator<System.String, System.String>.Process(System.IObservable<System.String>)"
  },
  "api/Bonsai.IO.GetPathRoot.html": {
    "href": "api/Bonsai.IO.GetPathRoot.html",
    "title": "Class GetPathRoot",
    "keywords": "Class GetPathRoot Represents an operator that returns the root directory information of each path string in the sequence. Inheritance Object Combinator < String , String > Transform < String , String > GetPathRoot Inherited Members Combinator<String, String>.Process(IObservable<String>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class GetPathRoot : Transform<string, string> Methods | Improve this Doc View Source Process(IObservable<String>) Returns the root directory information of each path string in an observable sequence. Declaration public override IObservable<string> Process(IObservable<string> source) Parameters Type Name Description IObservable < String > source A sequence of String values for which to obtain root directory information. Returns Type Description IObservable < String > A sequence of String values representing the root directory for each path in the original sequence (see GetPathRoot(String) ). Overrides Bonsai.Combinator<System.String, System.String>.Process(System.IObservable<System.String>)"
  },
  "api/Bonsai.IO.html": {
    "href": "api/Bonsai.IO.html",
    "title": "Namespace Bonsai.IO",
    "keywords": "Namespace Bonsai.IO Classes BaudRateConverter Provides a type converter to convert serial baud rates to and from other representations. ChangeExtension Represents an operator that changes the extension of each path string in the sequence. CreateSerialPort Represents an operator that creates and configures a connection to a system serial port. CsvReader Represents an operator that generates a sequence of values for every line in a text file. CsvWriter Represents an operator that writes a delimited text representation of each element of the sequence to a text file. EnumerateDirectories Represents an operator that generates a sequence of directory names matching the specified search pattern. EnumerateFiles Represents an operator that generates a sequence of file names matching the specified search pattern. EnumerateFileSystemEntries Represents an operator that generates a sequence of file names and directory names matching the specified search pattern. FileSink Provides a non-generic base class for sinks that write the elements from the input sequence into a file. FileSink<TSource, TWriter> Provides a base class for sinks that write the elements from the input sequence into a file. GetDirectories Represents an operator that generates a sequence containing an array with the names of the subdirectories matching the specified search pattern. GetDirectoryName Represents an operator that returns the directory information for each path string in the sequence. GetExtension Represents an operator that returns the extension of each path string in the sequence. GetFileName Represents an operator that returns the file name and extension of each path string in the sequence. GetFileNameWithoutExtension Represents an operator that returns the file name without the extension for each path string in the sequence. GetFiles Represents an operator that generates a sequence containing an array with the names of the files matching the specified search pattern. GetFileSystemEntries Represents an operator that generates a sequence containing an array with the names of the files and directories matching the specified search pattern. GetFullPath Represents an operator that returns the absolute path for each path string in the sequence. GetPathRoot Represents an operator that returns the root directory information of each path string in the sequence. PathHelper Provides a set of static methods for creating and manipulating directory and file names. ReadLine Represents an operator that reads lines of characters asynchronously from the input stream. SerialPortConfiguration Represents the set of configuration parameters used to create a new serial port connection. SerialPortNameConverter Provides a type converter to convert serial port names to and from other representations. SerialStringRead Represents an operator that reads lines of characters asynchronously from a serial port. SerialStringWrite Represents an operator that writes the text representation of each element of the sequence to a serial port. StartProcess Represents an operator that starts a new system process with the specified file name and command-line arguments. StreamSink Provides a non-generic base class for sinks that write the elements from the input sequence into a named stream (e.g. a named pipe). StreamSink<TSource, TWriter> Provides a base class for sinks that write the elements from the input sequence into a named stream (e.g. a named pipe). WriteLine Represents an operator that writes the text representation of each element of the sequence to the output stream, followed by the current line terminator. Enums PathSuffix Specifies the known path suffixes that can be appended to a path."
  },
  "api/Bonsai.IO.PathHelper.html": {
    "href": "api/Bonsai.IO.PathHelper.html",
    "title": "Class PathHelper",
    "keywords": "Class PathHelper Provides a set of static methods for creating and manipulating directory and file names. Inheritance Object PathHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public static class PathHelper Methods | Improve this Doc View Source AppendFileCount(String) Appends a file count suffix to a file name without modifying its original extension. Declaration public static string AppendFileCount(string path) Parameters Type Name Description String path The file name on which to append the suffix. Returns Type Description String The new file name where path has been modified to end with the number of files starting with the specified file name in the containing folder but without modifying the file extension. | Improve this Doc View Source AppendSuffix(String, PathSuffix) Appends the specified well known suffix type to a file name without modifying the extension. Declaration public static string AppendSuffix(string path, PathSuffix suffixType) Parameters Type Name Description String path The file name on which to append the suffix. PathSuffix suffixType The suffix type to append. Returns Type Description String The new file name where path has been modified to end with the specified suffixType but without modifying the file extension. | Improve this Doc View Source AppendSuffix(String, String) Appends the specified suffix to a file name without modifying its original extension. Declaration public static string AppendSuffix(string path, string suffix) Parameters Type Name Description String path The file name on which to append the suffix. String suffix The suffix to append. Returns Type Description String The new file name where path has been modified to end with suffix but without modifying the file extension. | Improve this Doc View Source AppendTimestamp(String, DateTimeOffset) Appends a timestamp suffix to a file name without modifying its original extension. Declaration public static string AppendTimestamp(string path, DateTimeOffset timestamp) Parameters Type Name Description String path The file name on which to append the suffix. DateTimeOffset timestamp The timestamp to use for generating the suffix. Returns Type Description String The new file name where path has been modified to end with the round-trip representation of the specified timestamp but without modifying the file extension. | Improve this Doc View Source EnsureDirectory(String) Checks that all folders along the specified path exist and attempts to create any missing ones. Declaration public static void EnsureDirectory(string path) Parameters Type Name Description String path The path to check for missing folders."
  },
  "api/Bonsai.IO.PathSuffix.html": {
    "href": "api/Bonsai.IO.PathSuffix.html",
    "title": "Enum PathSuffix",
    "keywords": "Enum PathSuffix Specifies the known path suffixes that can be appended to a path. Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public enum PathSuffix Fields Name Description FileCount Specifies that the suffix should be the number of files in the same directory that start with the same file name. None Specifies that no suffix should be appended to the path. Timestamp Specifies that the suffix should be the current timestamp as generated by a high resolution system timer, if available."
  },
  "api/Bonsai.IO.ReadLine.html": {
    "href": "api/Bonsai.IO.ReadLine.html",
    "title": "Class ReadLine",
    "keywords": "Class ReadLine Represents an operator that reads lines of characters asynchronously from the input stream. Inheritance Object Source < String > ReadLine Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class ReadLine : Source<string> Methods | Improve this Doc View Source Generate() Reads lines of characters asynchronously from the standard input stream. Declaration public override IObservable<string> Generate() Returns Type Description IObservable < String > A sequence of String values representing each of the lines read from the standard input stream, or null if all of the characters have been read. Overrides Bonsai.Source<System.String>.Generate() | Improve this Doc View Source Generate(IObservable<TextReader>) Reads lines of characters asynchronously from a TextReader object. Declaration public IObservable<string> Generate(IObservable<TextReader> source) Parameters Type Name Description IObservable < TextReader > source A sequence of TextReader objects from which to read lines. Returns Type Description IObservable < String > A sequence of String values representing the lines read from each of the TextReader objects in the original sequence, or null if all of the characters have been read."
  },
  "api/Bonsai.IO.SerialPortConfiguration.html": {
    "href": "api/Bonsai.IO.SerialPortConfiguration.html",
    "title": "Class SerialPortConfiguration",
    "keywords": "Class SerialPortConfiguration Represents the set of configuration parameters used to create a new serial port connection. Inheritance Object SerialPortConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class SerialPortConfiguration Properties | Improve this Doc View Source BaudRate Gets or sets the serial baud rate. Declaration [TypeConverter(typeof(BaudRateConverter))] public int BaudRate { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DataBits Gets or sets the number of data bits per byte. Declaration public int DataBits { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DiscardNull Gets or sets a value indicating whether null bytes are ignored when transmitted between the port and the receive buffer. Declaration public bool DiscardNull { get; set; } Property Value Type Description Boolean | Improve this Doc View Source DtrEnable Gets or sets a value indicating whether the Data Terminal Ready (DTR) signal should be enabled during serial communication. Declaration public bool DtrEnable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Encoding Gets or sets the byte encoding used for pre- and post-transmission conversion of text. Declaration [TypeConverter(typeof(SerialPortEncodingConverter))] public string Encoding { get; set; } Property Value Type Description String | Improve this Doc View Source Handshake Gets or sets the handshaking protocol for serial port transmission of data. Declaration public Handshake Handshake { get; set; } Property Value Type Description Handshake | Improve this Doc View Source Parity Gets or sets the parity bit for the SerialPort object. Declaration public Parity Parity { get; set; } Property Value Type Description Parity | Improve this Doc View Source ParityReplace Gets or sets the byte that replaces invalid bytes in the data stream when a parity error occurs. Declaration public byte ParityReplace { get; set; } Property Value Type Description Byte | Improve this Doc View Source PortName Gets or sets the name of the serial port. Declaration [TypeConverter(typeof(SerialPortNameConverter))] public string PortName { get; set; } Property Value Type Description String | Improve this Doc View Source ReadBufferSize Gets or sets the size of the read buffer, in bytes. This is the maximum number of read bytes which can be buffered. Declaration public int ReadBufferSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ReceivedBytesThreshold Gets or sets the number of bytes received into the internal input buffer before the read event is fired. Declaration public int ReceivedBytesThreshold { get; set; } Property Value Type Description Int32 | Improve this Doc View Source RtsEnable Gets or sets a value indicating whether the Request to Send (RTS) signal should be enabled during serial communication. Declaration public bool RtsEnable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source StopBits Gets or sets the number of stop bits per byte. Declaration public StopBits StopBits { get; set; } Property Value Type Description StopBits | Improve this Doc View Source WriteBufferSize Gets or sets the size of the write buffer, in bytes. This is the maximum number of bytes which can be queued for write. Declaration public int WriteBufferSize { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.IO.SerialPortNameConverter.html": {
    "href": "api/Bonsai.IO.SerialPortNameConverter.html",
    "title": "Class SerialPortNameConverter",
    "keywords": "Class SerialPortNameConverter Provides a type converter to convert serial port names to and from other representations. Inheritance Object TypeConverter StringConverter SerialPortNameConverter Inherited Members StringConverter.CanConvertFrom(ITypeDescriptorContext, Type) StringConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class SerialPortNameConverter : StringConverter Methods | Improve this Doc View Source GetStandardValues(ITypeDescriptorContext) Returns a collection of available serial port names for the current computer. Declaration public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description TypeConverter.StandardValuesCollection A TypeConverter.StandardValuesCollection containing the set of available serial port names for the current computer. Overrides TypeConverter.GetStandardValues(ITypeDescriptorContext) | Improve this Doc View Source GetStandardValuesSupported(ITypeDescriptorContext) Declaration public override bool GetStandardValuesSupported(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description Boolean Overrides TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)"
  },
  "api/Bonsai.IO.SerialStringRead.html": {
    "href": "api/Bonsai.IO.SerialStringRead.html",
    "title": "Class SerialStringRead",
    "keywords": "Class SerialStringRead Represents an operator that reads lines of characters asynchronously from a serial port. Inheritance Object Source < String > SerialStringRead Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class SerialStringRead : Source<string> Properties | Improve this Doc View Source NewLine Gets or sets the new line separator used to delimit reads from the serial port. Declaration public string NewLine { get; set; } Property Value Type Description String | Improve this Doc View Source PortName Gets or sets the name of the serial port. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Reads lines of characters asynchronously from the serial port. Declaration public override IObservable<string> Generate() Returns Type Description IObservable < String > A sequence of String values representing each of the lines read from the serial port. Overrides Bonsai.Source<System.String>.Generate()"
  },
  "api/Bonsai.IO.SerialStringWrite.html": {
    "href": "api/Bonsai.IO.SerialStringWrite.html",
    "title": "Class SerialStringWrite",
    "keywords": "Class SerialStringWrite Represents an operator that writes the text representation of each element of the sequence to a serial port. Inheritance Object Combinator Sink SerialStringWrite Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class SerialStringWrite : Sink Properties | Improve this Doc View Source NewLine Gets or sets the separator used to terminate lines sent to the serial port. Declaration public string NewLine { get; set; } Property Value Type Description String | Improve this Doc View Source PortName Gets or sets the name of the serial port. Declaration [TypeConverter(typeof(PortNameConverter))] public string PortName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Writes the text representation of each element of an observable sequence to a serial port. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the elements to write to the serial port. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the elements to the serial port. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.IO.StartProcess.html": {
    "href": "api/Bonsai.IO.StartProcess.html",
    "title": "Class StartProcess",
    "keywords": "Class StartProcess Represents an operator that starts a new system process with the specified file name and command-line arguments. Inheritance Object Source < Int32 > StartProcess Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class StartProcess : Source<int> Properties | Improve this Doc View Source Arguments Gets or sets the set of command-line arguments to use when starting the application. Declaration public string Arguments { get; set; } Property Value Type Description String | Improve this Doc View Source FileName Gets or sets the name of the application or document to start. Declaration [FileNameFilter(\"Executable files|*.exe|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Starts a new system process with the specified file name and command-line arguments and surfaces the exit code when the process terminates through an observable sequence. Declaration public override IObservable<int> Generate() Returns Type Description IObservable < Int32 > A sequence containing the exit code that the process specified when it terminated. Overrides Bonsai.Source<System.Int32>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Starts a new system process with the specified file name and command-line arguments for each element of an observable sequence, and surfaces all the exit codes as the processes terminate. Declaration public IObservable<int> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source An observable sequence used to start the system processes. For each element produced by this sequence, a new system process will be started. Returns Type Description IObservable < Int32 > A sequence containing all the exit codes from the processes started by the source sequence. A new exit code is produced every time one of the processes terminates. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.IO.StreamSink.html": {
    "href": "api/Bonsai.IO.StreamSink.html",
    "title": "Class StreamSink",
    "keywords": "Class StreamSink Provides a non-generic base class for sinks that write the elements from the input sequence into a named stream (e.g. a named pipe). Inheritance Object StreamSink StreamSink<TSource, TWriter> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Sink)] public abstract class StreamSink Properties | Improve this Doc View Source Overwrite Gets or sets a value indicating whether to overwrite the output path if it already exists. Declaration public bool Overwrite { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Path Gets or sets the identifier of the named stream on which to write the elements. Declaration public string Path { get; set; } Property Value Type Description String Remarks If the identifier uses the named pipe prefix \\.\\pipe</code>, a corresponding NamedPipeServerStream object is created; otherwise a regular FileStream is used. | Improve this Doc View Source Suffix Gets or sets the suffix that should be applied to the path before creating the writer. Declaration public PathSuffix Suffix { get; set; } Property Value Type Description PathSuffix"
  },
  "api/Bonsai.IO.StreamSink-2.html": {
    "href": "api/Bonsai.IO.StreamSink-2.html",
    "title": "Class StreamSink<TSource, TWriter>",
    "keywords": "Class StreamSink<TSource, TWriter> Provides a base class for sinks that write the elements from the input sequence into a named stream (e.g. a named pipe). Inheritance Object StreamSink StreamSink<TSource, TWriter> MatrixWriter ImageWriter Inherited Members StreamSink.Path StreamSink.Suffix StreamSink.Overwrite Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public abstract class StreamSink<TSource, TWriter> : StreamSink where TWriter : class, IDisposable Type Parameters Name Description TSource The type of the elements in the source sequence. TWriter The type of stream writer that should be used to write the elements. Methods | Improve this Doc View Source CreateWriter(Stream) When overridden in a derived class, creates the object that will be responsible for writing the input elements to the specified Stream . Declaration protected abstract TWriter CreateWriter(Stream stream) Parameters Type Name Description Stream stream The stream on which the elements should be written. Returns Type Description TWriter The object that will be used to write elements into the stream. | Improve this Doc View Source Process(IObservable<TSource>) Writes all elements of an observable sequence to the specified stream. Declaration public virtual IObservable<TSource> Process(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence of elements to write. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the elements to a stream. | Improve this Doc View Source Process<TElement>(IObservable<TElement>, Func<TElement, TSource>) Writes all elements of an observable sequence to the specified stream using the specified selector function. Declaration protected IObservable<TElement> Process<TElement>(IObservable<TElement> source, Func<TElement, TSource> selector) Parameters Type Name Description IObservable <TElement> source The sequence of elements to write. Func <TElement, TSource> selector The transform function used to convert each element of the sequence into the type of inputs accepted by the stream writer. Returns Type Description IObservable <TElement> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the elements to a stream. Type Parameters Name Description TElement | Improve this Doc View Source Write(TWriter, TSource) When overridden in a derived class, writes a new element using the specified writer. Declaration protected abstract void Write(TWriter writer, TSource input) Parameters Type Name Description TWriter writer The writer used to push elements into the stream. TSource input The input element that should be pushed into the stream."
  },
  "api/Bonsai.IO.WriteLine.html": {
    "href": "api/Bonsai.IO.WriteLine.html",
    "title": "Class WriteLine",
    "keywords": "Class WriteLine Represents an operator that writes the text representation of each element of the sequence to the output stream, followed by the current line terminator. Inheritance Object Combinator Sink WriteLine Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.IO Assembly : Bonsai.System.dll Syntax public class WriteLine : Sink Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Writes the text representation of each element of an observable sequence to the standard output stream, followed by a line terminator. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the elements to write to the standard output stream. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the elements to the standard output stream. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>) | Improve this Doc View Source Process<TSource>(IObservable<TSource>, IObservable<TextWriter>) Writes the text representation of each element of an observable sequence to all the specified output streams, followed by a line terminator. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> source, IObservable<TextWriter> writer) Parameters Type Name Description IObservable <TSource> source The sequence containing the elements to write to the active output streams. IObservable < TextWriter > writer A sequence of TextWriter objects on which to write the text representation of the elements of the source sequence. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the elements to all active output streams. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.MultidimensionalArrayConverter.html": {
    "href": "api/Bonsai.MultidimensionalArrayConverter.html",
    "title": "Class MultidimensionalArrayConverter",
    "keywords": "Class MultidimensionalArrayConverter Provides a type converter to convert two-dimensional Array objects to and from various other representations. Inheritance Object TypeConverter MultidimensionalArrayConverter Inherited Members TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public class MultidimensionalArrayConverter : TypeConverter Methods | Improve this Doc View Source CanConvertFrom(ITypeDescriptorContext, Type) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context. Declaration public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Type sourceType A Type that represents the type you want to convert from. Returns Type Description Boolean true if this converter can perform the conversion; otherwise, false . Overrides TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type) | Improve this Doc View Source ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) Converts the given object to the type of this converter, using the specified context and culture information. Declaration public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture The CultureInfo to use as the current culture. Object value The Object to convert. Returns Type Description Object An Object that represents the converted value. Overrides TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) | Improve this Doc View Source ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) Converts the given value object to the specified type, using the specified context and culture information. Declaration public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture A CultureInfo . If null is passed, the current culture is assumed. Object value The Object to convert. Type destinationType The Type to convert the value parameter to. Returns Type Description Object An Object that represents the converted value. Overrides TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)"
  },
  "api/Bonsai.NumericRecordConverter.html": {
    "href": "api/Bonsai.NumericRecordConverter.html",
    "title": "Class NumericRecordConverter",
    "keywords": "Class NumericRecordConverter Provides a type converter to convert numeric records to and from various other representations. Inheritance Object TypeConverter NumericRecordConverter Inherited Members TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetPropertiesSupported() TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public class NumericRecordConverter : TypeConverter Methods | Improve this Doc View Source CanConvertFrom(ITypeDescriptorContext, Type) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context. Declaration public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Type sourceType A Type that represents the type you want to convert from. Returns Type Description Boolean true if this converter can perform the conversion; otherwise, false . Overrides TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type) | Improve this Doc View Source ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) Converts the given object to the type of this converter, using the specified context and culture information. Declaration public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture The CultureInfo to use as the current culture. Object value The Object to convert. Returns Type Description Object An Object that represents the converted value. Overrides TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) | Improve this Doc View Source ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) Converts the given value object to the specified type, using the specified context and culture information. Declaration public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture A CultureInfo . If null is passed, the current culture is assumed. Object value The Object to convert. Type destinationType The Type to convert the value parameter to. Returns Type Description Object An Object that represents the converted value. Overrides TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) | Improve this Doc View Source CreateInstance(ITypeDescriptorContext, IDictionary) Creates an instance of the type that this TypeConverter is associated with, using the specified context, given a set of property values for the object. Declaration public override object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. IDictionary propertyValues An IDictionary of new property values. Returns Type Description Object An Object representing the given IDictionary , or null if the object cannot be created. Overrides TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) | Improve this Doc View Source GetCreateInstanceSupported(ITypeDescriptorContext) Returns whether changing a value on this object requires a call to CreateInstance(IDictionary) to create a new value, using the specified context. Declaration public override bool GetCreateInstanceSupported(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Returns Type Description Boolean true if changing a property on this object requires a call to CreateInstance(IDictionary) to create a new value; otherwise, false . Overrides TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) | Improve this Doc View Source GetProperties(ITypeDescriptorContext, Object, Attribute[]) Returns a collection of properties for the type of numeric record specified by the value parameter, using the specified context and attributes. Declaration public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Object value An Object that specifies the type of numeric record for which to get properties. Attribute [] attributes An array of type Attribute that is used as a filter. Returns Type Description PropertyDescriptorCollection A PropertyDescriptorCollection with the properties that are exposed for this data type, or null if there are no properties. Overrides TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) | Improve this Doc View Source GetPropertiesSupported(ITypeDescriptorContext) Returns whether this object supports properties, using the specified context. Declaration public override bool GetPropertiesSupported(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Returns Type Description Boolean true if GetProperties(Object) should be called to find the properties of this object; otherwise, false . Overrides TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)"
  },
  "api/Bonsai.NumericRecordConverter.PropertyDescriptorWrapper.html": {
    "href": "api/Bonsai.NumericRecordConverter.PropertyDescriptorWrapper.html",
    "title": "Class NumericRecordConverter.PropertyDescriptorWrapper",
    "keywords": "Class NumericRecordConverter.PropertyDescriptorWrapper Represents a class used for providing custom property metadata for an object. Inheritance Object MemberDescriptor PropertyDescriptor TypeConverter.SimplePropertyDescriptor NumericRecordConverter.PropertyDescriptorWrapper Inherited Members TypeConverter.SimplePropertyDescriptor.CanResetValue(Object) TypeConverter.SimplePropertyDescriptor.ResetValue(Object) TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(Object) TypeConverter.SimplePropertyDescriptor.ComponentType TypeConverter.SimplePropertyDescriptor.IsReadOnly TypeConverter.SimplePropertyDescriptor.PropertyType PropertyDescriptor.AddValueChanged(Object, EventHandler) PropertyDescriptor.Equals(Object) PropertyDescriptor.CreateInstance(Type) PropertyDescriptor.FillAttributes(IList) PropertyDescriptor.GetChildProperties() PropertyDescriptor.GetChildProperties(Attribute[]) PropertyDescriptor.GetChildProperties(Object) PropertyDescriptor.GetChildProperties(Object, Attribute[]) PropertyDescriptor.GetEditor(Type) PropertyDescriptor.GetHashCode() PropertyDescriptor.GetInvocationTarget(Type, Object) PropertyDescriptor.GetTypeFromName(String) PropertyDescriptor.OnValueChanged(Object, EventArgs) PropertyDescriptor.RemoveValueChanged(Object, EventHandler) PropertyDescriptor.GetValueChangedHandler(Object) PropertyDescriptor.Converter PropertyDescriptor.IsLocalizable PropertyDescriptor.SerializationVisibility PropertyDescriptor.SupportsChangeEvents MemberDescriptor.CreateAttributeCollection() MemberDescriptor.FindMethod(Type, String, Type[], Type) MemberDescriptor.FindMethod(Type, String, Type[], Type, Boolean) MemberDescriptor.GetSite(Object) MemberDescriptor.AttributeArray MemberDescriptor.Attributes MemberDescriptor.Category MemberDescriptor.Description MemberDescriptor.IsBrowsable MemberDescriptor.Name MemberDescriptor.NameHashCode MemberDescriptor.DesignTimeOnly MemberDescriptor.DisplayName Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax protected class PropertyDescriptorWrapper : TypeConverter.SimplePropertyDescriptor Constructors | Improve this Doc View Source PropertyDescriptorWrapper(String, PropertyDescriptor, Attribute[]) Initializes a new instance of the NumericRecordConverter.PropertyDescriptorWrapper class. Declaration public PropertyDescriptorWrapper(string name, PropertyDescriptor descr, Attribute[] attributes) Parameters Type Name Description String name The name of the property. PropertyDescriptor descr The underlying property used for the redirection. Attribute [] attributes An Array with the attributes to associate with the property. Methods | Improve this Doc View Source GetValue(Object) Gets the current value of the property on a component. Declaration public override object GetValue(object component) Parameters Type Name Description Object component The component with the property for which to retrieve the value. Returns Type Description Object The value of a property for a given component. Overrides PropertyDescriptor.GetValue(Object) | Improve this Doc View Source SetValue(Object, Object) Sets a property of the component to a different value. Declaration public override void SetValue(object component, object value) Parameters Type Name Description Object component The component with the property value that is to be set. Object value The new value. Overrides PropertyDescriptor.SetValue(Object, Object)"
  },
  "api/Bonsai.ObservableCombinators.html": {
    "href": "api/Bonsai.ObservableCombinators.html",
    "title": "Class ObservableCombinators",
    "keywords": "Class ObservableCombinators Provides a set of static methods to aid in writing queries over observable sequences. Inheritance Object ObservableCombinators Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public static class ObservableCombinators Methods | Improve this Doc View Source Gate<TSource>(IObservable<TSource>, TimeSpan) Allows a single element from an observable sequence to pass through every time the specified time interval elapses. Declaration public static IObservable<TSource> Gate<TSource>(this IObservable<TSource> source, TimeSpan interval) Parameters Type Name Description IObservable <TSource> source The observable sequence to filter. TimeSpan interval The time interval after which a new element of the sequence is allowed to pass through the gate. Returns Type Description IObservable <TSource> The filtered observable sequence. Every time the specified time interval elapses, the next element from the source sequence will be allowed through. Type Parameters Name Description TSource The type of the elements in the source sequence. | Improve this Doc View Source Gate<TSource>(IObservable<TSource>, TimeSpan, IScheduler) Allows a single element from an observable sequence to pass through every time the specified time interval elapses, using the specified scheduler to run gate timers. Declaration public static IObservable<TSource> Gate<TSource>(this IObservable<TSource> source, TimeSpan interval, IScheduler scheduler) Parameters Type Name Description IObservable <TSource> source The observable sequence to filter. TimeSpan interval The time interval after which a new element of the sequence is allowed to pass through the gate. IScheduler scheduler The scheduler to run the gate timer on. Returns Type Description IObservable <TSource> The filtered observable sequence. Every time the specified time interval elapses, the next element from the source sequence will be allowed through. Type Parameters Name Description TSource The type of the elements in the source sequence. | Improve this Doc View Source Gate<TSource, TGateOpening>(IObservable<TSource>, IObservable<TGateOpening>) Allows a single element from an observable sequence to pass through every time a second sequence emits a notification. Declaration public static IObservable<TSource> Gate<TSource, TGateOpening>(this IObservable<TSource> source, IObservable<TGateOpening> gateOpenings) Parameters Type Name Description IObservable <TSource> source The observable sequence to filter. IObservable <TGateOpening> gateOpenings The sequence of gate opening events. Returns Type Description IObservable <TSource> The filtered observable sequence. Every time the gateOpenings sequence produces a notification, the next element from the source sequence will be allowed through. Type Parameters Name Description TSource The type of the elements in the source sequence. TGateOpening The type of the elements in the gateOpenings sequence. | Improve this Doc View Source Gate<TSource, TGateOpening>(IObservable<TSource>, IObservable<TGateOpening>, TimeSpan) Allows an element from an observable sequence to pass through if this element is produced after a gate opening event and before the specified due time elapses. Declaration public static IObservable<TSource> Gate<TSource, TGateOpening>(this IObservable<TSource> source, IObservable<TGateOpening> gateOpenings, TimeSpan dueTime) Parameters Type Name Description IObservable <TSource> source The observable sequence to filter. IObservable <TGateOpening> gateOpenings The sequence of gate opening events. TimeSpan dueTime After receiving a gate event, the maximum time that can elapse before an element from the source sequence is produced. If the element arrives after the due time elapses, that element is dropped from the result sequence. Returns Type Description IObservable <TSource> The filtered observable sequence. Every time the gateOpenings sequence produces a notification, the next element from the source sequence will be allowed through if it is emitted before the specified due time elapses. Type Parameters Name Description TSource The type of the elements in the source sequence. TGateOpening The type of the elements in the gateOpenings sequence. | Improve this Doc View Source Gate<TSource, TGateOpening>(IObservable<TSource>, IObservable<TGateOpening>, TimeSpan, IScheduler) Allows an element from an observable sequence to pass through if this element is produced after a gate opening event and before the specified due time elapses, using the specified scheduler to run gate closing timers. Declaration public static IObservable<TSource> Gate<TSource, TGateOpening>(this IObservable<TSource> source, IObservable<TGateOpening> gateOpenings, TimeSpan dueTime, IScheduler scheduler) Parameters Type Name Description IObservable <TSource> source The observable sequence to filter. IObservable <TGateOpening> gateOpenings The sequence of gate opening events. TimeSpan dueTime After receiving a gate event, the maximum time that can elapse before an element from the source sequence is produced. If the element arrives after the due time elapses, that element is dropped from the result sequence. IScheduler scheduler The scheduler to run the gate closing timer on. Returns Type Description IObservable <TSource> The filtered observable sequence. Every time the gateOpenings sequence produces a notification, the next element from the source sequence will be allowed through if it is emitted before the specified due time elapses. Type Parameters Name Description TSource The type of the elements in the source sequence. TGateOpening The type of the elements in the gateOpenings sequence. | Improve this Doc View Source Gate<TSource, TGateOpening, TGateClosing>(IObservable<TSource>, IObservable<TGateOpening>, IObservable<TGateClosing>) Allows an element from an observable sequence to pass through if this element is produced between a gate opening and gate closing event. Declaration public static IObservable<TSource> Gate<TSource, TGateOpening, TGateClosing>(this IObservable<TSource> source, IObservable<TGateOpening> gateOpenings, IObservable<TGateClosing> gateClosings) Parameters Type Name Description IObservable <TSource> source The observable sequence to filter. IObservable <TGateOpening> gateOpenings The sequence of gate opening events. IObservable <TGateClosing> gateClosings The sequence of gate closing events. Returns Type Description IObservable <TSource> The filtered observable sequence. Every time the gateOpenings sequence produces a notification, the next element from the source sequence will be allowed through if it is emitted before the next notification from the gateClosings sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. TGateOpening The type of the elements in the gateOpenings sequence. TGateClosing The type of the elements in the gateClosings sequence. | Improve this Doc View Source MulticastReconnectable<TSource, TResult>(IObservable<TSource>, Func<ISubject<TSource, TResult>>) Returns a connectable observable sequence that upon connection causes the source to push results into a new fresh subject, which is created by invoking the specified subjectFactory . Declaration public static IConnectableObservable<TResult> MulticastReconnectable<TSource, TResult>(this IObservable<TSource> source, Func<ISubject<TSource, TResult>> subjectFactory) Parameters Type Name Description IObservable <TSource> source The source sequence whose elements will be pushed into the specified subject. Func < ISubject <TSource, TResult>> subjectFactory The factory function used to create the subject that notifications will be pushed into. Returns Type Description IConnectableObservable <TResult> The reconnectable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. TResult The type of the elements in the result sequence. | Improve this Doc View Source PublishReconnectable<TSource>(IObservable<TSource>) Returns a connectable observable sequence that upon connection causes the source to push results into a new fresh Subject<T> . Declaration public static IConnectableObservable<TSource> PublishReconnectable<TSource>(this IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence whose elements will be pushed into the specified subject. Returns Type Description IConnectableObservable <TSource> The reconnectable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. | Improve this Doc View Source Zip<TSource1, TSource2, TResult>(IObservable<TSource1>, IEnumerable<TSource2>, Func<TSource1, TSource2, TResult>) Merges an observable sequence and an enumerable sequence into one observable sequence by using the selector function. Declaration public static IObservable<TResult> Zip<TSource1, TSource2, TResult>(this IObservable<TSource1> first, IEnumerable<TSource2> second, Func<TSource1, TSource2, TResult> resultSelector) Parameters Type Name Description IObservable <TSource1> first The first observable source. IEnumerable <TSource2> second The second enumerable source. Func <TSource1, TSource2, TResult> resultSelector The function to invoke for each consecutive pair of elements from the first and second source. Returns Type Description IObservable <TResult> An observable sequence containing the result of pairwise combining the elements of the first and second source using the specified result selector function. Type Parameters Name Description TSource1 The type of the elements in the first observable source sequence. TSource2 The type of the elements in the second observable source sequence. TResult The type of the elements in the result sequence, returned by the selector function."
  },
  "api/Bonsai.Osc.CreateTcpClient.html": {
    "href": "api/Bonsai.Osc.CreateTcpClient.html",
    "title": "Class CreateTcpClient",
    "keywords": "Class CreateTcpClient Represents an operator that creates an OSC communication client over TCP. Inheritance Object Source < IDisposable > CreateTransport CreateTcpClient Implements INamedElement Inherited Members CreateTransport.Name CreateTransport.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Osc Assembly : Bonsai.Osc.dll Syntax public class CreateTcpClient : CreateTransport, INamedElement Constructors | Improve this Doc View Source CreateTcpClient() Initializes a new instance of the CreateTcpClient class. Declaration public CreateTcpClient() Properties | Improve this Doc View Source HostName Gets or sets the DNS name of the remote host to which you intend to connect. Declaration public string HostName { get; set; } Property Value Type Description String | Improve this Doc View Source NoDelay Gets or sets a value that disables a delay when send or receive buffers are not full. Declaration public bool NoDelay { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Port Gets or sets the port number of the remote host to which you intend to connect. Declaration public int Port { get; set; } Property Value Type Description Int32 Implements INamedElement"
  },
  "api/Bonsai.Osc.CreateTcpServer.html": {
    "href": "api/Bonsai.Osc.CreateTcpServer.html",
    "title": "Class CreateTcpServer",
    "keywords": "Class CreateTcpServer Represents an operator that creates an OSC communication server over TCP. Inheritance Object Source < IDisposable > CreateTransport CreateTcpServer Implements INamedElement Inherited Members CreateTransport.Name CreateTransport.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Osc Assembly : Bonsai.Osc.dll Syntax public class CreateTcpServer : CreateTransport, INamedElement Constructors | Improve this Doc View Source CreateTcpServer() Initializes a new instance of the CreateTcpServer class. Declaration public CreateTcpServer() Properties | Improve this Doc View Source AllowNatTraversal Gets or sets a value that enables or disables Network Address Translation (NAT) traversal on the TCP server. Declaration public bool AllowNatTraversal { get; set; } Property Value Type Description Boolean | Improve this Doc View Source NoDelay Gets or sets a value that disables a delay when send or receive buffers are not full. Declaration public bool NoDelay { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Port Gets or sets the port on which to listen for incoming connection attempts. Declaration public int Port { get; set; } Property Value Type Description Int32 Implements INamedElement"
  },
  "api/Bonsai.Osc.CreateTransport.html": {
    "href": "api/Bonsai.Osc.CreateTransport.html",
    "title": "Class CreateTransport",
    "keywords": "Class CreateTransport Provides an abstract base class for operators that create OSC communication channels. Inheritance Object Source < IDisposable > CreateTransport CreateTcpClient CreateTcpServer CreateUdpClient Implements INamedElement Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Osc Assembly : Bonsai.Osc.dll Syntax public abstract class CreateTransport : Source<IDisposable>, INamedElement Properties | Improve this Doc View Source Name Gets or sets the name of the communication channel to reserve for the OSC protocol. Declaration public string Name { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains an object representing an open connection to the Open Sound Control communication channel. Declaration public override IObservable<IDisposable> Generate() Returns Type Description IObservable < IDisposable > A sequence containing a single instance of the IDisposable class representing a connection to the underlying communication channel. Overrides Bonsai.Source<System.IDisposable>.Generate() Implements INamedElement"
  },
  "api/Bonsai.Osc.CreateUdpClient.html": {
    "href": "api/Bonsai.Osc.CreateUdpClient.html",
    "title": "Class CreateUdpClient",
    "keywords": "Class CreateUdpClient Represents an operator that creates an OSC communication channel over UDP. Inheritance Object Source < IDisposable > CreateTransport CreateUdpClient Implements INamedElement Inherited Members CreateTransport.Name CreateTransport.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Osc Assembly : Bonsai.Osc.dll Syntax public class CreateUdpClient : CreateTransport, INamedElement Constructors | Improve this Doc View Source CreateUdpClient() Initializes a new instance of the CreateUdpClient class. Declaration public CreateUdpClient() Properties | Improve this Doc View Source Port Gets or sets the local port number from which you intend to communicate. Declaration public int Port { get; set; } Property Value Type Description Int32 | Improve this Doc View Source RemoteHostName Gets or sets the DNS name of the remote host to which you intend to send data. If empty, the channel will accept connections from any host. Declaration public string RemoteHostName { get; set; } Property Value Type Description String | Improve this Doc View Source RemotePort Gets or sets the port number on the remote host to which you intend to send data. If this value is zero, the channel will accept connections from any port. Declaration public int RemotePort { get; set; } Property Value Type Description Int32 Implements INamedElement"
  },
  "api/Bonsai.Osc.Format.html": {
    "href": "api/Bonsai.Osc.Format.html",
    "title": "Class Format",
    "keywords": "Class Format Represents an operator that formats each element of the sequence as an OSC message. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SelectBuilder Format Implements IExpressionBuilder Inherited Members SelectBuilder.Build(IEnumerable<Expression>) SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Osc Assembly : Bonsai.Osc.dll Syntax [WorkflowElementCategory(ElementCategory.Transform)] public class Format : SelectBuilder, IExpressionBuilder Properties | Improve this Doc View Source Address Gets or sets the OSC address pattern specifying which method to invoke using the formatted data. Declaration public string Address { get; set; } Property Value Type Description String Methods | Improve this Doc View Source BuildSelector(Expression) When overridden in a derived class, returns the expression that maps the specified input parameter to the selector result. Declaration protected override Expression BuildSelector(Expression expression) Parameters Type Name Description Expression expression The input parameter to the selector. Returns Type Description Expression The Expression that maps the input parameter to the selector result. Overrides SelectBuilder.BuildSelector(Expression) Implements IExpressionBuilder"
  },
  "api/Bonsai.Osc.html": {
    "href": "api/Bonsai.Osc.html",
    "title": "Namespace Bonsai.Osc",
    "keywords": "Namespace Bonsai.Osc Classes CreateTcpClient Represents an operator that creates an OSC communication client over TCP. CreateTcpServer Represents an operator that creates an OSC communication server over TCP. CreateTransport Provides an abstract base class for operators that create OSC communication channels. CreateUdpClient Represents an operator that creates an OSC communication channel over UDP. Format Represents an operator that formats each element of the sequence as an OSC message. Message Represents an OSC message, including its method address and data arguments. Parse Represents an operator that decodes the data contents from each OSC message in the sequence. ReceiveMessage Represents an operator that reads data contents from the specified OSC communication channel. SendMessage Represents an operator that writes each element of the sequence into an OSC communication channel. TimeTag Provides helper methods for converting to and from OSC time tags."
  },
  "api/Bonsai.Osc.Message.html": {
    "href": "api/Bonsai.Osc.Message.html",
    "title": "Class Message",
    "keywords": "Class Message Represents an OSC message, including its method address and data arguments. Inheritance Object Message Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Osc Assembly : Bonsai.Osc.dll Syntax public sealed class Message Constructors | Improve this Doc View Source Message(ArraySegment<Byte>) Initializes a new instance of the Message class using the specified array segment. Declaration public Message(ArraySegment<byte> buffer) Parameters Type Name Description ArraySegment < Byte > buffer A section of an 8-bit unsigned integer array representing the contents of an OSC message. | Improve this Doc View Source Message(Byte[]) Initializes a new instance of the Message class using the specified binary payload. Declaration public Message(byte[] array) Parameters Type Name Description Byte [] array An 8-bit unsigned integer array representing the contents of an OSC message. | Improve this Doc View Source Message(Byte[], Int32, Int32) Initializes a new instance of the Message class using the specified array segment. Declaration public Message(byte[] array, int offset, int count) Parameters Type Name Description Byte [] array An 8-bit unsigned integer array storing the contents of the OSC message. Int32 offset The zero-based starting position of the OSC message in the array. Int32 count The number of bytes used by the contents of the OSC message. Properties | Improve this Doc View Source Address Gets the OSC address pattern specifying which method to invoke with the data in this message. Declaration public string Address { get; } Property Value Type Description String | Improve this Doc View Source Buffer Gets the an 8-bit unsigned integer array segment representing the contents of this OSC message. Declaration public ArraySegment<byte> Buffer { get; } Property Value Type Description ArraySegment < Byte > | Improve this Doc View Source TypeTag Gets or sets the OSC type tag specifying the type of the OSC arguments in the message. Declaration public string TypeTag { get; } Property Value Type Description String Methods | Improve this Doc View Source GetContents() Returns an enumerable sequence of the OSC arguments in this message. Declaration public IEnumerable GetContents() Returns Type Description IEnumerable An IEnumerable object which can be used to enumerate all the OSC arguments in this message. | Improve this Doc View Source GetContentStream() Opens a memory stream into the OSC message contents. Declaration public Stream GetContentStream() Returns Type Description Stream An instance of the Stream class which can be used to read the binary contents of the OSC message. | Improve this Doc View Source IsMatch(String) Returns whether the OSC address pattern in this message matches the specified method name. Declaration public bool IsMatch(string methodName) Parameters Type Name Description String methodName The name of the OSC method to match against the OSC address pattern of this message. Returns Type Description Boolean true if the method matches the OSC address pattern; otherwise, false . | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Osc.Net.html": {
    "href": "api/Bonsai.Osc.Net.html",
    "title": "Namespace Bonsai.Osc.Net",
    "keywords": "Namespace Bonsai.Osc.Net Classes TcpClientConfiguration Provides settings for configuring an OSC communication client over TCP. TcpServerConfiguration Provides settings for creating and configuring an OSC communication server over TCP. TransportConfiguration Provides an abstract base class for configuring the transport communication channel used by the OSC protocol. UdpConfiguration Provides settings for configuring an OSC communication channel over UDP."
  },
  "api/Bonsai.Osc.Net.TcpClientConfiguration.html": {
    "href": "api/Bonsai.Osc.Net.TcpClientConfiguration.html",
    "title": "Class TcpClientConfiguration",
    "keywords": "Class TcpClientConfiguration Provides settings for configuring an OSC communication client over TCP. Inheritance Object TransportConfiguration TcpClientConfiguration Inherited Members TransportConfiguration.Name Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Osc.Net Assembly : Bonsai.Osc.dll Syntax public class TcpClientConfiguration : TransportConfiguration Properties | Improve this Doc View Source HostName Gets or sets the DNS name of the remote host to which you intend to connect. Declaration public string HostName { get; set; } Property Value Type Description String | Improve this Doc View Source NoDelay Gets or sets a value that disables a delay when send or receive buffers are not full. Declaration public bool NoDelay { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Port Gets or sets the port number of the remote host to which you intend to connect. Declaration public int Port { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.Osc.Net.TcpServerConfiguration.html": {
    "href": "api/Bonsai.Osc.Net.TcpServerConfiguration.html",
    "title": "Class TcpServerConfiguration",
    "keywords": "Class TcpServerConfiguration Provides settings for creating and configuring an OSC communication server over TCP. Inheritance Object TransportConfiguration TcpServerConfiguration Inherited Members TransportConfiguration.Name Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Osc.Net Assembly : Bonsai.Osc.dll Syntax public class TcpServerConfiguration : TransportConfiguration Properties | Improve this Doc View Source AllowNatTraversal Gets or sets a value that enables or disables Network Address Translation (NAT) traversal on the TCP server. Declaration public bool AllowNatTraversal { get; set; } Property Value Type Description Boolean | Improve this Doc View Source NoDelay Gets or sets a value that disables a delay when send or receive buffers are not full. Declaration public bool NoDelay { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Port Gets or sets the port on which to listen for incoming connection attempts. Declaration public int Port { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.Osc.Net.TransportConfiguration.html": {
    "href": "api/Bonsai.Osc.Net.TransportConfiguration.html",
    "title": "Class TransportConfiguration",
    "keywords": "Class TransportConfiguration Provides an abstract base class for configuring the transport communication channel used by the OSC protocol. Inheritance Object TransportConfiguration TcpClientConfiguration TcpServerConfiguration UdpConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Osc.Net Assembly : Bonsai.Osc.dll Syntax public abstract class TransportConfiguration Properties | Improve this Doc View Source Name Gets or sets the name of the communication channel to reserve for the OSC protocol. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api/Bonsai.Osc.Net.UdpConfiguration.html": {
    "href": "api/Bonsai.Osc.Net.UdpConfiguration.html",
    "title": "Class UdpConfiguration",
    "keywords": "Class UdpConfiguration Provides settings for configuring an OSC communication channel over UDP. Inheritance Object TransportConfiguration UdpConfiguration Inherited Members TransportConfiguration.Name Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Osc.Net Assembly : Bonsai.Osc.dll Syntax public class UdpConfiguration : TransportConfiguration Properties | Improve this Doc View Source Port Gets or sets the local port number from which you intend to communicate. Declaration public int Port { get; set; } Property Value Type Description Int32 | Improve this Doc View Source RemoteHostName Gets or sets the DNS name of the remote host to which you intend to send data. Declaration public string RemoteHostName { get; set; } Property Value Type Description String | Improve this Doc View Source RemotePort Gets or sets the port number on the remote host to which you intend to send data. Declaration public int RemotePort { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.Osc.Parse.html": {
    "href": "api/Bonsai.Osc.Parse.html",
    "title": "Class Parse",
    "keywords": "Class Parse Represents an operator that decodes the data contents from each OSC message in the sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder Parse ReceiveMessage Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Osc Assembly : Bonsai.Osc.dll Syntax public class Parse : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source Address Gets or sets the name of the OSC method that should be matched against the address pattern in the OSC message. Declaration public string Address { get; set; } Property Value Type Description String | Improve this Doc View Source TypeTag Gets or sets the OSC type tag specifying the type of the OSC arguments in the message. Declaration [TypeConverter(typeof(TypeTagConverter))] public string TypeTag { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder"
  },
  "api/Bonsai.Osc.ReceiveMessage.html": {
    "href": "api/Bonsai.Osc.ReceiveMessage.html",
    "title": "Class ReceiveMessage",
    "keywords": "Class ReceiveMessage Represents an operator that reads data contents from the specified OSC communication channel. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder Parse ReceiveMessage Implements IExpressionBuilder Inherited Members Parse.Address Parse.TypeTag ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Osc Assembly : Bonsai.Osc.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public class ReceiveMessage : Parse, IExpressionBuilder Constructors | Improve this Doc View Source ReceiveMessage() Initializes a new instance of the ReceiveMessage class. Declaration public ReceiveMessage() Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides SingleArgumentExpressionBuilder.ArgumentRange | Improve this Doc View Source Connection Gets or sets the name of the communication channel to reserve for the OSC protocol. Declaration [TypeConverter(typeof(ConnectionNameConverter))] public string Connection { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides Parse.Build(IEnumerable<Expression>) Implements IExpressionBuilder"
  },
  "api/Bonsai.Osc.SendMessage.html": {
    "href": "api/Bonsai.Osc.SendMessage.html",
    "title": "Class SendMessage",
    "keywords": "Class SendMessage Represents an operator that writes each element of the sequence into an OSC communication channel. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder SendMessage Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Osc Assembly : Bonsai.Osc.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public class SendMessage : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source Address Gets or sets the OSC address pattern specifying which method to invoke using the formatted data. Declaration public string Address { get; set; } Property Value Type Description String | Improve this Doc View Source Connection Gets or sets the name of the communication channel to reserve for the OSC protocol. Declaration [TypeConverter(typeof(ConnectionNameConverter))] public string Connection { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder"
  },
  "api/Bonsai.Osc.TimeTag.html": {
    "href": "api/Bonsai.Osc.TimeTag.html",
    "title": "Class TimeTag",
    "keywords": "Class TimeTag Provides helper methods for converting to and from OSC time tags. Inheritance Object TimeTag Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Osc Assembly : Bonsai.Osc.dll Syntax public static class TimeTag Methods | Improve this Doc View Source FromTimestamp(DateTimeOffset) Converts a date time object relative to UTC into an OSC time tag. Declaration public static ulong FromTimestamp(DateTimeOffset timestamp) Parameters Type Name Description DateTimeOffset timestamp A DateTimeOffset specifying a point in time relative to UTC. Returns Type Description UInt64 The OSC time tag corresponding to the specified DateTimeOffset . | Improve this Doc View Source ToTimestamp(UInt64) Converts an OSC time tag into a date time object relative to UTC. Declaration public static DateTimeOffset ToTimestamp(ulong timeTag) Parameters Type Name Description UInt64 timeTag The OSC time tag to convert. Returns Type Description DateTimeOffset The DateTimeOffset value corresponding to the specified OSC time tag."
  },
  "api/Bonsai.PrecisionAttribute.html": {
    "href": "api/Bonsai.PrecisionAttribute.html",
    "title": "Class PrecisionAttribute",
    "keywords": "Class PrecisionAttribute Specifies the number of decimal places and the smallest incremental step that should be used when editing values for a property. Inheritance Object Attribute PrecisionAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class PrecisionAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source PrecisionAttribute(Int32, Decimal) Initializes a new instance of the PrecisionAttribute with the specified number of decimal places and the smallest editor step increment. Declaration public PrecisionAttribute(int decimalPlaces, decimal increment) Parameters Type Name Description Int32 decimalPlaces The number of decimal places to display in the editor. Decimal increment The Decimal value by which to increment or decrement the current value on each editor step. | Improve this Doc View Source PrecisionAttribute(Int32, Double) Initializes a new instance of the PrecisionAttribute with the specified number of decimal places and the smallest editor step increment. Declaration public PrecisionAttribute(int decimalPlaces, double increment) Parameters Type Name Description Int32 decimalPlaces The number of decimal places to display in the editor. Double increment The Double value by which to increment or decrement the current value on each editor step. | Improve this Doc View Source PrecisionAttribute(Int32, Int32) Initializes a new instance of the PrecisionAttribute with the specified number of decimal places and the smallest editor step increment. Declaration public PrecisionAttribute(int decimalPlaces, int increment) Parameters Type Name Description Int32 decimalPlaces The number of decimal places to display in the editor. Int32 increment The Int32 value by which to increment or decrement the current value on each editor step. Properties | Improve this Doc View Source DecimalPlaces Gets the number of decimal places to display in the editor. Declaration public int DecimalPlaces { get; } Property Value Type Description Int32 | Improve this Doc View Source Increment Gets the smallest value by which to increment or decrement the current value on each editor step. Declaration public decimal Increment { get; } Property Value Type Description Decimal Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.ProxyTypeAttribute.html": {
    "href": "api/Bonsai.ProxyTypeAttribute.html",
    "title": "Class ProxyTypeAttribute",
    "keywords": "Class ProxyTypeAttribute Specifies a type used to replace the class this attribute is bound to. This attribute is meant for internal use only. Inheritance Object Attribute ProxyTypeAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class ProxyTypeAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ProxyTypeAttribute(Type) Initializes a new instance of the ProxyTypeAttribute class with the specified destination type. Declaration public ProxyTypeAttribute(Type destination) Parameters Type Name Description Type destination The Type that should be used to replace the class this attribute is bound to. Properties | Improve this Doc View Source Destination Gets the Type that should be used to replace the class this attribute is bound to. Declaration public Type Destination { get; } Property Value Type Description Type Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.Range.html": {
    "href": "api/Bonsai.Range.html",
    "title": "Class Range",
    "keywords": "Class Range Provides static methods for creating range objects. Inheritance Object Range Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public static class Range Methods | Improve this Doc View Source Create<TValue>(TValue, TValue) Creates a new range with the specified lower and upper bounds. Declaration public static Range<TValue> Create<TValue>(TValue lowerBound, TValue upperBound) Parameters Type Name Description TValue lowerBound The inclusive lower bound of the range. TValue upperBound The inclusive lower bound of the range. Returns Type Description Range <TValue> A new instance of the Range<TValue> class. Type Parameters Name Description TValue The type of values in the range. | Improve this Doc View Source Create<TValue>(TValue, TValue, IComparer<TValue>) Creates a new range with the specified lower and upper bounds and using the specified comparer. Declaration public static Range<TValue> Create<TValue>(TValue lowerBound, TValue upperBound, IComparer<TValue> comparer) Parameters Type Name Description TValue lowerBound The inclusive lower bound of the range. TValue upperBound The inclusive lower bound of the range. IComparer <TValue> comparer An IComparer<T> to use to compare values. Returns Type Description Range <TValue> A new instance of the Range<TValue> class. Type Parameters Name Description TValue The type of values in the range."
  },
  "api/Bonsai.Range-1.html": {
    "href": "api/Bonsai.Range-1.html",
    "title": "Class Range<TValue>",
    "keywords": "Class Range<TValue> Represents a range of values defined by an inclusive lower and upper bounds. Inheritance Object Range<TValue> Implements IEquatable < Range <TValue>> Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public sealed class Range<TValue> : IEquatable<Range<TValue>> Type Parameters Name Description TValue The type of values in the range. Constructors | Improve this Doc View Source Range(TValue, TValue) Initializes a new instance of the Range<TValue> class with the specified lower and upper bounds. Declaration public Range(TValue lowerBound, TValue upperBound) Parameters Type Name Description TValue lowerBound The inclusive lower bound of the range. TValue upperBound The inclusive upper bound of the range. | Improve this Doc View Source Range(TValue, TValue, IComparer<TValue>) Initializes a new instance of the Range<TValue> class with the specified lower and upper bounds and using the specified comparer. Declaration public Range(TValue lowerBound, TValue upperBound, IComparer<TValue> comparer) Parameters Type Name Description TValue lowerBound The inclusive lower bound of the range. TValue upperBound The inclusive upper bound of the range. IComparer <TValue> comparer An IComparer<T> to use to compare values. Properties | Improve this Doc View Source LowerBound Gets the inclusive lower bound of the range. Declaration public TValue LowerBound { get; } Property Value Type Description TValue | Improve this Doc View Source UpperBound Gets the inclusive upper bound of the range. Declaration public TValue UpperBound { get; } Property Value Type Description TValue Methods | Improve this Doc View Source Contains(TValue) Tests whether a specified value falls within the range. Declaration public bool Contains(TValue value) Parameters Type Name Description TValue value The value to test. Returns Type Description Boolean true if value is between or equal to the lower and upper bound values of this instance; otherwise, false . | Improve this Doc View Source Equals(Range<TValue>) Returns a value indicating whether this instance has the same lower and upper bounds as a specified Range<TValue> object. Declaration public bool Equals(Range<TValue> other) Parameters Type Name Description Range <TValue> other The Range<TValue> object to compare to this instance. Returns Type Description Boolean true if other has the same lower and upper bounds as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is a Range<TValue> object with the same lower and upper bounds as this Range<TValue> instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a Range<TValue> and has the same lower and upper bounds as this Range<TValue> ; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Returns a hash code for the current instance. Declaration public override int GetHashCode() Returns Type Description Int32 The hash code for the current instance. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Creates a String representation of this Range<TValue> . Declaration public override string ToString() Returns Type Description String A String containing the lower and upper bound values of this Range<TValue> . Overrides Object.ToString() Operators | Improve this Doc View Source Equality(Range<TValue>, Range<TValue>) Tests whether two Range<TValue> objects are equal. Declaration public static bool operator ==(Range<TValue> left, Range<TValue> right) Parameters Type Name Description Range <TValue> left The Range<TValue> object on the left-hand side of the equality operator. Range <TValue> right The Range<TValue> object on the right-hand side of the equality operator. Returns Type Description Boolean true if left and right have equal lower and upper bounds; otherwise, false . | Improve this Doc View Source Inequality(Range<TValue>, Range<TValue>) Tests whether two Range<TValue> objects are different. Declaration public static bool operator !=(Range<TValue> left, Range<TValue> right) Parameters Type Name Description Range <TValue> left The Range<TValue> object on the left-hand side of the inequality operator. Range <TValue> right The Range<TValue> object on the right-hand side of the inequality operator. Returns Type Description Boolean true if left and right differ either in their lower or upper bounds; false if left and right are equal. Implements System.IEquatable<T>"
  },
  "api/Bonsai.RangeAttribute.html": {
    "href": "api/Bonsai.RangeAttribute.html",
    "title": "Class RangeAttribute",
    "keywords": "Class RangeAttribute Specifies the valid range of values for a numeric property. Inheritance Object Attribute RangeAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class RangeAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source RangeAttribute(Decimal, Decimal) Initializes a new instance of the RangeAttribute class with the specified minimum and maximum values. Declaration public RangeAttribute(decimal min, decimal max) Parameters Type Name Description Decimal min A Decimal that is the minimum value. Decimal max A Decimal that is the maximum value. | Improve this Doc View Source RangeAttribute(Double, Double) Initializes a new instance of the RangeAttribute class with the specified minimum and maximum values. Declaration public RangeAttribute(double min, double max) Parameters Type Name Description Double min A Double that is the minimum value. Double max A Double that is the maximum value. | Improve this Doc View Source RangeAttribute(Int32, Int32) Initializes a new instance of the RangeAttribute class with the specified minimum and maximum values. Declaration public RangeAttribute(int min, int max) Parameters Type Name Description Int32 min An Int32 that is the minimum value. Int32 max An Int32 that is the maximum value. | Improve this Doc View Source RangeAttribute(Int64, Int64) Initializes a new instance of the RangeAttribute class with the specified minimum and maximum values. Declaration public RangeAttribute(long min, long max) Parameters Type Name Description Int64 min An Int64 that is the minimum value. Int64 max An Int64 that is the maximum value. | Improve this Doc View Source RangeAttribute(Single, Single) Initializes a new instance of the RangeAttribute class with the specified minimum and maximum values. Declaration public RangeAttribute(float min, float max) Parameters Type Name Description Single min A Single that is the minimum value. Single max A Single that is the maximum value. Fields | Improve this Doc View Source Default Specifies the default value for the RangeAttribute . This field is read-only. Declaration public static readonly RangeAttribute Default Field Value Type Description RangeAttribute Properties | Improve this Doc View Source Maximum Gets the maximum value of the property this attribute is bound to. Declaration public decimal Maximum { get; } Property Value Type Description Decimal | Improve this Doc View Source Minimum Gets the minimum value of the property this attribute is bound to. Declaration public decimal Minimum { get; } Property Value Type Description Decimal Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.Reactive.Accumulate.html": {
    "href": "api/Bonsai.Reactive.Accumulate.html",
    "title": "Class Accumulate",
    "keywords": "Class Accumulate Represents an operator that computes the cumulative sum of an observable sequence and returns each intermediate result. The Accumulate operator returns the current value of the cumulative sum each time the source sequence emits a notification. The result sequence terminates successfully when the source sequence terminates successfully. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder Accumulate Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Accumulate : SingleArgumentExpressionBuilder, IExpressionBuilder Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Amb.html": {
    "href": "api/Bonsai.Reactive.Amb.html",
    "title": "Class Amb",
    "keywords": "Class Amb Represents an operator that propagates the observable sequence that reacts first. The Amb operator sets up a winner-take-all race condition between all source sequences. The first sequence to emit a notification will gain full control of the output, and all the other sequences will have their subscriptions immediatelly cancelled. Amb is most commonly used to ensure only one of many outcomes being evaluated in parallel is propagated. Inheritance Object Amb Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Amb Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>, IObservable<TSource>) Propagates the observable sequence that reacts first. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second) Parameters Type Name Description IObservable <TSource> first First observable sequence. IObservable <TSource> second Second observable sequence. Returns Type Description IObservable <TSource> An observable sequence that surfaces either of the given sequences, whichever reacted first. Type Parameters Name Description TSource The type of the elements in the source sequences. | Improve this Doc View Source Process<TSource>(IObservable<TSource>[]) Propagates the observable sequence that reacts first. Declaration public IObservable<TSource> Process<TSource>(params IObservable<TSource>[] sources) Parameters Type Name Description IObservable <TSource>[] sources Observable sources competing to react first. Returns Type Description IObservable <TSource> An observable sequence that surfaces any of the given sequences, whichever reacted first. Type Parameters Name Description TSource The type of the elements in the source sequences."
  },
  "api/Bonsai.Reactive.AsyncSubject.html": {
    "href": "api/Bonsai.Reactive.AsyncSubject.html",
    "title": "Class AsyncSubject",
    "keywords": "Class AsyncSubject Represents an expression builder that broadcasts the last value of an observable sequence to all subscribed and future observers using a shared subject. AsyncSubject stores and passes the last value (and only the last value) emitted by the source sequence to each subscribed observer. The value is also only sent out after the source sequence terminates. If the source sequence does not emit any value, AsyncSubject will also terminate without emitting any values. Tip You can use the Take operator before AsyncSubject to store the first value from an infinite sequence. Any observers which subscribe after the source sequence terminates will immediately receive the stored value. If the source sequence terminates with an error, AsyncSubject will not emit any values but will pass along the error notification to all observers. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder AsyncSubject Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(AsyncSubject), \"AsyncSubject\")] public class AsyncSubject : SubjectBuilder, IExpressionBuilder, INamedElement Methods | Improve this Doc View Source BuildSubject(Expression) When overridden in a derived class, returns the expression that creates the shared subject. Declaration protected override Expression BuildSubject(Expression expression) Parameters Type Name Description Expression expression The expression representing the observable input sequence. Returns Type Description Expression The Expression that creates the shared subject. Overrides SubjectBuilder.BuildSubject(Expression) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.AsyncSubject-1.html": {
    "href": "api/Bonsai.Reactive.AsyncSubject-1.html",
    "title": "Class AsyncSubject<T>",
    "keywords": "Class AsyncSubject<T> Represents an expression builder that broadcasts the result of the first observable sequence to complete to all subscribed and future observers. AsyncSubject stores and passes the last value (and only the last value) emitted by the source sequence to each subscribed observer. The value is also only sent out after the source sequence terminates. If the source sequence does not emit any value, AsyncSubject will also terminate without emitting any values. Tip You can use the Take operator before AsyncSubject to store the first value from an infinite sequence. Any observers which subscribe after the source sequence terminates will immediately receive the stored value. If the source sequence terminates with an error, AsyncSubject will not emit any values but will pass along the error notification to all observers. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder <T> AsyncSubject<T> Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder<T>.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(AsyncSubject), \"AsyncSubject\")] public class AsyncSubject<T> : SubjectBuilder<T>, IExpressionBuilder, INamedElement Type Parameters Name Description T The type of the result stored by the subject. Methods | Improve this Doc View Source CreateSubject() Creates a shared subject that broadcasts the result of the first observable sequence to complete to all subscribed and future observers. Declaration protected override ISubject<T> CreateSubject() Returns Type Description ISubject <T> A new instance of ISubject<T> . Overrides Bonsai.Expressions.SubjectBuilder<T>.CreateSubject() Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Average.html": {
    "href": "api/Bonsai.Reactive.Average.html",
    "title": "Class Average",
    "keywords": "Class Average Represents an operator that computes the numerical average of an observable sequence. The Average operator collects all the values from the source sequence and emits a single floating-point number representing their arithmetic mean. The single result value is emitted only when the source sequence terminates successfully. Inheritance Object Average Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Average Methods | Improve this Doc View Source Process(IObservable<Decimal>) Computes the average of an observable sequence of Decimal values. Declaration public IObservable<decimal> Process(IObservable<decimal> source) Parameters Type Name Description IObservable < Decimal > source A sequence of Decimal values to calculate the average of. Returns Type Description IObservable < Decimal > An observable sequence containing a single element representing the average of the sequence of values. | Improve this Doc View Source Process(IObservable<Double>) Computes the average of an observable sequence of Double values. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of Double values to calculate the average of. Returns Type Description IObservable < Double > An observable sequence containing a single element representing the average of the sequence of values. | Improve this Doc View Source Process(IObservable<Int32>) Computes the average of an observable sequence of Int32 values. Declaration public IObservable<double> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of Int32 values to calculate the average of. Returns Type Description IObservable < Double > An observable sequence containing a single element representing the average of the sequence of values. | Improve this Doc View Source Process(IObservable<Int64>) Computes the average of an observable sequence of Int64 values. Declaration public IObservable<double> Process(IObservable<long> source) Parameters Type Name Description IObservable < Int64 > source A sequence of Int64 values to calculate the average of. Returns Type Description IObservable < Double > An observable sequence containing a single element representing the average of the sequence of values. | Improve this Doc View Source Process(IObservable<Nullable<Decimal>>) Computes the average of an observable sequence of nullable Decimal values. Declaration public IObservable<decimal?> Process(IObservable<decimal?> source) Parameters Type Name Description IObservable < Nullable < Decimal >> source A sequence of Decimal values to calculate the average of. Returns Type Description IObservable < Nullable < Decimal >> An observable sequence containing a single element representing the average of the sequence of values. | Improve this Doc View Source Process(IObservable<Nullable<Double>>) Computes the average of an observable sequence of nullable Double values. Declaration public IObservable<double?> Process(IObservable<double?> source) Parameters Type Name Description IObservable < Nullable < Double >> source A sequence of Double values to calculate the average of. Returns Type Description IObservable < Nullable < Double >> An observable sequence containing a single element representing the average of the sequence of values. | Improve this Doc View Source Process(IObservable<Nullable<Int32>>) Computes the average of an observable sequence of nullable Int32 values. Declaration public IObservable<double?> Process(IObservable<int?> source) Parameters Type Name Description IObservable < Nullable < Int32 >> source A sequence of Int32 values to calculate the average of. Returns Type Description IObservable < Nullable < Double >> An observable sequence containing a single element representing the average of the sequence of values. | Improve this Doc View Source Process(IObservable<Nullable<Int64>>) Computes the average of an observable sequence of nullable Int64 values. Declaration public IObservable<double?> Process(IObservable<long?> source) Parameters Type Name Description IObservable < Nullable < Int64 >> source A sequence of Int64 values to calculate the average of. Returns Type Description IObservable < Nullable < Double >> An observable sequence containing a single element representing the average of the sequence of values. | Improve this Doc View Source Process(IObservable<Nullable<Single>>) Computes the average of an observable sequence of nullable Single values. Declaration public IObservable<float?> Process(IObservable<float?> source) Parameters Type Name Description IObservable < Nullable < Single >> source A sequence of Single values to calculate the average of. Returns Type Description IObservable < Nullable < Single >> An observable sequence containing a single element representing the average of the sequence of values. | Improve this Doc View Source Process(IObservable<Single>) Computes the average of an observable sequence of Single values. Declaration public IObservable<float> Process(IObservable<float> source) Parameters Type Name Description IObservable < Single > source A sequence of Single values to calculate the average of. Returns Type Description IObservable < Single > An observable sequence containing a single element representing the average of the sequence of values."
  },
  "api/Bonsai.Reactive.BehaviorSubject.html": {
    "href": "api/Bonsai.Reactive.BehaviorSubject.html",
    "title": "Class BehaviorSubject",
    "keywords": "Class BehaviorSubject Represents an expression builder that broadcasts the latest value of an observable sequence to all subscribed and future observers using a shared subject. BehaviorSubject stores and passes the latest value emitted by the source sequence to each subscribed observer, and then continues to emit any subsequent values. Any observers which subscribe later will immediately receive the latest stored value. However, if the source sequence terminates with an error, BehaviorSubject will not emit any values but will pass along the error notification to all subsequent observers. Warning BehaviorSubject is designed to multicast and share state updates from multiple sources, like a global variable. Because of this, even if one of the source sequences emitting values to BehaviorSubject terminates successfully, the BehaviorSubject will not send a termination message to any subscribed observers, but will remain active until the enclosing workflow scope is terminated to allow other sources to update the shared state. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder BehaviorSubject Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(BehaviorSubject), \"BehaviorSubject\")] public class BehaviorSubject : SubjectBuilder, IExpressionBuilder, INamedElement Methods | Improve this Doc View Source BuildSubject(Expression) When overridden in a derived class, returns the expression that creates the shared subject. Declaration protected override Expression BuildSubject(Expression expression) Parameters Type Name Description Expression expression The expression representing the observable input sequence. Returns Type Description Expression The Expression that creates the shared subject. Overrides SubjectBuilder.BuildSubject(Expression) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.BehaviorSubject-1.html": {
    "href": "api/Bonsai.Reactive.BehaviorSubject-1.html",
    "title": "Class BehaviorSubject<T>",
    "keywords": "Class BehaviorSubject<T> Represents an expression builder that broadcasts the latest value from other observable sequences to all subscribed and future observers. BehaviorSubject stores and passes the latest value emitted by the source sequence to each subscribed observer, and then continues to emit any subsequent values. Any observers which subscribe later will immediately receive the latest stored value. However, if the source sequence terminates with an error, BehaviorSubject will not emit any values but will pass along the error notification to all subsequent observers. Warning BehaviorSubject is designed to multicast and share state updates from multiple sources, like a global variable. Because of this, even if one of the source sequences emitting values to BehaviorSubject terminates successfully, the BehaviorSubject will not send a termination message to any subscribed observers, but will remain active until the enclosing workflow scope is terminated to allow other sources to update the shared state. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder <T> BehaviorSubject<T> Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder<T>.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(BehaviorSubject), \"BehaviorSubject\")] public class BehaviorSubject<T> : SubjectBuilder<T>, IExpressionBuilder, INamedElement Type Parameters Name Description T The type of the elements processed by the subject. Methods | Improve this Doc View Source CreateSubject() Creates a shared subject that broadcasts the latest value from other observable sequences to all subscribed and future observers. Declaration protected override ISubject<T> CreateSubject() Returns Type Description ISubject <T> A new instance of ISubject<T> . Overrides Bonsai.Expressions.SubjectBuilder<T>.CreateSubject() Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.BufferCount.html": {
    "href": "api/Bonsai.Reactive.BufferCount.html",
    "title": "Class BufferCount",
    "keywords": "Class BufferCount Represents an operator that projects each element of the sequence into zero or more buffers based on element count information. BufferCount groups the notifications of the source sequence into chunks containing the number of elements specified in the Count property. The overlap between the elements in each chunk can be controlled using the Skip property. If no skip value is provided, the chunks will be strictly non-overlapping, with a new chunk beginning when the previous chunk ends. If the skip value is less than the specified number of elements, chunks will be overlapping, with a new buffer created every Skip notifications. Finally, if the skip value is greater than the specified number of elements, there will be a gap between each chunk where elements from the source sequence will be dropped. Inheritance Object BufferCount Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class BufferCount Properties | Improve this Doc View Source Count Gets or sets the number of elements in each buffer. Declaration public int Count { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Skip Gets or sets the number of elements to skip between the creation of consecutive buffers. Declaration public int? Skip { get; set; } Property Value Type Description Nullable < Int32 > Remarks If no value is specified, the operator will generate consecutive non-overlapping buffers. Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Projects each element of an observable sequence into zero or more buffers based on element count information. Declaration public IObservable<IList<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to produce buffers over. Returns Type Description IObservable < IList <TSource>> An observable sequence of buffers. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.BufferTime.html": {
    "href": "api/Bonsai.Reactive.BufferTime.html",
    "title": "Class BufferTime",
    "keywords": "Class BufferTime Represents an operator that projects each element of the sequence into zero or more buffers based on timing information. The BufferTime operator groups the notifications of the source sequence into chunks, where each chunk contains the elements emitted during the specified TimeSpan . The overlap between the elements in each chunk can be controlled using the TimeShift property. If no TimeShift is provided, the chunks will be strictly non-overlapping, with a new chunk beginning when the previous chunk ends. If TimeShift is smaller than TimeSpan , chunks will be overlapping, with a new buffer created every TimeShift interval. Finally, if TimeShift is larger than TimeSpan , there will be a time gap between each chunk where elements from the source sequence may be dropped. Inheritance Object BufferTime Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class BufferTime Properties | Improve this Doc View Source TimeShift Gets or sets the interval between creation of consecutive buffers. Declaration public TimeSpan? TimeShift { get; set; } Property Value Type Description Nullable < TimeSpan > Remarks If no value is specified, the operator will generate consecutive non-overlapping buffers. | Improve this Doc View Source TimeShiftXml Gets or sets an XML representation of the buffer time shift for serialization. Declaration [Browsable(false)] public string TimeShiftXml { get; set; } Property Value Type Description String | Improve this Doc View Source TimeSpan Gets or sets the length of each buffer. Declaration public TimeSpan TimeSpan { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source TimeSpanXml Gets or sets an XML representation of the buffer time span for serialization. Declaration [Browsable(false)] public string TimeSpanXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Projects each element of an observable sequence into zero or more buffers based on timing information. Declaration public IObservable<IList<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to produce buffers over. Returns Type Description IObservable < IList <TSource>> An observable sequence of buffers. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.BufferTrigger.html": {
    "href": "api/Bonsai.Reactive.BufferTrigger.html",
    "title": "Class BufferTrigger",
    "keywords": "Class BufferTrigger Represents an operator that projects each element of an observable sequence into zero or more buffers created when the second sequence emits a notification. BufferTrigger groups the notifications of the source sequence into chunks, where the opening of each chunk is triggered by the notifications of the second sequence. The rules for closing each buffer can be specified using the Count and TimeSpan properties. If neither buffer count nor buffer time span are specified, chunks will be strictly non-overlapping, with the previous chunk being closed when a new chunk is created. In this case, and only this case, the first chunk is also created immediately at the start of the sequence. If the Count property or the TimeSpan property is specified, then a new chunk is created when the second sequence emits a notification, and it is automatically closed after either the specified number of elements is collected or the specified time span elapses. If a new chunk is created before the previous chunk is closed, then chunks will overlap, and any elements emitted during this period will be included in both buffers. If at any moment there is no open buffer, elements emitted from the source sequence will be dropped. Inheritance Object BufferTrigger Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class BufferTrigger Properties | Improve this Doc View Source Count Gets or sets the maximum number of elements in each buffer. Declaration public int? Count { get; set; } Property Value Type Description Nullable < Int32 > Remarks If no value is specified, the buffer will have its length specified by either a maximum time span, or the boundary indicated by a notification from the second sequence. | Improve this Doc View Source TimeSpan Gets or sets the time length of each buffer. Declaration public TimeSpan? TimeSpan { get; set; } Property Value Type Description Nullable < TimeSpan > Remarks If no value is specified, the buffer will have its length specified by either a maximum number of elements, or the boundary indicated by a notification from the second sequence. | Improve this Doc View Source TimeSpanXml Gets or sets an XML representation of the buffer time span for serialization. Declaration [Browsable(false)] public string TimeSpanXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource, TBufferOpening>(IObservable<TSource>, IObservable<TBufferOpening>) Projects each element of an observable sequence into zero or more buffers created when a second sequence emits a notification. Declaration public IObservable<IList<TSource>> Process<TSource, TBufferOpening>(IObservable<TSource> source, IObservable<TBufferOpening> bufferOpenings) Parameters Type Name Description IObservable <TSource> source The source sequence to produce buffers over. IObservable <TBufferOpening> bufferOpenings The sequence of buffer openings. If no maximum length is specified, the current buffer is closed and a new buffer is opened upon receiving a notification from this sequence. Returns Type Description IObservable < IList <TSource>> An observable sequence of buffers. Type Parameters Name Description TSource The type of the elements in the source sequence. TBufferOpening The type of the elements in the bufferOpenings sequence."
  },
  "api/Bonsai.Reactive.Catch.html": {
    "href": "api/Bonsai.Reactive.Catch.html",
    "title": "Class Catch",
    "keywords": "Class Catch Represents an operator that continues an observable sequence that is terminated by an exception with the next observable sequence. The Catch operator allows you to handle error notifications from a sequence by combining the output of multiple fallback sequences of the same type into a single sequence. Catch subscribes to the next sequence when the previous sequence produces an error, and emits all the values from that sequence until successful termination. If that sequence also terminates exceptionally, Catch then subscribes to the next sequence, and so forth. Each sequence is guaranteed to only start after the previous one terminates. The resulting sequence will terminate successfully when any of the source sequences has terminated successfully, or exceptionally when all sequences have terminated with an error. Inheritance Object Catch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Catch Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>, IObservable<TSource>) Continues an observable sequence that is terminated by an exception with the next observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second) Parameters Type Name Description IObservable <TSource> first The first observable sequence whose exception (if any) is caught. IObservable <TSource> second The second observable sequence used to produce results when the first sequence terminates exceptionally. Returns Type Description IObservable <TSource> An observable sequence containing the elements of the first sequence, followed by the elements of the second sequence in case an exception occurred. Type Parameters Name Description TSource The type of the elements in the source and handler sequences. | Improve this Doc View Source Process<TSource>(IObservable<TSource>[]) Continues an observable sequence that is terminated by an exception with the next observable sequence. Declaration public IObservable<TSource> Process<TSource>(params IObservable<TSource>[] sources) Parameters Type Name Description IObservable <TSource>[] sources The observable sequences to catch exceptions for. Returns Type Description IObservable <TSource> An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully. Type Parameters Name Description TSource The type of the elements in all the source sequences."
  },
  "api/Bonsai.Reactive.CombineLatest.html": {
    "href": "api/Bonsai.Reactive.CombineLatest.html",
    "title": "Class CombineLatest",
    "keywords": "Class CombineLatest Represents an operator that combines values from the source sequences whenever any of the sequences produces an element. CombineLatest combines the values from each sequence which are closest in time. Whenever any of the source sequences emits a value (as long as all source sequences have emitted at least one value), CombineLatest takes the most recently emitted values from all other sequences and creates the combined result. CombineLatest will continue to emit values as long as at least one source sequence remains active (i.e. without terminating). CombineLatest can be useful to temporally correlate separate sources (e.g. frames from different cameras, or the closest frame to a key press). It can also be useful when combining a sequence containing a single reference value with a possibly infinite sequence of values to be associated with the reference (e.g. subtracting a background from every frame). Warning Because CombineLatest emits a combined value whenever any of the source sequences emits a new value, the number of values emitted by CombineLatest is approximately the sum of the number of values in each sequence. If you need to discard redundant values you can filter the output, e.g. using Sample to use one of the source sequences as a master driver. Higher-order operator CombineLatest also works as a higher-order operator, so it can take as input a sequence of observable sequences. In this case, it will subscribe to each of the source sequences and start collecting all the latest values from each sequence. As soon as the outer sequence terminates, it will start reactively combining the latest values whenever any sequence changes, just as in the case of using CombineLatest with a fixed number of inputs. Inheritance Object CombineLatest Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class CombineLatest Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>, IObservable<TSource>, IObservable<TSource>[]) Merges the specified sources into one observable sequence by emitting a list with the latest source elements whenever any of the observable sequences produces a notification. Declaration public IObservable<IList<TSource>> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second, params IObservable<TSource>[] remainder) Parameters Type Name Description IObservable <TSource> first The first observable sequence. IObservable <TSource> second The second observable sequence. IObservable <TSource>[] remainder The remaining observable sequences to combine. Returns Type Description IObservable < IList <TSource>> An observable sequence containing the result of combining the latest elements of the sources into lists. Type Parameters Name Description TSource The type of the elements in the source sequences. | Improve this Doc View Source Process<TSource>(IObservable<IObservable<TSource>>) Merges elements from all inner observable sequences into one observable sequence by emitting a list with the elements of each sequence whenever any of the sequences produces a notification. Declaration public IObservable<IList<TSource>> Process<TSource>(IObservable<IObservable<TSource>> sources) Parameters Type Name Description IObservable < IObservable <TSource>> sources The observable sequence of inner observable sequences. Returns Type Description IObservable < IList <TSource>> An observable sequence containing the result of combining the latest elements of the inner sequences into lists. Type Parameters Name Description TSource The type of the elements in the source sequences. | Improve this Doc View Source Process<TSource1, TSource2>(IObservable<TSource1>, IObservable<TSource2>) Merges the specified sources into one observable sequence by emitting a pair with the latest source elements whenever any of the observable sequences produces a notification. Declaration public IObservable<Tuple<TSource1, TSource2>> Process<TSource1, TSource2>(IObservable<TSource1> source1, IObservable<TSource2> source2) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2>> An observable sequence containing the result of combining the latest elements of the sources into pairs. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. | Improve this Doc View Source Process<TSource1, TSource2, TSource3>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>) Merges the specified sources into one observable sequence by emitting a triple with the latest source elements whenever any of the observable sequences produces a notification. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3>> Process<TSource1, TSource2, TSource3>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3>> An observable sequence containing the result of combining the latest elements of the sources into triples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. | Improve this Doc View Source Process<TSource1, TSource2, TSource3, TSource4>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>) Merges the specified sources into one observable sequence by emitting a quadruple with the latest source elements whenever any of the observable sequences produces a notification. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4>> Process<TSource1, TSource2, TSource3, TSource4>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4>> An observable sequence containing the result of combining the latest elements of the sources into quadruples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. | Improve this Doc View Source Process<TSource1, TSource2, TSource3, TSource4, TSource5>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>, IObservable<TSource5>) Merges the specified sources into one observable sequence by emitting a quintuple with the latest source elements whenever any of the observable sequences produces a notification. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4, TSource5>> Process<TSource1, TSource2, TSource3, TSource4, TSource5>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4, IObservable<TSource5> source5) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. IObservable <TSource5> source5 The fifth observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4, TSource5>> An observable sequence containing the result of combining the latest elements of the sources into quintuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. TSource5 The type of the elements in the fifth source sequence. | Improve this Doc View Source Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>, IObservable<TSource5>, IObservable<TSource6>) Merges the specified sources into one observable sequence by emitting a sextuple with the latest source elements whenever any of the observable sequences produces a notification. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>> Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4, IObservable<TSource5> source5, IObservable<TSource6> source6) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. IObservable <TSource5> source5 The fifth observable source. IObservable <TSource6> source6 The sixth observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>> An observable sequence containing the result of combining the latest elements of the sources into sextuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. TSource5 The type of the elements in the fifth source sequence. TSource6 The type of the elements in the sixth source sequence. | Improve this Doc View Source Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>, IObservable<TSource5>, IObservable<TSource6>, IObservable<TSource7>) Merges the specified sources into one observable sequence by emitting a septuple with the latest source elements whenever any of the observable sequences produces a notification. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>> Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4, IObservable<TSource5> source5, IObservable<TSource6> source6, IObservable<TSource7> source7) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. IObservable <TSource5> source5 The fifth observable source. IObservable <TSource6> source6 The sixth observable source. IObservable <TSource7> source7 The seventh observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>> An observable sequence containing the result of combining the latest elements of the sources into septuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. TSource5 The type of the elements in the fifth source sequence. TSource6 The type of the elements in the sixth source sequence. TSource7 The type of the elements in the seventh source sequence."
  },
  "api/Bonsai.Reactive.CombineTimestamp.html": {
    "href": "api/Bonsai.Reactive.CombineTimestamp.html",
    "title": "Class CombineTimestamp",
    "keywords": "Class CombineTimestamp Represents an operator that converts element-timestamp pairs of an observable sequence into proper timestamped elements. CombineTimestamp is used primarily to create a sequence of Timestamped<T> values for downstream operators, when timestamps have been extracted from other sources. Alternatively, CombineTimestamp can be used to preserve the value of a timestamp during post-processing operations. In this case, even though the timestamped value may be transformed multiple times, we can keep the original acquisition timestamp in a branch and use the Zip operator followed by CombineTimestamp to carry the timestamp value forward. Inheritance Object CombineTimestamp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class CombineTimestamp Methods | Improve this Doc View Source Process<TSource>(IObservable<Tuple<TSource, DateTimeOffset>>) Converts element-timestamp pairs of an observable sequence into proper timestamped elements. Declaration public IObservable<Timestamped<TSource>> Process<TSource>(IObservable<Tuple<TSource, DateTimeOffset>> source) Parameters Type Name Description IObservable < Tuple <TSource, DateTimeOffset >> source The sequence of element-timestamp pairs. Returns Type Description IObservable < Timestamped <TSource>> An observable sequence of timestamped values. Type Parameters Name Description TSource The type of the value being timestamped."
  },
  "api/Bonsai.Reactive.Concat.html": {
    "href": "api/Bonsai.Reactive.Concat.html",
    "title": "Class Concat",
    "keywords": "Class Concat Represents an operator that concatenates any number of observable sequences as long as the previous sequence terminated successfully. The Concat operator allows you to combine the output of multiple sequences of the same type into a single sequence. Concat subscribes to each sequence in turn, emits all the values from that sequence until successful termination, and then subscribes to the next sequence. Each sequence is guaranteed to only start after the previous one terminates. The resulting sequence will terminate successfully when the last source sequence has terminated successfully, or exceptionally as soon as any sequence produces an error. Higher-order operator Concat also works as a higher-order operator, so it can take as input a sequence of observable sequences. In this case, it will subscribe to the first source sequence and start passing along all emitted values. As soon as that sequence terminates, it will subscribe to the next received sequence, either immediately if it arrived before termination of the first sequence, or as soon as a new observable sequence is emitted. The higher-order variant is useful to queue execution of long-running operations, for example to sequence logic states in a task, or merging video files in a folder sequentially into a single frame sequence. Inheritance Object Concat Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Concat Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>, IObservable<TSource>) Concatenates the second observable sequence to the first observable sequence upon successful termination of the first. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second) Parameters Type Name Description IObservable <TSource> first The first observable sequence. IObservable <TSource> second The second observable sequence. Returns Type Description IObservable <TSource> An observable sequence that contains the elements of the first sequence, followed by those of the second sequence. Type Parameters Name Description TSource The type of the elements in the source sequences. | Improve this Doc View Source Process<TSource>(IObservable<TSource>, IObservable<TSource>, IObservable<TSource>[]) Concatenates all of the specified observable sequences, as long as the previous observable sequence terminated successfully. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second, params IObservable<TSource>[] remainder) Parameters Type Name Description IObservable <TSource> first The first observable sequence. IObservable <TSource> second The second observable sequence. IObservable <TSource>[] remainder The remaining observable sequences to concatenate. Returns Type Description IObservable <TSource> An observable sequence that contains the elements of each given sequence, in sequential order. Type Parameters Name Description TSource The type of the elements in the source sequences. | Improve this Doc View Source Process<TSource>(IObservable<IEnumerable<TSource>>) Concatenates all inner enumerable sequences into one observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<IEnumerable<TSource>> sources) Parameters Type Name Description IObservable < IEnumerable <TSource>> sources The observable sequence of inner enumerable sequences. Returns Type Description IObservable <TSource> An observable sequence that contains the elements of each inner enumerable sequence, in sequential order. Type Parameters Name Description TSource The type of the elements in the source sequences. | Improve this Doc View Source Process<TSource>(IObservable<IObservable<TSource>>) Concatenates all inner observable sequences, as long as the previous observable sequence terminated successfully. Declaration public IObservable<TSource> Process<TSource>(IObservable<IObservable<TSource>> sources) Parameters Type Name Description IObservable < IObservable <TSource>> sources The observable sequence of inner observable sequences. Returns Type Description IObservable <TSource> An observable sequence that contains the elements of each observed inner sequence, in sequential order. Type Parameters Name Description TSource The type of the elements in the source sequences."
  },
  "api/Bonsai.Reactive.Condition.html": {
    "href": "api/Bonsai.Reactive.Condition.html",
    "title": "Class Condition",
    "keywords": "Class Condition Represents an expression builder which filters the elements of an observable sequence according to a condition specified by the encapsulated workflow. The nested workflow specifying the condition must return a sequence of type Boolean . This nested sequence may be synchronous or asynchronous with respect to notifications from the source sequence. After each element is emitted by the source sequence, the latest value from the nested sequence is checked. If the value is true then the element will be accepted and emitted by the result sequence. Otherwise, the element will be dropped. As an example of asynchronous condition evaluation, it is possible to build a simple manual toggle by using a BooleanProperty connected directly to the output of the nested workflow: Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder Condition SkipWhile TakeWhile Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Condition : SingleArgumentWorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source Condition() Initializes a new instance of the Condition class. Declaration public Condition() | Improve this Doc View Source Condition(ExpressionBuilderGraph) Initializes a new instance of the Condition class with the specified expression builder workflow. Declaration public Condition(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Count.html": {
    "href": "api/Bonsai.Reactive.Count.html",
    "title": "Class Count",
    "keywords": "Class Count Represents an operator that returns the count of the number of elements in an observable sequence. The Count operator collects all the values from the source sequence and emits a single value representing the total number of items. The single result value is emitted only when the source sequence terminates successfully. Inheritance Object Combinator < Int32 > Count Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Count : Combinator<int> Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Returns the count of the number of elements in an observable sequence. Declaration public override IObservable<int> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source An observable sequence that contains elements to be counted. Returns Type Description IObservable < Int32 > An observable sequence containing a single integer representing the total number of elements in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator<System.Int32>.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.CreateObservable.html": {
    "href": "api/Bonsai.Reactive.CreateObservable.html",
    "title": "Class CreateObservable",
    "keywords": "Class CreateObservable Represents an expression builder that creates higher-order observable sequences specified by the encapsulated workflow. For each notification in the source sequence, CreateObservable constructs a new instance of the asynchronous operation specified in the nested workflow and emits the operation exposed as an observable sequence. However, CreateObservable does not itself subscribe to the sequence, which means the logic inside the nested workflow will not run unless the emitted observables are subscribed downstream. Note You can manipulate and schedule each of the emitted observable sequences downstream using higher-order operators such as Merge , Concat or Switch . The input to the nested workflow represents the element passed as an argument to the asynchronous operation. If the input is itself an observable sequence, the WorkflowInput node will subscribe to all the values in the sequence when the asynchronous operation is finally launched. Otherwise, the input will emit a single value containing the stored argument value. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder CreateObservable Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class CreateObservable : WorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source CreateObservable() Initializes a new instance of the CreateObservable class. Declaration public CreateObservable() | Improve this Doc View Source CreateObservable(ExpressionBuilderGraph) Initializes a new instance of the CreateObservable class with the specified expression builder workflow. Declaration public CreateObservable(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides WorkflowExpressionBuilder.ArgumentRange Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.CurrentThreadScheduler.html": {
    "href": "api/Bonsai.Reactive.CurrentThreadScheduler.html",
    "title": "Class CurrentThreadScheduler",
    "keywords": "Class CurrentThreadScheduler Represents an operator that returns an object that schedules units of work on the current thread. The CurrentThreadScheduler operator returns a singleton object that can be used to schedule units of work in the current thread. The action is placed in a queue rather than executing immediately, and will only be called after the current action is complete. Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions. Inheritance Object Source < CurrentThreadScheduler > CurrentThreadScheduler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public sealed class CurrentThreadScheduler : Source<CurrentThreadScheduler> Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns the singleton CurrentThreadScheduler object. Declaration public override IObservable<CurrentThreadScheduler> Generate() Returns Type Description IObservable < CurrentThreadScheduler > A sequence containing the singleton CurrentThreadScheduler object. Overrides Bonsai.Source<System.Reactive.Concurrency.CurrentThreadScheduler>.Generate()"
  },
  "api/Bonsai.Reactive.DefaultScheduler.html": {
    "href": "api/Bonsai.Reactive.DefaultScheduler.html",
    "title": "Class DefaultScheduler",
    "keywords": "Class DefaultScheduler Represents an operator that returns an object that schedules units of work on the platform's default scheduler. Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions. Inheritance Object Source < DefaultScheduler > DefaultScheduler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public sealed class DefaultScheduler : Source<DefaultScheduler> Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns the singleton DefaultScheduler object. Declaration public override IObservable<DefaultScheduler> Generate() Returns Type Description IObservable < DefaultScheduler > A sequence containing the singleton DefaultScheduler object. Overrides Bonsai.Source<System.Reactive.Concurrency.DefaultScheduler>.Generate()"
  },
  "api/Bonsai.Reactive.Defer.html": {
    "href": "api/Bonsai.Reactive.Defer.html",
    "title": "Class Defer",
    "keywords": "Class Defer Represents an expression builder that creates a new observable sequence for each subscription using the encapsulated workflow. The Defer operator uses the nested workflow to specify the constructed sequence. All input sequences to the outer Defer node will be routed to the inner WorkflowInput nodes, and all notifications emitted by the inner WorkflowOutput node will be emitted by the outer Defer node. Multiple subscriptions can be active simultaneously, in which case the nested workflow will run multiple times and is considered to be reentrant. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder Defer Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Defer : WorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source Defer() Initializes a new instance of the Defer class. Declaration public Defer() | Improve this Doc View Source Defer(ExpressionBuilderGraph) Initializes a new instance of the Defer class with the specified expression builder workflow. Declaration public Defer(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Delay.html": {
    "href": "api/Bonsai.Reactive.Delay.html",
    "title": "Class Delay",
    "keywords": "Class Delay Represents an operator that delays the notifications of an observable sequence by the specified time interval. The Delay operator modifies the source sequence by pausing for the specified duration before emitting each of the notifications in the original sequence. This has the effect of delaying the timing of the entire sequence of notifications by that specified time interval. Delay is useful to model delayed responses to events in a control task, but also to access past data from a continuous stream in the future. In other words, if the stream timing is delayed, then any downstream observers grabbing data in the present moment will be receiving notifications from the past. For example, if you are recording data aligned on a temporal trigger detected in real-time, you can record data before the trigger simply by triggering the delayed sequence. Inheritance Object Combinator Delay Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Delay : Combinator Properties | Improve this Doc View Source DueTime Gets or sets the time interval by which to delay the sequence. Declaration public TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source DueTimeXml Gets or sets an XML representation of the due time for serialization. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Delays the notifications of an observable sequence by the specified time interval. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to delay values for. Returns Type Description IObservable <TSource> The time-shifted sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.DelaySubscription.html": {
    "href": "api/Bonsai.Reactive.DelaySubscription.html",
    "title": "Class DelaySubscription",
    "keywords": "Class DelaySubscription Represents an operator that time-shifts the observable sequence by delaying the subscription by the specified time interval. The DelaySubscription operator modifies the source sequence by pausing for the specified duration before subscribing to the original sequence. This has the effect of delaying the start of the sequence by the specified time interval. DelaySubscription can be used to control the timing of initialization. Note that if a source is hot , delaying the start of the sequence will not preserve past data, since unlike Delay the DelaySubscription operator does not store or have access to any historical data. Inheritance Object Combinator DelaySubscription Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class DelaySubscription : Combinator Properties | Improve this Doc View Source DueTime Gets or sets the time interval by which to delay the subscription to the sequence. Declaration public TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source DueTimeXml Gets or sets an XML representation of the due time for serialization. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Time-shifts the observable sequence by delaying the subscription by the specified time interval. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to delay subscription for. Returns Type Description IObservable <TSource> The time-shifted sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Dematerialize.html": {
    "href": "api/Bonsai.Reactive.Dematerialize.html",
    "title": "Class Dematerialize",
    "keywords": "Class Dematerialize Represents an operator that dematerializes the explicit notification values of an observable sequence as implicit notifications. Dematerialize is the complement of Materialize . Dematerialize reconstructs the implicit notifications of an observable sequence from a sequence of explicit notifications. This can be useful if you have materialized a sequence for debugging or logging purposes but still need to retain the original sequence. Inheritance Object Dematerialize Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Dematerialize Methods | Improve this Doc View Source Process<TSource>(IObservable<Notification<TSource>>) Dematerializes the explicit notification values of an observable sequence as implicit notifications. Declaration public IObservable<TSource> Process<TSource>(IObservable<Notification<TSource>> source) Parameters Type Name Description IObservable < Notification <TSource>> source An observable sequence containing explicit notification values which have to be turned into implicit notifications. Returns Type Description IObservable <TSource> An observable sequence exhibiting the behavior corresponding to the notification values of the source sequence. Type Parameters Name Description TSource The type of the elements materialized in the source sequence notification objects."
  },
  "api/Bonsai.Reactive.Distinct.html": {
    "href": "api/Bonsai.Reactive.Distinct.html",
    "title": "Class Distinct",
    "keywords": "Class Distinct Represents an operator that returns an observable sequence containing only distinct elements. The Distinct operator ensures that only unique elements are included in the result sequence. Uniqueness is specified by the default EqualityComparer<T> for the type of the elements in the source sequence. If multiple non-unique elements are present in the source sequence, only the first element will be included in the result sequence. Inheritance Object Combinator Distinct Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Distinct : Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Returns an observable sequence containing only distinct elements. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source An observable sequence to retain distinct elements for. Returns Type Description IObservable <TSource> An observable sequence containing only the distinct elements from the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.DistinctBy.html": {
    "href": "api/Bonsai.Reactive.DistinctBy.html",
    "title": "Class DistinctBy",
    "keywords": "Class DistinctBy Represents an operator that returns an observable sequence containing only elements which are distinct according to the specified key. The DistinctBy operator ensures that only unique elements are included in the result sequence. The KeySelector property specifies the member, or set of members, to use to test the uniqueness of each element in the source sequence. The default EqualityComparer<T> for the type of the selected key is used to check whether each key is unique. If multiple non-unique keys are present in the source sequence, only the first element emitted with a given key will be included in the result sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder DistinctBy Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class DistinctBy : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source KeySelector Gets or sets a value specifying the inner properties used to test the uniqueness of each element in the sequence. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.DistinctUntilChanged.html": {
    "href": "api/Bonsai.Reactive.DistinctUntilChanged.html",
    "title": "Class DistinctUntilChanged",
    "keywords": "Class DistinctUntilChanged Represents an operator that returns only distinct contiguous elements of an observable sequence. The DistinctUntilChanged operator removes all contiguous elements in the sequence that are equal. Equality is determined by the default EqualityComparer<T> for the type of the elements in the source sequence. In other words, after each element is emitted by the result sequence, subsequent elements will be dropped until the value changes. Inheritance Object Combinator DistinctUntilChanged Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class DistinctUntilChanged : Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Returns an observable sequence that contains only distinct contiguous elements. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source An observable sequence to retain distinct contiguous elements for. Returns Type Description IObservable <TSource> An observable sequence only containing the distinct contiguous elements from the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.DistinctUntilChangedBy.html": {
    "href": "api/Bonsai.Reactive.DistinctUntilChangedBy.html",
    "title": "Class DistinctUntilChangedBy",
    "keywords": "Class DistinctUntilChangedBy Represents an operator that returns only distinct contiguous elements according to the specified key. The DistinctUntilChangedBy operator removes all contiguous elements in the sequence with equal keys. The KeySelector property specifies the member, or set of members, used to test whether elements in the source sequence are equal. Equality is determined by the default EqualityComparer<T> for the type of the selected key. In other words, after each element is emitted by the result sequence, subsequent elements will be dropped until the value of the key changes. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder DistinctUntilChangedBy Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class DistinctUntilChangedBy : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source KeySelector Gets or sets a value specifying the inner properties used to test the contiguity of each element in the sequence. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.ElementAccumulation-2.html": {
    "href": "api/Bonsai.Reactive.ElementAccumulation-2.html",
    "title": "Class ElementAccumulation<TAccumulation, TElement>",
    "keywords": "Class ElementAccumulation<TAccumulation, TElement> Represents the current state of an accumulation over an observable sequence. Inheritance Object ElementAccumulation<TAccumulation, TElement> Implements IStructuralEquatable IStructuralComparable IComparable Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class ElementAccumulation<TAccumulation, TElement> : IStructuralEquatable, IStructuralComparable, IComparable Type Parameters Name Description TAccumulation The type of values in the accumulation. TElement The type of values in the observable sequence. Constructors | Improve this Doc View Source ElementAccumulation(TAccumulation, TElement) Initializes a new instance of the ElementAccumulation<TAccumulation, TElement> class with the specified accumulator state and current element information. Declaration public ElementAccumulation(TAccumulation accumulation, TElement value) Parameters Type Name Description TAccumulation accumulation The current state of the accumulator. TElement value The current value of the sequence to accumulate. Properties | Improve this Doc View Source Accumulation Gets the current state of the accumulator. Declaration public TAccumulation Accumulation { get; } Property Value Type Description TAccumulation | Improve this Doc View Source Value Gets the current value of the sequence to accumulate. Declaration public TElement Value { get; } Property Value Type Description TElement Methods | Improve this Doc View Source Equals(Object) Returns a value that indicates whether the current instance is equal to the specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if the current instance is equal to the specified object; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Returns a hash code for the current instance. Declaration public override int GetHashCode() Returns Type Description Int32 The hash code for the current instance. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Explicit Interface Implementations | Improve this Doc View Source IStructuralComparable.CompareTo(Object, IComparer) Declaration int IStructuralComparable.CompareTo(object other, IComparer comparer) Parameters Type Name Description Object other IComparer comparer Returns Type Description Int32 | Improve this Doc View Source IStructuralEquatable.Equals(Object, IEqualityComparer) Declaration bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer) Parameters Type Name Description Object other IEqualityComparer comparer Returns Type Description Boolean | Improve this Doc View Source IStructuralEquatable.GetHashCode(IEqualityComparer) Declaration int IStructuralEquatable.GetHashCode(IEqualityComparer comparer) Parameters Type Name Description IEqualityComparer comparer Returns Type Description Int32 | Improve this Doc View Source IComparable.CompareTo(Object) Declaration int IComparable.CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.Collections.IStructuralEquatable System.Collections.IStructuralComparable System.IComparable"
  },
  "api/Bonsai.Reactive.ElementIndex.html": {
    "href": "api/Bonsai.Reactive.ElementIndex.html",
    "title": "Class ElementIndex",
    "keywords": "Class ElementIndex Represents an operator that incorporates the zero-based index of elements in an observable sequence. ElementIndex can be used to incrementally keep a tally of the number of elements in a sequence. It is also often used as the first step in custom index-dependent computations. Inheritance Object ElementIndex Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class ElementIndex Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Incorporates the zero-based index of elements in an observable sequence. Declaration public IObservable<ElementIndex<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence for which to incorporate element indices. Returns Type Description IObservable < ElementIndex <TSource>> An observable sequence with index information on elements. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.ElementIndex-1.html": {
    "href": "api/Bonsai.Reactive.ElementIndex-1.html",
    "title": "Struct ElementIndex<T>",
    "keywords": "Struct ElementIndex<T> Represents an element from an observable sequence associated with its index information. The zero-based index represents the order of the element in the sequence. Implements IEquatable < ElementIndex <T>> Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public struct ElementIndex<T> : IEquatable<ElementIndex<T>> Type Parameters Name Description T The type of the value being annotated with index information. Constructors | Improve this Doc View Source ElementIndex(T, Int32) Initializes a new instance of the ElementIndex<T> class with the specified value and index information. Declaration public ElementIndex(T value, int index) Parameters Type Name Description T value The value to be annotated with index information. Int32 index The zero-based index of the element in the sequence. Properties | Improve this Doc View Source Index Gets the zero-based index of the element in the sequence. Declaration public readonly int Index { get; } Property Value Type Description Int32 | Improve this Doc View Source Value Gets the value of the element. Declaration public readonly T Value { get; } Property Value Type Description T Methods | Improve this Doc View Source Equals(ElementIndex<T>) Returns a value indicating whether this instance has the same value and index as a specified ElementIndex<T> structure. Declaration public bool Equals(ElementIndex<T> other) Parameters Type Name Description ElementIndex <T> other The ElementIndex<T> structure to compare to this instance. Returns Type Description Boolean true if other has the same value and index as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is an ElementIndex<T> structure with the same value and index as this ElementIndex<T> structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is an ElementIndex<T> and has the same value and index as this ElementIndex<T> ; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns a hash code for the current instance. Declaration public override int GetHashCode() Returns Type Description Int32 The hash code for the current instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(ElementIndex<T>, ElementIndex<T>) Tests whether two ElementIndex<T> structures are equal. Declaration public static bool operator ==(ElementIndex<T> left, ElementIndex<T> right) Parameters Type Name Description ElementIndex <T> left The ElementIndex<T> structure on the left-hand side of the equality operator. ElementIndex <T> right The ElementIndex<T> structure on the right-hand side of the equality operator. Returns Type Description Boolean true if left and right have equal value and index; otherwise, false . | Improve this Doc View Source Inequality(ElementIndex<T>, ElementIndex<T>) Tests whether two ElementIndex<T> structures are different. Declaration public static bool operator !=(ElementIndex<T> left, ElementIndex<T> right) Parameters Type Name Description ElementIndex <T> left The ElementIndex<T> structure on the left-hand side of the inequality operator. ElementIndex <T> right The ElementIndex<T> structure on the right-hand side of the inequality operator. Returns Type Description Boolean true if left and right differ either in value or index; false if left and right are equal. Implements System.IEquatable<T>"
  },
  "api/Bonsai.Reactive.EventLoopScheduler.html": {
    "href": "api/Bonsai.Reactive.EventLoopScheduler.html",
    "title": "Class EventLoopScheduler",
    "keywords": "Class EventLoopScheduler Represents an operator that creates an object that schedules units of work on a single dedicated thread. Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions. Important The scheduler object returned by EventLoopScheduler needs to be explicitly disposed. Assign the result of this operator to a ResourceSubject to ensure the dedicated scheduler thread is terminated at the end of the workflow. Inheritance Object Source < EventLoopScheduler > EventLoopScheduler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public sealed class EventLoopScheduler : Source<EventLoopScheduler> Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a new EventLoopScheduler object. Declaration public override IObservable<EventLoopScheduler> Generate() Returns Type Description IObservable < EventLoopScheduler > A sequence containing the created EventLoopScheduler object. Overrides Bonsai.Source<System.Reactive.Concurrency.EventLoopScheduler>.Generate()"
  },
  "api/Bonsai.Reactive.First.html": {
    "href": "api/Bonsai.Reactive.First.html",
    "title": "Class First",
    "keywords": "Class First Represents an operator that returns the first element of an observable sequence. If the sequence has no elements, First will terminate with an error. Tip If you are interested in finding the first element that meets some criteria, consider using the Condition operator before First . Warning There are subtle but important differences between using the First operator and Take(1) : When the source sequence has no elements, Take(1) will complete successfully, while First will throw an error. When the source sequence emits the first element, Take(1) will immediately cancel the subscription to the source sequence before emitting the notification. First , on the other hand, will emit the notification and only afterwards cancel the subscription to the source sequence. Inheritance Object Combinator First Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class First : Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Returns the first element of an observable sequence. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to take the first element from. Returns Type Description IObservable <TSource> An observable sequence containing the first element of the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.FirstOrDefault.html": {
    "href": "api/Bonsai.Reactive.FirstOrDefault.html",
    "title": "Class FirstOrDefault",
    "keywords": "Class FirstOrDefault Represents an operator that returns the first element of an observable sequence, or a default value if no such element exists. If the sequence has no elements, FirstOrDefault will emit a default value before terminating successfully. Tip If you are interested in finding the first element that meets some criteria, consider using the Condition operator before FirstOrDefault . Warning There are subtle but important differences between using the FirstOrDefault operator and Take(1) : When the source sequence has no elements, Take(1) will complete successfully with no emitted values, while FirstOrDefault will emit a default value before terminating successfully. When the source sequence emits the first element, Take(1) will immediately cancel the subscription to the source sequence before emitting the notification. FirstOrDefault , on the other hand, will emit the notification and only afterwards cancel the subscription to the source sequence. Inheritance Object Combinator FirstOrDefault Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class FirstOrDefault : Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Returns the first element of an observable sequence, or a default value if no such element exists. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to take the first element from. Returns Type Description IObservable <TSource> An observable sequence containing the first element of the source sequence, or a default value if no such element exists. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Gate.html": {
    "href": "api/Bonsai.Reactive.Gate.html",
    "title": "Class Gate",
    "keywords": "Class Gate Represents an operator that allows a single element from the first sequence to pass through every time a second sequence emits a notification. When the gate is in the open state, a single element is allowed to pass through from the source sequence. After this first element is emitted, the gate closes and all subsequent elements are dropped from the result sequence. The gate reopens when the second sequence emits a notification. It is possible to specify how long the gate stays open by using the DueTime property. If no value is specified, the gate stays open indefinitely until an element arrives. In this case, the gate starts immediately in the open state. If a maximum due time is specified, no elements from the source sequence arriving after the due time elapses will be allowed through and the gate may close again without emitting any new elements. In this case, the gate starts in the closed state, and only opens when the second sequence emits a notification. Warning If the second sequence emits notifications before the gate is closed, the gate will remain open. If there is a maximum specified due time, the timer will be reset upon arrival of the new notification. Even if there are multiple opening notifications, only a single element can make it through the gate. Inheritance Object Gate Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Gate Properties | Improve this Doc View Source DueTime Gets or sets a value specifying the maximum time the gate stays open. Declaration public TimeSpan? DueTime { get; set; } Property Value Type Description Nullable < TimeSpan > Remarks If no value is specified, the gate stays open indefinitely until an element arrives. If a maximum due time is specified, however, then if an element from the first sequence arrives after this interval elapses, that element will not be allowed through and will be dropped from the result sequence. | Improve this Doc View Source DueTimeXml Gets or sets an XML representation of the gate due time for serialization. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource, TGateOpening>(IObservable<TSource>, IObservable<TGateOpening>) Allows a single element from an observable sequence to pass through every time a second sequence emits a notification. Declaration public IObservable<TSource> Process<TSource, TGateOpening>(IObservable<TSource> source, IObservable<TGateOpening> gateOpenings) Parameters Type Name Description IObservable <TSource> source The observable sequence to filter. IObservable <TGateOpening> gateOpenings The sequence of gate opening events. Returns Type Description IObservable <TSource> The filtered observable sequence. Every time the gateOpenings sequence produces a notification, the next element from the source sequence will be allowed through. Type Parameters Name Description TSource The type of the elements in the source sequence. TGateOpening The type of the elements in the gateOpenings sequence."
  },
  "api/Bonsai.Reactive.GateInterval.html": {
    "href": "api/Bonsai.Reactive.GateInterval.html",
    "title": "Class GateInterval",
    "keywords": "Class GateInterval Represents an operator that allows a single element from the first sequence to pass through every time the specified time interval elapses. The gate starts in the open state, and a single element is allowed to pass through from the source sequence. After this first element is emitted, the gate closes and all subsequent elements are dropped from the result sequence. The gate reopens when the specified Interval elapses. It is possible to specify how long the gate stays open by using the DueTime property. If no value is specified, the gate stays open indefinitely until an element arrives. If a maximum due time is specified, then no elements from the source sequence arriving after the due time elapses will be allowed through until the gate reopens. Inheritance Object Combinator GateInterval Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class GateInterval : Combinator Properties | Improve this Doc View Source DueTime Gets or sets a value specifying the maximum time the gate stays open. Declaration public TimeSpan? DueTime { get; set; } Property Value Type Description Nullable < TimeSpan > Remarks If no value is specified, the gate stays open indefinitely until an element arrives. If a maximum due time is specified, however, then if an element from the first sequence arrives after this interval elapses, that element will not be allowed through and will be dropped from the result sequence. | Improve this Doc View Source DueTimeXml Gets or sets an XML representation of the gate due time for serialization. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String | Improve this Doc View Source Interval Gets or sets the period after which a new element from the sequence is allowed to pass through the gate. Declaration public TimeSpan Interval { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source IntervalXml Gets or sets an XML representation of the interval for serialization. Declaration [Browsable(false)] public string IntervalXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Allows a single element from an observable sequence to pass through every time the specified time interval elapses. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence to filter. Returns Type Description IObservable <TSource> The filtered observable sequence. Every time the specified time interval elapses, the next element from the source sequence will be allowed through. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.GroupBy.html": {
    "href": "api/Bonsai.Reactive.GroupBy.html",
    "title": "Class GroupBy",
    "keywords": "Class GroupBy Represents an operator that groups the elements of an observable sequence according to the specified key. The GroupBy operator can be used to separate, or demultiplex, the elements from a single sequence into multiple sequences according to the specified KeySelector . Each element from the sequence will be routed to the correct group according to its key. Groups are created and emitted the first time that an element with a new distinct key value is received from the source sequence. Note You can manipulate and schedule each of the group sequences downstream using other higher-order operators such as Merge , Concat or Switch . The members used to generate the elements in each group sequence can be optionally specified using the ElementSelector property. If no element selector is specified, the original values from the source sequence will be used. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder GroupBy Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class GroupBy : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source ElementSelector Gets or sets a value specifying the inner properties used as elements in each grouped sequence. Declaration public string ElementSelector { get; set; } Property Value Type Description String | Improve this Doc View Source KeySelector Gets or sets a value specifying the inner properties used as key for each element in the sequence. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.html": {
    "href": "api/Bonsai.Reactive.html",
    "title": "Namespace Bonsai.Reactive",
    "keywords": "Namespace Bonsai.Reactive Classes Accumulate Represents an operator that computes the cumulative sum of an observable sequence and returns each intermediate result. Amb Represents an operator that propagates the observable sequence that reacts first. AsyncSubject Represents an expression builder that broadcasts the last value of an observable sequence to all subscribed and future observers using a shared subject. AsyncSubject<T> Represents an expression builder that broadcasts the result of the first observable sequence to complete to all subscribed and future observers. Average Represents an operator that computes the numerical average of an observable sequence. BehaviorSubject Represents an expression builder that broadcasts the latest value of an observable sequence to all subscribed and future observers using a shared subject. BehaviorSubject<T> Represents an expression builder that broadcasts the latest value from other observable sequences to all subscribed and future observers. BufferCount Represents an operator that projects each element of the sequence into zero or more buffers based on element count information. BufferTime Represents an operator that projects each element of the sequence into zero or more buffers based on timing information. BufferTrigger Represents an operator that projects each element of an observable sequence into zero or more buffers created when the second sequence emits a notification. Catch Represents an operator that continues an observable sequence that is terminated by an exception with the next observable sequence. CombineLatest Represents an operator that combines values from the source sequences whenever any of the sequences produces an element. CombineTimestamp Represents an operator that converts element-timestamp pairs of an observable sequence into proper timestamped elements. Concat Represents an operator that concatenates any number of observable sequences as long as the previous sequence terminated successfully. Condition Represents an expression builder which filters the elements of an observable sequence according to a condition specified by the encapsulated workflow. Count Represents an operator that returns the count of the number of elements in an observable sequence. CreateObservable Represents an expression builder that creates higher-order observable sequences specified by the encapsulated workflow. CurrentThreadScheduler Represents an operator that returns an object that schedules units of work on the current thread. DefaultScheduler Represents an operator that returns an object that schedules units of work on the platform's default scheduler. Defer Represents an expression builder that creates a new observable sequence for each subscription using the encapsulated workflow. Delay Represents an operator that delays the notifications of an observable sequence by the specified time interval. DelaySubscription Represents an operator that time-shifts the observable sequence by delaying the subscription by the specified time interval. Dematerialize Represents an operator that dematerializes the explicit notification values of an observable sequence as implicit notifications. Distinct Represents an operator that returns an observable sequence containing only distinct elements. DistinctBy Represents an operator that returns an observable sequence containing only elements which are distinct according to the specified key. DistinctUntilChanged Represents an operator that returns only distinct contiguous elements of an observable sequence. DistinctUntilChangedBy Represents an operator that returns only distinct contiguous elements according to the specified key. ElementAccumulation<TAccumulation, TElement> Represents the current state of an accumulation over an observable sequence. ElementIndex Represents an operator that incorporates the zero-based index of elements in an observable sequence. EventLoopScheduler Represents an operator that creates an object that schedules units of work on a single dedicated thread. First Represents an operator that returns the first element of an observable sequence. FirstOrDefault Represents an operator that returns the first element of an observable sequence, or a default value if no such element exists. Gate Represents an operator that allows a single element from the first sequence to pass through every time a second sequence emits a notification. GateInterval Represents an operator that allows a single element from the first sequence to pass through every time the specified time interval elapses. GroupBy Represents an operator that groups the elements of an observable sequence according to the specified key. IgnoreElements Represents an operator that ignores all elements in an observable sequence leaving only the termination messages. ImmediateScheduler Represents an operator that returns an object that schedules units of work to run immediately on the current thread. IsEmpty Represents an operator that determines whether the observable sequence is empty. Last Represents an operator that returns the last element of an observable sequence. LastOrDefault Represents an operator that returns the last element of an observable sequence, or a default value if no such element exists. Materialize Represents an operator that materializes the implicit notifications of an observable sequence as explicit notification values. Max Represents an operator that computes the maximum element in an observable sequence. MaxBy Represents an operator that returns the elements in the observable sequence with the maximum key value. Merge Represents an operator that merges any number of observable sequences into a single observable sequence. Min Represents an operator that computes the minimum element in an observable sequence. MinBy Represents an operator that returns the elements in the observable sequence with the minimum key value. NewThreadScheduler Represents an operator that returns an object that schedules each unit of work on a separate thread. ObserveOn Represents an operator that sends all notifications in the sequence to the specified scheduler. OnErrorResumeNext Represents an operator that concatenates any number of observable sequences even if any of the sequences terminates exceptionally. OrderBy Represents an operator that sorts the elements of all the collections in an observable sequence in ascending order according to the specified key. OrderByDescending Represents an operator that sorts the elements of all the collections in an observable sequence in descending order according to the specified key. Publish Represents an expression builder that shares a single subscription to an observable sequence across the encapsulated workflow. PublishSubject Represents an expression builder that broadcasts the values of an observable sequence to multiple subscribers using a shared subject. PublishSubject<T> Represents an expression builder that broadcasts the values from other observable sequences to multiple subscribers. Range Represents an operator that generates an observable sequence of integer numbers within a specified range. Repeat Represents an operator that repeats an observable sequence indefinitely. RepeatCount Represents an operator that repeats an observable sequence a specified number of times. Replay Represents an expression builder that handles sharing of an observable sequence across the encapsulated workflow by eagerly replaying notifications. ReplaySubject Represents an expression builder that replays the values of an observable sequence to all subscribed and future observers using a shared subject. ReplaySubject<T> Represents an expression builder that replays the values of other observable sequences to all subscribed and future observers. ResourceSubject Represents an expression builder that stores and broadcasts the last disposable value of an observable sequence to all subscribed and future observers. The value is disposed when the containing context is closed. ResourceSubject<T> Represents an expression builder that stores and broadcasts the last disposable value of an observable sequence to all subscribed and future observers. The value is disposed when the containing context is closed. Retry Represents an operator that repeats an observable sequence until it successfully terminates. RetryCount Represents an operator that repeats an observable sequence the specified number of times or until it successfully terminates. Sample Represents an operator that samples elements from an observable sequence whenever the second sequence emits a notification. SampleInterval Represents an operator that samples the latest element from the sequence whenever the specified time interval elapses. Scan Represents an expression builder which accumulates the values of an observable sequence using the encapsulated workflow. SelectMany Represents an expression builder that merges higher-order observable sequences generated from the encapsulated workflow. SequenceEqual Represents an operator that determines whether two sequences are equal by comparing the elements pairwise. Sink Represents an expression builder that adds the side effects specified by the encapsulated workflow to an observable sequence without modifying its elements. Skip Represents an operator that bypasses the specified number of elements at the start of an observable sequence and returns the remaining elements. SkipLast Represents an operator that bypasses the specified number of elements at the end of an observable sequence. SkipUntil Represents an operator that returns the elements from the first sequence only after the second sequence emits a notification. SkipWhile Represents an expression builder which bypasses elements in an observable sequence as long as the condition specified by the encapsulated workflow is true. Slice Represents an operator that extracts a range of elements from an observable sequence. SubscribeOn Represents an operator that wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. SubscribeWhen Represents an operator that subscribes to the first sequence only after the second sequence emits a notification. Sum Represents an operator that computes the sum of an observable sequence. Switch Represents an operator that transforms a sequence of observable sequences into a sequence of values produced only from the most recent observable sequence. Synchronize Represents an operator that synchronizes the observable sequence to ensure that observer notifications cannot be delivered concurrently. Take Represents an operator that returns the specified number of contiguous elements from the start of an observable sequence. TakeLast Represents an operator that returns a specified number of contiguous elements from the end of an observable sequence. TakeUntil Represents an operator that returns elements from the first sequence only until the second sequence emits a notification. TakeWhile Represents an expression builder which returns elements from an observable sequence as long as the condition specified by the encapsulated workflow is true. TaskPoolScheduler Represents an operator that returns an object that schedules units of work on the Task Parallel Library (TPL) task pool. ThenBy Represents an operator that subsequently sorts the elements of all the ordered collections in an observable sequence in ascending order according to the specified key. ThenByDescending Represents an operator that subsequently sorts the elements of all the ordered collections in an observable sequence in descending order according to the specified key. ThreadPoolScheduler Represents an operator that returns an object that schedules units of work on the CLR thread pool. Throttle Represents an operator that ignores elements from an observable sequence which are followed by another element before the specified duration elapses. TimeInterval Represents an operator that records the time interval between consecutive values produced by an observable sequence. Timeout Represents an operator that raises an error if the next element is not received within the specified timeout duration from the previous element. Timer Represents an operator that generates an observable sequence that periodically produces a value after the specified initial relative due time has elapsed. Timestamp Represents an operator that records the timestamp for each element produced by an observable sequence. ToArray Represents an operator that creates an array containing every element in the observable sequence. ToDictionary Represents an operator that creates a dictionary from an observable sequence according to the specified key and element selector. ToList Represents an operator that creates a list containing every element in the observable sequence. ToLookup Represents an operator that creates a lookup from an observable sequence according to the specified key and element selector. Visualizer Represents an expression builder that uses the encapsulated workflow as a visualizer to an observable sequence without modifying its elements. Window Represents an expression builder that projects the input sequence into zero or more windows with boundaries defined by the encapsulated workflow. WindowCount Represents an operator that projects each element of an observable sequence into zero or more windows based on element count information. WindowTime Represents an operator that projects each element of an observable sequence into zero or more windows based on timing information. WindowTrigger Represents an operator that projects each element of an observable sequence into zero or more windows created when the second sequence emits a notification. WithLatestFrom Represents an operator that combines the latest values from the source sequences only when the first sequence produces an element. Zip Represents an operator that combines values from the source sequences whenever all of the sequences have produced an element. Structs ElementIndex<T> Represents an element from an observable sequence associated with its index information. The zero-based index represents the order of the element in the sequence. SchedulerMapping Represents a value specifying the scheduler to be used when handling concurrency in a reactive operator."
  },
  "api/Bonsai.Reactive.IgnoreElements.html": {
    "href": "api/Bonsai.Reactive.IgnoreElements.html",
    "title": "Class IgnoreElements",
    "keywords": "Class IgnoreElements Represents an operator that ignores all elements in an observable sequence leaving only the termination messages. Tip This operator can sometimes be useful when only the type of the sequence is important, and not its elements. The compiler will still check the correct type of the sequence even if no elements are emitted. Inheritance Object Combinator IgnoreElements Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class IgnoreElements : Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Ignores all elements in an observable sequence leaving only the termination messages. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence. Returns Type Description IObservable <TSource> An empty observable sequence that signals termination, successful or exceptional, of the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.ImmediateScheduler.html": {
    "href": "api/Bonsai.Reactive.ImmediateScheduler.html",
    "title": "Class ImmediateScheduler",
    "keywords": "Class ImmediateScheduler Represents an operator that returns an object that schedules units of work to run immediately on the current thread. The ImmediateScheduler operator returns a singleton object that can be used to schedule units of work to run immediately on the current thread. If there is a recurrent scheduling call downstream from the work unit, the scheduler may hang indefinitely. Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions. Inheritance Object Source < ImmediateScheduler > ImmediateScheduler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public sealed class ImmediateScheduler : Source<ImmediateScheduler> Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns the singleton ImmediateScheduler object. Declaration public override IObservable<ImmediateScheduler> Generate() Returns Type Description IObservable < ImmediateScheduler > A sequence containing the singleton ImmediateScheduler object. Overrides Bonsai.Source<System.Reactive.Concurrency.ImmediateScheduler>.Generate()"
  },
  "api/Bonsai.Reactive.IsEmpty.html": {
    "href": "api/Bonsai.Reactive.IsEmpty.html",
    "title": "Class IsEmpty",
    "keywords": "Class IsEmpty Represents an operator that determines whether the observable sequence is empty. If the source sequence completes before returning any elements, the IsEmpty operator will emit a single value true before terminating successfully. If the source sequence emits any element, IsEmpty will immediately emit a single value false , terminate successfully, and cancel the subscription to the source sequence. Inheritance Object IsEmpty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class IsEmpty Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Determines whether the observable sequence is empty. Declaration public IObservable<bool> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to check. Returns Type Description IObservable < Boolean > An observable sequence containing a single element indicating whether the source sequence is empty. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.Last.html": {
    "href": "api/Bonsai.Reactive.Last.html",
    "title": "Class Last",
    "keywords": "Class Last Represents an operator that returns the last element of an observable sequence. If the sequence has no elements, Last will terminate with an error. This is a subtle but important difference between the Last operator and TakeLast(1) , which will complete successfully when the source sequence has no elements. Inheritance Object Combinator Last Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Last : Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Returns the last element of an observable sequence. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to take the last element from. Returns Type Description IObservable <TSource> An observable sequence containing the last element of the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.LastOrDefault.html": {
    "href": "api/Bonsai.Reactive.LastOrDefault.html",
    "title": "Class LastOrDefault",
    "keywords": "Class LastOrDefault Represents an operator that returns the last element of an observable sequence, or a default value if no such element exists. If the sequence has no elements, LastOrDefault will emit a default value before terminating successfully. This is a subtle but important difference between the LastOrDefault operator and TakeLast(1) , which will also complete successfully when the source sequence is empty, but will not emit any values. Tip LastOrDefault is one of the simplest and most efficient ways of capturing the end of an observable sequence explicitly as a notification in the workflow. You can use it to react to the termination of a sequence regardless of whether that sequence produces values. Inheritance Object Combinator LastOrDefault Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class LastOrDefault : Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Returns the last element of an observable sequence, or a default value if no such element exists. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to take the last element from. Returns Type Description IObservable <TSource> An observable sequence containing the last element of the source sequence, or a default value if no such element exists. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Materialize.html": {
    "href": "api/Bonsai.Reactive.Materialize.html",
    "title": "Class Materialize",
    "keywords": "Class Materialize Represents an operator that materializes the implicit notifications of an observable sequence as explicit notification values. Materialize surfaces all notifications in the source sequence as explicit values, including termination messages ( OnError and OnCompleted ). Converting termination messages into explicit notifications can be useful to reveal the entire behavior of a sequence for debugging or logging purposes. The application of Materialize can be reversed by applying Dematerialize to the result sequence. Inheritance Object Materialize Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Materialize Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Materializes the implicit notifications of an observable sequence as explicit notification values. Declaration public IObservable<Notification<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source An observable sequence to get notification values for. Returns Type Description IObservable < Notification <TSource>> An observable sequence containing the materialized notification values from the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.Max.html": {
    "href": "api/Bonsai.Reactive.Max.html",
    "title": "Class Max",
    "keywords": "Class Max Represents an operator that computes the maximum element in an observable sequence. The Max operator collects all the values from the source sequence and emits a single value representing the largest of all values. The single result value is emitted only when the source sequence terminates successfully. Inheritance Object Max Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Max Methods | Improve this Doc View Source Process(IObservable<Decimal>) Returns the maximum value in an observable sequence of Decimal values. Declaration public IObservable<decimal> Process(IObservable<decimal> source) Parameters Type Name Description IObservable < Decimal > source A sequence of Decimal values to determine the maximum value of. Returns Type Description IObservable < Decimal > An observable sequence containing a single element representing the maximum value in the source sequence. | Improve this Doc View Source Process(IObservable<Double>) Returns the maximum value in an observable sequence of Double values. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of Double values to determine the maximum value of. Returns Type Description IObservable < Double > An observable sequence containing a single element representing the maximum value in the source sequence. | Improve this Doc View Source Process(IObservable<Int32>) Returns the maximum value in an observable sequence of Int32 values. Declaration public IObservable<int> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of Int32 values to determine the maximum value of. Returns Type Description IObservable < Int32 > An observable sequence containing a single element representing the maximum value in the source sequence. | Improve this Doc View Source Process(IObservable<Int64>) Returns the maximum value in an observable sequence of Int64 values. Declaration public IObservable<long> Process(IObservable<long> source) Parameters Type Name Description IObservable < Int64 > source A sequence of Int64 values to determine the maximum value of. Returns Type Description IObservable < Int64 > An observable sequence containing a single element representing the maximum value in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Decimal>>) Returns the maximum value in an observable sequence of nullable Decimal values. Declaration public IObservable<decimal?> Process(IObservable<decimal?> source) Parameters Type Name Description IObservable < Nullable < Decimal >> source A sequence of nullable Decimal values to determine the maximum value of. Returns Type Description IObservable < Nullable < Decimal >> An observable sequence containing a single element representing the maximum value in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Double>>) Returns the maximum value in an observable sequence of nullable Double values. Declaration public IObservable<double?> Process(IObservable<double?> source) Parameters Type Name Description IObservable < Nullable < Double >> source A sequence of nullable Double values to determine the maximum value of. Returns Type Description IObservable < Nullable < Double >> An observable sequence containing a single element representing the maximum value in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Int32>>) Returns the maximum value in an observable sequence of nullable Int32 values. Declaration public IObservable<int?> Process(IObservable<int?> source) Parameters Type Name Description IObservable < Nullable < Int32 >> source A sequence of nullable Int32 values to determine the maximum value of. Returns Type Description IObservable < Nullable < Int32 >> An observable sequence containing a single element representing the maximum value in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Int64>>) Returns the maximum value in an observable sequence of nullable Int64 values. Declaration public IObservable<long?> Process(IObservable<long?> source) Parameters Type Name Description IObservable < Nullable < Int64 >> source A sequence of nullable Int64 values to determine the maximum value of. Returns Type Description IObservable < Nullable < Int64 >> An observable sequence containing a single element representing the maximum value in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Single>>) Returns the maximum value in an observable sequence of nullable Single values. Declaration public IObservable<float?> Process(IObservable<float?> source) Parameters Type Name Description IObservable < Nullable < Single >> source A sequence of nullable Single values to determine the maximum value of. Returns Type Description IObservable < Nullable < Single >> An observable sequence containing a single element representing the maximum value in the source sequence. | Improve this Doc View Source Process(IObservable<Single>) Returns the maximum value in an observable sequence of Single values. Declaration public IObservable<float> Process(IObservable<float> source) Parameters Type Name Description IObservable < Single > source A sequence of Single values to determine the maximum value of. Returns Type Description IObservable < Single > An observable sequence containing a single element representing the maximum value in the source sequence. | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Returns the maximum element in an observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source An observable sequence to determine the maximum element of. Returns Type Description IObservable <TSource> An observable sequence containing a single element representing the maximum value in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.MaxBy.html": {
    "href": "api/Bonsai.Reactive.MaxBy.html",
    "title": "Class MaxBy",
    "keywords": "Class MaxBy Represents an operator that returns the elements in the observable sequence with the maximum key value. The MaxBy operator collects all the specified keys from values in the source sequence and emits a single value representing the value with the largest key. The single result value is emitted only when the source sequence terminates successfully. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder MaxBy Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class MaxBy : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source KeySelector Gets or sets a value specifying the inner properties used as key for each element in the sequence. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Merge.html": {
    "href": "api/Bonsai.Reactive.Merge.html",
    "title": "Class Merge",
    "keywords": "Class Merge Represents an operator that merges any number of observable sequences into a single observable sequence. The Merge operator allows you to combine the output of multiple sequences of the same type into a single sequence. Merge subscribes to all source sequences in parallel and emits all the elements from each sequence downstream. The resulting sequence will terminate successfully only when all source sequences have terminated successfully, or exceptionally as soon as any sequence produces an error. Higher-order operator Merge also works as a higher-order operator, so it can take as input a sequence of observable sequences. In this case, it will subscribe to all source sequences as soon as they are emitted by the outer sequence, and emit all elements from each sequence downstream. The higher-order variant is useful to combine notifications from multiple event sources running in parallel, for example when waiting for the first event from multiple input conditionals, or when logging data from multiple sources to the same file. Inheritance Object Merge Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Merge Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>, IObservable<TSource>) Merges elements from two observable sequences into a single observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second) Parameters Type Name Description IObservable <TSource> first The first observable sequence. IObservable <TSource> second The second observable sequence. Returns Type Description IObservable <TSource> The observable sequence that merges the elements of the two sequences. Type Parameters Name Description TSource The type of the elements in the source sequences. | Improve this Doc View Source Process<TSource>(IObservable<TSource>, IObservable<TSource>, IObservable<TSource>[]) Merges elements from the specified observable sequences into a single observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second, params IObservable<TSource>[] remainder) Parameters Type Name Description IObservable <TSource> first The first observable sequence. IObservable <TSource> second The second observable sequence. IObservable <TSource>[] remainder The remaining observable sequences to merge. Returns Type Description IObservable <TSource> The observable sequence that merges the elements of the observable sequences. Type Parameters Name Description TSource The type of the elements in the source sequences. | Improve this Doc View Source Process<TSource>(IObservable<IEnumerable<TSource>>) Merges all inner enumerable sequences into one observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<IEnumerable<TSource>> sources) Parameters Type Name Description IObservable < IEnumerable <TSource>> sources The observable sequence of inner enumerable sequences. Returns Type Description IObservable <TSource> An observable sequence that contains all the elements of each inner enumerable sequence. Type Parameters Name Description TSource The type of the elements in the source sequences. | Improve this Doc View Source Process<TSource>(IObservable<IObservable<TSource>>) Merges elements from all inner observable sequences into a single observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<IObservable<TSource>> sources) Parameters Type Name Description IObservable < IObservable <TSource>> sources The observable sequence of inner observable sequences. Returns Type Description IObservable <TSource> The observable sequence that merges the elements of the inner sequences. Type Parameters Name Description TSource The type of the elements in the source sequences."
  },
  "api/Bonsai.Reactive.Min.html": {
    "href": "api/Bonsai.Reactive.Min.html",
    "title": "Class Min",
    "keywords": "Class Min Represents an operator that computes the minimum element in an observable sequence. The Min operator collects all the values from the source sequence and emits a single value representing the smallest of all values. The single result value is emitted only when the source sequence terminates successfully. Inheritance Object Min Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Min Methods | Improve this Doc View Source Process(IObservable<Decimal>) Returns the minimum value in an observable sequence of Decimal values. Declaration public IObservable<decimal> Process(IObservable<decimal> source) Parameters Type Name Description IObservable < Decimal > source A sequence of Decimal values to determine the minimum value of. Returns Type Description IObservable < Decimal > An observable sequence containing a single element representing the minimum value in the source sequence. | Improve this Doc View Source Process(IObservable<Double>) Returns the minimum value in an observable sequence of Double values. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of Double values to determine the minimum value of. Returns Type Description IObservable < Double > An observable sequence containing a single element representing the minimum value in the source sequence. | Improve this Doc View Source Process(IObservable<Int32>) Returns the minimum value in an observable sequence of Int32 values. Declaration public IObservable<int> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of Int32 values to determine the minimum value of. Returns Type Description IObservable < Int32 > An observable sequence containing a single element representing the minimum value in the source sequence. | Improve this Doc View Source Process(IObservable<Int64>) Returns the minimum value in an observable sequence of Int64 values. Declaration public IObservable<long> Process(IObservable<long> source) Parameters Type Name Description IObservable < Int64 > source A sequence of Int64 values to determine the minimum value of. Returns Type Description IObservable < Int64 > An observable sequence containing a single element representing the minimum value in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Decimal>>) Returns the minimum value in an observable sequence of nullable Decimal values. Declaration public IObservable<decimal?> Process(IObservable<decimal?> source) Parameters Type Name Description IObservable < Nullable < Decimal >> source A sequence of nullable Decimal values to determine the minimum value of. Returns Type Description IObservable < Nullable < Decimal >> An observable sequence containing a single element representing the minimum value in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Double>>) Returns the minimum value in an observable sequence of nullable Double values. Declaration public IObservable<double?> Process(IObservable<double?> source) Parameters Type Name Description IObservable < Nullable < Double >> source A sequence of nullable Double values to determine the minimum value of. Returns Type Description IObservable < Nullable < Double >> An observable sequence containing a single element representing the minimum value in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Int32>>) Returns the minimum value in an observable sequence of nullable Int32 values. Declaration public IObservable<int?> Process(IObservable<int?> source) Parameters Type Name Description IObservable < Nullable < Int32 >> source A sequence of nullable Int32 values to determine the minimum value of. Returns Type Description IObservable < Nullable < Int32 >> An observable sequence containing a single element representing the minimum value in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Int64>>) Returns the minimum value in an observable sequence of nullable Int64 values. Declaration public IObservable<long?> Process(IObservable<long?> source) Parameters Type Name Description IObservable < Nullable < Int64 >> source A sequence of nullable Int64 values to determine the minimum value of. Returns Type Description IObservable < Nullable < Int64 >> An observable sequence containing a single element representing the minimum value in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Single>>) Returns the minimum value in an observable sequence of nullable Single values. Declaration public IObservable<float?> Process(IObservable<float?> source) Parameters Type Name Description IObservable < Nullable < Single >> source A sequence of nullable Single values to determine the minimum value of. Returns Type Description IObservable < Nullable < Single >> An observable sequence containing a single element representing the minimum value in the source sequence. | Improve this Doc View Source Process(IObservable<Single>) Returns the minimum value in an observable sequence of Single values. Declaration public IObservable<float> Process(IObservable<float> source) Parameters Type Name Description IObservable < Single > source A sequence of Single values to determine the minimum value of. Returns Type Description IObservable < Single > An observable sequence containing a single element representing the minimum value in the source sequence. | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Returns the minimum element in an observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source An observable sequence to determine the minimum element of. Returns Type Description IObservable <TSource> An observable sequence containing a single element representing the minimum value in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.MinBy.html": {
    "href": "api/Bonsai.Reactive.MinBy.html",
    "title": "Class MinBy",
    "keywords": "Class MinBy Represents an operator that returns the elements in the observable sequence with the minimum key value. The MinBy operator collects all the specified keys from values in the source sequence and emits a single value representing the value with the smallest key. The single result value is emitted only when the source sequence terminates successfully. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder MinBy Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class MinBy : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source KeySelector Gets or sets a value specifying the inner properties used as key for each element in the sequence. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.NewThreadScheduler.html": {
    "href": "api/Bonsai.Reactive.NewThreadScheduler.html",
    "title": "Class NewThreadScheduler",
    "keywords": "Class NewThreadScheduler Represents an operator that returns an object that schedules each unit of work on a separate thread. The NewThreadScheduler operator returns a singleton object that can be used to schedule each unit of work in a separate thread using default thread creation options. Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions. Inheritance Object Source < NewThreadScheduler > NewThreadScheduler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public sealed class NewThreadScheduler : Source<NewThreadScheduler> Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns the default NewThreadScheduler object. Declaration public override IObservable<NewThreadScheduler> Generate() Returns Type Description IObservable < NewThreadScheduler > A sequence containing the default NewThreadScheduler object. Overrides Bonsai.Source<System.Reactive.Concurrency.NewThreadScheduler>.Generate()"
  },
  "api/Bonsai.Reactive.ObserveOn.html": {
    "href": "api/Bonsai.Reactive.ObserveOn.html",
    "title": "Class ObserveOn",
    "keywords": "Class ObserveOn Represents an operator that sends all notifications in the sequence to the specified scheduler. An observable sequence, and the chain of operators that are applied to it, will usually do its work and notify any downstream observers on the same thread that is used to run the source. The ObserveOn operator can be used to instruct a sequence to send notifications to its observers on a particular scheduler. ObserveOn will change the thread used to send notifications only for items emitted downstream from where the operator is introduced. Even if new tasks or threads are created to run notifications, the resulting sequence will keep the order of all emitted items. Warning Care must be taken to prevent unbounded accumulation of notifications when consumers following ObserveOn are slower than the rate at which the source produces new items. Reactive operators such as Gate or Slice may be used to manage any backpressure issues. Note that ObserveOn will forward any error notification from the source sequence immediately, without waiting for slow-consuming observers to receive previously emitted items. In other words, the error notification may jump ahead of items emitted earlier by the source sequence as in the diagram above. Inheritance Object Combinator ObserveOn Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class ObserveOn : Combinator Properties | Improve this Doc View Source Scheduler Gets or sets a value specifying the scheduler on which to observe notifications. Declaration [TypeConverter(typeof(SchedulerMappingConverter))] public SchedulerMapping Scheduler { get; set; } Property Value Type Description SchedulerMapping | Improve this Doc View Source SchedulerSpecified Gets a value indicating whether the Scheduler property should be serialized. Declaration [Browsable(false)] public bool SchedulerSpecified { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Sends all notifications in an observable sequence to the specified scheduler. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to schedule notifications for. Returns Type Description IObservable <TSource> An observable sequence where all notifications are sent to the specified scheduler. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.OnErrorResumeNext.html": {
    "href": "api/Bonsai.Reactive.OnErrorResumeNext.html",
    "title": "Class OnErrorResumeNext",
    "keywords": "Class OnErrorResumeNext Represents an operator that concatenates any number of observable sequences even if any of the sequences terminates exceptionally. The OnErrorResumeNext operator allows you to combine the output of multiple sequences of the same type into a single sequence. OnErrorResumeNext subscribes to each sequence in turn, emits all the values from that sequence until termination, and then subscribes to the next sequence, even if the previous sequence has terminated with an error. Each sequence is guaranteed to only start after the previous one terminates. The resulting sequence will always terminate successfully when the last source sequence has terminated. Inheritance Object OnErrorResumeNext Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class OnErrorResumeNext Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>, IObservable<TSource>) Concatenates the second observable sequence to the first observable sequence upon successful or exceptional termination of the first. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second) Parameters Type Name Description IObservable <TSource> first The first observable sequence. IObservable <TSource> second The second observable sequence. Returns Type Description IObservable <TSource> An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally. Type Parameters Name Description TSource The type of the elements in the source sequences. | Improve this Doc View Source Process<TSource>(IObservable<TSource>[]) Concatenates all of the specified observable sequences, even if the previous observable sequence terminated exceptionally. Declaration public IObservable<TSource> Process<TSource>(params IObservable<TSource>[] sources) Parameters Type Name Description IObservable <TSource>[] sources The observable sequences to concatenate. Returns Type Description IObservable <TSource> An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally. Type Parameters Name Description TSource The type of the elements in the source sequences."
  },
  "api/Bonsai.Reactive.OrderBy.html": {
    "href": "api/Bonsai.Reactive.OrderBy.html",
    "title": "Class OrderBy",
    "keywords": "Class OrderBy Represents an operator that sorts the elements of all the collections in an observable sequence in ascending order according to the specified key. The OrderBy operator requires the elements in the source sequence to be collections implementing the IEnumerable<T> interface. For each collection emitted by the source sequence, the result sequence will emit an ordered collection where elements are sorted in ascending order of the keys specified in the KeySelector property. Warning The ordered collections returned in the result sequence are lazy. The ordering is not really evaluated until the collection is enumerated by a downstream operator such as Merge . Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder OrderBy Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class OrderBy : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source KeySelector Gets or sets a value specifying the inner properties used as a key for sorting the elements in the collection. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.OrderByDescending.html": {
    "href": "api/Bonsai.Reactive.OrderByDescending.html",
    "title": "Class OrderByDescending",
    "keywords": "Class OrderByDescending Represents an operator that sorts the elements of all the collections in an observable sequence in descending order according to the specified key. The OrderByDescending operator requires the elements in the source sequence to be collections implementing the IEnumerable<T> interface. For each collection emitted by the source sequence, the result sequence will emit an ordered collection where elements are sorted in descending order of the keys specified in the KeySelector property. Warning The ordered collections returned in the result sequence are lazy. The ordering is not really evaluated until the collection is enumerated by a downstream operator such as Merge . Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder OrderByDescending Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class OrderByDescending : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source KeySelector Gets or sets a value specifying the inner properties used as a key for sorting the elements in the collection. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Publish.html": {
    "href": "api/Bonsai.Reactive.Publish.html",
    "title": "Class Publish",
    "keywords": "Class Publish Represents an expression builder that shares a single subscription to an observable sequence across the encapsulated workflow. Publish surfaces the observable sequence to the nested workflow using a PublishSubject . PublishSubject passes to each subscribed observer only the values from the source sequence which were emitted after the time of subscription. This fire-and-forget behavior means that any observers which subscribe late might lose one or more items emitted between the time that PublishSubject was created and the time that the observer subscribed to it. If you require guaranteed delivery of all values from the source sequence, you need to ensure that all observers subscribe immediately upon workflow initialization. If this is not possible, you should consider switching to an AsyncSubject if the sequence contains a single value, or a ReplaySubject if the sequence contains multiple values. If the source sequence terminates with an error, PublishSubject will not emit any items to subsequent observers, but will pass along the terminating error. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder MulticastBuilder Publish Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members MulticastBuilder.Build(IEnumerable<Expression>) SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Publish : MulticastBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source Publish() Initializes a new instance of the Publish class. Declaration public Publish() | Improve this Doc View Source Publish(ExpressionBuilderGraph) Initializes a new instance of the Publish class with the specified expression builder workflow. Declaration public Publish(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.PublishSubject.html": {
    "href": "api/Bonsai.Reactive.PublishSubject.html",
    "title": "Class PublishSubject",
    "keywords": "Class PublishSubject Represents an expression builder that broadcasts the values of an observable sequence to multiple subscribers using a shared subject. PublishSubject passes to each subscribed observer only the values from the source sequence which were emitted after the time of subscription. This fire-and-forget behavior means that any observers which subscribe late might lose one or more items emitted between the time that PublishSubject was created and the time that the observer subscribed to it. If you require guaranteed delivery of all values from the source sequence, you need to ensure that all observers subscribe immediately upon workflow initialization. If this is not possible, you should consider switching to an AsyncSubject if the sequence contains a single value, or a ReplaySubject if the sequence contains multiple values. If the source sequence terminates with an error, PublishSubject will not emit any items to subsequent observers, but will pass along the terminating error. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder PublishSubject Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(PublishSubject), \"PublishSubject\")] public class PublishSubject : SubjectBuilder, IExpressionBuilder, INamedElement Methods | Improve this Doc View Source BuildSubject(Expression) When overridden in a derived class, returns the expression that creates the shared subject. Declaration protected override Expression BuildSubject(Expression expression) Parameters Type Name Description Expression expression The expression representing the observable input sequence. Returns Type Description Expression The Expression that creates the shared subject. Overrides SubjectBuilder.BuildSubject(Expression) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.PublishSubject-1.html": {
    "href": "api/Bonsai.Reactive.PublishSubject-1.html",
    "title": "Class PublishSubject<T>",
    "keywords": "Class PublishSubject<T> Represents an expression builder that broadcasts the values from other observable sequences to multiple subscribers. PublishSubject passes to each subscribed observer only the values from the source sequence which were emitted after the time of subscription. This fire-and-forget behavior means that any observers which subscribe late might lose one or more items emitted between the time that PublishSubject was created and the time that the observer subscribed to it. If you require guaranteed delivery of all values from the source sequence, you need to ensure that all observers subscribe immediately upon workflow initialization. If this is not possible, you should consider switching to an AsyncSubject if the sequence contains a single value, or a ReplaySubject if the sequence contains multiple values. If the source sequence terminates with an error, PublishSubject will not emit any items to subsequent observers, but will pass along the terminating error. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder <T> PublishSubject<T> Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder<T>.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(PublishSubject), \"PublishSubject\")] public class PublishSubject<T> : SubjectBuilder<T>, IExpressionBuilder, INamedElement Type Parameters Name Description T The type of the elements processed by the subject. Methods | Improve this Doc View Source CreateSubject() Creates a shared subject that broadcasts the values from other observable sequences to multiple subscribers. Declaration protected override ISubject<T> CreateSubject() Returns Type Description ISubject <T> A new instance of ISubject<T> . Overrides Bonsai.Expressions.SubjectBuilder<T>.CreateSubject() Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Range.html": {
    "href": "api/Bonsai.Reactive.Range.html",
    "title": "Class Range",
    "keywords": "Class Range Represents an operator that generates an observable sequence of integer numbers within a specified range. The entire sequence of numbers in the range is emitted immediately upon subscription. If another sequence is provided as an input to Range , the entire sequence of numbers will be emitted once for each notification in the source sequence. Inheritance Object Source < Int32 > Range Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Range : Source<int> Properties | Improve this Doc View Source Count Gets or sets the number of sequential integers to generate. Declaration public int Count { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Start Gets or sets the value of the first integer in the sequence. Declaration public int Start { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Generate() Generates an observable sequence of integer numbers within a specified range. Declaration public override IObservable<int> Generate() Returns Type Description IObservable < Int32 > An observable sequence that contains a range of sequential integer numbers. Overrides Bonsai.Source<System.Int32>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of integer numbers within a specified range whenever the source sequence emits a notification. Declaration public IObservable<int> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence used to generate the range. Returns Type Description IObservable < Int32 > An observable sequence that generates a range of sequential integer numbers whenever the source emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.Repeat.html": {
    "href": "api/Bonsai.Reactive.Repeat.html",
    "title": "Class Repeat",
    "keywords": "Class Repeat Represents an operator that repeats an observable sequence indefinitely. Repeat reacts to successful termination by disposing the previous subscription and resubscribing to the source sequence. Elements received from all of the subscriptions are forwarded to the result sequence. If any of the subscriptions terminates exceptionally, the result sequence will also terminate exceptionally, and no further resubscriptions will be made. Tip The subscription side-effects (e.g. opening a file, initializing hardware connections) of all upstream operators will be repeated upon termination and resubscription to the source sequence. Sometimes this may be undesirable. For example logging side-effects introduced by Sink nodes may create extra files on each subscription. To shield operators from these effects, consider moving affected operators downstream from the resubscription operator, or moving the resubscription operator itself further upstream. Caution All resubscription operators should be applied with care to anonymous branch points in the workflow, since dangling branches operate independently from each other, and from the subscription to the source sequence. For more details, see Subjects . Inheritance Object Combinator Repeat Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Repeat : Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Repeats the observable sequence indefinitely. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence to repeat. Returns Type Description IObservable <TSource> The observable sequence producing the elements of the given sequence repeatedly and sequentially. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.RepeatCount.html": {
    "href": "api/Bonsai.Reactive.RepeatCount.html",
    "title": "Class RepeatCount",
    "keywords": "Class RepeatCount Represents an operator that repeats an observable sequence a specified number of times. RepeatCount reacts to successful termination by disposing the previous subscription and resubscribing to the source sequence, up to the maximum number of times specified in the Count property. Value notifications received from all of the subscriptions are forwarded to the result sequence. After the source sequence completes successfully the specified number of times, the result sequence will also terminate successfully. If any of the subscriptions terminates exceptionally, the result sequence will also terminate exceptionally, and no further resubscriptions will be made. Tip The subscription side-effects (e.g. opening a file, initializing hardware connections) of all upstream operators will be repeated upon termination and resubscription to the source sequence. Sometimes this may be undesirable. For example logging side-effects introduced by Sink nodes may create extra files on each subscription. To shield operators from these effects, consider moving affected operators downstream from the resubscription operator, or moving the resubscription operator itself further upstream. Caution All resubscription operators should be applied with care to anonymous branch points in the workflow, since dangling branches operate independently from each other, and from the subscription to the source sequence. For more details, see Subjects . Inheritance Object Combinator RepeatCount Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class RepeatCount : Combinator Properties | Improve this Doc View Source Count Gets or sets the number of times to repeat the sequence. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Repeats the observable sequence a specified number of times. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence to repeat. Returns Type Description IObservable <TSource> The observable sequence producing the elements of the given sequence repeatedly. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Replay.html": {
    "href": "api/Bonsai.Reactive.Replay.html",
    "title": "Class Replay",
    "keywords": "Class Replay Represents an expression builder that handles sharing of an observable sequence across the encapsulated workflow by eagerly replaying notifications. Replay surfaces the observable sequence to the nested workflow using a ReplaySubject . ReplaySubject passes to each subscribed observer all the values from the source sequence, regardless of when the observer subscribes. Any observers which subscribe late will immediately receive all values which were sent out between the time that ReplaySubject was created and the time that the observer subscribed to it. It is also possible to parameterize the ReplaySubject to throw away old values after a certain period of time, or after a specified buffer size is exceeded. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder MulticastBuilder Replay Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members MulticastBuilder.Build(IEnumerable<Expression>) SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Replay : MulticastBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source Replay() Initializes a new instance of the Replay class. Declaration public Replay() | Improve this Doc View Source Replay(ExpressionBuilderGraph) Initializes a new instance of the Replay class with the specified expression builder workflow. Declaration public Replay(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Properties | Improve this Doc View Source BufferSize Gets or sets the maximum element count of the replay buffer. Declaration [Externalizable(false)] public int? BufferSize { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source Window Gets or sets the maximum time length of the replay buffer. Declaration [Externalizable(false)] public TimeSpan? Window { get; set; } Property Value Type Description Nullable < TimeSpan > | Improve this Doc View Source WindowXml Gets or sets the XML serializable representation of the replay window interval. Declaration [Browsable(false)] public string WindowXml { get; set; } Property Value Type Description String Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.ReplaySubject.html": {
    "href": "api/Bonsai.Reactive.ReplaySubject.html",
    "title": "Class ReplaySubject",
    "keywords": "Class ReplaySubject Represents an expression builder that replays the values of an observable sequence to all subscribed and future observers using a shared subject. ReplaySubject passes to each subscribed observer all the values from the source sequence, regardless of when the observer subscribes. Any observers which subscribe late will immediately receive all values which were sent out between the time that ReplaySubject was created and the time that the observer subscribed to it. It is also possible to parameterize the ReplaySubject to throw away old values after a certain period of time, or after a specified buffer size is exceeded. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder ReplaySubject Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(ReplaySubject), \"ReplaySubject\")] public class ReplaySubject : SubjectBuilder, IExpressionBuilder, INamedElement Properties | Improve this Doc View Source BufferSize Gets or sets the maximum element count of the replay buffer. Declaration public int? BufferSize { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source Window Gets or sets the maximum time length of the replay buffer. Declaration public TimeSpan? Window { get; set; } Property Value Type Description Nullable < TimeSpan > | Improve this Doc View Source WindowXml Gets or sets the XML serializable representation of the replay window interval. Declaration [Browsable(false)] public string WindowXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source BuildSubject(Expression) When overridden in a derived class, returns the expression that creates the shared subject. Declaration protected override Expression BuildSubject(Expression expression) Parameters Type Name Description Expression expression The expression representing the observable input sequence. Returns Type Description Expression The Expression that creates the shared subject. Overrides SubjectBuilder.BuildSubject(Expression) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.ReplaySubject-1.html": {
    "href": "api/Bonsai.Reactive.ReplaySubject-1.html",
    "title": "Class ReplaySubject<T>",
    "keywords": "Class ReplaySubject<T> Represents an expression builder that replays the values of other observable sequences to all subscribed and future observers. ReplaySubject passes to each subscribed observer all the values from the source sequence, regardless of when the observer subscribes. Any observers which subscribe late will immediately receive all values which were sent out between the time that ReplaySubject was created and the time that the observer subscribed to it. It is also possible to parameterize the ReplaySubject to throw away old values after a certain period of time, or after a specified buffer size is exceeded. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder <T> ReplaySubject<T> Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder<T>.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(ReplaySubject), \"ReplaySubject\")] public class ReplaySubject<T> : SubjectBuilder<T>, IExpressionBuilder, INamedElement Type Parameters Name Description T The type of the elements processed by the subject. Properties | Improve this Doc View Source BufferSize Gets or sets the maximum element count of the replay buffer. Declaration public int? BufferSize { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source Window Gets or sets the maximum time length of the replay buffer. Declaration public TimeSpan? Window { get; set; } Property Value Type Description Nullable < TimeSpan > | Improve this Doc View Source WindowXml Gets or sets the XML serializable representation of the replay window interval. Declaration [Browsable(false)] public string WindowXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source CreateSubject() Creates a shared subject that replays the values of other observable sequences to all subscribed and future observers. Declaration protected override ISubject<T> CreateSubject() Returns Type Description ISubject <T> A new instance of ISubject<T> . Overrides Bonsai.Expressions.SubjectBuilder<T>.CreateSubject() Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.ResourceSubject.html": {
    "href": "api/Bonsai.Reactive.ResourceSubject.html",
    "title": "Class ResourceSubject",
    "keywords": "Class ResourceSubject Represents an expression builder that stores and broadcasts the last disposable value of an observable sequence to all subscribed and future observers. The value is disposed when the containing context is closed. ResourceSubject stores and passes the single last value emitted by the source sequence to each subscribed observer. The value is also only sent out after the source sequence terminates. If the source sequence does not emit any values, ResourceSubject will also complete without emitting any values. Warning The type of the stored value must be IDisposable . When the enclosing workflow scope is terminated, the value will be disposed to free any allocated resources, such as file or memory handles. Any observers which subscribe after the source sequence terminates will immediately receive the stored value. If the source sequence terminates with an error, ResourceSubject will not emit any values but will pass along the error notification to all observers. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder ResourceSubject Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(ResourceSubject), \"ResourceSubject\")] public class ResourceSubject : SubjectBuilder, IExpressionBuilder, INamedElement Methods | Improve this Doc View Source BuildSubject(Expression) When overridden in a derived class, returns the expression that creates the shared subject. Declaration protected override Expression BuildSubject(Expression expression) Parameters Type Name Description Expression expression The expression representing the observable input sequence. Returns Type Description Expression The Expression that creates the shared subject. Overrides SubjectBuilder.BuildSubject(Expression) Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.ResourceSubject-1.html": {
    "href": "api/Bonsai.Reactive.ResourceSubject-1.html",
    "title": "Class ResourceSubject<T>",
    "keywords": "Class ResourceSubject<T> Represents an expression builder that stores and broadcasts the last disposable value of an observable sequence to all subscribed and future observers. The value is disposed when the containing context is closed. ResourceSubject stores and passes the single last value emitted by the source sequence to each subscribed observer. The value is also only sent out after the source sequence terminates. If the source sequence does not emit any values, ResourceSubject will also complete without emitting any values. Warning The type of the stored value must be IDisposable . When the enclosing workflow scope is terminated, the value will be disposed to free any allocated resources, such as file or memory handles. Any observers which subscribe after the source sequence terminates will immediately receive the stored value. If the source sequence terminates with an error, ResourceSubject will not emit any values but will pass along the error notification to all observers. Inheritance Object ExpressionBuilder VariableArgumentExpressionBuilder SubjectExpressionBuilder SubjectBuilder <T> ResourceSubject<T> Implements IExpressionBuilder INamedElement Inherited Members SubjectBuilder<T>.Build(IEnumerable<Expression>) SubjectExpressionBuilder.Name VariableArgumentExpressionBuilder.ArgumentRange VariableArgumentExpressionBuilder.SetArgumentRange(Int32, Int32) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [WorkflowElementIcon(typeof(ResourceSubject), \"ResourceSubject\")] public class ResourceSubject<T> : SubjectBuilder<T>, IExpressionBuilder, INamedElement where T : class, IDisposable Type Parameters Name Description T The type of the disposable resource stored by the subject. Methods | Improve this Doc View Source CreateSubject() Creates a shared subject that stores and broadcasts the last disposable value of an observable sequence to all subscribed and future observers. The value is disposed when the containing context is closed. Declaration protected override ISubject<T> CreateSubject() Returns Type Description ISubject <T> A new instance of ISubject<T> . Overrides Bonsai.Expressions.SubjectBuilder<T>.CreateSubject() Implements IExpressionBuilder INamedElement Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Retry.html": {
    "href": "api/Bonsai.Reactive.Retry.html",
    "title": "Class Retry",
    "keywords": "Class Retry Represents an operator that repeats an observable sequence until it successfully terminates. Retry reacts to exceptional termination by disposing the previous subscription and resubscribing to the source sequence. Elements received from all of the subscriptions are forwarded to the result sequence. If any of the subscriptions completes successfully, the result sequence will also complete, and no further resubscriptions will be made. Tip The subscription side-effects (e.g. opening a file, initializing hardware connections) of all upstream operators will be repeated upon termination and resubscription to the source sequence. Sometimes this may be undesirable. For example logging side-effects introduced by Sink nodes may create extra files on each subscription. To shield operators from these effects, consider moving affected operators downstream from the resubscription operator, or moving the resubscription operator itself further upstream. Caution All resubscription operators should be applied with care to anonymous branch points in the workflow, since dangling branches operate independently from each other, and from the subscription to the source sequence. For more details, see Subjects . Inheritance Object Combinator Retry Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Retry : Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Repeats the observable sequence until it successfully terminates. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence to repeat until it successfully terminates. Returns Type Description IObservable <TSource> The observable sequence producing the elements of the given sequence repeatedly until it terminates successfully. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.RetryCount.html": {
    "href": "api/Bonsai.Reactive.RetryCount.html",
    "title": "Class RetryCount",
    "keywords": "Class RetryCount Represents an operator that repeats an observable sequence the specified number of times or until it successfully terminates. RetryCount reacts to exceptional termination by disposing the previous subscription and resubscribing to the source sequence, up to the maximum number of times specified in the Count property. Value notifications received from all of the subscriptions are forwarded to the result sequence. After the source sequence terminates exceptionally the specified maximum number of times, the result sequence will also terminate exceptionally. If any of the subscriptions completes successfully, the result sequence will also complete, and no further resubscriptions will be made. Tip The subscription side-effects (e.g. opening a file, initializing hardware connections) of all upstream operators will be repeated upon termination and resubscription to the source sequence. Sometimes this may be undesirable. For example logging side-effects introduced by Sink nodes may create extra files on each subscription. To shield operators from these effects, consider moving affected operators downstream from the resubscription operator, or moving the resubscription operator itself further upstream. Caution All resubscription operators should be applied with care to anonymous branch points in the workflow, since dangling branches operate independently from each other, and from the subscription to the source sequence. For more details, see Subjects . Inheritance Object Combinator RetryCount Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class RetryCount : Combinator Properties | Improve this Doc View Source Count Gets or sets the number of times to repeat the sequence. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Repeats the observable sequence the specified number of times or until it successfully terminates. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence to repeat until it successfully terminates. Returns Type Description IObservable <TSource> The observable sequence producing the elements of the given sequence repeatedly until it terminates successfully. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Sample.html": {
    "href": "api/Bonsai.Reactive.Sample.html",
    "title": "Class Sample",
    "keywords": "Class Sample Represents an operator that samples elements from an observable sequence whenever the second sequence emits a notification. Sample always emits the most recent element received from the source sequence. If multiple elements are received between sampling events, all but the latest element will be dropped from the result sequence. Conversely, elements are never repeated: if no new elements are received between two sampling events, no notifications will be emitted. Note If the sampler sequence completes successfully, the termination event will be used to sample the latest element from the source sequence, if it exists. Inheritance Object Sample Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Sample Methods | Improve this Doc View Source Process<TSource, TOther>(IObservable<TSource>, IObservable<TOther>) Samples elements from the first sequence whenever the second sequence emits a notification. Declaration public IObservable<TSource> Process<TSource, TOther>(IObservable<TSource> source, IObservable<TOther> other) Parameters Type Name Description IObservable <TSource> source The source sequence to sample. IObservable <TOther> other The sequence of sampling notifications. Returns Type Description IObservable <TSource> The sampled observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. TOther The type of the elements in the other sequence. Remarks Upon each sampling notification, the latest element (if any) emitted by the source sequence during the last sampling interval is sent to the resulting sequence."
  },
  "api/Bonsai.Reactive.SampleInterval.html": {
    "href": "api/Bonsai.Reactive.SampleInterval.html",
    "title": "Class SampleInterval",
    "keywords": "Class SampleInterval Represents an operator that samples the latest element from the sequence whenever the specified time interval elapses. If multiple elements are received during each sampling period, SampleInterval will emit only the latest value. However, elements are never repeated: if no new elements are received between two sampling events, no notification will be emitted when the sampling period elapses. Inheritance Object Combinator SampleInterval Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class SampleInterval : Combinator Properties | Improve this Doc View Source Interval Gets or sets the interval at which to sample. If this value is equal to Zero , the scheduler will continuously sample the stream. Declaration public TimeSpan Interval { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source IntervalXml Gets or sets an XML representation of the interval for serialization. Declaration [Browsable(false)] public string IntervalXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Samples the latest element from an observable sequence whenever the specified time interval elapses. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to sample. Returns Type Description IObservable <TSource> The sampled observable sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>) Remarks Upon each sampling tick, the latest element (if any) emitted by the source sequence during the last sampling interval is sent to the resulting sequence."
  },
  "api/Bonsai.Reactive.Scan.html": {
    "href": "api/Bonsai.Reactive.Scan.html",
    "title": "Class Scan",
    "keywords": "Class Scan Represents an expression builder which accumulates the values of an observable sequence using the encapsulated workflow. The nested workflow specifying the accumulation function must return a sequence of the same type as the accumulator. The type of the accumulator is specified by the seed sequence, if an explicit seed sequence is provided as a second input. Otherwise, the accumulator will be of the same type as the elements in the source sequence, and will be initialized to the first element. When a new element is received from the source sequence, it is paired with the current value in the accumulator and passed as an input notification to the nested workflow. Values emitted by the nested sequence will update the state of the accumulator. Warning The nested sequence may be synchronous or asynchronous with respect to notifications from the source sequence. However, it is strongly recommended that computation of the accumulation function is performed synchronously to ensure a correspondence between the notifications received from the source sequence and the cumulative values emitted by the result sequence. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder Scan Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Scan : WorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source Scan() Initializes a new instance of the Scan class. Declaration public Scan() | Improve this Doc View Source Scan(ExpressionBuilderGraph) Initializes a new instance of the Scan class with the specified expression builder workflow. Declaration public Scan(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides WorkflowExpressionBuilder.ArgumentRange Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.SchedulerMapping.html": {
    "href": "api/Bonsai.Reactive.SchedulerMapping.html",
    "title": "Struct SchedulerMapping",
    "keywords": "Struct SchedulerMapping Represents a value specifying the scheduler to be used when handling concurrency in a reactive operator. Implements IEquatable < SchedulerMapping > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public struct SchedulerMapping : IEquatable<SchedulerMapping> Constructors | Improve this Doc View Source SchedulerMapping(IScheduler) Initializes a new instance of the SchedulerMapping class using the specified scheduler. Declaration public SchedulerMapping(IScheduler scheduler) Parameters Type Name Description IScheduler scheduler The scheduler assigned to the mapping. Exceptions Type Condition ArgumentNullException scheduler is null . Properties | Improve this Doc View Source Instance Gets or sets the scheduler object assigned to the mapping. Declaration public IScheduler Instance { readonly get; } Property Value Type Description IScheduler | Improve this Doc View Source InstanceXml Gets or sets an XML representation of the scheduler instance for serialization. Declaration [Browsable(false)] public string InstanceXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Equals(SchedulerMapping) Returns a value indicating whether this object has the same scheduler instance as a specified SchedulerMapping value. Declaration public bool Equals(SchedulerMapping other) Parameters Type Name Description SchedulerMapping other The SchedulerMapping value to compare to this object. Returns Type Description Boolean true if other has the same scheduler instance as this object; otherwise, false . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Implements System.IEquatable<T>"
  },
  "api/Bonsai.Reactive.SelectMany.html": {
    "href": "api/Bonsai.Reactive.SelectMany.html",
    "title": "Class SelectMany",
    "keywords": "Class SelectMany Represents an expression builder that merges higher-order observable sequences generated from the encapsulated workflow. For each notification in the source sequence, SelectMany constructs and subscribes to the results of an asynchronous operation specified in the nested workflow. If multiple asynchronous operations are launched simultaneously, SelectMany will merge all the results into a single sequence. The input to the nested workflow represents the element passed as an argument to the asynchronous operation. If the input is itself an observable sequence, the WorkflowInput node will subscribe to all the values in the sequence when the asynchronous operation is launched. Otherwise, the input will emit a single value containing the stored argument value. Tip SelectMany is one of the most versatile reactive operators and can be used as a primitive building block on which to build a large number of more complex reactive operators, including reactive state machines. See the State Machines tutorial for examples. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder SelectMany Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class SelectMany : SingleArgumentWorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source SelectMany() Initializes a new instance of the SelectMany class. Declaration public SelectMany() | Improve this Doc View Source SelectMany(ExpressionBuilderGraph) Initializes a new instance of the SelectMany class with the specified expression builder workflow. Declaration public SelectMany(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.SequenceEqual.html": {
    "href": "api/Bonsai.Reactive.SequenceEqual.html",
    "title": "Class SequenceEqual",
    "keywords": "Class SequenceEqual Represents an operator that determines whether two sequences are equal by comparing the elements pairwise. SequenceEqual will return false as soon as one of the sequences emits an element with a different value or in a different order from the other sequences, or if one of the sequences terminates early. If all notifications are equal, SequenceEqual will return true when all sequences terminate successfully. Inheritance Object SequenceEqual Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class SequenceEqual Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>, IObservable<TSource>) Determines whether two sequences are equal by comparing the elements pairwise. Declaration public IObservable<bool> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second) Parameters Type Name Description IObservable <TSource> first First observable sequence. IObservable <TSource> second Second observable sequence. Returns Type Description IObservable < Boolean > An observable sequence that contains a single element indicating whether both sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type. Type Parameters Name Description TSource The type of the elements in the source sequences."
  },
  "api/Bonsai.Reactive.Sink.html": {
    "href": "api/Bonsai.Reactive.Sink.html",
    "title": "Class Sink",
    "keywords": "Class Sink Represents an expression builder that adds the side effects specified by the encapsulated workflow to an observable sequence without modifying its elements. The Sink operator uses the nested workflow to specify a reactive operation over the elements of the source sequence. Sink emits all values from the source sequence directly without modification, and the nested sequence is subscribed to purely for its side-effects. All notifications emitted by the inner WorkflowOutput node are ignored. Tip Sink operators are very useful to prevent side-effects from affecting the source sequence. Even if the inner sequence terminates early, or changes the timing of emitted values, these effects will not propagate to the outer sequence. Warning If the source sequence terminates, the subscription to the nested sequence will be cancelled. If the reactive operation needs to be fully asynchronous and decoupled from the main sequence, consider using Subjects to process items in a separate branch of the workflow. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder Sink Visualizer Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public class Sink : SingleArgumentWorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source Sink() Initializes a new instance of the Sink class. Declaration public Sink() | Improve this Doc View Source Sink(ExpressionBuilderGraph) Initializes a new instance of the Sink class with the specified expression builder workflow. Declaration public Sink(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Skip.html": {
    "href": "api/Bonsai.Reactive.Skip.html",
    "title": "Class Skip",
    "keywords": "Class Skip Represents an operator that bypasses the specified number of elements at the start of an observable sequence and returns the remaining elements. The Skip operator modifies the source sequence to remove the specified number of elements from the start of the sequence. After the maximum number of elements is received, Skip will then emit the remaining elements in the sequence. Skip can be used to ignore unstable values from the start of a dynamic time series, e.g. to remove the auto-exposure adaptation start of a camera capture sequence. If the source sequence terminates before the specified number of elements is received, Skip will terminate without emitting any values. Inheritance Object Combinator Skip Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Skip : Combinator Properties | Improve this Doc View Source Count Gets or sets the number of elements to skip. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Bypasses the specified number of elements at the start of an observable sequence and returns the remaining elements. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to skip elements from. Returns Type Description IObservable <TSource> An observable sequence that contains the elements that occur after the skipped elements in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.SkipLast.html": {
    "href": "api/Bonsai.Reactive.SkipLast.html",
    "title": "Class SkipLast",
    "keywords": "Class SkipLast Represents an operator that bypasses the specified number of elements at the end of an observable sequence. The SkipLast operator modifies the source sequence to remove the specified number of elements from the end of the sequence. Because SkipLast does not know beforehand which values are the last, it will not emit any notifications until at least the specified number of subsequent elements is received. This means that SkipLast has the practical effect of delaying notifications from the source sequence by the specified number of values to skip. Tip SkipLast can often be used when you need to impose a delay in the source sequence using number of elements, rather than a time interval. Inheritance Object Combinator SkipLast Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class SkipLast : Combinator Properties | Improve this Doc View Source Count Gets or sets the number of elements to skip at the end of the sequence. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Bypasses the specified number of elements at the end of an observable sequence. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to skip elements from. Returns Type Description IObservable <TSource> An observable sequence containing the elements in the source sequence excluding the ones which are bypassed at the end. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.SkipUntil.html": {
    "href": "api/Bonsai.Reactive.SkipUntil.html",
    "title": "Class SkipUntil",
    "keywords": "Class SkipUntil Represents an operator that returns the elements from the first sequence only after the second sequence emits a notification. SkipUntil modifies the source sequence so that all elements are ignored until the second sequence produces a notification. At that time, SkipUntil will start emitting all remaining elements from the source sequence. SkipUntil is often used to create a dynamic start condition for an infinite sequence, e.g. start grabbing frames from a video camera when a key is pressed. If the source sequence terminates before the second sequence produces a value, SkipUntil will terminate without emitting any elements. Warning SubscribeWhen is a similar operator which is often used to control the start of a sequence. Although often both SubscribeWhen and SkipUntil result in a similar sequence, SkipUntil will always immediately subscribe to the source sequence. This means that any initialization side-effects will be evaluated immediately. For hot sequences (e.g. camera) this might be advantageous, since any initialization costs are paid upfront, and new values are immediately ready to be consumed after the trigger. However, for cold sequences (e.g. video) this might lead to loss of data from the start of the sequence. For more about the difference between hot and cold sequences, see the section on temperature . Inheritance Object SkipUntil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class SkipUntil Methods | Improve this Doc View Source Process<TSource, TOther>(IObservable<TSource>, IObservable<TOther>) Returns the elements from an observable sequence only after the second sequence emits a notification. Declaration public IObservable<TSource> Process<TSource, TOther>(IObservable<TSource> source, IObservable<TOther> other) Parameters Type Name Description IObservable <TSource> source The source sequence to propagate elements for. IObservable <TOther> other The observable sequence indicating the time at which to start taking elements from the source sequence. Returns Type Description IObservable <TSource> An observable sequence containing the elements of the source sequence emitted after the other sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. TOther The type of the elements in the other sequence."
  },
  "api/Bonsai.Reactive.SkipWhile.html": {
    "href": "api/Bonsai.Reactive.SkipWhile.html",
    "title": "Class SkipWhile",
    "keywords": "Class SkipWhile Represents an expression builder which bypasses elements in an observable sequence as long as the condition specified by the encapsulated workflow is true. The nested workflow specifying the condition must return a sequence of type Boolean . This nested sequence may be synchronous or asynchronous with respect to notifications from the source sequence. After each element is emitted by the source sequence, the latest value from the nested sequence is checked. While the value is true , elements will continue to be dropped from the result sequence. When the value changes to false , SkipWhile will start emitting all elements from the source sequence. If the source sequence terminates before the nested workflow returns false , SkipWhile will terminate without emitting any values. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder Condition SkipWhile Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members Condition.Build(IEnumerable<Expression>) SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Combinator)] public class SkipWhile : Condition, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source SkipWhile() Initializes a new instance of the SkipWhile class. Declaration public SkipWhile() | Improve this Doc View Source SkipWhile(ExpressionBuilderGraph) Initializes a new instance of the SkipWhile class with the specified expression builder workflow. Declaration public SkipWhile(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Slice.html": {
    "href": "api/Bonsai.Reactive.Slice.html",
    "title": "Class Slice",
    "keywords": "Class Slice Represents an operator that extracts a range of elements from an observable sequence. The Slice operator specifies an index-based filter over elements of the source sequence. Elements from the source sequence are accepted if their index is: greater than or equal to Start ; less than Stop , or the stop index property is not specified; not set to be skipped by the Step property. Warning If the index of elements in the source sequence becomes greater than or equal to Stop , then Slice will terminate successfully and cancel the subscription to the source sequence. Inheritance Object Combinator Slice Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Slice : Combinator Properties | Improve this Doc View Source Start Gets or sets the element index at which the slice begins. Declaration public int Start { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Step Gets or sets the number of elements to skip between slice elements. Declaration public int Step { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Stop Gets or sets the element index at which the slice ends. If no value is specified, elements will be taken until the end of the sequence. Declaration public int? Stop { get; set; } Property Value Type Description Nullable < Int32 > Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Extracts a range of elements from an observable sequence. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to slice. Returns Type Description IObservable <TSource> The sliced sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.SubscribeOn.html": {
    "href": "api/Bonsai.Reactive.SubscribeOn.html",
    "title": "Class SubscribeOn",
    "keywords": "Class SubscribeOn Represents an operator that wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. An observable sequence, and the chain of operators that are applied to it, will often do its work and notify any downstream observers on the same thread on which the subscribe action is called. The SubscribeOn operator changes this behavior by specifying a different scheduler for the subscribe (and unsubscribe) action. As shown in the diagram, the SubscribeOn operator can affect the ultimate source of notifications, no matter where in the chain of operators it is placed, as it changes the thread for the entire upstream subscribe call. By contrast, the ObserveOn operator changes only the scheduler on which notifications are sent, which affects only downstream operators. Warning Hot observable sources such as hardware devices often impose their own execution schedulers, e.g. by hooking notifications to device driver callbacks or interrupts. In these situations it is usually more appropriate to control concurrency using the ObserveOn operator. Inheritance Object Combinator SubscribeOn Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class SubscribeOn : Combinator Remarks This operator is not commonly used. Properties | Improve this Doc View Source Scheduler Gets or sets a value specifying the scheduler on which to run subscription and unsubscription actions. Declaration [TypeConverter(typeof(SchedulerMappingConverter))] public SchedulerMapping Scheduler { get; set; } Property Value Type Description SchedulerMapping | Improve this Doc View Source SchedulerSpecified Gets a value indicating whether the Scheduler property should be serialized. Declaration [Browsable(false)] public bool SchedulerSpecified { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence to wrap. Returns Type Description IObservable <TSource> An observable sequence where subscription and unsubscription logic run on the specified scheduler. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>) See Also ObserveOn"
  },
  "api/Bonsai.Reactive.SubscribeWhen.html": {
    "href": "api/Bonsai.Reactive.SubscribeWhen.html",
    "title": "Class SubscribeWhen",
    "keywords": "Class SubscribeWhen Represents an operator that subscribes to the first sequence only after the second sequence emits a notification. The SubscribeWhen operator modifies the source sequence by waiting for the first value emitted by the second sequence before subscribing to the first sequence. This has the effect of delaying the start of the sequence until the second sequence emits a value. SubscribeWhen can be used to control the timing of initialization. Note that if a source is hot , delaying the start of the sequence will not preserve past data. Inheritance Object SubscribeWhen Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class SubscribeWhen Methods | Improve this Doc View Source Process<TSource, TOther>(IObservable<TSource>, IObservable<TOther>) Subscribes to an observable sequence only after the second sequence produces an element. Declaration public IObservable<TSource> Process<TSource, TOther>(IObservable<TSource> source, IObservable<TOther> other) Parameters Type Name Description IObservable <TSource> source The sequence to subscribe to. IObservable <TOther> other The observable sequence indicating when to subscribe to the source sequence. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where subscription is delayed until the other sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. TOther The type of the elements in the other sequence."
  },
  "api/Bonsai.Reactive.Sum.html": {
    "href": "api/Bonsai.Reactive.Sum.html",
    "title": "Class Sum",
    "keywords": "Class Sum Represents an operator that computes the sum of an observable sequence. The Sum operator collects all the numbers from the source sequence and emits a single value representing the sum of all numbers. The single result value is emitted only when the source sequence terminates successfully. Inheritance Object Sum Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Sum Methods | Improve this Doc View Source Process(IObservable<Decimal>) Computes the sum of a sequence of Decimal values. Declaration public IObservable<decimal> Process(IObservable<decimal> source) Parameters Type Name Description IObservable < Decimal > source A sequence of Decimal values to calculate the sum of. Returns Type Description IObservable < Decimal > An observable sequence containing a single element representing the sum of the values in the source sequence. | Improve this Doc View Source Process(IObservable<Double>) Computes the sum of a sequence of Double values. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source A sequence of Double values to calculate the sum of. Returns Type Description IObservable < Double > An observable sequence containing a single element representing the sum of the values in the source sequence. | Improve this Doc View Source Process(IObservable<Int32>) Computes the sum of a sequence of Int32 values. Declaration public IObservable<int> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source A sequence of Int32 values to calculate the sum of. Returns Type Description IObservable < Int32 > An observable sequence containing a single element representing the sum of the values in the source sequence. | Improve this Doc View Source Process(IObservable<Int64>) Computes the sum of a sequence of Int64 values. Declaration public IObservable<long> Process(IObservable<long> source) Parameters Type Name Description IObservable < Int64 > source A sequence of Int64 values to calculate the sum of. Returns Type Description IObservable < Int64 > An observable sequence containing a single element representing the sum of the values in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Decimal>>) Computes the sum of a sequence of nullable Decimal values. Declaration public IObservable<decimal?> Process(IObservable<decimal?> source) Parameters Type Name Description IObservable < Nullable < Decimal >> source A sequence of nullable Decimal values to calculate the sum of. Returns Type Description IObservable < Nullable < Decimal >> An observable sequence containing a single element representing the sum of the values in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Double>>) Computes the sum of a sequence of nullable Double values. Declaration public IObservable<double?> Process(IObservable<double?> source) Parameters Type Name Description IObservable < Nullable < Double >> source A sequence of nullable Double values to calculate the sum of. Returns Type Description IObservable < Nullable < Double >> An observable sequence containing a single element representing the sum of the values in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Int32>>) Computes the sum of a sequence of nullable Int32 values. Declaration public IObservable<int?> Process(IObservable<int?> source) Parameters Type Name Description IObservable < Nullable < Int32 >> source A sequence of nullable Int32 values to calculate the sum of. Returns Type Description IObservable < Nullable < Int32 >> An observable sequence containing a single element representing the sum of the values in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Int64>>) Computes the sum of a sequence of nullable Int64 values. Declaration public IObservable<long?> Process(IObservable<long?> source) Parameters Type Name Description IObservable < Nullable < Int64 >> source A sequence of nullable Int64 values to calculate the sum of. Returns Type Description IObservable < Nullable < Int64 >> An observable sequence containing a single element representing the sum of the values in the source sequence. | Improve this Doc View Source Process(IObservable<Nullable<Single>>) Computes the sum of a sequence of nullable Single values. Declaration public IObservable<float?> Process(IObservable<float?> source) Parameters Type Name Description IObservable < Nullable < Single >> source A sequence of nullable Single values to calculate the sum of. Returns Type Description IObservable < Nullable < Single >> An observable sequence containing a single element representing the sum of the values in the source sequence. | Improve this Doc View Source Process(IObservable<Single>) Computes the sum of a sequence of Single values. Declaration public IObservable<float> Process(IObservable<float> source) Parameters Type Name Description IObservable < Single > source A sequence of Single values to calculate the sum of. Returns Type Description IObservable < Single > An observable sequence containing a single element representing the sum of the values in the source sequence."
  },
  "api/Bonsai.Reactive.Switch.html": {
    "href": "api/Bonsai.Reactive.Switch.html",
    "title": "Class Switch",
    "keywords": "Class Switch Represents an operator that transforms a sequence of observable sequences into a sequence of values produced only from the most recent observable sequence. Switch is a higher-order operator, so it takes as input a sequence of observable sequences. At any moment Switch is subscribed exclusively to the latest source sequence. As soon as a new sequence is emitted by the outer observable, it cancels subscription to the previous sequence and subscribes to the new sequence. The resulting sequence will terminate successfully when the outer sequence has terminated successfully, and the currently active sequence (if any) also terminates successfully. It will terminate exceptionally if any of the sequences produces an error. Switch is useful to model interruptible states, for example when transitioning between different modes of a state-machine, or switching between different video channels on demand. Inheritance Object Switch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Switch Methods | Improve this Doc View Source Process<TSource>(IObservable<IObservable<TSource>>) Transforms a sequence of observable sequences into a sequence of values produced only from the most recent observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<IObservable<TSource>> source) Parameters Type Name Description IObservable < IObservable <TSource>> source A sequence of observable sequences. Returns Type Description IObservable <TSource> An observable sequence that at any point produces values only from the most recent observable sequence that has been received. Type Parameters Name Description TSource The type of the elements in the source sequences."
  },
  "api/Bonsai.Reactive.Synchronize.html": {
    "href": "api/Bonsai.Reactive.Synchronize.html",
    "title": "Class Synchronize",
    "keywords": "Class Synchronize Represents an operator that synchronizes the observable sequence to ensure that observer notifications cannot be delivered concurrently. Caution This operator is only used to patch problems in custom implementations of observable sequences that breach the observable contract by emitting notifications concurrently with previous notifications. In almost all situations you should never use this operator. Inheritance Object Combinator Synchronize Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Synchronize : Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Synchronizes the observable sequence to ensure that observer notifications cannot be delivered concurrently. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence to synchronize. Returns Type Description IObservable <TSource> The source sequence whose outgoing calls to observers are synchronized. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Take.html": {
    "href": "api/Bonsai.Reactive.Take.html",
    "title": "Class Take",
    "keywords": "Class Take Represents an operator that returns the specified number of contiguous elements from the start of an observable sequence. The Take operator modifies the source sequence to emit only the specified maximum number of values from the start of the sequence. If the maximum number of values is reached, Take will terminate immediately and ignore the remainder of the sequence. Take is commonly used to convert an infinite sequence into a finite sequence, for example to take the first key press out of an infinite sequence of keyboard key presses. Take only specifies a maximum upper bound on the number of elements. If the source sequence terminates before that maximum number of values is reached, the behavior of the sequence will not be modified. Inheritance Object Combinator Take Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Take : Combinator Properties | Improve this Doc View Source Count Gets or sets the number of elements to take. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Returns the specified number of contiguous elements from the start of an observable sequence. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to take elements from. Returns Type Description IObservable <TSource> An observable sequence that contains the specified number of elements from the start of the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.TakeLast.html": {
    "href": "api/Bonsai.Reactive.TakeLast.html",
    "title": "Class TakeLast",
    "keywords": "Class TakeLast Represents an operator that returns a specified number of contiguous elements from the end of an observable sequence. The TakeLast operator modifies the source sequence to emit only a specified maximum number of values from the end of the sequence. Since TakeLast does not know which elements are the last before the original sequence terminates, it will not emit any value until the completion event is emitted, but will instead keep in memory the specified number of \"latest\" values. At the time when the source sequence terminates, TakeLast will immediately emit all buffered values up to the specified maximum number of elements and then terminate. Because of this buffering behavior, TakeLast will always modify the behavior of the original sequence, regardless of how many values it contains. Inheritance Object Combinator TakeLast Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class TakeLast : Combinator Properties | Improve this Doc View Source Count Gets or sets the number of elements to take from the end of the sequence. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Returns a specified number of contiguous elements from the end of an observable sequence. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence to take elements from. Returns Type Description IObservable <TSource> An observable sequence containing the specified number of elements from the end of the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.TakeUntil.html": {
    "href": "api/Bonsai.Reactive.TakeUntil.html",
    "title": "Class TakeUntil",
    "keywords": "Class TakeUntil Represents an operator that returns elements from the first sequence only until the second sequence emits a notification. TakeUntil modifies the source sequence so that values are emitted only until the second sequence produces a value. At that time, TakeUntil will terminate immediately and ignore the remainder of the sequence. TakeUntil is often used to create a dynamic stop condition for an infinite sequence, e.g. grab frames from a video camera until a key is pressed. If the source sequence terminates before the second sequence produces a value, TakeUntil will also terminate and cancel the subscription to the second sequence. Inheritance Object TakeUntil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class TakeUntil Methods | Improve this Doc View Source Process<TSource, TOther>(IObservable<TSource>, IObservable<TOther>) Returns elements from an observable sequence only until the second sequence emits a notification. Declaration public IObservable<TSource> Process<TSource, TOther>(IObservable<TSource> source, IObservable<TOther> other) Parameters Type Name Description IObservable <TSource> source The sequence to take elements from. IObservable <TOther> other The observable sequence indicating the time at which to stop taking elements from the source sequence. Returns Type Description IObservable <TSource> An observable sequence containing the elements of the source sequence emitted until the other sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. TOther The type of the elements in the other sequence."
  },
  "api/Bonsai.Reactive.TakeWhile.html": {
    "href": "api/Bonsai.Reactive.TakeWhile.html",
    "title": "Class TakeWhile",
    "keywords": "Class TakeWhile Represents an expression builder which returns elements from an observable sequence as long as the condition specified by the encapsulated workflow is true. The nested workflow specifying the condition must return a sequence of type Boolean . This nested sequence may be synchronous or asynchronous with respect to notifications from the source sequence. After each element is emitted by the source sequence, the latest value from the nested sequence is checked. While the value is true , TakeWhile will continue to emit all elements from the source sequence. When the value changes to false , TakeWhile will terminate successfully. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder Condition TakeWhile Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members Condition.Build(IEnumerable<Expression>) SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Combinator)] public class TakeWhile : Condition, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source TakeWhile() Initializes a new instance of the TakeWhile class. Declaration public TakeWhile() | Improve this Doc View Source TakeWhile(ExpressionBuilderGraph) Initializes a new instance of the TakeWhile class with the specified expression builder workflow. Declaration public TakeWhile(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.TaskPoolScheduler.html": {
    "href": "api/Bonsai.Reactive.TaskPoolScheduler.html",
    "title": "Class TaskPoolScheduler",
    "keywords": "Class TaskPoolScheduler Represents an operator that returns an object that schedules units of work on the Task Parallel Library (TPL) task pool. Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions. Inheritance Object Source < TaskPoolScheduler > TaskPoolScheduler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public sealed class TaskPoolScheduler : Source<TaskPoolScheduler> Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns the default TaskPoolScheduler object. Declaration public override IObservable<TaskPoolScheduler> Generate() Returns Type Description IObservable < TaskPoolScheduler > A sequence containing the default TaskPoolScheduler object. Overrides Bonsai.Source<System.Reactive.Concurrency.TaskPoolScheduler>.Generate()"
  },
  "api/Bonsai.Reactive.ThenBy.html": {
    "href": "api/Bonsai.Reactive.ThenBy.html",
    "title": "Class ThenBy",
    "keywords": "Class ThenBy Represents an operator that subsequently sorts the elements of all the ordered collections in an observable sequence in ascending order according to the specified key. ThenBy operates on sequences returned by any of the OrderBy , OrderByDescending , ThenBy , or ThenByDescending operators. For each ordered collection emitted by the source sequence, the result sequence will emit a new ordered collection where elements in the collection are subsequently sorted in ascending order of the keys specified in the KeySelector property. Warning The ordered collections returned in the result sequence are lazy. The ordering is not really evaluated until the collection is enumerated by a downstream operator such as Merge . Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder ThenBy Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class ThenBy : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source KeySelector Gets or sets a value specifying the inner properties used as a key for further sorting the elements in the ordered collection. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.ThenByDescending.html": {
    "href": "api/Bonsai.Reactive.ThenByDescending.html",
    "title": "Class ThenByDescending",
    "keywords": "Class ThenByDescending Represents an operator that subsequently sorts the elements of all the ordered collections in an observable sequence in descending order according to the specified key. ThenByDescending operates on sequences returned by any of the OrderBy , OrderByDescending , ThenBy , or ThenByDescending operators. For each ordered collection emitted by the source sequence, the result sequence will emit a new ordered collection where elements in the collection are subsequently sorted in descending order of the keys specified in the KeySelector property. Warning The ordered collections returned in the result sequence are lazy. The ordering is not really evaluated until the collection is enumerated by a downstream operator such as Merge . Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder ThenByDescending Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class ThenByDescending : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source KeySelector Gets or sets a value specifying the inner properties used as a key for further sorting the elements in the ordered collection. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.ThreadPoolScheduler.html": {
    "href": "api/Bonsai.Reactive.ThreadPoolScheduler.html",
    "title": "Class ThreadPoolScheduler",
    "keywords": "Class ThreadPoolScheduler Represents an operator that returns an object that schedules units of work on the CLR thread pool. Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions. Inheritance Object Source < ThreadPoolScheduler > ThreadPoolScheduler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public sealed class ThreadPoolScheduler : Source<ThreadPoolScheduler> Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns the singleton ThreadPoolScheduler object. Declaration public override IObservable<ThreadPoolScheduler> Generate() Returns Type Description IObservable < ThreadPoolScheduler > A sequence containing the singleton ThreadPoolScheduler object. Overrides Bonsai.Source<System.Reactive.Concurrency.ThreadPoolScheduler>.Generate()"
  },
  "api/Bonsai.Reactive.Throttle.html": {
    "href": "api/Bonsai.Reactive.Throttle.html",
    "title": "Class Throttle",
    "keywords": "Class Throttle Represents an operator that ignores elements from an observable sequence which are followed by another element before the specified duration elapses. The Throttle operator provides a mechanism to control backpressure in reactive streams. Throttle emits an element from the source sequence only if that element is followed by a period of silence longer than DueTime . If new elements are received during this period, the previous element is dropped and the silent period timer is reset. Warning Any elements emitted by Throttle will necessarily be delayed by DueTime , since the only way to test that an element is followed by a period of silence is to wait out the period. Inheritance Object Combinator Throttle Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Throttle : Combinator Properties | Improve this Doc View Source DueTime Gets or sets the time interval that must elapse before a value is propagated. Declaration public TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source DueTimeXml Gets or sets an XML representation of the due time for serialization. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Ignores elements from an observable sequence which are followed by another element before the specified duration elapses. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to throttle. Returns Type Description IObservable <TSource> The throttled sequence. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.TimeInterval.html": {
    "href": "api/Bonsai.Reactive.TimeInterval.html",
    "title": "Class TimeInterval",
    "keywords": "Class TimeInterval Represents an operator that records the time interval between consecutive values produced by an observable sequence. For each element in the source sequence, TimeInterval measures the time elapsed between the arrival of that element and the previous element. Time zero is the start of the sequence (i.e. the moment of subscription). Inheritance Object TimeInterval Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class TimeInterval Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Records the time interval between consecutive values produced by an observable sequence. Declaration public IObservable<TimeInterval<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to record time intervals for. Returns Type Description IObservable < TimeInterval <TSource>> An observable sequence with time interval information for each element. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.Timeout.html": {
    "href": "api/Bonsai.Reactive.Timeout.html",
    "title": "Class Timeout",
    "keywords": "Class Timeout Represents an operator that raises an error if the next element is not received within the specified timeout duration from the previous element. Time zero is the start of the sequence (i.e. the moment of subscription). If a new notification arrives before a timeout is reached, the clock is reset. Inheritance Object Combinator Timeout Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Timeout : Combinator Properties | Improve this Doc View Source DueTime Gets or sets the maximum duration between values before a timeout occurs. Declaration public TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source DueTimeXml Gets or sets an XML representation of the timeout for serialization. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Applies a timeout policy for each element in the observable sequence. If the next element is not received within the specified timeout duration from the previous element, a TimeoutException is propagated to the observer. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to perform a timeout for. Returns Type Description IObservable <TSource> A sequence which is identical to the source sequence, but where a TimeoutException is raised if more than the specified timout duration lapses between consecutive elements. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.Timer.html": {
    "href": "api/Bonsai.Reactive.Timer.html",
    "title": "Class Timer",
    "keywords": "Class Timer Represents an operator that generates an observable sequence that periodically produces a value after the specified initial relative due time has elapsed. Timer can either generate a single value, if Period is not specified, or an infinite sequence of values emitted periodically. The first value of Timer is emitted after the specified DueTime . Warning The value of the DueTime and Period properties cannot be modified after the observable sequence has initialized. If dynamic configuration is necessary, make sure that all properties are immediately configured using property mapping operators. Inheritance Object Source < Int64 > Timer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Timer : Source<long> Properties | Improve this Doc View Source DueTime Gets or sets the relative time at which to produce the first value. If this value is less than or equal to Zero , the timer will fire as soon as possible. Declaration public TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source DueTimeXml Gets or sets an XML representation of the due time for serialization. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String | Improve this Doc View Source Period Gets or sets the period to produce subsequent values. If this value is equal to Zero the timer will recur as fast as possible. Declaration public TimeSpan Period { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source PeriodXml Gets or sets an XML representation of the period for serialization. Declaration [Browsable(false)] public string PeriodXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence that periodically produces a value after the specified initial relative due time has elapsed. Declaration public override IObservable<long> Generate() Returns Type Description IObservable < Int64 > An observable sequence of integer values counting how many times the timer has fired. Overrides Bonsai.Source<System.Int64>.Generate()"
  },
  "api/Bonsai.Reactive.Timestamp.html": {
    "href": "api/Bonsai.Reactive.Timestamp.html",
    "title": "Class Timestamp",
    "keywords": "Class Timestamp Represents an operator that records the timestamp for each element produced by an observable sequence. Timestamps are specified relative to Coordinated Universal Time (UTC) using DateTimeOffset values, and are recorded as soon as element notifications are received from the source sequence. Warning By default, timestamps are logged using the highest-resolution performance counter available in the system. The clock is synchronized with system time for events ocurring within the same process, including across different threads. However, timestamps are not guaranteed to be synchronized across different processes. Caution Time recorded using the Timestamp operator does not take into account any hardware or communication latency associated with data acquisition processes. If your application requires high-precision timing of data acquisition events, consider logging any available hardware timestamps included in the data, if available. Inheritance Object Timestamp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Timestamp Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Records the timestamp for each element produced by an observable sequence. Declaration public IObservable<Timestamped<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to timestamp elements for. Returns Type Description IObservable < Timestamped <TSource>> An observable sequence with timestamp information on elements. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.ToArray.html": {
    "href": "api/Bonsai.Reactive.ToArray.html",
    "title": "Class ToArray",
    "keywords": "Class ToArray Represents an operator that creates an array containing every element in the observable sequence. ToArray emits a single array of the same type as the type of the elements in the source sequence. The array is emitted when the source sequence completes successfully. Warning If the source sequence is infinite (i.e. does not terminate), this operator will never emit the collection, and will keep accumulating all elements from the source sequence indefinitely, with likely impacts on available memory. Inheritance Object ToArray Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class ToArray Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Creates an array containing every element in the observable sequence. Declaration public IObservable<TSource[]> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to get an array of elements for. Returns Type Description IObservable <TSource[]> An observable sequence containing a single element with the array of all elements in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.ToDictionary.html": {
    "href": "api/Bonsai.Reactive.ToDictionary.html",
    "title": "Class ToDictionary",
    "keywords": "Class ToDictionary Represents an operator that creates a dictionary from an observable sequence according to the specified key and element selector. ToDictionary collects all the values from the source sequence and creates a dictionary mapping keys to elements using the specified KeySelector and ElementSelector properties. The dictionary is emitted when the source sequence completes successfully, and will have key and element types matching the selected members. Warning If the source sequence emits a value with a duplicate key, an error will be raised and the sequence will terminate exceptionally. Warning If the source sequence is infinite (i.e. does not terminate), this operator will never emit the collection, and will keep accumulating all elements from the source sequence indefinitely, with likely impacts on available memory. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder ToDictionary Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class ToDictionary : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source ElementSelector Gets or sets a value specifying the inner properties used as elements in the dictionary. Declaration public string ElementSelector { get; set; } Property Value Type Description String | Improve this Doc View Source KeySelector Gets or sets a value specifying the inner properties used as keys in the dictionary. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.ToList.html": {
    "href": "api/Bonsai.Reactive.ToList.html",
    "title": "Class ToList",
    "keywords": "Class ToList Represents an operator that creates a list containing every element in the observable sequence. ToList emits a single list of the same type as the type of the elements in the source sequence. The list is emitted when the source sequence completes successfully. Warning If the source sequence is infinite (i.e. does not terminate), this operator will never emit the collection, and will keep accumulating all elements from the source sequence indefinitely, with likely impacts on available memory. Inheritance Object ToList Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class ToList Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Creates a list containing every element in the observable sequence. Declaration public IObservable<IList<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to get a list of elements for. Returns Type Description IObservable < IList <TSource>> An observable sequence containing a single element with the list of all elements in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Reactive.ToLookup.html": {
    "href": "api/Bonsai.Reactive.ToLookup.html",
    "title": "Class ToLookup",
    "keywords": "Class ToLookup Represents an operator that creates a lookup from an observable sequence according to the specified key and element selector. ToLookup collects all the values from the source sequence and creates a mapping from keys to a set of elements using the specified KeySelector and ElementSelector properties. The lookup is emitted when the source sequence completes successfully, and will have key and element types matching the selected members. Note A lookup allows multiple values to be grouped under the same key. Warning If the source sequence is infinite (i.e. does not terminate), this operator will never emit the collection, and will keep accumulating all elements from the source sequence indefinitely, with likely impacts on available memory. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder ToLookup Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class ToLookup : SingleArgumentExpressionBuilder, IExpressionBuilder Properties | Improve this Doc View Source ElementSelector Gets or sets a value specifying the inner properties used as elements in the lookup. Declaration public string ElementSelector { get; set; } Property Value Type Description String | Improve this Doc View Source KeySelector Gets or sets a value specifying the inner properties used as keys in the lookup. Declaration public string KeySelector { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Visualizer.html": {
    "href": "api/Bonsai.Reactive.Visualizer.html",
    "title": "Class Visualizer",
    "keywords": "Class Visualizer Represents an expression builder that uses the encapsulated workflow as a visualizer to an observable sequence without modifying its elements. The Visualizer operator is a Sink which uses the nested workflow to specify a reactive visualizer function over the elements of the source sequence. Visualizer emits all values from the source sequence directly without modification, and the nested sequence is subscribed to purely for its side-effects. Note All notifications emitted by the inner WorkflowOutput node are ignored. However, the type visualizer assigned to the nested workflow output will be considered as the default visualizer of the outer node. Inheritance Object ExpressionBuilder WorkflowExpressionBuilder SingleArgumentWorkflowExpressionBuilder Sink Visualizer Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members Sink.Build(IEnumerable<Expression>) SingleArgumentWorkflowExpressionBuilder.ArgumentRange WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public class Visualizer : Sink, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source Visualizer() Initializes a new instance of the Visualizer class. Declaration public Visualizer() | Improve this Doc View Source Visualizer(ExpressionBuilderGraph) Initializes a new instance of the Visualizer class with the specified expression builder workflow. Declaration public Visualizer(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.Window.html": {
    "href": "api/Bonsai.Reactive.Window.html",
    "title": "Class Window",
    "keywords": "Class Window Represents an expression builder that projects the input sequence into zero or more windows with boundaries defined by the encapsulated workflow. The Window operator groups the notifications of the source sequence into new observable sequences. The opening of each window is triggered by notifications emitted by the second sequence passed to the Window node. The nested workflow operation is launched for every new emitted window, and closes that window when a value is emitted. If a new window is created before the previous window is closed, then window will overlap, and any elements emitted during this period will be included in both windows. If at any moment there is no open window, elements emitted from the source sequence will be dropped. Note You can manipulate and schedule each of the windows downstream using other higher-order operators such as Merge , Concat or Switch . Inheritance Object ExpressionBuilder WorkflowExpressionBuilder Window Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Inherited Members WorkflowExpressionBuilder.Name WorkflowExpressionBuilder.Description WorkflowExpressionBuilder.INamedElement.Name WorkflowExpressionBuilder.Workflow WorkflowExpressionBuilder.WorkflowDescriptor WorkflowExpressionBuilder.BuildWorkflow(IEnumerable<Expression>, Expression, Func<Expression, Expression>) ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class Window : WorkflowExpressionBuilder, IWorkflowExpressionBuilder, INamedElement, IPropertyMappingBuilder, IExpressionBuilder Constructors | Improve this Doc View Source Window() Initializes a new instance of the Window class. Declaration public Window() | Improve this Doc View Source Window(ExpressionBuilderGraph) Initializes a new instance of the Window class with the specified expression builder workflow. Declaration public Window(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The expression builder workflow instance that will be used by this builder to generate the output expression tree. Properties | Improve this Doc View Source ArgumentRange Gets the range of input arguments that this expression builder accepts. Declaration public override Range<int> ArgumentRange { get; } Property Value Type Description Range < Int32 > Overrides WorkflowExpressionBuilder.ArgumentRange Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Generates an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes that represents the input arguments. Returns Type Description Expression An Expression tree node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IWorkflowExpressionBuilder INamedElement IPropertyMappingBuilder IExpressionBuilder Extension Methods ExpressionBuilderGraphExtensions.Build(ExpressionBuilder, Expression[]) ExpressionBuilderGraphExtensions.IsBuildDependency(ExpressionBuilder) ExpressionBuilderGraphExtensions.AsInspectBuilder(ExpressionBuilder)"
  },
  "api/Bonsai.Reactive.WindowCount.html": {
    "href": "api/Bonsai.Reactive.WindowCount.html",
    "title": "Class WindowCount",
    "keywords": "Class WindowCount Represents an operator that projects each element of an observable sequence into zero or more windows based on element count information. WindowCount groups the notifications of the source sequence into new observable sequences containing the number of elements specified in the Count property. The overlap between the elements in each window can be controlled using the Skip property. If no skip value is provided, the windows will be strictly non-overlapping, with a new window beginning when the previous window ends. If the skip value is less than the specified number of elements, windows will be overlapping, with a new window created every Skip notifications. Finally, if the skip value is greater than the specified number of elements, there will be a gap between each window where elements from the source sequence will be dropped. Note You can manipulate and schedule each of the windows downstream using other higher-order operators such as Merge , Concat or Switch . Inheritance Object WindowCombinator WindowCount Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class WindowCount : WindowCombinator Properties | Improve this Doc View Source Count Gets or sets the maximum number of elements in each window. Declaration public int Count { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Skip Gets or sets the number of elements to skip between the creation of consecutive windows. Declaration public int? Skip { get; set; } Property Value Type Description Nullable < Int32 > Remarks If no value is specified, the operator will generate consecutive non-overlapping windows. Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Projects each element of an observable sequence into zero or more windows based on element count information. Declaration public override IObservable<IObservable<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to produce windows over. Returns Type Description IObservable < IObservable <TSource>> An observable sequence of windows. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.WindowCombinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.WindowTime.html": {
    "href": "api/Bonsai.Reactive.WindowTime.html",
    "title": "Class WindowTime",
    "keywords": "Class WindowTime Represents an operator that projects each element of an observable sequence into zero or more windows based on timing information. The WindowTime operator groups the notifications of the source sequence into new observable sequences, where each window contains the elements emitted during the specified TimeSpan . The overlap between the elements in each window can be controlled using the TimeShift property. If no TimeShift is provided, the windows will be strictly non-overlapping, with a new window beginning when the previous window ends. If TimeShift is smaller than TimeSpan , windows will be overlapping, with a new buffer created every TimeShift interval. Finally, if TimeShift is larger than TimeSpan , there will be a time gap between each window where elements from the source sequence may be dropped. Note You can manipulate and schedule each of the windows downstream using other higher-order operators such as Merge , Concat or Switch . Inheritance Object WindowCombinator WindowTime Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax public class WindowTime : WindowCombinator Properties | Improve this Doc View Source TimeShift Gets or sets the interval between creation of consecutive windows. Declaration public TimeSpan? TimeShift { get; set; } Property Value Type Description Nullable < TimeSpan > Remarks If no value is specified, the operator will generate consecutive non-overlapping windows. | Improve this Doc View Source TimeShiftXml Gets or sets an XML representation of the window time shift for serialization. Declaration [Browsable(false)] public string TimeShiftXml { get; set; } Property Value Type Description String | Improve this Doc View Source TimeSpan Gets or sets the length of each window. Declaration public TimeSpan TimeSpan { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source TimeSpanXml Gets or sets an XML representation of the window time span for serialization. Declaration [Browsable(false)] public string TimeSpanXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Projects each element of an observable sequence into zero or more windows based on timing information. Declaration public override IObservable<IObservable<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to produce windows over. Returns Type Description IObservable < IObservable <TSource>> An observable sequence of windows. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.WindowCombinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Reactive.WindowTrigger.html": {
    "href": "api/Bonsai.Reactive.WindowTrigger.html",
    "title": "Class WindowTrigger",
    "keywords": "Class WindowTrigger Represents an operator that projects each element of an observable sequence into zero or more windows created when the second sequence emits a notification. WindowTrigger groups the notifications of the source sequence into new observable sequences, where the opening of each window is triggered by the notifications of the second sequence. The rules for closing each window can be specified using the Count and TimeSpan properties. If neither count nor time span are specified, windows will be strictly non-overlapping, with the previous window being closed when a new window is created. In this case, and only this case, the first window is also created immediately at the start of the sequence. If the Count property or the TimeSpan property is specified, then a new window is created when the second sequence emits a notification, and it is automatically closed after either the specified number of elements is collected or the specified time span elapses. If a new window is created before the previous window is closed, then window will overlap, and any elements emitted during this period will be included in both windows. If at any moment there is no open window, elements emitted from the source sequence will be dropped. Note You can manipulate and schedule each of the windows downstream using other higher-order operators such as Merge , Concat or Switch . Inheritance Object WindowTrigger Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class WindowTrigger Properties | Improve this Doc View Source Count Gets or sets the maximum number of elements in each window. Declaration public int? Count { get; set; } Property Value Type Description Nullable < Int32 > Remarks If no value is specified, the window will have its length specified by either a maximum time span, or the boundary indicated by a notification from the second sequence. | Improve this Doc View Source TimeSpan Gets or sets the time length of each window. Declaration public TimeSpan? TimeSpan { get; set; } Property Value Type Description Nullable < TimeSpan > Remarks If no value is specified, the window will have its length specified by either a maximum number of elements, or the boundary indicated by a notification from the second sequence. | Improve this Doc View Source TimeSpanXml Gets or sets an XML representation of the window time span for serialization. Declaration [Browsable(false)] public string TimeSpanXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource, TWindowOpening>(IObservable<TSource>, IObservable<TWindowOpening>) Projects each element of an observable sequence into zero or more windows created when a second sequence emits a notification. Declaration public IObservable<IObservable<TSource>> Process<TSource, TWindowOpening>(IObservable<TSource> source, IObservable<TWindowOpening> windowOpenings) Parameters Type Name Description IObservable <TSource> source The source sequence to produce windows over. IObservable <TWindowOpening> windowOpenings The sequence of window openings. If no maximum length is specified, the current window is closed and a new window is opened upon receiving a notification from this sequence. Returns Type Description IObservable < IObservable <TSource>> An observable sequence of windows. Type Parameters Name Description TSource The type of the elements in the source sequence. TWindowOpening The type of the elements in the windowOpenings sequence."
  },
  "api/Bonsai.Reactive.WithLatestFrom.html": {
    "href": "api/Bonsai.Reactive.WithLatestFrom.html",
    "title": "Class WithLatestFrom",
    "keywords": "Class WithLatestFrom Represents an operator that combines the latest values from the source sequences only when the first sequence produces an element. The behavior of WithLatestFrom is very similar to CombineLatest , but while CombineLatest emits a combined value whenever any of the source sequences emits a value, WithLatestFrom only emits the combination when the first sequence emits a value (as long as the second sequence has emitted at least one value). Inheritance Object WithLatestFrom Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class WithLatestFrom Methods | Improve this Doc View Source Process<TSource, TOther>(IObservable<TSource>, IObservable<TOther>) Merges the specified sources into one observable sequence by emitting a pair with the latest source elements only when the first observable sequence produces an element. Declaration public IObservable<Tuple<TSource, TOther>> Process<TSource, TOther>(IObservable<TSource> source, IObservable<TOther> other) Parameters Type Name Description IObservable <TSource> source The first observable sequence. IObservable <TOther> other The other observable sequence. Returns Type Description IObservable < Tuple <TSource, TOther>> An observable sequence containing the result of combining the latest elements of the sources into pairs only when the first sequence produces an element. Type Parameters Name Description TSource The type of the elements in the source sequence. TOther The type of the elements in the other sequence."
  },
  "api/Bonsai.Reactive.Zip.html": {
    "href": "api/Bonsai.Reactive.Zip.html",
    "title": "Class Zip",
    "keywords": "Class Zip Represents an operator that combines values from the source sequences whenever all of the sequences have produced an element. Zip combines the items from each sequence in strict sequential order. It will combine the first item emitted by sequence #1 with the first item emitted by sequence #2; then the second item emitted by sequence #1 with the second item emitted by sequence #2, and so forth, regardless of the timing of arrival of the values. It will only emit as many values as the number of values in the shortest sequence. Zip can be useful to combine separate processing branches from a single source into a composite result, or when pairing events which are logically related even though they might arrive far apart in time, e.g. request/response pairs from a server, or pairing camera frames with frame trigger event onsets. Warning Zip will continuously store unpaired values from all source sequences, with no limit to the buffer size. This means that if one source sequence produces a much larger number of values than the other sequences, memory usage will continue to grow unbounded. In general, Zip should be used only when there is a known fixed relationship between number of elements in each of the source sequences. Higher-order operator Zip also works as a higher-order operator, so it can take as input a sequence of observable sequences. In this case, it will subscribe to each of the source sequences and start collecting all emitted values from each sequence. As soon as the outer sequence terminates, it will start reactively combining values in sequential order, just as in the case of using Zip with a fixed number of inputs. The higher-order variant can be useful occasionally, for example when combining frames from an unknown number of videos in a folder, but should be used with care and awareness that reactive pairing only starts after the outer sequence terminates, which means its use should be avoided with infinite sequences. Inheritance Object Zip Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Reactive Assembly : Bonsai.Core.dll Syntax [Combinator] public class Zip Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>, IObservable<TSource>, IObservable<TSource>[]) Merges the specified sources into one observable sequence by emitting a list with the elements of the observable sequences whenever all of the sequences have produced a new element. Declaration public IObservable<IList<TSource>> Process<TSource>(IObservable<TSource> first, IObservable<TSource> second, params IObservable<TSource>[] remainder) Parameters Type Name Description IObservable <TSource> first The first observable sequence. IObservable <TSource> second The second observable sequence. IObservable <TSource>[] remainder The remaining observable sequences to combine. Returns Type Description IObservable < IList <TSource>> An observable sequence containing the result of combining the elements of the sources into lists. Type Parameters Name Description TSource The type of the elements in the source sequences. | Improve this Doc View Source Process<TSource>(IObservable<IObservable<TSource>>) Merges elements from all inner observable sequences into one observable sequence by emitting a list with the elements of each sequence whenever all of the sequences have produced a new element. Declaration public IObservable<IList<TSource>> Process<TSource>(IObservable<IObservable<TSource>> sources) Parameters Type Name Description IObservable < IObservable <TSource>> sources The observable sequence of inner observable sequences. Returns Type Description IObservable < IList <TSource>> An observable sequence containing the result of combining the elements of the inner sequences into lists. Type Parameters Name Description TSource The type of the elements in the source sequences. | Improve this Doc View Source Process<TSource1, TSource2>(IObservable<TSource1>, IObservable<TSource2>) Merges the specified sources into one observable sequence by emitting a pair with the elements of the observable sequences whenever all of the sequences have produced a new element. Declaration public IObservable<Tuple<TSource1, TSource2>> Process<TSource1, TSource2>(IObservable<TSource1> source1, IObservable<TSource2> source2) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2>> An observable sequence containing the result of combining the elements of the sources into pairs. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. | Improve this Doc View Source Process<TSource1, TSource2, TSource3>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>) Merges the specified sources into one observable sequence by emitting a triple with the elements of the observable sequences whenever all of the sequences have produced a new element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3>> Process<TSource1, TSource2, TSource3>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3>> An observable sequence containing the result of combining the elements of the sources into triples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. | Improve this Doc View Source Process<TSource1, TSource2, TSource3, TSource4>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>) Merges the specified sources into one observable sequence by emitting a quadruple with the elements of the observable sequences whenever all of the sequences have produced a new element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4>> Process<TSource1, TSource2, TSource3, TSource4>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4>> An observable sequence containing the result of combining the elements of the sources into quadruples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. | Improve this Doc View Source Process<TSource1, TSource2, TSource3, TSource4, TSource5>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>, IObservable<TSource5>) Merges the specified sources into one observable sequence by emitting a quintuple with the elements of the observable sequences whenever all of the sequences have produced a new element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4, TSource5>> Process<TSource1, TSource2, TSource3, TSource4, TSource5>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4, IObservable<TSource5> source5) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. IObservable <TSource5> source5 The fifth observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4, TSource5>> An observable sequence containing the result of combining the elements of the sources into quintuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. TSource5 The type of the elements in the fifth source sequence. | Improve this Doc View Source Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>, IObservable<TSource5>, IObservable<TSource6>) Merges the specified sources into one observable sequence by emitting a sextuple with the elements of the observable sequences whenever all of the sequences have produced a new element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>> Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4, IObservable<TSource5> source5, IObservable<TSource6> source6) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. IObservable <TSource5> source5 The fifth observable source. IObservable <TSource6> source6 The sixth observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>> An observable sequence containing the result of combining the elements of the sources into sextuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. TSource5 The type of the elements in the fifth source sequence. TSource6 The type of the elements in the sixth source sequence. | Improve this Doc View Source Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>(IObservable<TSource1>, IObservable<TSource2>, IObservable<TSource3>, IObservable<TSource4>, IObservable<TSource5>, IObservable<TSource6>, IObservable<TSource7>) Merges the specified sources into one observable sequence by emitting a septuple with the elements of the observable sequences whenever all of the sequences have produced a new element. Declaration public IObservable<Tuple<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>> Process<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>(IObservable<TSource1> source1, IObservable<TSource2> source2, IObservable<TSource3> source3, IObservable<TSource4> source4, IObservable<TSource5> source5, IObservable<TSource6> source6, IObservable<TSource7> source7) Parameters Type Name Description IObservable <TSource1> source1 The first observable source. IObservable <TSource2> source2 The second observable source. IObservable <TSource3> source3 The third observable source. IObservable <TSource4> source4 The fourth observable source. IObservable <TSource5> source5 The fifth observable source. IObservable <TSource6> source6 The sixth observable source. IObservable <TSource7> source7 The seventh observable source. Returns Type Description IObservable < Tuple <TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>> An observable sequence containing the result of combining the elements of the sources into septuples. Type Parameters Name Description TSource1 The type of the elements in the first source sequence. TSource2 The type of the elements in the second source sequence. TSource3 The type of the elements in the third source sequence. TSource4 The type of the elements in the fourth source sequence. TSource5 The type of the elements in the fifth source sequence. TSource6 The type of the elements in the sixth source sequence. TSource7 The type of the elements in the seventh source sequence."
  },
  "api/Bonsai.ResetCombinatorAttribute.html": {
    "href": "api/Bonsai.ResetCombinatorAttribute.html",
    "title": "Class ResetCombinatorAttribute",
    "keywords": "Class ResetCombinatorAttribute Instructs the build process to reset non-serializable public properties marked with XmlIgnoreAttribute . Inheritance Object Attribute ResetCombinatorAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class ResetCombinatorAttribute : Attribute, _Attribute Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.Resources.Design.CollectionEditor.html": {
    "href": "api/Bonsai.Resources.Design.CollectionEditor.html",
    "title": "Class CollectionEditor",
    "keywords": "Class CollectionEditor Provides a user interface editor that displays a dialog for editing a collection of objects. Inheritance Object UITypeEditor CollectionEditor ResourceCollectionEditor BufferBindingConfigurationCollectionEditor FramebufferAttachmentConfigurationCollectionEditor StateConfigurationCollectionEditor UniformConfigurationCollectionEditor Inherited Members UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources.Design Assembly : Bonsai.System.Design.dll Syntax public class CollectionEditor : UITypeEditor Constructors | Improve this Doc View Source CollectionEditor(Type) Initializes a new instance of the CollectionEditor class using the specified collection type. Declaration public CollectionEditor(Type type) Parameters Type Name Description Type type The type of the collection for this editor to edit. Properties | Improve this Doc View Source CollectionItemType Gets the type of the items in the collection. Declaration protected Type CollectionItemType { get; } Property Value Type Description Type | Improve this Doc View Source CollectionType Gets the type of the collection. Declaration protected Type CollectionType { get; } Property Value Type Description Type | Improve this Doc View Source NewItemTypes Gets the available types of items that can be created for this collection. Declaration protected Type[] NewItemTypes { get; } Property Value Type Description Type [] Methods | Improve this Doc View Source CreateCollectionItemType() Gets the type of the items in this collection. Declaration protected virtual Type CreateCollectionItemType() Returns Type Description Type The type of of the items in this collection, or Object if no Item property can be located on the collection. | Improve this Doc View Source CreateEditorDialog() Creates a new dialog to display and edit the current collection. Declaration protected virtual CollectionEditorDialog CreateEditorDialog() Returns Type Description CollectionEditorDialog A CollectionEditorDialog to provide as a user interface for editing the collection. | Improve this Doc View Source CreateNewItemTypes() Gets the available types of items that can be created for this collection. Declaration protected virtual Type[] CreateNewItemTypes() Returns Type Description Type [] An array of types that this collection can contain. | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetDisplayText(Object) Retrieves the display text for the specified collection item. Declaration protected virtual string GetDisplayText(object value) Parameters Type Name Description Object value The collection item for which to retrieve display text. Returns Type Description String The display text for the specified item value. | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext) | Improve this Doc View Source SetItems(Object, IEnumerable) Sets the specified sequence as the items of the collection. Declaration protected virtual void SetItems(object editValue, IEnumerable items) Parameters Type Name Description Object editValue The collection to edit. IEnumerable items A sequence of objects to set as collection items."
  },
  "api/Bonsai.Resources.Design.CollectionEditorDialog.html": {
    "href": "api/Bonsai.Resources.Design.CollectionEditorDialog.html",
    "title": "Class CollectionEditorDialog",
    "keywords": "Class CollectionEditorDialog Provides a modal dialog for editing the contents of a collection using a UITypeEditor . Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl Form CollectionEditorDialog Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(Boolean) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(Boolean) Form.Close() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(Message) Form.ProcessMnemonic(Char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(Char) Form.ProcessKeyPreview(Message) Form.ProcessTabKey(Boolean) Form.RemoveOwnedForm(Form) Form.Select(Boolean, Boolean) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Form.SetClientSizeCore(Int32, Int32) Form.SetDesktopBounds(Int32, Int32, Int32, Int32) Form.SetDesktopLocation(Int32, Int32) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.Menu Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiParent Form.MergedMenu Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.ResizeBegin Form.ResizeEnd ContainerControl.IContainerControl.ActivateControl(Control) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.Validate() ContainerControl.Validate(Boolean) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(Int32) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(Int32, Int32) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(Int32, Int32) ScrollableControl.SetScrollState(Int32, Boolean) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(Int32) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, Boolean) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsMnemonic(Char, String) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(Message) Control.PreProcessControlMessage(Message) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateZOrder() Control.UpdateStyles() Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragDrop(DragEventArgs) Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources.Design Assembly : Bonsai.System.Design.dll Syntax public class CollectionEditorDialog : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Properties | Improve this Doc View Source Items Gets or sets the collection of items for this dialog to display. Declaration public IEnumerable Items { get; set; } Property Value Type Description IEnumerable Methods | Improve this Doc View Source Dispose(Boolean) Clean up any resources being used. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if managed resources should be disposed; otherwise, false. Overrides Form.Dispose(Boolean) | Improve this Doc View Source OnFormClosed(FormClosedEventArgs) Declaration protected override void OnFormClosed(FormClosedEventArgs e) Parameters Type Name Description FormClosedEventArgs e Overrides Form.OnFormClosed(FormClosedEventArgs) | Improve this Doc View Source OnLoad(EventArgs) Declaration protected override void OnLoad(EventArgs e) Parameters Type Name Description EventArgs e Overrides Form.OnLoad(EventArgs) | Improve this Doc View Source OnResize(EventArgs) Declaration protected override void OnResize(EventArgs e) Parameters Type Name Description EventArgs e Overrides Form.OnResize(EventArgs) Implements System.Windows.Forms.IDropTarget System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IWin32Window System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.IDisposable System.Windows.Forms.IContainerControl"
  },
  "api/Bonsai.Resources.Design.html": {
    "href": "api/Bonsai.Resources.Design.html",
    "title": "Namespace Bonsai.Resources.Design",
    "keywords": "Namespace Bonsai.Resources.Design Classes CollectionEditor Provides a user interface editor that displays a dialog for editing a collection of objects. CollectionEditorDialog Provides a modal dialog for editing the contents of a collection using a UITypeEditor . ResourceCollectionEditor Provides a user interface editor that displays a dialog for editing a collection of resources, supporting drag and drop of compatible file extensions."
  },
  "api/Bonsai.Resources.Design.ResourceCollectionEditor.html": {
    "href": "api/Bonsai.Resources.Design.ResourceCollectionEditor.html",
    "title": "Class ResourceCollectionEditor",
    "keywords": "Class ResourceCollectionEditor Provides a user interface editor that displays a dialog for editing a collection of resources, supporting drag and drop of compatible file extensions. Inheritance Object UITypeEditor CollectionEditor ResourceCollectionEditor Inherited Members CollectionEditor.CollectionType CollectionEditor.CollectionItemType CollectionEditor.NewItemTypes CollectionEditor.CreateCollectionItemType() CollectionEditor.CreateNewItemTypes() CollectionEditor.GetDisplayText(Object) CollectionEditor.GetEditStyle(ITypeDescriptorContext) CollectionEditor.SetItems(Object, IEnumerable) CollectionEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources.Design Assembly : Bonsai.System.Design.dll Syntax public class ResourceCollectionEditor : CollectionEditor Constructors | Improve this Doc View Source ResourceCollectionEditor(Type) Initializes a new instance of the ResourceCollectionEditor class using the specified collection type. Declaration public ResourceCollectionEditor(Type type) Parameters Type Name Description Type type The type of the collection for this editor to edit. Properties | Improve this Doc View Source SupportedExtensions Gets the file extensions that support drag and drop into the collection editor. Declaration protected string[] SupportedExtensions { get; } Property Value Type Description String [] Methods | Improve this Doc View Source CreateEditorDialog() Creates a new dialog to display and edit the current collection. Declaration protected override CollectionEditorDialog CreateEditorDialog() Returns Type Description CollectionEditorDialog A CollectionEditorDialog to provide as a user interface for editing the collection. Overrides CollectionEditor.CreateEditorDialog() | Improve this Doc View Source CreateResourceConfiguration(String) Creates a new resource configuration object from a specified file name. Declaration protected virtual object CreateResourceConfiguration(string fileName) Parameters Type Name Description String fileName The name of the file from which the resource configuration object should be created. Returns Type Description Object A new resource configuration object to be added to the collection. | Improve this Doc View Source CreateSupportedExtensions() Gets the file extensions that support drag and drop into the collection editor. Declaration protected virtual string[] CreateSupportedExtensions() Returns Type Description String [] The array of file extensions that support drag and drop into the collection editor."
  },
  "api/Bonsai.Resources.html": {
    "href": "api/Bonsai.Resources.html",
    "title": "Namespace Bonsai.Resources",
    "keywords": "Namespace Bonsai.Resources Classes LoadResources Represents an operator that loads a collection of resources into the resource manager. ResourceConfiguration<TResource> Provides the abstract base class for configuring and loading specific resources. ResourceConfigurationCollection Represents an immutable collection of resources to be loaded into a resource manager. ResourceFileNameConverter Provides a type converter to convert a resource file name to and from other representations. ResourceLoader Provides the abstract base class for operators that load specific resources into the resource manager. ResourceManager Represents a resource manager that can be used to load and release sets of resources at run time, and manage their lifespan. Disposing the resource manager will also dispose of any loaded resources. ResourceNameConverter Provides a type converter to convert a resource name to and from other representations. It also provides a mechanism to find existing resources declared in the workflow. Interfaces IResourceConfiguration Provides a mechanism for loading different types of resources."
  },
  "api/Bonsai.Resources.IResourceConfiguration.html": {
    "href": "api/Bonsai.Resources.IResourceConfiguration.html",
    "title": "Interface IResourceConfiguration",
    "keywords": "Interface IResourceConfiguration Provides a mechanism for loading different types of resources. Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public interface IResourceConfiguration Properties | Improve this Doc View Source Name Gets the identifier of the resource. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Type Gets the type of the resource. Declaration Type Type { get; } Property Value Type Description Type Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates the contents of the resource using the specified resource manager. Declaration IDisposable CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which the resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description IDisposable A IDisposable object which can be used to access and release the resource contents."
  },
  "api/Bonsai.Resources.LoadResources.html": {
    "href": "api/Bonsai.Resources.LoadResources.html",
    "title": "Class LoadResources",
    "keywords": "Class LoadResources Represents an operator that loads a collection of resources into the resource manager. Inheritance Object Combinator < ResourceConfigurationCollection , IDisposable > LoadResources Inherited Members Combinator<ResourceConfigurationCollection, IDisposable>.Process(IObservable<ResourceConfigurationCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public class LoadResources : Combinator<ResourceConfigurationCollection, IDisposable> Methods | Improve this Doc View Source Process(IObservable<ResourceConfigurationCollection>) Loads a collection of resources into the resource manager. Declaration public override IObservable<IDisposable> Process(IObservable<ResourceConfigurationCollection> source) Parameters Type Name Description IObservable < ResourceConfigurationCollection > source The sequence containing the collection of resources to be loaded in the resource manager. Returns Type Description IObservable < IDisposable > A sequence of IDisposable objects which can be used to unload the loaded resources. Overrides Bonsai.Combinator<Bonsai.Resources.ResourceConfigurationCollection, System.IDisposable>.Process(System.IObservable<Bonsai.Resources.ResourceConfigurationCollection>)"
  },
  "api/Bonsai.Resources.ResourceConfiguration-1.html": {
    "href": "api/Bonsai.Resources.ResourceConfiguration-1.html",
    "title": "Class ResourceConfiguration<TResource>",
    "keywords": "Class ResourceConfiguration<TResource> Provides the abstract base class for configuring and loading specific resources. Inheritance Object ResourceConfiguration<TResource> BufferConfiguration SourceConfiguration MeshConfiguration ShaderConfiguration TextureConfiguration Implements IResourceConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public abstract class ResourceConfiguration<TResource> : IResourceConfiguration where TResource : IDisposable Type Parameters Name Description TResource The type of the resource. Properties | Improve this Doc View Source Name Gets or sets the name of the resource. Declaration public string Name { get; set; } Property Value Type Description String Methods | Improve this Doc View Source CreateResource(ResourceManager) When overridden in a derived class, creates a new resource of type TResource . Declaration public abstract TResource CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description TResource A new instance of type TResource . | Improve this Doc View Source OpenResource(String) Opens a stream for reading the specified resource. Declaration protected Stream OpenResource(string path) Parameters Type Name Description String path The name of the resource to be opened for reading. Returns Type Description Stream A Stream object for reading the resource. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Explicit Interface Implementations | Improve this Doc View Source IResourceConfiguration.CreateResource(ResourceManager) Declaration IDisposable IResourceConfiguration.CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager Returns Type Description IDisposable | Improve this Doc View Source IResourceConfiguration.Type Declaration Type IResourceConfiguration.Type { get; } Returns Type Description Type Implements IResourceConfiguration"
  },
  "api/Bonsai.Resources.ResourceConfigurationCollection.html": {
    "href": "api/Bonsai.Resources.ResourceConfigurationCollection.html",
    "title": "Class ResourceConfigurationCollection",
    "keywords": "Class ResourceConfigurationCollection Represents an immutable collection of resources to be loaded into a resource manager. Inheritance Object ResourceConfigurationCollection Implements IEnumerable < IResourceConfiguration > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public class ResourceConfigurationCollection : IEnumerable<IResourceConfiguration>, IEnumerable Constructors | Improve this Doc View Source ResourceConfigurationCollection(ResourceManager, IEnumerable<IResourceConfiguration>) Initializes a new instance of the ResourceConfigurationCollection class using the specified resource manager and a set of resources to load. Declaration public ResourceConfigurationCollection(ResourceManager resourceManager, IEnumerable<IResourceConfiguration> collection) Parameters Type Name Description ResourceManager resourceManager The resource manager into which the resources will be loaded. IEnumerable < IResourceConfiguration > collection The set of resources to be loaded into the resource manager. Properties | Improve this Doc View Source ResourceManager Gets the resource manager object into which the resources will be loaded. Declaration public ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager Methods | Improve this Doc View Source Add(IResourceConfiguration) Creates a new collection of resources to be loaded into the resource manager by appending a new resource to the end of this collection. Declaration public ResourceConfigurationCollection Add(IResourceConfiguration resource) Parameters Type Name Description IResourceConfiguration resource The additional resource to be loaded into the resource manager. Returns Type Description ResourceConfigurationCollection A new ResourceConfigurationCollection object containing the combined set of resources. | Improve this Doc View Source AddRange(IEnumerable<IResourceConfiguration>) Creates a new collection of resources to be loaded into the resource manager by appending a new set of resources to the end of this collection. Declaration public ResourceConfigurationCollection AddRange(IEnumerable<IResourceConfiguration> collection) Parameters Type Name Description IEnumerable < IResourceConfiguration > collection The additional set of resources to be loaded into the resource manager. Returns Type Description ResourceConfigurationCollection A new ResourceConfigurationCollection object containing the combined set of resources. | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<IResourceConfiguration> GetEnumerator() Returns Type Description IEnumerator < IResourceConfiguration > Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Resources.ResourceFileNameConverter.html": {
    "href": "api/Bonsai.Resources.ResourceFileNameConverter.html",
    "title": "Class ResourceFileNameConverter",
    "keywords": "Class ResourceFileNameConverter Provides a type converter to convert a resource file name to and from other representations. Inheritance Object TypeConverter StringConverter ResourceFileNameConverter Inherited Members StringConverter.CanConvertFrom(ITypeDescriptorContext, Type) StringConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public class ResourceFileNameConverter : StringConverter Methods | Improve this Doc View Source ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) Converts the given value object to a resource file name, and also sets the Name property of the object that is connected to this type converter request, if it exists. Declaration public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) Parameters Type Name Description ITypeDescriptorContext context CultureInfo culture Object value Type destinationType Returns Type Description Object Overrides TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)"
  },
  "api/Bonsai.Resources.ResourceLoader.html": {
    "href": "api/Bonsai.Resources.ResourceLoader.html",
    "title": "Class ResourceLoader",
    "keywords": "Class ResourceLoader Provides the abstract base class for operators that load specific resources into the resource manager. Inheritance Object Combinator < ResourceConfigurationCollection , ResourceConfigurationCollection > Transform < ResourceConfigurationCollection , ResourceConfigurationCollection > ResourceLoader AudioResources ResourceLoader Inherited Members Combinator<ResourceConfigurationCollection, ResourceConfigurationCollection>.Process(IObservable<ResourceConfigurationCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public abstract class ResourceLoader : Transform<ResourceConfigurationCollection, ResourceConfigurationCollection> Methods | Improve this Doc View Source GetResources() Returns the set of resources to be loaded into the resource manager. Declaration protected abstract IEnumerable<IResourceConfiguration> GetResources() Returns Type Description IEnumerable < IResourceConfiguration > A collection of IResourceConfiguration objects to be loaded into the resource manager. | Improve this Doc View Source Process(IObservable<ResourceConfigurationCollection>) Appends a new set of resources to be loaded into the resource manager. Declaration public override IObservable<ResourceConfigurationCollection> Process(IObservable<ResourceConfigurationCollection> source) Parameters Type Name Description IObservable < ResourceConfigurationCollection > source A sequence of ResourceConfigurationCollection objects with which the loader resources will be combined. Returns Type Description IObservable < ResourceConfigurationCollection > A sequence of ResourceConfigurationCollection objects which can be used to load resources into the resource manager. Overrides Bonsai.Combinator<Bonsai.Resources.ResourceConfigurationCollection, Bonsai.Resources.ResourceConfigurationCollection>.Process(System.IObservable<Bonsai.Resources.ResourceConfigurationCollection>) | Improve this Doc View Source Process(IObservable<ResourceManager>) Bundles a set of resources to be loaded into the resource manager. Declaration public IObservable<ResourceConfigurationCollection> Process(IObservable<ResourceManager> source) Parameters Type Name Description IObservable < ResourceManager > source A sequence of ResourceManager objects into which the resources will be loaded. Returns Type Description IObservable < ResourceConfigurationCollection > A sequence of ResourceConfigurationCollection objects which can be used to load resources into the resource manager."
  },
  "api/Bonsai.Resources.ResourceManager.html": {
    "href": "api/Bonsai.Resources.ResourceManager.html",
    "title": "Class ResourceManager",
    "keywords": "Class ResourceManager Represents a resource manager that can be used to load and release sets of resources at run time, and manage their lifespan. Disposing the resource manager will also dispose of any loaded resources. Inheritance Object ResourceManager Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public sealed class ResourceManager : IDisposable Methods | Improve this Doc View Source Dispose() Releases all resources used by the ResourceManager class. Declaration public void Dispose() | Improve this Doc View Source Load(IEnumerable<IResourceConfiguration>) Loads a set of resources into the resource manager. Declaration public IDisposable Load(IEnumerable<IResourceConfiguration> source) Parameters Type Name Description IEnumerable < IResourceConfiguration > source A collection of resources to load into the resource manager. Returns Type Description IDisposable A IDisposable object which can be used to unload the loaded resources. | Improve this Doc View Source Load<TResource>(String) Loads the resource with the specified name into the resource manager. Declaration public TResource Load<TResource>(string name) where TResource : IDisposable Parameters Type Name Description String name The name of the resource to load. Returns Type Description TResource The loaded resource. Repeated calls to load the same resource will return the same object instance. Type Parameters Name Description TResource The type of the loaded resource. Implements System.IDisposable"
  },
  "api/Bonsai.Resources.ResourceNameConverter.html": {
    "href": "api/Bonsai.Resources.ResourceNameConverter.html",
    "title": "Class ResourceNameConverter",
    "keywords": "Class ResourceNameConverter Provides a type converter to convert a resource name to and from other representations. It also provides a mechanism to find existing resources declared in the workflow. Inheritance Object TypeConverter StringConverter ResourceNameConverter MeshNameConverter ShaderNameConverter TextureNameConverter Inherited Members StringConverter.CanConvertFrom(ITypeDescriptorContext, Type) StringConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Resources Assembly : Bonsai.System.dll Syntax public class ResourceNameConverter : StringConverter Constructors | Improve this Doc View Source ResourceNameConverter(Type) Initializes a new instance of the ResourceNameConverter class for the specified type. Declaration protected ResourceNameConverter(Type type) Parameters Type Name Description Type type The type of resources supported by this converter. Methods | Improve this Doc View Source GetStandardValues(ITypeDescriptorContext) Returns a collection of resource names which are available in the call context of this type converter request. Declaration public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description TypeConverter.StandardValuesCollection A TypeConverter.StandardValuesCollection containing the set of available resources. Only resources for which IsResourceSupported(IResourceConfiguration) returns true will be included. Overrides TypeConverter.GetStandardValues(ITypeDescriptorContext) | Improve this Doc View Source GetStandardValuesSupported(ITypeDescriptorContext) Declaration public override bool GetStandardValuesSupported(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description Boolean Overrides TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) | Improve this Doc View Source IsResourceSupported(IResourceConfiguration) Returns a value indicating whether the specified resource is supported by this converter. Declaration protected virtual bool IsResourceSupported(IResourceConfiguration resource) Parameters Type Name Description IResourceConfiguration resource The resource to be tested. Returns Type Description Boolean true if the specified resource is supported; false otherwise."
  },
  "api/Bonsai.Scripting.Expressions.Design.ExpressionScriptEditor.html": {
    "href": "api/Bonsai.Scripting.Expressions.Design.ExpressionScriptEditor.html",
    "title": "Class ExpressionScriptEditor",
    "keywords": "Class ExpressionScriptEditor Provides a user interface editor that displays a dialog box for editing the expression script. Inheritance Object UITypeEditor ExpressionScriptEditor Inherited Members UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Scripting.Expressions.Design Assembly : Bonsai.Scripting.Expressions.Design.dll Syntax public class ExpressionScriptEditor : UITypeEditor Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext)"
  },
  "api/Bonsai.Scripting.Expressions.Design.html": {
    "href": "api/Bonsai.Scripting.Expressions.Design.html",
    "title": "Namespace Bonsai.Scripting.Expressions.Design",
    "keywords": "Namespace Bonsai.Scripting.Expressions.Design Classes ExpressionScriptEditor Provides a user interface editor that displays a dialog box for editing the expression script."
  },
  "api/Bonsai.Scripting.Expressions.ExpressionCondition.html": {
    "href": "api/Bonsai.Scripting.Expressions.ExpressionCondition.html",
    "title": "Class ExpressionCondition",
    "keywords": "Class ExpressionCondition Represents an operator that uses an expression script to filter the elements of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder ExpressionCondition Implements IExpressionBuilder INamedElement Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Scripting.Expressions Assembly : Bonsai.Scripting.Expressions.dll Syntax public class ExpressionCondition : SingleArgumentExpressionBuilder, IExpressionBuilder, INamedElement Properties | Improve this Doc View Source Description Gets or sets a description for the expression condition. Declaration [Externalizable(false)] public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source Expression Gets or sets the expression that determines which elements to filter. Declaration public string Expression { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the name of the expression condition. Declaration [Externalizable(false)] public string Name { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement"
  },
  "api/Bonsai.Scripting.Expressions.ExpressionSink.html": {
    "href": "api/Bonsai.Scripting.Expressions.ExpressionSink.html",
    "title": "Class ExpressionSink",
    "keywords": "Class ExpressionSink Represents an operator that uses an expression script to invoke an action for each element of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder ExpressionSink Implements IExpressionBuilder INamedElement Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Scripting.Expressions Assembly : Bonsai.Scripting.Expressions.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public class ExpressionSink : SingleArgumentExpressionBuilder, IExpressionBuilder, INamedElement Properties | Improve this Doc View Source Description Gets or sets a description for the expression sink. Declaration [Externalizable(false)] public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source Expression Gets or sets the expression that determines the action to perform on the input elements. Declaration public string Expression { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the name of the expression sink. Declaration [Externalizable(false)] public string Name { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement"
  },
  "api/Bonsai.Scripting.Expressions.ExpressionTransform.html": {
    "href": "api/Bonsai.Scripting.Expressions.ExpressionTransform.html",
    "title": "Class ExpressionTransform",
    "keywords": "Class ExpressionTransform Represents an operator that uses an expression script to transform each element of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder ExpressionTransform Implements IExpressionBuilder INamedElement Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Scripting.Expressions Assembly : Bonsai.Scripting.Expressions.dll Syntax [WorkflowElementCategory(ElementCategory.Transform)] public class ExpressionTransform : SingleArgumentExpressionBuilder, IExpressionBuilder, INamedElement Properties | Improve this Doc View Source Description Gets or sets a description for the expression transform. Declaration [Externalizable(false)] public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source Expression Gets or sets the expression that determines the operation of the transform. Declaration public string Expression { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the name of the expression transform. Declaration [Externalizable(false)] public string Name { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement"
  },
  "api/Bonsai.Scripting.Expressions.html": {
    "href": "api/Bonsai.Scripting.Expressions.html",
    "title": "Namespace Bonsai.Scripting.Expressions",
    "keywords": "Namespace Bonsai.Scripting.Expressions Classes ExpressionCondition Represents an operator that uses an expression script to filter the elements of an observable sequence. ExpressionSink Represents an operator that uses an expression script to invoke an action for each element of an observable sequence. ExpressionTransform Represents an operator that uses an expression script to transform each element of an observable sequence."
  },
  "api/Bonsai.Scripting.IronPython.Design.html": {
    "href": "api/Bonsai.Scripting.IronPython.Design.html",
    "title": "Namespace Bonsai.Scripting.IronPython.Design",
    "keywords": "Namespace Bonsai.Scripting.IronPython.Design Classes PythonScriptEditor Provides a user interface editor that displays a dialog box for editing the Python script."
  },
  "api/Bonsai.Scripting.IronPython.Design.PythonScriptEditor.html": {
    "href": "api/Bonsai.Scripting.IronPython.Design.PythonScriptEditor.html",
    "title": "Class PythonScriptEditor",
    "keywords": "Class PythonScriptEditor Provides a user interface editor that displays a dialog box for editing the Python script. Inheritance Object UITypeEditor PythonScriptEditor Inherited Members UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Scripting.IronPython.Design Assembly : Bonsai.Scripting.IronPython.Design.dll Syntax public class PythonScriptEditor : UITypeEditor Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext)"
  },
  "api/Bonsai.Scripting.IronPython.html": {
    "href": "api/Bonsai.Scripting.IronPython.html",
    "title": "Namespace Bonsai.Scripting.IronPython",
    "keywords": "Namespace Bonsai.Scripting.IronPython Classes PythonSelectMany Represents an operator that uses a Python script to project each element of an observable sequence into multiple elements. PythonSource Represents an operator that uses a Python script to generate an observable sequence of values. PythonTransform Represents an operator that uses a Python script to transform each element of an observable sequence."
  },
  "api/Bonsai.Scripting.IronPython.PythonSelectMany.html": {
    "href": "api/Bonsai.Scripting.IronPython.PythonSelectMany.html",
    "title": "Class PythonSelectMany",
    "keywords": "Class PythonSelectMany Represents an operator that uses a Python script to project each element of an observable sequence into multiple elements. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder PythonSelectMany Implements IExpressionBuilder INamedElement Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Scripting.IronPython Assembly : Bonsai.Scripting.IronPython.dll Syntax [WorkflowElementCategory(ElementCategory.Combinator)] public class PythonSelectMany : SingleArgumentExpressionBuilder, IExpressionBuilder, INamedElement Constructors | Improve this Doc View Source PythonSelectMany() Initializes a new instance of the PythonSelectMany class. Declaration public PythonSelectMany() Properties | Improve this Doc View Source Description Gets or sets a description for the python operator. Declaration [Externalizable(false)] public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the name of the python operator. Declaration [Externalizable(false)] public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Script Gets or sets the script that determines how each element is projected into a sequence of elements. Declaration public string Script { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement"
  },
  "api/Bonsai.Scripting.IronPython.PythonSource.html": {
    "href": "api/Bonsai.Scripting.IronPython.PythonSource.html",
    "title": "Class PythonSource",
    "keywords": "Class PythonSource Represents an operator that uses a Python script to generate an observable sequence of values. Inheritance Object ExpressionBuilder ZeroArgumentExpressionBuilder PythonSource Implements IExpressionBuilder INamedElement Inherited Members ZeroArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Scripting.IronPython Assembly : Bonsai.Scripting.IronPython.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public class PythonSource : ZeroArgumentExpressionBuilder, IExpressionBuilder, INamedElement Constructors | Improve this Doc View Source PythonSource() Initializes a new instance of the PythonSource class. Declaration public PythonSource() Properties | Improve this Doc View Source Description Gets or sets a description for the python source. Declaration [Externalizable(false)] public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the name of the python source. Declaration [Externalizable(false)] public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Script Gets or sets the script that determines the operation of the source. Declaration public string Script { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement"
  },
  "api/Bonsai.Scripting.IronPython.PythonTransform.html": {
    "href": "api/Bonsai.Scripting.IronPython.PythonTransform.html",
    "title": "Class PythonTransform",
    "keywords": "Class PythonTransform Represents an operator that uses a Python script to transform each element of an observable sequence. Inheritance Object ExpressionBuilder SingleArgumentExpressionBuilder PythonTransform Implements IExpressionBuilder INamedElement Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(Object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(Object) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Scripting.IronPython Assembly : Bonsai.Scripting.IronPython.dll Syntax [WorkflowElementCategory(ElementCategory.Transform)] public class PythonTransform : SingleArgumentExpressionBuilder, IExpressionBuilder, INamedElement Constructors | Improve this Doc View Source PythonTransform() Initializes a new instance of the PythonTransform class. Declaration public PythonTransform() Properties | Improve this Doc View Source Description Gets or sets a description for the python transform. Declaration [Externalizable(false)] public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the name of the python transform. Declaration [Externalizable(false)] public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Script Gets or sets the script that determines the operation of the transform. Declaration public string Script { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. Declaration public override Expression Build(IEnumerable<Expression> arguments) Parameters Type Name Description IEnumerable < Expression > arguments A collection of Expression nodes representing the input arguments. Returns Type Description Expression The constructed Expression node. Overrides ExpressionBuilder.Build(IEnumerable<Expression>) Implements IExpressionBuilder INamedElement"
  },
  "api/Bonsai.Shaders.AspectRatio.html": {
    "href": "api/Bonsai.Shaders.AspectRatio.html",
    "title": "Class AspectRatio",
    "keywords": "Class AspectRatio Represents an operator that calculates the ratio of window viewport width to its height for each viewport size in the sequence. Inheritance Object Combinator < Size , Single > Transform < Size , Single > AspectRatio Inherited Members Combinator<Size, Single>.Process(IObservable<Size>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class AspectRatio : Transform<Size, float> Methods | Improve this Doc View Source Process(IObservable<INativeWindow>) Calculates the ratio of window viewport width to its height for each window in an observable sequence. Declaration public IObservable<float> Process(IObservable<INativeWindow> source) Parameters Type Name Description IObservable < INativeWindow > source A sequence of INativeWindow objects. Returns Type Description IObservable < Single > A sequence of floating-point values representing the aspect ratio for each active viewport in the source sequence. | Improve this Doc View Source Process(IObservable<Size>) Calculates the ratio of window viewport width to its height for each size in an observable sequence. Declaration public override IObservable<float> Process(IObservable<Size> source) Parameters Type Name Description IObservable < Size > source A sequence of Size values representing the viewport width and height. Returns Type Description IObservable < Single > A sequence of floating-point values representing the aspect ratio for each size in the source sequence. Overrides Bonsai.Combinator<System.Drawing.Size, System.Single>.Process(System.IObservable<System.Drawing.Size>) | Improve this Doc View Source Process(IObservable<Tuple<Single, Single>>) Calculates the ratio of window viewport width to its height for each size pair in an observable sequence. Declaration public IObservable<float> Process(IObservable<Tuple<float, float>> source) Parameters Type Name Description IObservable < Tuple < Single , Single >> source A sequence of floating-point value pairs representing the viewport width and height. Returns Type Description IObservable < Single > A sequence of floating-point values representing the aspect ratio for each size pair in the source sequence. | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Calculates the ratio of the shader window viewport width to its height, at the time the source sequence emits a notification. Declaration public IObservable<float> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications indicating when to calculate the current aspect ratio of the shader window. Returns Type Description IObservable < Single > A sequence of floating-point values representing the current aspect ratio of the shader window, at the time when the source sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. | Improve this Doc View Source Process<TEventArgs>(IObservable<EventPattern<INativeWindow, TEventArgs>>) Calculates the ratio of window viewport width to its height for each window event in an observable sequence. Declaration public IObservable<float> Process<TEventArgs>(IObservable<EventPattern<INativeWindow, TEventArgs>> source) Parameters Type Name Description IObservable < EventPattern < INativeWindow , TEventArgs>> source A sequence of event data generated from a shader window. Returns Type Description IObservable < Single > A sequence of floating-point values representing the aspect ratio for the current viewport in each window in the sequence of event data. Type Parameters Name Description TEventArgs The type of the event data generated by the window event."
  },
  "api/Bonsai.Shaders.BindTexture.html": {
    "href": "api/Bonsai.Shaders.BindTexture.html",
    "title": "Class BindTexture",
    "keywords": "Class BindTexture Represents an operator that binds a buffer to the specified texture unit for each texture or notification in the sequence. Inheritance Object BindTexture Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Sink)] public class BindTexture Properties | Improve this Doc View Source Index Gets or sets the index of the texture to be bound to the shader. Only applicable to texture array objects. Declaration public int? Index { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source IndexSpecified Gets a value indicating whether the Index property should be serialized. Declaration [Browsable(false)] public bool IndexSpecified { get; } Property Value Type Description Boolean | Improve this Doc View Source ShaderName Gets or sets the name of the shader program. Declaration [TypeConverter(typeof(ShaderNameConverter))] public string ShaderName { get; set; } Property Value Type Description String | Improve this Doc View Source TextureName Gets or sets the name of the texture to be bound to the shader. Declaration [TypeConverter(typeof(TextureNameConverter))] public string TextureName { get; set; } Property Value Type Description String | Improve this Doc View Source TextureSlot Gets or sets a value specifying the slot on which to bind the texture. Declaration public TextureUnit TextureSlot { get; set; } Property Value Type Description TextureUnit | Improve this Doc View Source TextureTarget Gets or sets a value specifying the texture target to be bound to the sampler. Declaration public TextureTarget TextureTarget { get; set; } Property Value Type Description TextureTarget Methods | Improve this Doc View Source Process(IObservable<Texture>) Binds each texture buffer in an observable sequence to the specified texture unit for each notification in an observable sequence. Declaration public IObservable<Texture> Process(IObservable<Texture> source) Parameters Type Name Description IObservable < Texture > source A sequence of Texture objects to be bound to the specified texture unit. Returns Type Description IObservable < Texture > An observable sequence that is identical to the source sequence but where there is an additional side effect of binding the texture buffer objects in the sequence to the specified texture unit. Remarks If the TextureName property is specified, the corresponding texture buffer will be used instead of the values in the source sequence. | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Binds the specified texture buffer to the specified texture unit for each notification in an observable sequence. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications indicating when to bind the texture buffer to the specified texture unit. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of binding the texture buffer to the specified texture unit. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.Bounds.html": {
    "href": "api/Bonsai.Shaders.Bounds.html",
    "title": "Class Bounds",
    "keywords": "Class Bounds Represents an axis-aligned bounding box for mesh vertices. Inheritance Object Bounds Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class Bounds Constructors | Improve this Doc View Source Bounds(Vector3, Vector3) Initializes a new instance of the Bounds class using the specified bounding-box center and dimensions. Declaration public Bounds(Vector3 center, Vector3 extents) Parameters Type Name Description Vector3 center The center of the axis-aligned bounding box. Vector3 extents The dimensions of the axis-aligned bounding box, measured from the center to the extremities. Fields | Improve this Doc View Source Empty Represents a Bounds instance with empty extents. Declaration public static readonly Bounds Empty Field Value Type Description Bounds Properties | Improve this Doc View Source Center Gets the center of the axis-aligned bounding box. Declaration public Vector3 Center { get; } Property Value Type Description Vector3 | Improve this Doc View Source Extents Gets the dimensions of the axis-aligned bounding box, measured from the center to the extremities. Declaration public Vector3 Extents { get; } Property Value Type Description Vector3 | Improve this Doc View Source Maximum Gets the maximum point of the axis-aligned bounding box. Declaration public Vector3 Maximum { get; } Property Value Type Description Vector3 | Improve this Doc View Source Minimum Gets the minimum point of the axis-aligned bounding box. Declaration public Vector3 Minimum { get; } Property Value Type Description Vector3 | Improve this Doc View Source Size Gets the full size of the axis-aligned bounding box across all three dimensions. Declaration public Vector3 Size { get; } Property Value Type Description Vector3 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Camera.html": {
    "href": "api/Bonsai.Shaders.Camera.html",
    "title": "Class Camera",
    "keywords": "Class Camera Represents a point of view from which to render a 3D scene. Inheritance Object Camera Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class Camera Constructors | Improve this Doc View Source Camera(Matrix4, Matrix4) Initializes a new instance of the Camera class using the specified view matrix and projection matrix. Declaration public Camera(Matrix4 view, Matrix4 projection) Parameters Type Name Description Matrix4 view The view matrix representing how to transform world coordinates into eye space coordinates depending on the position and orientation of the camera. Matrix4 projection The projection matrix representing how to transform eye space coordinates into clip space coordinates. Fields | Improve this Doc View Source ProjectionMatrix The projection matrix representing a transformation from eye space coordinates into clip space coordinates. Declaration public Matrix4 ProjectionMatrix Field Value Type Description Matrix4 | Improve this Doc View Source ViewMatrix The view matrix representing a transformation from world coordinates into eye space coordinates. Declaration public Matrix4 ViewMatrix Field Value Type Description Matrix4"
  },
  "api/Bonsai.Shaders.ComputeProgram.html": {
    "href": "api/Bonsai.Shaders.ComputeProgram.html",
    "title": "Class ComputeProgram",
    "keywords": "Class ComputeProgram Provides functionality for executing and updating the state of a compute shader program. Inheritance Object Shader ComputeProgram Implements IDisposable Inherited Members Shader.Name Shader.Program Shader.Window Shader.Update(Action) Shader.CreateShaderState(IEnumerable<StateConfiguration>, IEnumerable<UniformConfiguration>, IEnumerable<BufferBindingConfiguration>, FramebufferConfiguration) Shader.Dispatch() Shader.Dispose(Boolean) Shader.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class ComputeProgram : Shader, IDisposable Properties | Improve this Doc View Source WorkGroups Gets or sets a value specifying the number of workgroups to be launched when dispatching the compute shader. Declaration public DispatchParameters WorkGroups { get; set; } Property Value Type Description DispatchParameters Methods | Improve this Doc View Source CreateShader() Compiles the compute shader and returns the program object handle. Declaration protected override int CreateShader() Returns Type Description Int32 A handle to the compute shader program object. Overrides Shader.CreateShader() | Improve this Doc View Source OnDispatch() Returns any actions that should be executed before running the shader program. Declaration protected override Action OnDispatch() Returns Type Description Action An Action object to be called before running the shader program. If the return value is null , no action will be executed. Overrides Shader.OnDispatch() Implements System.IDisposable"
  },
  "api/Bonsai.Shaders.Configuration.BlendFunctionState.html": {
    "href": "api/Bonsai.Shaders.Configuration.BlendFunctionState.html",
    "title": "Class BlendFunctionState",
    "keywords": "Class BlendFunctionState Represents a configuration object specifying the operation of blending for all draw buffers. Inheritance Object StateConfiguration BlendFunctionState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class BlendFunctionState : StateConfiguration Properties | Improve this Doc View Source DestinationFactor Gets or sets a value specifying the scale factor for blending destination color values. Declaration public BlendingFactor DestinationFactor { get; set; } Property Value Type Description BlendingFactor | Improve this Doc View Source SourceFactor Gets or sets a value specifying the scale factor for blending source color values. Declaration public BlendingFactor SourceFactor { get; set; } Property Value Type Description BlendingFactor Methods | Improve this Doc View Source Execute(ShaderWindow) Updates the state of the current graphics context. Declaration public override void Execute(ShaderWindow window) Parameters Type Name Description ShaderWindow window The shader window associated with the current graphics context. Overrides StateConfiguration.Execute(ShaderWindow) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.BufferBindingConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.BufferBindingConfiguration.html",
    "title": "Class BufferBindingConfiguration",
    "keywords": "Class BufferBindingConfiguration Provides an abstract base class for binding uniform variables to buffer objects. Inheritance Object BufferBindingConfiguration MeshBindingConfiguration TextureBindingConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public abstract class BufferBindingConfiguration Properties | Improve this Doc View Source Name Gets or sets the name of the uniform variable that will be bound to the buffer object. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api/Bonsai.Shaders.Configuration.BufferBindingConfigurationCollection.html": {
    "href": "api/Bonsai.Shaders.Configuration.BufferBindingConfigurationCollection.html",
    "title": "Class BufferBindingConfigurationCollection",
    "keywords": "Class BufferBindingConfigurationCollection Represents a collection of buffer binding configuration objects. Inheritance Object Collection < BufferBindingConfiguration > KeyedCollection < String , BufferBindingConfiguration > BufferBindingConfigurationCollection Implements IList < BufferBindingConfiguration > ICollection < BufferBindingConfiguration > IList ICollection IReadOnlyList < BufferBindingConfiguration > IReadOnlyCollection < BufferBindingConfiguration > IEnumerable < BufferBindingConfiguration > IEnumerable Inherited Members KeyedCollection<String, BufferBindingConfiguration>.Contains(String) KeyedCollection<String, BufferBindingConfiguration>.Remove(String) KeyedCollection<String, BufferBindingConfiguration>.ChangeItemKey(BufferBindingConfiguration, String) KeyedCollection<String, BufferBindingConfiguration>.ClearItems() KeyedCollection<String, BufferBindingConfiguration>.GetKeyForItem(BufferBindingConfiguration) KeyedCollection<String, BufferBindingConfiguration>.InsertItem(Int32, BufferBindingConfiguration) KeyedCollection<String, BufferBindingConfiguration>.RemoveItem(Int32) KeyedCollection<String, BufferBindingConfiguration>.SetItem(Int32, BufferBindingConfiguration) KeyedCollection<String, BufferBindingConfiguration>.Comparer KeyedCollection<String, BufferBindingConfiguration>.Item[String] KeyedCollection<String, BufferBindingConfiguration>.Dictionary Collection<BufferBindingConfiguration>.Add(BufferBindingConfiguration) Collection<BufferBindingConfiguration>.Clear() Collection<BufferBindingConfiguration>.CopyTo(BufferBindingConfiguration[], Int32) Collection<BufferBindingConfiguration>.Contains(BufferBindingConfiguration) Collection<BufferBindingConfiguration>.GetEnumerator() Collection<BufferBindingConfiguration>.IndexOf(BufferBindingConfiguration) Collection<BufferBindingConfiguration>.Insert(Int32, BufferBindingConfiguration) Collection<BufferBindingConfiguration>.Remove(BufferBindingConfiguration) Collection<BufferBindingConfiguration>.RemoveAt(Int32) Collection<BufferBindingConfiguration>.ClearItems() Collection<BufferBindingConfiguration>.InsertItem(Int32, BufferBindingConfiguration) Collection<BufferBindingConfiguration>.RemoveItem(Int32) Collection<BufferBindingConfiguration>.SetItem(Int32, BufferBindingConfiguration) Collection<BufferBindingConfiguration>.IEnumerable.GetEnumerator() Collection<BufferBindingConfiguration>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Configuration.BufferBindingConfiguration>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Configuration.BufferBindingConfiguration>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<BufferBindingConfiguration>.IList.Add(Object) Collection<BufferBindingConfiguration>.IList.Contains(Object) Collection<BufferBindingConfiguration>.IList.IndexOf(Object) Collection<BufferBindingConfiguration>.IList.Insert(Int32, Object) Collection<BufferBindingConfiguration>.IList.Remove(Object) Collection<BufferBindingConfiguration>.Count Collection<BufferBindingConfiguration>.Items Collection<BufferBindingConfiguration>.Item[Int32] Collection<BufferBindingConfiguration>.ICollection<BufferBindingConfiguration>.IsReadOnly Collection<BufferBindingConfiguration>.ICollection.IsSynchronized Collection<BufferBindingConfiguration>.ICollection.SyncRoot Collection<BufferBindingConfiguration>.IList.Item[Int32] Collection<BufferBindingConfiguration>.IList.IsReadOnly Collection<BufferBindingConfiguration>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class BufferBindingConfigurationCollection : KeyedCollection<string, BufferBindingConfiguration>, IList<BufferBindingConfiguration>, ICollection<BufferBindingConfiguration>, IList, ICollection, IReadOnlyList<BufferBindingConfiguration>, IReadOnlyCollection<BufferBindingConfiguration>, IEnumerable<BufferBindingConfiguration>, IEnumerable Methods | Improve this Doc View Source GetKeyForItem(BufferBindingConfiguration) Returns the key for the specified configuration object. Declaration protected override string GetKeyForItem(BufferBindingConfiguration item) Parameters Type Name Description BufferBindingConfiguration item The configuration object from which to extract the key. Returns Type Description String The key for the specified configuration object. Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Bonsai.Shaders.Configuration.BufferBindingConfiguration>.GetKeyForItem(Bonsai.Shaders.Configuration.BufferBindingConfiguration) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Shaders.Configuration.ClearColorState.html": {
    "href": "api/Bonsai.Shaders.Configuration.ClearColorState.html",
    "title": "Class ClearColorState",
    "keywords": "Class ClearColorState Represents a configuration object specifying the color used to clear the framebuffer. Inheritance Object StateConfiguration ClearColorState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class ClearColorState : StateConfiguration Properties | Improve this Doc View Source ClearColor Gets or sets a value specifying the color used to clear the framebuffer before rendering. Declaration public Color ClearColor { get; set; } Property Value Type Description Color | Improve this Doc View Source ClearColorHtml Gets or sets an HTML representation of the clear color value for serialization. Declaration [Browsable(false)] public string ClearColorHtml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Execute(ShaderWindow) Updates the state of the current graphics context. Declaration public override void Execute(ShaderWindow window) Parameters Type Name Description ShaderWindow window The shader window associated with the current graphics context. Overrides StateConfiguration.Execute(ShaderWindow) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.ColorFormatConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.ColorFormatConfiguration.html",
    "title": "Struct ColorFormatConfiguration",
    "keywords": "Struct ColorFormatConfiguration Represents a configuration object specifying the color format of a draw buffer. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax [TypeConverter(typeof(ColorFormatConfiguration.ColorFormatConfigurationConverter))] public struct ColorFormatConfiguration Constructors | Improve this Doc View Source ColorFormatConfiguration(Int32) Initializes a new instance of the ColorFormatConfiguration structure using the specified total number of bits per pixel. Declaration public ColorFormatConfiguration(int bpp) Parameters Type Name Description Int32 bpp The total number of bits per pixel used by the color format. | Improve this Doc View Source ColorFormatConfiguration(Int32, Int32, Int32, Int32) Initializes a new instance of the ColorFormatConfiguration structure using the specified number of bits per pixel for each channel. Declaration public ColorFormatConfiguration(int red, int green, int blue, int alpha) Parameters Type Name Description Int32 red The number of bits per pixel for the red channel. Int32 green The number of bits per pixel for the green channel. Int32 blue The number of bits per pixel for the blue channel. Int32 alpha The number of bits per pixel for the alpha channel. Properties | Improve this Doc View Source Alpha Gets or sets a value specifying the number of bits per pixel for the alpha channel. Declaration public int Alpha { readonly get; set; } Property Value Type Description Int32 | Improve this Doc View Source BitsPerPixel Gets or sets a value specifying the total number of bits per pixel. Declaration public int BitsPerPixel { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Blue Gets or sets a value specifying the number of bits per pixel for the blue channel. Declaration public int Blue { readonly get; set; } Property Value Type Description Int32 | Improve this Doc View Source Green Gets or sets a value specifying the number of bits per pixel for the green channel. Declaration public int Green { readonly get; set; } Property Value Type Description Int32 | Improve this Doc View Source Red Gets or sets a value specifying the number of bits per pixel for the red channel. Declaration public int Red { readonly get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source ToString() Returns a String that represents the current color format configuration. Declaration public override string ToString() Returns Type Description String A String that represents the current color format configuration. Overrides ValueType.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.ComputeProgramConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.ComputeProgramConfiguration.html",
    "title": "Class ComputeProgramConfiguration",
    "keywords": "Class ComputeProgramConfiguration Provides configuration and loading functionality for compute shader programs. Inheritance Object ResourceConfiguration < Shader > ShaderConfiguration ComputeProgramConfiguration Implements IResourceConfiguration Inherited Members ShaderConfiguration.RenderState ShaderConfiguration.ShaderUniforms ShaderConfiguration.BufferBindings ShaderConfiguration.FramebufferAttachments ShaderConfiguration.Framebuffer ResourceConfiguration<Shader>.Name ResourceConfiguration<Shader>.IResourceConfiguration.Type ResourceConfiguration<Shader>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Shader>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class ComputeProgramConfiguration : ShaderConfiguration, IResourceConfiguration Properties | Improve this Doc View Source ComputeShader Gets or sets the path to the compute shader file. Declaration [FileNameFilter(\"Compute Shader Files (*.comp)|*.comp|All Files (*.*)|*.*\")] public string ComputeShader { get; set; } Property Value Type Description String | Improve this Doc View Source WorkGroups Gets or sets a value specifying the number of workgroups to be launched when dispatching the compute shader. Declaration public DispatchParameters WorkGroups { get; set; } Property Value Type Description DispatchParameters Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new compute shader program resource. Declaration public override Shader CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description Shader A new instance of the Shader class representing the compiled compute shader. Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Shaders.Shader>.CreateResource(Bonsai.Resources.ResourceManager) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Shaders.Shader>.ToString() Implements IResourceConfiguration"
  },
  "api/Bonsai.Shaders.Configuration.Cubemap.html": {
    "href": "api/Bonsai.Shaders.Configuration.Cubemap.html",
    "title": "Class Cubemap",
    "keywords": "Class Cubemap Provides configuration and loading functionality for cubemap texture resources. Inheritance Object ResourceConfiguration < Texture > TextureConfiguration Cubemap ImageCubemap Implements IResourceConfiguration Inherited Members ResourceConfiguration<Texture>.Name ResourceConfiguration<Texture>.IResourceConfiguration.Type ResourceConfiguration<Texture>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Texture>.ToString() ResourceConfiguration<Texture>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class Cubemap : TextureConfiguration, IResourceConfiguration Properties | Improve this Doc View Source FaceSize Gets or sets the texture size for each of the cubemap faces. Declaration public int? FaceSize { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source InternalFormat Gets or sets a value specifying the internal pixel format of the cubemap. Declaration public PixelInternalFormat InternalFormat { get; set; } Property Value Type Description PixelInternalFormat | Improve this Doc View Source MagFilter Gets or sets a value specifying the texture magnification filter. Declaration public TextureMagFilter MagFilter { get; set; } Property Value Type Description TextureMagFilter | Improve this Doc View Source MinFilter Gets or sets a value specifying the texture minification filter. Declaration public TextureMinFilter MinFilter { get; set; } Property Value Type Description TextureMinFilter Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new cubemap texture resource. Declaration public override Texture CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description Texture A new instance of the Texture class representing the cubemap texture. Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Shaders.Texture>.CreateResource(Bonsai.Resources.ResourceManager) Implements IResourceConfiguration"
  },
  "api/Bonsai.Shaders.Configuration.DepthFunctionState.html": {
    "href": "api/Bonsai.Shaders.Configuration.DepthFunctionState.html",
    "title": "Class DepthFunctionState",
    "keywords": "Class DepthFunctionState Represents a configuration object specifying the function used for depth buffer comparisons. Inheritance Object StateConfiguration DepthFunctionState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class DepthFunctionState : StateConfiguration Properties | Improve this Doc View Source Function Gets or sets a value specifying the function used for depth buffer comparisons. Declaration public DepthFunction Function { get; set; } Property Value Type Description DepthFunction Methods | Improve this Doc View Source Execute(ShaderWindow) Updates the state of the current graphics context. Declaration public override void Execute(ShaderWindow window) Parameters Type Name Description ShaderWindow window The shader window associated with the current graphics context. Overrides StateConfiguration.Execute(ShaderWindow) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.DepthMaskState.html": {
    "href": "api/Bonsai.Shaders.Configuration.DepthMaskState.html",
    "title": "Class DepthMaskState",
    "keywords": "Class DepthMaskState Represents a configuration object specifying whether the depth buffer is enabled for writing. Inheritance Object StateConfiguration DepthMaskState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class DepthMaskState : StateConfiguration Properties | Improve this Doc View Source Enabled Gets or sets a value specifying whether the depth buffer is enabled for writing. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Execute(ShaderWindow) Updates the state of the current graphics context. Declaration public override void Execute(ShaderWindow window) Parameters Type Name Description ShaderWindow window The shader window associated with the current graphics context. Overrides StateConfiguration.Execute(ShaderWindow) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.Design.BufferBindingConfigurationCollectionEditor.html": {
    "href": "api/Bonsai.Shaders.Configuration.Design.BufferBindingConfigurationCollectionEditor.html",
    "title": "Class BufferBindingConfigurationCollectionEditor",
    "keywords": "Class BufferBindingConfigurationCollectionEditor Provides a user interface editor that displays a dialog for editing a collection of buffer binding configuration objects. Inheritance Object UITypeEditor CollectionEditor BufferBindingConfigurationCollectionEditor Inherited Members CollectionEditor.CollectionType CollectionEditor.CollectionItemType CollectionEditor.NewItemTypes CollectionEditor.CreateCollectionItemType() CollectionEditor.CreateEditorDialog() CollectionEditor.GetEditStyle(ITypeDescriptorContext) CollectionEditor.SetItems(Object, IEnumerable) CollectionEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration.Design Assembly : Bonsai.Shaders.Design.dll Syntax public class BufferBindingConfigurationCollectionEditor : CollectionEditor Constructors | Improve this Doc View Source BufferBindingConfigurationCollectionEditor(Type) Initializes a new instance of the BufferBindingConfigurationCollectionEditor class using the specified collection type. Declaration public BufferBindingConfigurationCollectionEditor(Type type) Parameters Type Name Description Type type The type of the collection for this editor to edit. Methods | Improve this Doc View Source CreateNewItemTypes() Gets the available types of items that can be created for this collection. Declaration protected override Type[] CreateNewItemTypes() Returns Type Description Type [] An array of types that this collection can contain. Overrides CollectionEditor.CreateNewItemTypes() | Improve this Doc View Source GetDisplayText(Object) Retrieves the display text for the specified collection item. Declaration protected override string GetDisplayText(object value) Parameters Type Name Description Object value The collection item for which to retrieve display text. Returns Type Description String The display text for the specified item value. Overrides CollectionEditor.GetDisplayText(Object)"
  },
  "api/Bonsai.Shaders.Configuration.Design.FramebufferAttachmentConfigurationCollectionEditor.html": {
    "href": "api/Bonsai.Shaders.Configuration.Design.FramebufferAttachmentConfigurationCollectionEditor.html",
    "title": "Class FramebufferAttachmentConfigurationCollectionEditor",
    "keywords": "Class FramebufferAttachmentConfigurationCollectionEditor Provides a user interface editor that displays a dialog for editing a collection of framebuffer attachment configuration objects. Inheritance Object UITypeEditor CollectionEditor FramebufferAttachmentConfigurationCollectionEditor Inherited Members CollectionEditor.CollectionType CollectionEditor.CollectionItemType CollectionEditor.NewItemTypes CollectionEditor.CreateCollectionItemType() CollectionEditor.CreateNewItemTypes() CollectionEditor.CreateEditorDialog() CollectionEditor.GetEditStyle(ITypeDescriptorContext) CollectionEditor.SetItems(Object, IEnumerable) CollectionEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration.Design Assembly : Bonsai.Shaders.Design.dll Syntax public class FramebufferAttachmentConfigurationCollectionEditor : CollectionEditor Constructors | Improve this Doc View Source FramebufferAttachmentConfigurationCollectionEditor(Type) Initializes a new instance of the FramebufferAttachmentConfigurationCollectionEditor class using the specified collection type. Declaration public FramebufferAttachmentConfigurationCollectionEditor(Type type) Parameters Type Name Description Type type The type of the collection for this editor to edit. Methods | Improve this Doc View Source GetDisplayText(Object) Retrieves the display text for the specified collection item. Declaration protected override string GetDisplayText(object value) Parameters Type Name Description Object value The collection item for which to retrieve display text. Returns Type Description String The display text for the specified item value. Overrides CollectionEditor.GetDisplayText(Object)"
  },
  "api/Bonsai.Shaders.Configuration.Design.html": {
    "href": "api/Bonsai.Shaders.Configuration.Design.html",
    "title": "Namespace Bonsai.Shaders.Configuration.Design",
    "keywords": "Namespace Bonsai.Shaders.Configuration.Design Classes BufferBindingConfigurationCollectionEditor Provides a user interface editor that displays a dialog for editing a collection of buffer binding configuration objects. FramebufferAttachmentConfigurationCollectionEditor Provides a user interface editor that displays a dialog for editing a collection of framebuffer attachment configuration objects. ShaderScriptComponentEditor Provides a custom user interface for editing and validating GLSL shader scripts. StateConfigurationCollectionEditor Provides a user interface editor that displays a dialog for editing a collection of render state configuration objects. UniformConfigurationCollectionEditor Provides a user interface editor that displays a dialog for editing a collection of shader uniform configuration objects."
  },
  "api/Bonsai.Shaders.Configuration.Design.ShaderScriptComponentEditor.html": {
    "href": "api/Bonsai.Shaders.Configuration.Design.ShaderScriptComponentEditor.html",
    "title": "Class ShaderScriptComponentEditor",
    "keywords": "Class ShaderScriptComponentEditor Provides a custom user interface for editing and validating GLSL shader scripts. Inheritance Object ComponentEditor WorkflowComponentEditor ShaderScriptComponentEditor Inherited Members WorkflowComponentEditor.EditComponent(Object, IServiceProvider, IWin32Window) WorkflowComponentEditor.EditComponent(ITypeDescriptorContext, Object) ComponentEditor.EditComponent(Object) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration.Design Assembly : Bonsai.Shaders.Design.dll Syntax public class ShaderScriptComponentEditor : WorkflowComponentEditor Methods | Improve this Doc View Source EditComponent(ITypeDescriptorContext, Object, IServiceProvider, IWin32Window) Edits the component and returns a value indicating whether the component was modified using the specified context and a parent window handle. Declaration public override bool EditComponent(ITypeDescriptorContext context, object component, IServiceProvider provider, IWin32Window owner) Parameters Type Name Description ITypeDescriptorContext context An optional context object that can be used to obtain further information about the edit. Object component The component to be edited. IServiceProvider provider A service provider that this editor can use to obtain services. IWin32Window owner The window handle which contains any editor dialogs. Returns Type Description Boolean true if the component was modified; otherwise, false . Overrides WorkflowComponentEditor.EditComponent(ITypeDescriptorContext, Object, IServiceProvider, IWin32Window) | Improve this Doc View Source GetShaderExamples() Gets the GLSL example scripts that can be created from this editor. Declaration protected virtual GlslScriptExample[] GetShaderExamples() Returns Type Description GlslScriptExample [] An array of GLSL examples that this editor can create."
  },
  "api/Bonsai.Shaders.Configuration.Design.StateConfigurationCollectionEditor.html": {
    "href": "api/Bonsai.Shaders.Configuration.Design.StateConfigurationCollectionEditor.html",
    "title": "Class StateConfigurationCollectionEditor",
    "keywords": "Class StateConfigurationCollectionEditor Provides a user interface editor that displays a dialog for editing a collection of render state configuration objects. Inheritance Object UITypeEditor CollectionEditor StateConfigurationCollectionEditor Inherited Members CollectionEditor.CollectionType CollectionEditor.CollectionItemType CollectionEditor.NewItemTypes CollectionEditor.CreateCollectionItemType() CollectionEditor.GetDisplayText(Object) CollectionEditor.CreateEditorDialog() CollectionEditor.GetEditStyle(ITypeDescriptorContext) CollectionEditor.SetItems(Object, IEnumerable) CollectionEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration.Design Assembly : Bonsai.Shaders.Design.dll Syntax public class StateConfigurationCollectionEditor : CollectionEditor Constructors | Improve this Doc View Source StateConfigurationCollectionEditor(Type) Initializes a new instance of the StateConfigurationCollectionEditor class using the specified collection type. Declaration public StateConfigurationCollectionEditor(Type type) Parameters Type Name Description Type type The type of the collection for this editor to edit. Methods | Improve this Doc View Source CreateNewItemTypes() Gets the available types of items that can be created for this collection. Declaration protected override Type[] CreateNewItemTypes() Returns Type Description Type [] An array of types that this collection can contain. Overrides CollectionEditor.CreateNewItemTypes()"
  },
  "api/Bonsai.Shaders.Configuration.Design.UniformConfigurationCollectionEditor.html": {
    "href": "api/Bonsai.Shaders.Configuration.Design.UniformConfigurationCollectionEditor.html",
    "title": "Class UniformConfigurationCollectionEditor",
    "keywords": "Class UniformConfigurationCollectionEditor Provides a user interface editor that displays a dialog for editing a collection of shader uniform configuration objects. Inheritance Object UITypeEditor CollectionEditor UniformConfigurationCollectionEditor Inherited Members CollectionEditor.CollectionType CollectionEditor.CollectionItemType CollectionEditor.NewItemTypes CollectionEditor.CreateCollectionItemType() CollectionEditor.CreateEditorDialog() CollectionEditor.GetEditStyle(ITypeDescriptorContext) CollectionEditor.SetItems(Object, IEnumerable) CollectionEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration.Design Assembly : Bonsai.Shaders.Design.dll Syntax public class UniformConfigurationCollectionEditor : CollectionEditor Constructors | Improve this Doc View Source UniformConfigurationCollectionEditor(Type) Initializes a new instance of the UniformConfigurationCollectionEditor class using the specified collection type. Declaration public UniformConfigurationCollectionEditor(Type type) Parameters Type Name Description Type type The type of the collection for this editor to edit. Methods | Improve this Doc View Source CreateNewItemTypes() Gets the available types of items that can be created for this collection. Declaration protected override Type[] CreateNewItemTypes() Returns Type Description Type [] An array of types that this collection can contain. Overrides CollectionEditor.CreateNewItemTypes() | Improve this Doc View Source GetDisplayText(Object) Retrieves the display text for the specified collection item. Declaration protected override string GetDisplayText(object value) Parameters Type Name Description Object value The collection item for which to retrieve display text. Returns Type Description String The display text for the specified item value. Overrides CollectionEditor.GetDisplayText(Object)"
  },
  "api/Bonsai.Shaders.Configuration.DisableState.html": {
    "href": "api/Bonsai.Shaders.Configuration.DisableState.html",
    "title": "Class DisableState",
    "keywords": "Class DisableState Represents a configuration object for disabling the specified render state capability. Inheritance Object StateConfiguration DisableState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class DisableState : StateConfiguration Properties | Improve this Doc View Source Capability Gets or sets a value specifying the render state capability to disable. Declaration public EnableCap Capability { get; set; } Property Value Type Description EnableCap Methods | Improve this Doc View Source Execute(ShaderWindow) Updates the state of the current graphics context. Declaration public override void Execute(ShaderWindow window) Parameters Type Name Description ShaderWindow window The shader window associated with the current graphics context. Overrides StateConfiguration.Execute(ShaderWindow) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.EnableState.html": {
    "href": "api/Bonsai.Shaders.Configuration.EnableState.html",
    "title": "Class EnableState",
    "keywords": "Class EnableState Represents a configuration object for enabling the specified render state capability. Inheritance Object StateConfiguration EnableState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class EnableState : StateConfiguration Properties | Improve this Doc View Source Capability Gets or sets a value specifying the render state capability to enable. Declaration public EnableCap Capability { get; set; } Property Value Type Description EnableCap Methods | Improve this Doc View Source Execute(ShaderWindow) Updates the state of the current graphics context. Declaration public override void Execute(ShaderWindow window) Parameters Type Name Description ShaderWindow window The shader window associated with the current graphics context. Overrides StateConfiguration.Execute(ShaderWindow) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.FloatUniform.html": {
    "href": "api/Bonsai.Shaders.Configuration.FloatUniform.html",
    "title": "Class FloatUniform",
    "keywords": "Class FloatUniform Represents a configuration object for initializing the value of a shader uniform variable with one floating-point component. Inheritance Object UniformConfiguration FloatUniform Inherited Members UniformConfiguration.Name Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class FloatUniform : UniformConfiguration Properties | Improve this Doc View Source Value Gets or sets the value used to initialize the shader uniform. Declaration public float Value { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.FramebufferAttachmentConfiguration.html",
    "title": "Class FramebufferAttachmentConfiguration",
    "keywords": "Class FramebufferAttachmentConfiguration Represents a configuration object specifying the texture to attach in a framebuffer attachment slot for render to texture shader passes. Inheritance Object FramebufferAttachmentConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class FramebufferAttachmentConfiguration Constructors | Improve this Doc View Source FramebufferAttachmentConfiguration() Initializes a new instance of the FramebufferAttachmentConfiguration class. Declaration public FramebufferAttachmentConfiguration() Properties | Improve this Doc View Source Attachment Gets or sets a value specifying the framebuffer attachment slot. Declaration public FramebufferAttachment Attachment { get; set; } Property Value Type Description FramebufferAttachment | Improve this Doc View Source ClearColor Gets or sets the color used to clear the framebuffer before rendering. Declaration public Color ClearColor { get; set; } Property Value Type Description Color | Improve this Doc View Source ClearColorHtml Gets or sets an HTML representation of the clear color value for serialization. Declaration [Browsable(false)] public string ClearColorHtml { get; set; } Property Value Type Description String | Improve this Doc View Source ClearMask Gets or sets a value specifying which buffers to clear before rendering. Declaration public ClearBufferMask ClearMask { get; set; } Property Value Type Description ClearBufferMask | Improve this Doc View Source Format Gets or sets a value specifying the pixel format of the framebuffer texture. Declaration public PixelFormat Format { get; set; } Property Value Type Description PixelFormat | Improve this Doc View Source Height Gets or sets the height of the framebuffer texture attachment. If no value is specified, the height of the render window will be used. Declaration public int? Height { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source InternalFormat Gets or sets a value specifying the internal pixel format of the framebuffer texture. Declaration public PixelInternalFormat InternalFormat { get; set; } Property Value Type Description PixelInternalFormat | Improve this Doc View Source TextureName Gets or sets the name of the texture to attach to the framebuffer. Declaration [TypeConverter(typeof(TextureNameConverter))] public string TextureName { get; set; } Property Value Type Description String | Improve this Doc View Source Type Gets or sets a value specifying the pixel type of the framebuffer texture. Declaration public PixelType Type { get; set; } Property Value Type Description PixelType | Improve this Doc View Source Width Gets or sets the width of the framebuffer texture attachment. If no value is specified, the width of the render window will be used. Declaration public int? Width { get; set; } Property Value Type Description Nullable < Int32 >"
  },
  "api/Bonsai.Shaders.Configuration.FramebufferConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.FramebufferConfiguration.html",
    "title": "Class FramebufferConfiguration",
    "keywords": "Class FramebufferConfiguration Represents a configuration object specifying the framebuffer object used for render to texture shader passes. Inheritance Object FramebufferConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class FramebufferConfiguration Properties | Improve this Doc View Source FramebufferAttachments Gets the collection of configuration objects specifying the framebuffer attachment slots used to render the framebuffer. Declaration public Collection<FramebufferAttachmentConfiguration> FramebufferAttachments { get; } Property Value Type Description Collection < FramebufferAttachmentConfiguration >"
  },
  "api/Bonsai.Shaders.Configuration.GraphicsModeConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.GraphicsModeConfiguration.html",
    "title": "Class GraphicsModeConfiguration",
    "keywords": "Class GraphicsModeConfiguration Represents a configuration object for defining the format for all graphics operations in the graphics context. Inheritance Object GraphicsModeConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class GraphicsModeConfiguration Properties | Improve this Doc View Source AccumulatorFormat Gets or sets a value specifying the color format of the accumulator buffer. Declaration public ColorFormatConfiguration AccumulatorFormat { get; set; } Property Value Type Description ColorFormatConfiguration | Improve this Doc View Source Buffers Gets or sets the number of render buffers. Typical values include one (single-), two (double-) or three (triple-buffering). Declaration public int Buffers { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ColorFormat Gets or sets a value specifying the color format of the color buffer. Declaration public ColorFormatConfiguration ColorFormat { get; set; } Property Value Type Description ColorFormatConfiguration | Improve this Doc View Source Depth Gets or sets the number of bits in the depth buffer. Declaration public int Depth { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Samples Gets or sets the number of samples to use for full screen anti-aliasing. Declaration public int Samples { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Stencil Gets or sets the number of bits in the stencil buffer. Declaration public int Stencil { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Stereo Gets or sets a value specifying whether to create a graphics mode with stereo capabilities. Declaration public bool Stereo { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source CreateGraphicsMode() Creates a new instance of the GraphicsMode class specifying the format for graphics operations. Declaration public GraphicsMode CreateGraphicsMode() Returns Type Description GraphicsMode A new instance of the GraphicsMode class using the specified format properties of this configuration object. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.HintState.html": {
    "href": "api/Bonsai.Shaders.Configuration.HintState.html",
    "title": "Class HintState",
    "keywords": "Class HintState Represents a configuration object for specifying implementation-specific render hints. Inheritance Object StateConfiguration HintState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class HintState : StateConfiguration Properties | Improve this Doc View Source Mode Gets or sets a value specifying the desired behavior. Declaration public HintMode Mode { get; set; } Property Value Type Description HintMode | Improve this Doc View Source Target Gets or sets a value specifying the implementation specific behavior to be controlled. Declaration public HintTarget Target { get; set; } Property Value Type Description HintTarget Methods | Improve this Doc View Source Execute(ShaderWindow) Updates the state of the current graphics context. Declaration public override void Execute(ShaderWindow window) Parameters Type Name Description ShaderWindow window The shader window associated with the current graphics context. Overrides StateConfiguration.Execute(ShaderWindow) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.html": {
    "href": "api/Bonsai.Shaders.Configuration.html",
    "title": "Namespace Bonsai.Shaders.Configuration",
    "keywords": "Namespace Bonsai.Shaders.Configuration Classes BlendFunctionState Represents a configuration object specifying the operation of blending for all draw buffers. BufferBindingConfiguration Provides an abstract base class for binding uniform variables to buffer objects. BufferBindingConfigurationCollection Represents a collection of buffer binding configuration objects. ClearColorState Represents a configuration object specifying the color used to clear the framebuffer. ComputeProgramConfiguration Provides configuration and loading functionality for compute shader programs. Cubemap Provides configuration and loading functionality for cubemap texture resources. DepthFunctionState Represents a configuration object specifying the function used for depth buffer comparisons. DepthMaskState Represents a configuration object specifying whether the depth buffer is enabled for writing. DisableState Represents a configuration object for disabling the specified render state capability. EnableState Represents a configuration object for enabling the specified render state capability. FloatUniform Represents a configuration object for initializing the value of a shader uniform variable with one floating-point component. FramebufferAttachmentConfiguration Represents a configuration object specifying the texture to attach in a framebuffer attachment slot for render to texture shader passes. FramebufferConfiguration Represents a configuration object specifying the framebuffer object used for render to texture shader passes. GraphicsModeConfiguration Represents a configuration object for defining the format for all graphics operations in the graphics context. HintState Represents a configuration object for specifying implementation-specific render hints. ImageCubemap Provides configuration and loading functionality for initializing cubemap texture resources from the specified image files. ImageSequence Provides configuration and loading functionality for initializing texture sequences from a movie file or image sequence search pattern. ImageTexture Provides configuration and loading functionality for initializing a two-dimensional texture resource from the specified image file. ImageTextureBindingConfiguration Represents a configuration object for binding a texture to a shader image uniform. LineWidthState Represents a configuration object for specifying the width of rasterized lines. MaterialConfiguration Provides configuration and loading functionality for material shader programs. MemoryBarrierState Represents a configuration object for specifying barriers to order memory operations. MeshBindingConfiguration Represents a configuration object for binding a mesh vertex buffer object to a shader uniform. MeshConfiguration Provides configuration and loading functionality for mesh resources. MeshConfigurationCollection Represents a collection of mesh configuration objects. PointSizeState Represents a configuration object for specifying the diameter of rasterized points. PolygonModeState Represents a configuration object for specifying the polygon rasterization mode. ScissorState Represents a configuration object for specifying the active scissor box. Any fragments falling outside the scissor box will be discarded. ShaderConfiguration Provides the abstract base class for configuring and loading shader resources. ShaderConfigurationCollection Represents a collection of shader configuration objects. ShaderWindowSettings Represents the configuration settings used to initialize a shader window. StateConfiguration Provides an abstract base class for configuring the state of the current graphics context. StateConfigurationCollection Represents a collection of render state configuration objects. Texture2D Provides configuration and loading functionality for two-dimensional texture resources. TextureBindingConfiguration Represents a configuration object for binding a texture to a shader sampler uniform. TextureConfiguration Provides the abstract base class for configuring and loading texture resources. TextureConfigurationCollection Represents a collection of texture configuration objects. TexturedModel Provides configuration and loading functionality for textured mesh resources specified as OBJ files. TexturedQuad Provides configuration and loading functionality for mesh resources using a simple textured quad geometry. UniformConfiguration Provides an abstract base class for initializing the value of a shader uniform variable. UniformConfigurationCollection Represents a collection of configuration objects used to initialize the values of uniform variables in a shader program. Vec2Uniform Represents a configuration object for initializing the value of a shader uniform variable with two floating-point components. Vec3Uniform Represents a configuration object for initializing the value of a shader uniform variable with three floating-point components. Vec4Uniform Represents a configuration object for initializing the value of a shader uniform variable with four floating-point components. VideoTexture Provides configuration and loading functionality for initializing streaming texture sequences from a movie file. ViewportEffectConfiguration Provides configuration and loading functionality for viewport effect shader programs. ViewportState Represents a configuration object for specifying the active viewport for rendering, in normalized coordinates. Structs ColorFormatConfiguration Represents a configuration object specifying the color format of a draw buffer."
  },
  "api/Bonsai.Shaders.Configuration.ImageCubemap.html": {
    "href": "api/Bonsai.Shaders.Configuration.ImageCubemap.html",
    "title": "Class ImageCubemap",
    "keywords": "Class ImageCubemap Provides configuration and loading functionality for initializing cubemap texture resources from the specified image files. Inheritance Object ResourceConfiguration < Texture > TextureConfiguration Cubemap ImageCubemap Implements IResourceConfiguration Inherited Members Cubemap.FaceSize Cubemap.InternalFormat Cubemap.MinFilter Cubemap.MagFilter ResourceConfiguration<Texture>.Name ResourceConfiguration<Texture>.IResourceConfiguration.Type ResourceConfiguration<Texture>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Texture>.ToString() ResourceConfiguration<Texture>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class ImageCubemap : Cubemap, IResourceConfiguration Properties | Improve this Doc View Source ColorType Gets or sets a value specifying optional conversions applied to the loaded image. Declaration public LoadImageFlags ColorType { get; set; } Property Value Type Description LoadImageFlags | Improve this Doc View Source FlipMode Gets or sets a value specifying the optional flip mode applied to the loaded image. Declaration public FlipMode? FlipMode { get; set; } Property Value Type Description Nullable < FlipMode > | Improve this Doc View Source NegativeX Gets or sets the name of the image file to load for the negative X direction. Declaration [FileNameFilter(\"Image Files|*.png;*.bmp;*.jpg;*.jpeg;*.tif|PNG Files (*.png)|*.png|BMP Files (*.bmp)|*.bmp|JPEG Files (*.jpg;*.jpeg)|*.jpg;*.jpeg|TIFF Files (*.tif)|*.tif\")] [TypeConverter(typeof(ResourceFileNameConverter))] public string NegativeX { get; set; } Property Value Type Description String | Improve this Doc View Source NegativeY Gets or sets the name of the image file to load for the negative Y direction. Declaration [FileNameFilter(\"Image Files|*.png;*.bmp;*.jpg;*.jpeg;*.tif|PNG Files (*.png)|*.png|BMP Files (*.bmp)|*.bmp|JPEG Files (*.jpg;*.jpeg)|*.jpg;*.jpeg|TIFF Files (*.tif)|*.tif\")] [TypeConverter(typeof(ResourceFileNameConverter))] public string NegativeY { get; set; } Property Value Type Description String | Improve this Doc View Source NegativeZ Gets or sets the name of the image file to load for the negative Z direction. Declaration [FileNameFilter(\"Image Files|*.png;*.bmp;*.jpg;*.jpeg;*.tif|PNG Files (*.png)|*.png|BMP Files (*.bmp)|*.bmp|JPEG Files (*.jpg;*.jpeg)|*.jpg;*.jpeg|TIFF Files (*.tif)|*.tif\")] [TypeConverter(typeof(ResourceFileNameConverter))] public string NegativeZ { get; set; } Property Value Type Description String | Improve this Doc View Source PositiveX Gets or sets the name of the image file to load for the positive X direction. Declaration [FileNameFilter(\"Image Files|*.png;*.bmp;*.jpg;*.jpeg;*.tif|PNG Files (*.png)|*.png|BMP Files (*.bmp)|*.bmp|JPEG Files (*.jpg;*.jpeg)|*.jpg;*.jpeg|TIFF Files (*.tif)|*.tif\")] [TypeConverter(typeof(ResourceFileNameConverter))] public string PositiveX { get; set; } Property Value Type Description String | Improve this Doc View Source PositiveY Gets or sets the name of the image file to load for the positive Y direction. Declaration [FileNameFilter(\"Image Files|*.png;*.bmp;*.jpg;*.jpeg;*.tif|PNG Files (*.png)|*.png|BMP Files (*.bmp)|*.bmp|JPEG Files (*.jpg;*.jpeg)|*.jpg;*.jpeg|TIFF Files (*.tif)|*.tif\")] [TypeConverter(typeof(ResourceFileNameConverter))] public string PositiveY { get; set; } Property Value Type Description String | Improve this Doc View Source PositiveZ Gets or sets the name of the image file to load for the positive Z direction. Declaration [FileNameFilter(\"Image Files|*.png;*.bmp;*.jpg;*.jpeg;*.tif|PNG Files (*.png)|*.png|BMP Files (*.bmp)|*.bmp|JPEG Files (*.jpg;*.jpeg)|*.jpg;*.jpeg|TIFF Files (*.tif)|*.tif\")] [TypeConverter(typeof(ResourceFileNameConverter))] public string PositiveZ { get; set; } Property Value Type Description String Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new cubemap texture resource from the specified image files. Declaration public override Texture CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description Texture A new instance of the Texture class representing the cubemap texture. Overrides Cubemap.CreateResource(ResourceManager) Implements IResourceConfiguration"
  },
  "api/Bonsai.Shaders.Configuration.ImageSequence.html": {
    "href": "api/Bonsai.Shaders.Configuration.ImageSequence.html",
    "title": "Class ImageSequence",
    "keywords": "Class ImageSequence Provides configuration and loading functionality for initializing texture sequences from a movie file or image sequence search pattern. Inheritance Object ResourceConfiguration < Texture > TextureConfiguration Texture2D ImageSequence VideoTexture Implements IResourceConfiguration Inherited Members Texture2D.Width Texture2D.Height Texture2D.InternalFormat Texture2D.WrapS Texture2D.WrapT Texture2D.MinFilter Texture2D.MagFilter ResourceConfiguration<Texture>.Name ResourceConfiguration<Texture>.IResourceConfiguration.Type ResourceConfiguration<Texture>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Texture>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class ImageSequence : Texture2D, IResourceConfiguration Properties | Improve this Doc View Source FileName Gets or sets the path to a movie file or image sequence search pattern. Declaration [TypeConverter(typeof(ResourceFileNameConverter))] [FileNameFilter(\"Video Files|*.avi;*.mp4;*.ogg;*.ogv;*.wmv|AVI Files (*.avi)|*.avi|MP4 Files (*.mp4)|*.mp4|OGG Files (*.ogg;*.ogv)|*.ogg;*.ogv|WMV Files (*.wmv)|*.wmv\")] public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source FlipMode Gets or sets a value specifying the flip mode applied to individual frames. Declaration public FlipMode? FlipMode { get; set; } Property Value Type Description Nullable < FlipMode > | Improve this Doc View Source FrameCount Gets or sets the maximum number of frames to include in the image sequence. Declaration public int? FrameCount { get; set; } Property Value Type Description Nullable < Int32 > Remarks If no value is specified, all frames in the video will be loaded in the image sequence. | Improve this Doc View Source StartPosition Gets or sets the offset, in frames, at which the image sequence should start. Declaration public int StartPosition { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new instance of the Texture class containing all loaded texture resources in the image sequence. Declaration public override Texture CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description Texture A new instance of the Texture class representing the image texture sequence. Overrides Texture2D.CreateResource(ResourceManager) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Shaders.Texture>.ToString() Implements IResourceConfiguration"
  },
  "api/Bonsai.Shaders.Configuration.ImageTexture.html": {
    "href": "api/Bonsai.Shaders.Configuration.ImageTexture.html",
    "title": "Class ImageTexture",
    "keywords": "Class ImageTexture Provides configuration and loading functionality for initializing a two-dimensional texture resource from the specified image file. Inheritance Object ResourceConfiguration < Texture > TextureConfiguration Texture2D ImageTexture Implements IResourceConfiguration Inherited Members Texture2D.Width Texture2D.Height Texture2D.InternalFormat Texture2D.WrapS Texture2D.WrapT Texture2D.MinFilter Texture2D.MagFilter ResourceConfiguration<Texture>.Name ResourceConfiguration<Texture>.IResourceConfiguration.Type ResourceConfiguration<Texture>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Texture>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class ImageTexture : Texture2D, IResourceConfiguration Properties | Improve this Doc View Source ColorType Gets or sets a value specifying the color type of the loaded image. Declaration public LoadImageFlags ColorType { get; set; } Property Value Type Description LoadImageFlags | Improve this Doc View Source FileName Gets or sets the name of the image file. Declaration [TypeConverter(typeof(ResourceFileNameConverter))] [FileNameFilter(\"Image Files|*.png;*.bmp;*.jpg;*.jpeg;*.tif;*.tiff;*.exr|PNG Files|*.png|BMP Files|*.bmp|JPEG Files|*.jpg;*.jpeg|TIFF Files|*.tif;*.tiff|EXR Files|*.exr|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source FlipMode Gets or sets a value specifying the flip mode applied to the loaded image. Declaration public FlipMode? FlipMode { get; set; } Property Value Type Description Nullable < FlipMode > Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new two-dimensional texture resource from the specified image file. Declaration public override Texture CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description Texture A new instance of the Texture class representing the 2D texture. Overrides Texture2D.CreateResource(ResourceManager) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Shaders.Texture>.ToString() Implements IResourceConfiguration"
  },
  "api/Bonsai.Shaders.Configuration.ImageTextureBindingConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.ImageTextureBindingConfiguration.html",
    "title": "Class ImageTextureBindingConfiguration",
    "keywords": "Class ImageTextureBindingConfiguration Represents a configuration object for binding a texture to a shader image uniform. Inheritance Object BufferBindingConfiguration TextureBindingConfiguration ImageTextureBindingConfiguration Inherited Members TextureBindingConfiguration.TextureSlot TextureBindingConfiguration.TextureName TextureBindingConfiguration.TextureTarget BufferBindingConfiguration.Name Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class ImageTextureBindingConfiguration : TextureBindingConfiguration Properties | Improve this Doc View Source Access Gets or sets a value specifying the type of access that will be performed on the image. Declaration public TextureAccess Access { get; set; } Property Value Type Description TextureAccess | Improve this Doc View Source Format Gets or sets a value specifying the format of the image elements when the shader reads or writes image data. Declaration public SizedInternalFormat Format { get; set; } Property Value Type Description SizedInternalFormat Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides TextureBindingConfiguration.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.LineWidthState.html": {
    "href": "api/Bonsai.Shaders.Configuration.LineWidthState.html",
    "title": "Class LineWidthState",
    "keywords": "Class LineWidthState Represents a configuration object for specifying the width of rasterized lines. Inheritance Object StateConfiguration LineWidthState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class LineWidthState : StateConfiguration Properties | Improve this Doc View Source Width Gets or sets a value specifying the width of rasterized lines. Declaration public float Width { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Execute(ShaderWindow) Updates the state of the current graphics context. Declaration public override void Execute(ShaderWindow window) Parameters Type Name Description ShaderWindow window The shader window associated with the current graphics context. Overrides StateConfiguration.Execute(ShaderWindow) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.MaterialConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.MaterialConfiguration.html",
    "title": "Class MaterialConfiguration",
    "keywords": "Class MaterialConfiguration Provides configuration and loading functionality for material shader programs. Inheritance Object ResourceConfiguration < Shader > ShaderConfiguration MaterialConfiguration Implements IResourceConfiguration Inherited Members ShaderConfiguration.RenderState ShaderConfiguration.ShaderUniforms ShaderConfiguration.BufferBindings ShaderConfiguration.FramebufferAttachments ShaderConfiguration.Framebuffer ResourceConfiguration<Shader>.Name ResourceConfiguration<Shader>.IResourceConfiguration.Type ResourceConfiguration<Shader>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Shader>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class MaterialConfiguration : ShaderConfiguration, IResourceConfiguration Properties | Improve this Doc View Source FragmentShader Gets or sets the path to the fragment shader file. Declaration [FileNameFilter(\"Fragment Shader Files (*.frag)|*.frag|All Files (*.*)|*.*\")] public string FragmentShader { get; set; } Property Value Type Description String | Improve this Doc View Source GeometryShader Gets or sets the path to the geometry shader file. Declaration [FileNameFilter(\"Geometry Shader Files (*.geom)|*.geom|All Files (*.*)|*.*\")] public string GeometryShader { get; set; } Property Value Type Description String | Improve this Doc View Source MeshName Gets or sets the name of the mesh geometry to draw. Declaration [TypeConverter(typeof(MeshNameConverter))] public string MeshName { get; set; } Property Value Type Description String | Improve this Doc View Source VertexShader Gets or sets the path to the vertex shader file. Declaration [FileNameFilter(\"Vertex Shader Files (*.vert)|*.vert|All Files (*.*)|*.*\")] public string VertexShader { get; set; } Property Value Type Description String Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new material shader resource. Declaration public override Shader CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description Shader A new instance of the Shader class representing the compiled material shader. Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Shaders.Shader>.CreateResource(Bonsai.Resources.ResourceManager) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Shaders.Shader>.ToString() Implements IResourceConfiguration"
  },
  "api/Bonsai.Shaders.Configuration.MemoryBarrierState.html": {
    "href": "api/Bonsai.Shaders.Configuration.MemoryBarrierState.html",
    "title": "Class MemoryBarrierState",
    "keywords": "Class MemoryBarrierState Represents a configuration object for specifying barriers to order memory operations. Inheritance Object StateConfiguration MemoryBarrierState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class MemoryBarrierState : StateConfiguration Properties | Improve this Doc View Source Barriers Gets or sets a value specifying which memory barriers to insert. Declaration public MemoryBarrierFlags Barriers { get; set; } Property Value Type Description MemoryBarrierFlags Methods | Improve this Doc View Source Execute(ShaderWindow) Updates the state of the current graphics context. Declaration public override void Execute(ShaderWindow window) Parameters Type Name Description ShaderWindow window The shader window associated with the current graphics context. Overrides StateConfiguration.Execute(ShaderWindow) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.MeshBindingConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.MeshBindingConfiguration.html",
    "title": "Class MeshBindingConfiguration",
    "keywords": "Class MeshBindingConfiguration Represents a configuration object for binding a mesh vertex buffer object to a shader uniform. Inheritance Object BufferBindingConfiguration MeshBindingConfiguration Inherited Members BufferBindingConfiguration.Name Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class MeshBindingConfiguration : BufferBindingConfiguration Properties | Improve this Doc View Source Index Gets or sets the index of the binding point on which to bind the mesh vertex buffer object. Declaration public int Index { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MeshName Gets or sets the name of the mesh whose vertex buffer object will be bound to the shader uniform. Declaration [TypeConverter(typeof(MeshNameConverter))] public string MeshName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.MeshConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.MeshConfiguration.html",
    "title": "Class MeshConfiguration",
    "keywords": "Class MeshConfiguration Provides configuration and loading functionality for mesh resources. Inheritance Object ResourceConfiguration < Mesh > MeshConfiguration TexturedModel TexturedQuad Implements IResourceConfiguration Inherited Members ResourceConfiguration<Mesh>.Name ResourceConfiguration<Mesh>.IResourceConfiguration.Type ResourceConfiguration<Mesh>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Mesh>.ToString() ResourceConfiguration<Mesh>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class MeshConfiguration : ResourceConfiguration<Mesh>, IResourceConfiguration Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new empty mesh resource, typically used for uploading dynamic geometry data. Declaration public override Mesh CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description Mesh A new instance of the Mesh class. Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Shaders.Mesh>.CreateResource(Bonsai.Resources.ResourceManager) Implements IResourceConfiguration"
  },
  "api/Bonsai.Shaders.Configuration.MeshConfigurationCollection.html": {
    "href": "api/Bonsai.Shaders.Configuration.MeshConfigurationCollection.html",
    "title": "Class MeshConfigurationCollection",
    "keywords": "Class MeshConfigurationCollection Represents a collection of mesh configuration objects. Inheritance Object Collection < MeshConfiguration > KeyedCollection < String , MeshConfiguration > MeshConfigurationCollection Implements IList < MeshConfiguration > ICollection < MeshConfiguration > IList ICollection IReadOnlyList < MeshConfiguration > IReadOnlyCollection < MeshConfiguration > IEnumerable < MeshConfiguration > IEnumerable Inherited Members KeyedCollection<String, MeshConfiguration>.Contains(String) KeyedCollection<String, MeshConfiguration>.Remove(String) KeyedCollection<String, MeshConfiguration>.ChangeItemKey(MeshConfiguration, String) KeyedCollection<String, MeshConfiguration>.ClearItems() KeyedCollection<String, MeshConfiguration>.GetKeyForItem(MeshConfiguration) KeyedCollection<String, MeshConfiguration>.InsertItem(Int32, MeshConfiguration) KeyedCollection<String, MeshConfiguration>.RemoveItem(Int32) KeyedCollection<String, MeshConfiguration>.SetItem(Int32, MeshConfiguration) KeyedCollection<String, MeshConfiguration>.Comparer KeyedCollection<String, MeshConfiguration>.Item[String] KeyedCollection<String, MeshConfiguration>.Dictionary Collection<MeshConfiguration>.Add(MeshConfiguration) Collection<MeshConfiguration>.Clear() Collection<MeshConfiguration>.CopyTo(MeshConfiguration[], Int32) Collection<MeshConfiguration>.Contains(MeshConfiguration) Collection<MeshConfiguration>.GetEnumerator() Collection<MeshConfiguration>.IndexOf(MeshConfiguration) Collection<MeshConfiguration>.Insert(Int32, MeshConfiguration) Collection<MeshConfiguration>.Remove(MeshConfiguration) Collection<MeshConfiguration>.RemoveAt(Int32) Collection<MeshConfiguration>.ClearItems() Collection<MeshConfiguration>.InsertItem(Int32, MeshConfiguration) Collection<MeshConfiguration>.RemoveItem(Int32) Collection<MeshConfiguration>.SetItem(Int32, MeshConfiguration) Collection<MeshConfiguration>.IEnumerable.GetEnumerator() Collection<MeshConfiguration>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Configuration.MeshConfiguration>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Configuration.MeshConfiguration>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<MeshConfiguration>.IList.Add(Object) Collection<MeshConfiguration>.IList.Contains(Object) Collection<MeshConfiguration>.IList.IndexOf(Object) Collection<MeshConfiguration>.IList.Insert(Int32, Object) Collection<MeshConfiguration>.IList.Remove(Object) Collection<MeshConfiguration>.Count Collection<MeshConfiguration>.Items Collection<MeshConfiguration>.Item[Int32] Collection<MeshConfiguration>.ICollection<MeshConfiguration>.IsReadOnly Collection<MeshConfiguration>.ICollection.IsSynchronized Collection<MeshConfiguration>.ICollection.SyncRoot Collection<MeshConfiguration>.IList.Item[Int32] Collection<MeshConfiguration>.IList.IsReadOnly Collection<MeshConfiguration>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class MeshConfigurationCollection : KeyedCollection<string, MeshConfiguration>, IList<MeshConfiguration>, ICollection<MeshConfiguration>, IList, ICollection, IReadOnlyList<MeshConfiguration>, IReadOnlyCollection<MeshConfiguration>, IEnumerable<MeshConfiguration>, IEnumerable Methods | Improve this Doc View Source GetKeyForItem(MeshConfiguration) Returns the key for the specified configuration object. Declaration protected override string GetKeyForItem(MeshConfiguration item) Parameters Type Name Description MeshConfiguration item The configuration object from which to extract the key. Returns Type Description String The key for the specified configuration object. Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Bonsai.Shaders.Configuration.MeshConfiguration>.GetKeyForItem(Bonsai.Shaders.Configuration.MeshConfiguration) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Shaders.Configuration.PointSizeState.html": {
    "href": "api/Bonsai.Shaders.Configuration.PointSizeState.html",
    "title": "Class PointSizeState",
    "keywords": "Class PointSizeState Represents a configuration object for specifying the diameter of rasterized points. Inheritance Object StateConfiguration PointSizeState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class PointSizeState : StateConfiguration Properties | Improve this Doc View Source Size Gets or sets a value specifying the diameter of rasterized points. Declaration public float Size { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Execute(ShaderWindow) Updates the state of the current graphics context. Declaration public override void Execute(ShaderWindow window) Parameters Type Name Description ShaderWindow window The shader window associated with the current graphics context. Overrides StateConfiguration.Execute(ShaderWindow) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.PolygonModeState.html": {
    "href": "api/Bonsai.Shaders.Configuration.PolygonModeState.html",
    "title": "Class PolygonModeState",
    "keywords": "Class PolygonModeState Represents a configuration object for specifying the polygon rasterization mode. Inheritance Object StateConfiguration PolygonModeState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class PolygonModeState : StateConfiguration Properties | Improve this Doc View Source Face Gets or sets a value specifying the polygons that the rasterization mode applies to. Declaration public MaterialFace Face { get; set; } Property Value Type Description MaterialFace | Improve this Doc View Source Mode Gets or sets a value specifying how polygons will be rasterized. Declaration public PolygonMode Mode { get; set; } Property Value Type Description PolygonMode Methods | Improve this Doc View Source Execute(ShaderWindow) Updates the state of the current graphics context. Declaration public override void Execute(ShaderWindow window) Parameters Type Name Description ShaderWindow window The shader window associated with the current graphics context. Overrides StateConfiguration.Execute(ShaderWindow) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.ScissorState.html": {
    "href": "api/Bonsai.Shaders.Configuration.ScissorState.html",
    "title": "Class ScissorState",
    "keywords": "Class ScissorState Represents a configuration object for specifying the active scissor box. Any fragments falling outside the scissor box will be discarded. Inheritance Object StateConfiguration ScissorState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class ScissorState : StateConfiguration Properties | Improve this Doc View Source Height Gets or sets the height of the scissor box, in normalized coordinates. Declaration public float Height { get; set; } Property Value Type Description Single | Improve this Doc View Source Width Gets or sets the width of the scissor box, in normalized coordinates. Declaration public float Width { get; set; } Property Value Type Description Single | Improve this Doc View Source X Gets or sets the x-coordinate of the lower left corner of the scissor box, in normalized coordinates. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y-coordinate of the lower left corner of the scissor box, in normalized coordinates. Declaration public float Y { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Execute(ShaderWindow) Updates the state of the current graphics context. Declaration public override void Execute(ShaderWindow window) Parameters Type Name Description ShaderWindow window The shader window associated with the current graphics context. Overrides StateConfiguration.Execute(ShaderWindow) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.ShaderConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.ShaderConfiguration.html",
    "title": "Class ShaderConfiguration",
    "keywords": "Class ShaderConfiguration Provides the abstract base class for configuring and loading shader resources. Inheritance Object ResourceConfiguration < Shader > ShaderConfiguration ComputeProgramConfiguration MaterialConfiguration ViewportEffectConfiguration Implements IResourceConfiguration Inherited Members ResourceConfiguration<Shader>.Name ResourceConfiguration<Shader>.IResourceConfiguration.Type ResourceConfiguration<Shader>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Shader>.CreateResource(ResourceManager) ResourceConfiguration<Shader>.ToString() ResourceConfiguration<Shader>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public abstract class ShaderConfiguration : ResourceConfiguration<Shader>, IResourceConfiguration Properties | Improve this Doc View Source BufferBindings Gets the collection of configuration objects specifying the buffer bindings to set before running the shader. Declaration public BufferBindingConfigurationCollection BufferBindings { get; } Property Value Type Description BufferBindingConfigurationCollection | Improve this Doc View Source Framebuffer Gets the configuration state of the framebuffer object used for render to texture passes. Declaration protected FramebufferConfiguration Framebuffer { get; } Property Value Type Description FramebufferConfiguration | Improve this Doc View Source FramebufferAttachments Gets the collection of configuration objects specifying any framebuffer attachments to use when running the shader. Declaration public Collection<FramebufferAttachmentConfiguration> FramebufferAttachments { get; } Property Value Type Description Collection < FramebufferAttachmentConfiguration > | Improve this Doc View Source RenderState Gets the collection of configuration objects specifying the render states which are required to run the shader. Declaration public StateConfigurationCollection RenderState { get; } Property Value Type Description StateConfigurationCollection | Improve this Doc View Source ShaderUniforms Gets the collection of configuration objects specifying the default values of uniform variables in the shader program. Declaration public UniformConfigurationCollection ShaderUniforms { get; } Property Value Type Description UniformConfigurationCollection Implements IResourceConfiguration"
  },
  "api/Bonsai.Shaders.Configuration.ShaderConfigurationCollection.html": {
    "href": "api/Bonsai.Shaders.Configuration.ShaderConfigurationCollection.html",
    "title": "Class ShaderConfigurationCollection",
    "keywords": "Class ShaderConfigurationCollection Represents a collection of shader configuration objects. Inheritance Object Collection < ShaderConfiguration > KeyedCollection < String , ShaderConfiguration > ShaderConfigurationCollection Implements IList < ShaderConfiguration > ICollection < ShaderConfiguration > IList ICollection IReadOnlyList < ShaderConfiguration > IReadOnlyCollection < ShaderConfiguration > IEnumerable < ShaderConfiguration > IEnumerable Inherited Members KeyedCollection<String, ShaderConfiguration>.Contains(String) KeyedCollection<String, ShaderConfiguration>.Remove(String) KeyedCollection<String, ShaderConfiguration>.ChangeItemKey(ShaderConfiguration, String) KeyedCollection<String, ShaderConfiguration>.ClearItems() KeyedCollection<String, ShaderConfiguration>.GetKeyForItem(ShaderConfiguration) KeyedCollection<String, ShaderConfiguration>.InsertItem(Int32, ShaderConfiguration) KeyedCollection<String, ShaderConfiguration>.RemoveItem(Int32) KeyedCollection<String, ShaderConfiguration>.SetItem(Int32, ShaderConfiguration) KeyedCollection<String, ShaderConfiguration>.Comparer KeyedCollection<String, ShaderConfiguration>.Item[String] KeyedCollection<String, ShaderConfiguration>.Dictionary Collection<ShaderConfiguration>.Add(ShaderConfiguration) Collection<ShaderConfiguration>.Clear() Collection<ShaderConfiguration>.CopyTo(ShaderConfiguration[], Int32) Collection<ShaderConfiguration>.Contains(ShaderConfiguration) Collection<ShaderConfiguration>.GetEnumerator() Collection<ShaderConfiguration>.IndexOf(ShaderConfiguration) Collection<ShaderConfiguration>.Insert(Int32, ShaderConfiguration) Collection<ShaderConfiguration>.Remove(ShaderConfiguration) Collection<ShaderConfiguration>.RemoveAt(Int32) Collection<ShaderConfiguration>.ClearItems() Collection<ShaderConfiguration>.InsertItem(Int32, ShaderConfiguration) Collection<ShaderConfiguration>.RemoveItem(Int32) Collection<ShaderConfiguration>.SetItem(Int32, ShaderConfiguration) Collection<ShaderConfiguration>.IEnumerable.GetEnumerator() Collection<ShaderConfiguration>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Configuration.ShaderConfiguration>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Configuration.ShaderConfiguration>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<ShaderConfiguration>.IList.Add(Object) Collection<ShaderConfiguration>.IList.Contains(Object) Collection<ShaderConfiguration>.IList.IndexOf(Object) Collection<ShaderConfiguration>.IList.Insert(Int32, Object) Collection<ShaderConfiguration>.IList.Remove(Object) Collection<ShaderConfiguration>.Count Collection<ShaderConfiguration>.Items Collection<ShaderConfiguration>.Item[Int32] Collection<ShaderConfiguration>.ICollection<ShaderConfiguration>.IsReadOnly Collection<ShaderConfiguration>.ICollection.IsSynchronized Collection<ShaderConfiguration>.ICollection.SyncRoot Collection<ShaderConfiguration>.IList.Item[Int32] Collection<ShaderConfiguration>.IList.IsReadOnly Collection<ShaderConfiguration>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class ShaderConfigurationCollection : KeyedCollection<string, ShaderConfiguration>, IList<ShaderConfiguration>, ICollection<ShaderConfiguration>, IList, ICollection, IReadOnlyList<ShaderConfiguration>, IReadOnlyCollection<ShaderConfiguration>, IEnumerable<ShaderConfiguration>, IEnumerable Methods | Improve this Doc View Source GetKeyForItem(ShaderConfiguration) Returns the key for the specified configuration object. Declaration protected override string GetKeyForItem(ShaderConfiguration item) Parameters Type Name Description ShaderConfiguration item The configuration object from which to extract the key. Returns Type Description String The key for the specified configuration object. Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Bonsai.Shaders.Configuration.ShaderConfiguration>.GetKeyForItem(Bonsai.Shaders.Configuration.ShaderConfiguration) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Shaders.Configuration.ShaderWindowSettings.html": {
    "href": "api/Bonsai.Shaders.Configuration.ShaderWindowSettings.html",
    "title": "Class ShaderWindowSettings",
    "keywords": "Class ShaderWindowSettings Represents the configuration settings used to initialize a shader window. Inheritance Object ShaderWindowSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax [TypeConverter(typeof(SettingsConverter))] public class ShaderWindowSettings Constructors | Improve this Doc View Source ShaderWindowSettings() Initializes a new instance of the ShaderWindowSettings class. Declaration public ShaderWindowSettings() Properties | Improve this Doc View Source ClearColor Gets or sets the color used to clear the framebuffer before rendering. Declaration public Color ClearColor { get; set; } Property Value Type Description Color | Improve this Doc View Source ClearColorHtml Gets or sets an HTML representation of the clear color value for serialization. Declaration [Browsable(false)] public string ClearColorHtml { get; set; } Property Value Type Description String | Improve this Doc View Source ClearMask Gets or sets a value specifying which buffers to clear before rendering. Declaration public ClearBufferMask ClearMask { get; set; } Property Value Type Description ClearBufferMask | Improve this Doc View Source CursorVisible Gets or sets a value specifying whether to hide or show the mouse cursor over the shader window. Declaration public bool CursorVisible { get; set; } Property Value Type Description Boolean | Improve this Doc View Source DisplayDevice Gets or sets a value specifying the display device index on which to create the shader window. Declaration public DisplayIndex DisplayDevice { get; set; } Property Value Type Description DisplayIndex | Improve this Doc View Source GraphicsMode Gets or sets a value specifying the graphics mode of the shader window. Declaration [TypeConverter(typeof(ExpandableObjectConverter))] public GraphicsModeConfiguration GraphicsMode { get; set; } Property Value Type Description GraphicsModeConfiguration | Improve this Doc View Source Height Gets or sets the height of the shader window, in pixels. Declaration public int Height { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Location Gets or sets a value specifying the starting location of the shader window. If no value is specified, the window will be located at the center of the screen. Declaration public Point? Location { get; set; } Property Value Type Description Nullable < Point > | Improve this Doc View Source RenderState Gets the collection of configuration objects specifying the initial render state of the shader window graphics context. Declaration public StateConfigurationCollection RenderState { get; } Property Value Type Description StateConfigurationCollection | Improve this Doc View Source SwapSync Gets or sets a value specifying whether to synchronize buffer swaps across application windows. Declaration public bool SwapSync { get; set; } Property Value Type Description Boolean | Improve this Doc View Source TargetRenderFrequency Gets or sets a value specifying the target render frequency. A value of zero indicates the maximum possible frequency will be used to generate render events. Declaration public double TargetRenderFrequency { get; set; } Property Value Type Description Double | Improve this Doc View Source TargetUpdateFrequency Gets or sets a value specifying the target update frequency. If no value is specified, the value of the target render frequency will be used. Declaration public double? TargetUpdateFrequency { get; set; } Property Value Type Description Nullable < Double > | Improve this Doc View Source Title Gets or sets the title of the shader window. Declaration public string Title { get; set; } Property Value Type Description String | Improve this Doc View Source VSync Gets or sets a value specifying the V-Sync configuration for shader window buffer swaps. Declaration public VSyncMode VSync { get; set; } Property Value Type Description VSyncMode | Improve this Doc View Source Width Gets or sets the width of the shader window, in pixels. Declaration public int Width { get; set; } Property Value Type Description Int32 | Improve this Doc View Source WindowBorder Gets or sets a value specifying the shader window border. Declaration public WindowBorder WindowBorder { get; set; } Property Value Type Description WindowBorder | Improve this Doc View Source WindowState Gets or sets a value specifying the starting state of the shader window. Declaration public WindowState WindowState { get; set; } Property Value Type Description WindowState"
  },
  "api/Bonsai.Shaders.Configuration.StateConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.StateConfiguration.html",
    "title": "Class StateConfiguration",
    "keywords": "Class StateConfiguration Provides an abstract base class for configuring the state of the current graphics context. Inheritance Object StateConfiguration BlendFunctionState ClearColorState DepthFunctionState DepthMaskState DisableState EnableState HintState LineWidthState MemoryBarrierState PointSizeState PolygonModeState ScissorState ViewportState Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public abstract class StateConfiguration Methods | Improve this Doc View Source Execute(ShaderWindow) Updates the state of the current graphics context. Declaration public abstract void Execute(ShaderWindow window) Parameters Type Name Description ShaderWindow window The shader window associated with the current graphics context."
  },
  "api/Bonsai.Shaders.Configuration.StateConfigurationCollection.html": {
    "href": "api/Bonsai.Shaders.Configuration.StateConfigurationCollection.html",
    "title": "Class StateConfigurationCollection",
    "keywords": "Class StateConfigurationCollection Represents a collection of render state configuration objects. Inheritance Object Collection < StateConfiguration > StateConfigurationCollection Implements IList < StateConfiguration > ICollection < StateConfiguration > IList ICollection IReadOnlyList < StateConfiguration > IReadOnlyCollection < StateConfiguration > IEnumerable < StateConfiguration > IEnumerable Inherited Members Collection<StateConfiguration>.Add(StateConfiguration) Collection<StateConfiguration>.Clear() Collection<StateConfiguration>.CopyTo(StateConfiguration[], Int32) Collection<StateConfiguration>.Contains(StateConfiguration) Collection<StateConfiguration>.GetEnumerator() Collection<StateConfiguration>.IndexOf(StateConfiguration) Collection<StateConfiguration>.Insert(Int32, StateConfiguration) Collection<StateConfiguration>.Remove(StateConfiguration) Collection<StateConfiguration>.RemoveAt(Int32) Collection<StateConfiguration>.ClearItems() Collection<StateConfiguration>.InsertItem(Int32, StateConfiguration) Collection<StateConfiguration>.RemoveItem(Int32) Collection<StateConfiguration>.SetItem(Int32, StateConfiguration) Collection<StateConfiguration>.IEnumerable.GetEnumerator() Collection<StateConfiguration>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Configuration.StateConfiguration>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Configuration.StateConfiguration>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<StateConfiguration>.IList.Add(Object) Collection<StateConfiguration>.IList.Contains(Object) Collection<StateConfiguration>.IList.IndexOf(Object) Collection<StateConfiguration>.IList.Insert(Int32, Object) Collection<StateConfiguration>.IList.Remove(Object) Collection<StateConfiguration>.Count Collection<StateConfiguration>.Items Collection<StateConfiguration>.Item[Int32] Collection<StateConfiguration>.ICollection<StateConfiguration>.IsReadOnly Collection<StateConfiguration>.ICollection.IsSynchronized Collection<StateConfiguration>.ICollection.SyncRoot Collection<StateConfiguration>.IList.Item[Int32] Collection<StateConfiguration>.IList.IsReadOnly Collection<StateConfiguration>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class StateConfigurationCollection : Collection<StateConfiguration>, IList<StateConfiguration>, ICollection<StateConfiguration>, IList, ICollection, IReadOnlyList<StateConfiguration>, IReadOnlyCollection<StateConfiguration>, IEnumerable<StateConfiguration>, IEnumerable Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Shaders.Configuration.Texture2D.html": {
    "href": "api/Bonsai.Shaders.Configuration.Texture2D.html",
    "title": "Class Texture2D",
    "keywords": "Class Texture2D Provides configuration and loading functionality for two-dimensional texture resources. Inheritance Object ResourceConfiguration < Texture > TextureConfiguration Texture2D ImageSequence ImageTexture Implements IResourceConfiguration Inherited Members ResourceConfiguration<Texture>.Name ResourceConfiguration<Texture>.IResourceConfiguration.Type ResourceConfiguration<Texture>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Texture>.ToString() ResourceConfiguration<Texture>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class Texture2D : TextureConfiguration, IResourceConfiguration Properties | Improve this Doc View Source Height Gets or sets the height of the texture. If no value is specified, the texture buffer will not be initialized. Declaration public int? Height { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source InternalFormat Gets or sets a value specifying the internal pixel format of the texture. Declaration public PixelInternalFormat InternalFormat { get; set; } Property Value Type Description PixelInternalFormat | Improve this Doc View Source MagFilter Gets or sets a value specifying the texture magnification filter. Declaration public TextureMagFilter MagFilter { get; set; } Property Value Type Description TextureMagFilter | Improve this Doc View Source MinFilter Gets or sets a value specifying the texture minification filter. Declaration public TextureMinFilter MinFilter { get; set; } Property Value Type Description TextureMinFilter | Improve this Doc View Source Width Gets or sets the width of the texture. If no value is specified, the texture buffer will not be initialized. Declaration public int? Width { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source WrapS Gets or sets a value specifying wrapping parameters for the column coordinates of the texture sampler. Declaration public TextureWrapMode WrapS { get; set; } Property Value Type Description TextureWrapMode | Improve this Doc View Source WrapT Gets or sets a value specifying wrapping parameters for the row coordinates of the texture sampler. Declaration public TextureWrapMode WrapT { get; set; } Property Value Type Description TextureWrapMode Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new empty two-dimensional texture resource, typically used for uploading dynamic texture data. Declaration public override Texture CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description Texture A new instance of the Texture class representing the 2D texture. Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Shaders.Texture>.CreateResource(Bonsai.Resources.ResourceManager) Implements IResourceConfiguration"
  },
  "api/Bonsai.Shaders.Configuration.TextureBindingConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.TextureBindingConfiguration.html",
    "title": "Class TextureBindingConfiguration",
    "keywords": "Class TextureBindingConfiguration Represents a configuration object for binding a texture to a shader sampler uniform. Inheritance Object BufferBindingConfiguration TextureBindingConfiguration ImageTextureBindingConfiguration Inherited Members BufferBindingConfiguration.Name Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class TextureBindingConfiguration : BufferBindingConfiguration Properties | Improve this Doc View Source TextureName Gets or sets the name of the texture that will be bound to the sampler. Declaration [TypeConverter(typeof(TextureNameConverter))] public string TextureName { get; set; } Property Value Type Description String | Improve this Doc View Source TextureSlot Gets or sets a value specifying the slot on which to bind the texture. Declaration public TextureUnit TextureSlot { get; set; } Property Value Type Description TextureUnit | Improve this Doc View Source TextureTarget Gets or sets a value specifying the texture target that will be bound to the sampler. Declaration public TextureTarget TextureTarget { get; set; } Property Value Type Description TextureTarget Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.TextureConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.TextureConfiguration.html",
    "title": "Class TextureConfiguration",
    "keywords": "Class TextureConfiguration Provides the abstract base class for configuring and loading texture resources. Inheritance Object ResourceConfiguration < Texture > TextureConfiguration Cubemap Texture2D Implements IResourceConfiguration Inherited Members ResourceConfiguration<Texture>.Name ResourceConfiguration<Texture>.IResourceConfiguration.Type ResourceConfiguration<Texture>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Texture>.CreateResource(ResourceManager) ResourceConfiguration<Texture>.ToString() ResourceConfiguration<Texture>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public abstract class TextureConfiguration : ResourceConfiguration<Texture>, IResourceConfiguration Implements IResourceConfiguration"
  },
  "api/Bonsai.Shaders.Configuration.TextureConfigurationCollection.html": {
    "href": "api/Bonsai.Shaders.Configuration.TextureConfigurationCollection.html",
    "title": "Class TextureConfigurationCollection",
    "keywords": "Class TextureConfigurationCollection Represents a collection of texture configuration objects. Inheritance Object Collection < TextureConfiguration > KeyedCollection < String , TextureConfiguration > TextureConfigurationCollection Implements IList < TextureConfiguration > ICollection < TextureConfiguration > IList ICollection IReadOnlyList < TextureConfiguration > IReadOnlyCollection < TextureConfiguration > IEnumerable < TextureConfiguration > IEnumerable Inherited Members KeyedCollection<String, TextureConfiguration>.Contains(String) KeyedCollection<String, TextureConfiguration>.Remove(String) KeyedCollection<String, TextureConfiguration>.ChangeItemKey(TextureConfiguration, String) KeyedCollection<String, TextureConfiguration>.ClearItems() KeyedCollection<String, TextureConfiguration>.GetKeyForItem(TextureConfiguration) KeyedCollection<String, TextureConfiguration>.InsertItem(Int32, TextureConfiguration) KeyedCollection<String, TextureConfiguration>.RemoveItem(Int32) KeyedCollection<String, TextureConfiguration>.SetItem(Int32, TextureConfiguration) KeyedCollection<String, TextureConfiguration>.Comparer KeyedCollection<String, TextureConfiguration>.Item[String] KeyedCollection<String, TextureConfiguration>.Dictionary Collection<TextureConfiguration>.Add(TextureConfiguration) Collection<TextureConfiguration>.Clear() Collection<TextureConfiguration>.CopyTo(TextureConfiguration[], Int32) Collection<TextureConfiguration>.Contains(TextureConfiguration) Collection<TextureConfiguration>.GetEnumerator() Collection<TextureConfiguration>.IndexOf(TextureConfiguration) Collection<TextureConfiguration>.Insert(Int32, TextureConfiguration) Collection<TextureConfiguration>.Remove(TextureConfiguration) Collection<TextureConfiguration>.RemoveAt(Int32) Collection<TextureConfiguration>.ClearItems() Collection<TextureConfiguration>.InsertItem(Int32, TextureConfiguration) Collection<TextureConfiguration>.RemoveItem(Int32) Collection<TextureConfiguration>.SetItem(Int32, TextureConfiguration) Collection<TextureConfiguration>.IEnumerable.GetEnumerator() Collection<TextureConfiguration>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Configuration.TextureConfiguration>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Configuration.TextureConfiguration>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<TextureConfiguration>.IList.Add(Object) Collection<TextureConfiguration>.IList.Contains(Object) Collection<TextureConfiguration>.IList.IndexOf(Object) Collection<TextureConfiguration>.IList.Insert(Int32, Object) Collection<TextureConfiguration>.IList.Remove(Object) Collection<TextureConfiguration>.Count Collection<TextureConfiguration>.Items Collection<TextureConfiguration>.Item[Int32] Collection<TextureConfiguration>.ICollection<TextureConfiguration>.IsReadOnly Collection<TextureConfiguration>.ICollection.IsSynchronized Collection<TextureConfiguration>.ICollection.SyncRoot Collection<TextureConfiguration>.IList.Item[Int32] Collection<TextureConfiguration>.IList.IsReadOnly Collection<TextureConfiguration>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class TextureConfigurationCollection : KeyedCollection<string, TextureConfiguration>, IList<TextureConfiguration>, ICollection<TextureConfiguration>, IList, ICollection, IReadOnlyList<TextureConfiguration>, IReadOnlyCollection<TextureConfiguration>, IEnumerable<TextureConfiguration>, IEnumerable Methods | Improve this Doc View Source GetKeyForItem(TextureConfiguration) Returns the key for the specified configuration object. Declaration protected override string GetKeyForItem(TextureConfiguration item) Parameters Type Name Description TextureConfiguration item The configuration object from which to extract the key. Returns Type Description String The key for the specified configuration object. Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Bonsai.Shaders.Configuration.TextureConfiguration>.GetKeyForItem(Bonsai.Shaders.Configuration.TextureConfiguration) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Shaders.Configuration.TexturedModel.html": {
    "href": "api/Bonsai.Shaders.Configuration.TexturedModel.html",
    "title": "Class TexturedModel",
    "keywords": "Class TexturedModel Provides configuration and loading functionality for textured mesh resources specified as OBJ files. Inheritance Object ResourceConfiguration < Mesh > MeshConfiguration TexturedModel Implements IResourceConfiguration Inherited Members ResourceConfiguration<Mesh>.Name ResourceConfiguration<Mesh>.IResourceConfiguration.Type ResourceConfiguration<Mesh>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Mesh>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class TexturedModel : MeshConfiguration, IResourceConfiguration Properties | Improve this Doc View Source FileName Gets or sets the name of the model OBJ file. Declaration [TypeConverter(typeof(ResourceFileNameConverter))] [FileNameFilter(\"OBJ Files (*.obj)|*.obj\")] public string FileName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new mesh resource using the geometry specified in the OBJ file. Declaration public override Mesh CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description Mesh A new instance of the Mesh class storing the geometry specified in the OBJ file. Overrides MeshConfiguration.CreateResource(ResourceManager) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Shaders.Mesh>.ToString() Implements IResourceConfiguration"
  },
  "api/Bonsai.Shaders.Configuration.TexturedQuad.html": {
    "href": "api/Bonsai.Shaders.Configuration.TexturedQuad.html",
    "title": "Class TexturedQuad",
    "keywords": "Class TexturedQuad Provides configuration and loading functionality for mesh resources using a simple textured quad geometry. Inheritance Object ResourceConfiguration < Mesh > MeshConfiguration TexturedQuad Implements IResourceConfiguration Inherited Members ResourceConfiguration<Mesh>.Name ResourceConfiguration<Mesh>.IResourceConfiguration.Type ResourceConfiguration<Mesh>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Mesh>.ToString() ResourceConfiguration<Mesh>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class TexturedQuad : MeshConfiguration, IResourceConfiguration Properties | Improve this Doc View Source QuadEffects Gets or sets a value specifying quad geometry transformation effects. Declaration public QuadEffects QuadEffects { get; set; } Property Value Type Description QuadEffects Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new mesh resource using a textured quad geometry. Declaration public override Mesh CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description Mesh A new instance of the Mesh class storing textured quad geometry. Overrides MeshConfiguration.CreateResource(ResourceManager) Implements IResourceConfiguration"
  },
  "api/Bonsai.Shaders.Configuration.UniformConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.UniformConfiguration.html",
    "title": "Class UniformConfiguration",
    "keywords": "Class UniformConfiguration Provides an abstract base class for initializing the value of a shader uniform variable. Inheritance Object UniformConfiguration FloatUniform Vec2Uniform Vec3Uniform Vec4Uniform Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public abstract class UniformConfiguration Properties | Improve this Doc View Source Name Gets or sets the name of the shader uniform to initialize. Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api/Bonsai.Shaders.Configuration.UniformConfigurationCollection.html": {
    "href": "api/Bonsai.Shaders.Configuration.UniformConfigurationCollection.html",
    "title": "Class UniformConfigurationCollection",
    "keywords": "Class UniformConfigurationCollection Represents a collection of configuration objects used to initialize the values of uniform variables in a shader program. Inheritance Object Collection < UniformConfiguration > KeyedCollection < String , UniformConfiguration > UniformConfigurationCollection Implements IList < UniformConfiguration > ICollection < UniformConfiguration > IList ICollection IReadOnlyList < UniformConfiguration > IReadOnlyCollection < UniformConfiguration > IEnumerable < UniformConfiguration > IEnumerable Inherited Members KeyedCollection<String, UniformConfiguration>.Contains(String) KeyedCollection<String, UniformConfiguration>.Remove(String) KeyedCollection<String, UniformConfiguration>.ChangeItemKey(UniformConfiguration, String) KeyedCollection<String, UniformConfiguration>.ClearItems() KeyedCollection<String, UniformConfiguration>.GetKeyForItem(UniformConfiguration) KeyedCollection<String, UniformConfiguration>.InsertItem(Int32, UniformConfiguration) KeyedCollection<String, UniformConfiguration>.RemoveItem(Int32) KeyedCollection<String, UniformConfiguration>.SetItem(Int32, UniformConfiguration) KeyedCollection<String, UniformConfiguration>.Comparer KeyedCollection<String, UniformConfiguration>.Item[String] KeyedCollection<String, UniformConfiguration>.Dictionary Collection<UniformConfiguration>.Add(UniformConfiguration) Collection<UniformConfiguration>.Clear() Collection<UniformConfiguration>.CopyTo(UniformConfiguration[], Int32) Collection<UniformConfiguration>.Contains(UniformConfiguration) Collection<UniformConfiguration>.GetEnumerator() Collection<UniformConfiguration>.IndexOf(UniformConfiguration) Collection<UniformConfiguration>.Insert(Int32, UniformConfiguration) Collection<UniformConfiguration>.Remove(UniformConfiguration) Collection<UniformConfiguration>.RemoveAt(Int32) Collection<UniformConfiguration>.ClearItems() Collection<UniformConfiguration>.InsertItem(Int32, UniformConfiguration) Collection<UniformConfiguration>.RemoveItem(Int32) Collection<UniformConfiguration>.SetItem(Int32, UniformConfiguration) Collection<UniformConfiguration>.IEnumerable.GetEnumerator() Collection<UniformConfiguration>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Configuration.UniformConfiguration>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Configuration.UniformConfiguration>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<UniformConfiguration>.IList.Add(Object) Collection<UniformConfiguration>.IList.Contains(Object) Collection<UniformConfiguration>.IList.IndexOf(Object) Collection<UniformConfiguration>.IList.Insert(Int32, Object) Collection<UniformConfiguration>.IList.Remove(Object) Collection<UniformConfiguration>.Count Collection<UniformConfiguration>.Items Collection<UniformConfiguration>.Item[Int32] Collection<UniformConfiguration>.ICollection<UniformConfiguration>.IsReadOnly Collection<UniformConfiguration>.ICollection.IsSynchronized Collection<UniformConfiguration>.ICollection.SyncRoot Collection<UniformConfiguration>.IList.Item[Int32] Collection<UniformConfiguration>.IList.IsReadOnly Collection<UniformConfiguration>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class UniformConfigurationCollection : KeyedCollection<string, UniformConfiguration>, IList<UniformConfiguration>, ICollection<UniformConfiguration>, IList, ICollection, IReadOnlyList<UniformConfiguration>, IReadOnlyCollection<UniformConfiguration>, IEnumerable<UniformConfiguration>, IEnumerable Methods | Improve this Doc View Source GetKeyForItem(UniformConfiguration) Returns the key for the specified configuration object. Declaration protected override string GetKeyForItem(UniformConfiguration item) Parameters Type Name Description UniformConfiguration item The configuration object from which to extract the key. Returns Type Description String The key for the specified configuration object. Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Bonsai.Shaders.Configuration.UniformConfiguration>.GetKeyForItem(Bonsai.Shaders.Configuration.UniformConfiguration) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Shaders.Configuration.Vec2Uniform.html": {
    "href": "api/Bonsai.Shaders.Configuration.Vec2Uniform.html",
    "title": "Class Vec2Uniform",
    "keywords": "Class Vec2Uniform Represents a configuration object for initializing the value of a shader uniform variable with two floating-point components. Inheritance Object UniformConfiguration Vec2Uniform Inherited Members UniformConfiguration.Name Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class Vec2Uniform : UniformConfiguration Properties | Improve this Doc View Source Value Gets or sets the value used to initialize the shader uniform. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector2 Value { get; set; } Property Value Type Description Vector2 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.Vec3Uniform.html": {
    "href": "api/Bonsai.Shaders.Configuration.Vec3Uniform.html",
    "title": "Class Vec3Uniform",
    "keywords": "Class Vec3Uniform Represents a configuration object for initializing the value of a shader uniform variable with three floating-point components. Inheritance Object UniformConfiguration Vec3Uniform Inherited Members UniformConfiguration.Name Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class Vec3Uniform : UniformConfiguration Properties | Improve this Doc View Source Value Gets or sets the value used to initialize the shader uniform. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Value { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.Vec4Uniform.html": {
    "href": "api/Bonsai.Shaders.Configuration.Vec4Uniform.html",
    "title": "Class Vec4Uniform",
    "keywords": "Class Vec4Uniform Represents a configuration object for initializing the value of a shader uniform variable with four floating-point components. Inheritance Object UniformConfiguration Vec4Uniform Inherited Members UniformConfiguration.Name Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class Vec4Uniform : UniformConfiguration Properties | Improve this Doc View Source Value Gets or sets the value used to initialize the shader uniform. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector4 Value { get; set; } Property Value Type Description Vector4 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Configuration.VideoTexture.html": {
    "href": "api/Bonsai.Shaders.Configuration.VideoTexture.html",
    "title": "Class VideoTexture",
    "keywords": "Class VideoTexture Provides configuration and loading functionality for initializing streaming texture sequences from a movie file. Inheritance Object ResourceConfiguration < Texture > TextureConfiguration Texture2D ImageSequence VideoTexture Implements IResourceConfiguration Inherited Members ImageSequence.FileName ImageSequence.FlipMode ImageSequence.FrameCount ImageSequence.StartPosition Texture2D.Width Texture2D.Height Texture2D.InternalFormat Texture2D.WrapS Texture2D.WrapT Texture2D.MinFilter Texture2D.MagFilter ResourceConfiguration<Texture>.Name ResourceConfiguration<Texture>.IResourceConfiguration.Type ResourceConfiguration<Texture>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Texture>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class VideoTexture : ImageSequence, IResourceConfiguration Properties | Improve this Doc View Source BufferLength Gets or sets the size of the pre-loading buffer for video frames. Declaration public int? BufferLength { get; set; } Property Value Type Description Nullable < Int32 > Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new instance of the Texture class providing support for streaming texture data from a movie file. Declaration public override Texture CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description Texture A new instance of the Texture class representing the video texture. Overrides ImageSequence.CreateResource(ResourceManager) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides ImageSequence.ToString() Implements IResourceConfiguration"
  },
  "api/Bonsai.Shaders.Configuration.ViewportEffectConfiguration.html": {
    "href": "api/Bonsai.Shaders.Configuration.ViewportEffectConfiguration.html",
    "title": "Class ViewportEffectConfiguration",
    "keywords": "Class ViewportEffectConfiguration Provides configuration and loading functionality for viewport effect shader programs. Inheritance Object ResourceConfiguration < Shader > ShaderConfiguration ViewportEffectConfiguration Implements IResourceConfiguration Inherited Members ShaderConfiguration.RenderState ShaderConfiguration.ShaderUniforms ShaderConfiguration.BufferBindings ShaderConfiguration.FramebufferAttachments ShaderConfiguration.Framebuffer ResourceConfiguration<Shader>.Name ResourceConfiguration<Shader>.IResourceConfiguration.Type ResourceConfiguration<Shader>.IResourceConfiguration.CreateResource(ResourceManager) ResourceConfiguration<Shader>.OpenResource(String) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class ViewportEffectConfiguration : ShaderConfiguration, IResourceConfiguration Properties | Improve this Doc View Source FragmentShader Gets or sets the path to the fragment shader file. Declaration [FileNameFilter(\"Fragment Shader Files (*.frag)|*.frag|All Files (*.*)|*.*\")] public string FragmentShader { get; set; } Property Value Type Description String | Improve this Doc View Source QuadEffects Gets or sets a value specifying quad geometry transformation effects. Declaration public QuadEffects QuadEffects { get; set; } Property Value Type Description QuadEffects Methods | Improve this Doc View Source CreateResource(ResourceManager) Creates a new viewport effect shader resource. Declaration public override Shader CreateResource(ResourceManager resourceManager) Parameters Type Name Description ResourceManager resourceManager The ResourceManager object onto which this resource will be loaded. The resource manager can be accessed to load additional resource dependencies which may be required to create the new resource. Returns Type Description Shader A new instance of the Shader class representing the compiled viewport effect shader. Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Shaders.Shader>.CreateResource(Bonsai.Resources.ResourceManager) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Bonsai.Resources.ResourceConfiguration<Bonsai.Shaders.Shader>.ToString() Implements IResourceConfiguration"
  },
  "api/Bonsai.Shaders.Configuration.ViewportState.html": {
    "href": "api/Bonsai.Shaders.Configuration.ViewportState.html",
    "title": "Class ViewportState",
    "keywords": "Class ViewportState Represents a configuration object for specifying the active viewport for rendering, in normalized coordinates. Inheritance Object StateConfiguration ViewportState Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Configuration Assembly : Bonsai.Shaders.dll Syntax public class ViewportState : StateConfiguration Properties | Improve this Doc View Source Height Gets or sets the height of the viewport rectangle, in normalized coordinates. Declaration public float Height { get; set; } Property Value Type Description Single | Improve this Doc View Source Width Gets or sets the width of the viewport rectangle, in normalized coordinates. Declaration public float Width { get; set; } Property Value Type Description Single | Improve this Doc View Source X Gets or sets the x-coordinate of the lower left corner of the viewport, in normalized coordinates. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y-coordinate of the lower left corner of the viewport, in normalized coordinates. Declaration public float Y { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Execute(ShaderWindow) Updates the state of the current graphics context. Declaration public override void Execute(ShaderWindow window) Parameters Type Name Description ShaderWindow window The shader window associated with the current graphics context. Overrides StateConfiguration.Execute(ShaderWindow) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.CreateAxisAngleRotation.html": {
    "href": "api/Bonsai.Shaders.CreateAxisAngleRotation.html",
    "title": "Class CreateAxisAngleRotation",
    "keywords": "Class CreateAxisAngleRotation Represents an operator that creates a rotation matrix from an axis-angle representation. Inheritance Object Source < Matrix4 > CreateAxisAngleRotation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateAxisAngleRotation : Source<Matrix4> Properties | Improve this Doc View Source Angle Gets or sets the angle describing the magnitude of the rotation about the axis. Declaration [Range(-3.1415926535897931, 3.1415926535897931)] public float Angle { get; set; } Property Value Type Description Single | Improve this Doc View Source Axis Gets or sets a 3D vector specifying the direction of the axis of rotation. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Axis { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single rotation matrix created from the specified axis-angle rotation. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the created Matrix4 rotation matrix. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of matrices representing the specified axis-angle rotation, and where each Matrix4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateCubemapCamera.html": {
    "href": "api/Bonsai.Shaders.CreateCubemapCamera.html",
    "title": "Class CreateCubemapCamera",
    "keywords": "Class CreateCubemapCamera Represents an operator that generates a sequence of perspective camera objects which can be used to render a dynamic cubemap texture. Inheritance Object Source < Camera > CreateCubemapCamera Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateCubemapCamera : Source<Camera> Properties | Improve this Doc View Source Eye Gets or sets the eye, or camera position, in the world coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Eye { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source FarClip Gets or sets the distance to the far clip plane. Declaration public float FarClip { get; set; } Property Value Type Description Single | Improve this Doc View Source NearClip Gets or sets the distance to the near clip plane. Declaration public float NearClip { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence of perspective camera objects which can be used to render a dynamic cubemap texture. Declaration public override IObservable<Camera> Generate() Returns Type Description IObservable < Camera > A sequence of six Camera objects corresponding to each direction of the cubemap, respectively right (+X), left (-X), top (+Y), bottom (-Y), back (+Z), and front (-Z). Overrides Bonsai.Source<Bonsai.Shaders.Camera>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of perspective camera objects which can be used to render a dynamic cubemap texture, where the set of of Camera objects for each cubemap is emitted only when an observable sequence emits a notification. Declaration public IObservable<Camera> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting each new group of six cubemap views. Returns Type Description IObservable < Camera > The sequence of Camera objects corresponding to each direction of the cubemap, respectively right (+X), left (-X), top (+Y), bottom (-Y), back (+Z), and front (-Z), for each notification in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateLookAt.html": {
    "href": "api/Bonsai.Shaders.CreateLookAt.html",
    "title": "Class CreateLookAt",
    "keywords": "Class CreateLookAt Represents an operator that creates a view matrix specifying a camera looking at a target position. Inheritance Object Source < Matrix4 > CreateLookAt Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateLookAt : Source<Matrix4> Constructors | Improve this Doc View Source CreateLookAt() Initializes a new instance of the CreateLookAt class. Declaration public CreateLookAt() Properties | Improve this Doc View Source Eye Gets or sets the eye, or camera position, in the world coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Eye { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Target Gets or sets the target position in the world coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Target { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Up Gets or sets a 3D vector specifying the up vector of the camera, in the world coordinate frame. Should not be parallel to the camera direction. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Up { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single view matrix representing a camera with the specified position and up vector, looking at the specified target. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the created Matrix4 look-at view matrix for transforming world space into camera space. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of view matrices representing a camera with the specified position and up vector, looking at the specified target, where each Matrix4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 look-at view matrices for transforming world space into camera space. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateMatrix2.html": {
    "href": "api/Bonsai.Shaders.CreateMatrix2.html",
    "title": "Class CreateMatrix2",
    "keywords": "Class CreateMatrix2 Represents an operator that creates a 2x2 matrix. Inheritance Object Source < Matrix2 > CreateMatrix2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateMatrix2 : Source<Matrix2> Properties | Improve this Doc View Source Row0 Gets or sets the top row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector2 Row0 { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Row1 Gets or sets the bottom row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector2 Row1 { get; set; } Property Value Type Description Vector2 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single 2x2 matrix with the specified rows. Declaration public override IObservable<Matrix2> Generate() Returns Type Description IObservable < Matrix2 > A sequence containing the created Matrix2 object. Overrides Bonsai.Source<OpenTK.Matrix2>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 2x2 matrices with the specified rows, and where each Matrix2 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix2> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix2 > The sequence of created Matrix2 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateMatrix2x3.html": {
    "href": "api/Bonsai.Shaders.CreateMatrix2x3.html",
    "title": "Class CreateMatrix2x3",
    "keywords": "Class CreateMatrix2x3 Represents an operator that creates a 2x3 matrix. Inheritance Object Source < Matrix2x3 > CreateMatrix2x3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateMatrix2x3 : Source<Matrix2x3> Properties | Improve this Doc View Source Row0 Gets or sets the top row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Row0 { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Row1 Gets or sets the bottom row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Row1 { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single 2x3 matrix with the specified rows. Declaration public override IObservable<Matrix2x3> Generate() Returns Type Description IObservable < Matrix2x3 > A sequence containing the created Matrix2x3 object. Overrides Bonsai.Source<OpenTK.Matrix2x3>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 2x3 matrices with the specified rows, and where each Matrix2x3 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix2x3> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix2x3 > The sequence of created Matrix2x3 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateMatrix2x4.html": {
    "href": "api/Bonsai.Shaders.CreateMatrix2x4.html",
    "title": "Class CreateMatrix2x4",
    "keywords": "Class CreateMatrix2x4 Represents an operator that creates a 2x4 matrix. Inheritance Object Source < Matrix2x4 > CreateMatrix2x4 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateMatrix2x4 : Source<Matrix2x4> Properties | Improve this Doc View Source Row0 Gets or sets the top row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector4 Row0 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Row1 Gets or sets the bottom row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector4 Row1 { get; set; } Property Value Type Description Vector4 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single 2x4 matrix with the specified rows. Declaration public override IObservable<Matrix2x4> Generate() Returns Type Description IObservable < Matrix2x4 > A sequence containing the created Matrix2x4 object. Overrides Bonsai.Source<OpenTK.Matrix2x4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 2x4 matrices with the specified rows, and where each Matrix2x4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix2x4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix2x4 > The sequence of created Matrix2x4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateMatrix3.html": {
    "href": "api/Bonsai.Shaders.CreateMatrix3.html",
    "title": "Class CreateMatrix3",
    "keywords": "Class CreateMatrix3 Represents an operator that creates a 3x3 matrix containing 3D rotation and scale. Inheritance Object Source < Matrix3 > CreateMatrix3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateMatrix3 : Source<Matrix3> Properties | Improve this Doc View Source Row0 Gets or sets the top row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Row0 { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Row1 Gets or sets the second row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Row1 { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Row2 Gets or sets the bottom row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Row2 { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single 3x3 matrix with the specified rows. Declaration public override IObservable<Matrix3> Generate() Returns Type Description IObservable < Matrix3 > A sequence containing the created Matrix3 object. Overrides Bonsai.Source<OpenTK.Matrix3>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 3x3 matrices with the specified rows, and where each Matrix3 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix3> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix3 > The sequence of created Matrix3 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateMatrix3x2.html": {
    "href": "api/Bonsai.Shaders.CreateMatrix3x2.html",
    "title": "Class CreateMatrix3x2",
    "keywords": "Class CreateMatrix3x2 Represents an operator that creates a 3x2 matrix. Inheritance Object Source < Matrix3x2 > CreateMatrix3x2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateMatrix3x2 : Source<Matrix3x2> Properties | Improve this Doc View Source Row0 Gets or sets the top row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector2 Row0 { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Row1 Gets or sets the second row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector2 Row1 { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Row2 Gets or sets the bottom row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector2 Row2 { get; set; } Property Value Type Description Vector2 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single 3x2 matrix with the specified rows. Declaration public override IObservable<Matrix3x2> Generate() Returns Type Description IObservable < Matrix3x2 > A sequence containing the created Matrix3x2 object. Overrides Bonsai.Source<OpenTK.Matrix3x2>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 3x2 matrices with the specified rows, and where each Matrix3x2 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix3x2> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix3x2 > The sequence of created Matrix3x2 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateMatrix3x4.html": {
    "href": "api/Bonsai.Shaders.CreateMatrix3x4.html",
    "title": "Class CreateMatrix3x4",
    "keywords": "Class CreateMatrix3x4 Represents an operator that creates a 3x4 matrix. Inheritance Object Source < Matrix3x4 > CreateMatrix3x4 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateMatrix3x4 : Source<Matrix3x4> Properties | Improve this Doc View Source Row0 Gets or sets the top row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector4 Row0 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Row1 Gets or sets the second row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector4 Row1 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Row2 Gets or sets the bottom row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector4 Row2 { get; set; } Property Value Type Description Vector4 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single 3x4 matrix with the specified rows. Declaration public override IObservable<Matrix3x4> Generate() Returns Type Description IObservable < Matrix3x4 > A sequence containing the created Matrix3x4 object. Overrides Bonsai.Source<OpenTK.Matrix3x4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 3x4 matrices with the specified rows, and where each Matrix3x4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix3x4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix3x4 > The sequence of created Matrix3x4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateMatrix4.html": {
    "href": "api/Bonsai.Shaders.CreateMatrix4.html",
    "title": "Class CreateMatrix4",
    "keywords": "Class CreateMatrix4 Represents an operator that creates a 4x4 matrix containing 3D rotation, scale, position and projection. Inheritance Object Source < Matrix4 > CreateMatrix4 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateMatrix4 : Source<Matrix4> Properties | Improve this Doc View Source Row0 Gets or sets the top row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector4 Row0 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Row1 Gets or sets the second row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector4 Row1 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Row2 Gets or sets the third row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector4 Row2 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Row3 Gets or sets the bottom row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector4 Row3 { get; set; } Property Value Type Description Vector4 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single 4x4 matrix with the specified rows. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the created Matrix4 object. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 4x4 matrices with the specified rows, and where each Matrix4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateMatrix4x2.html": {
    "href": "api/Bonsai.Shaders.CreateMatrix4x2.html",
    "title": "Class CreateMatrix4x2",
    "keywords": "Class CreateMatrix4x2 Represents an operator that creates a 4x2 matrix. Inheritance Object Source < Matrix4x2 > CreateMatrix4x2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateMatrix4x2 : Source<Matrix4x2> Properties | Improve this Doc View Source Row0 Gets or sets the top row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector2 Row0 { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Row1 Gets or sets the second row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector2 Row1 { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Row2 Gets or sets the third row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector2 Row2 { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Row3 Gets or sets the bottom row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector2 Row3 { get; set; } Property Value Type Description Vector2 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single 4x2 matrix with the specified rows. Declaration public override IObservable<Matrix4x2> Generate() Returns Type Description IObservable < Matrix4x2 > A sequence containing the created Matrix4x2 object. Overrides Bonsai.Source<OpenTK.Matrix4x2>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 4x2 matrices with the specified rows, and where each Matrix4x2 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4x2> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4x2 > The sequence of created Matrix4x2 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateMatrix4x3.html": {
    "href": "api/Bonsai.Shaders.CreateMatrix4x3.html",
    "title": "Class CreateMatrix4x3",
    "keywords": "Class CreateMatrix4x3 Represents an operator that creates a 4x3 matrix. Inheritance Object Source < Matrix4x3 > CreateMatrix4x3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateMatrix4x3 : Source<Matrix4x3> Properties | Improve this Doc View Source Row0 Gets or sets the top row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Row0 { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Row1 Gets or sets the second row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Row1 { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Row2 Gets or sets the third row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Row2 { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Row3 Gets or sets the bottom row of the matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Row3 { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single 4x3 matrix with the specified rows. Declaration public override IObservable<Matrix4x3> Generate() Returns Type Description IObservable < Matrix4x3 > A sequence containing the created Matrix4x3 object. Overrides Bonsai.Source<OpenTK.Matrix4x3>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 4x3 matrices with the specified rows, and where each Matrix4x3 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4x3> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4x3 > The sequence of created Matrix4x3 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateMesh.html": {
    "href": "api/Bonsai.Shaders.CreateMesh.html",
    "title": "Class CreateMesh",
    "keywords": "Class CreateMesh Represents an operator that creates a new mesh geometry for each vertex array data in the sequence. Inheritance Object CreateMesh Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax [Combinator] public class CreateMesh Properties | Improve this Doc View Source DrawMode Gets or sets a value specifying the kind of primitives to render with the vertex array data. Declaration public PrimitiveType DrawMode { get; set; } Property Value Type Description PrimitiveType | Improve this Doc View Source Usage Gets or sets a value specifying the expected usage pattern of the vertex buffer. Declaration public BufferUsageHint Usage { get; set; } Property Value Type Description BufferUsageHint | Improve this Doc View Source VertexAttributes Gets a collection of vertex attributes specifying how to map vertex array data into user-defined input values in the vertex shader. Declaration public VertexAttributeMappingCollection VertexAttributes { get; } Property Value Type Description VertexAttributeMappingCollection Methods | Improve this Doc View Source Process(IObservable<Mat>) Creates a new mesh geometry for each vertex array data in an observable sequence. Declaration public IObservable<Mesh> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source The sequence of multi-channel matrices storing the geometry data used to create each new mesh. Each row in the matrix represents the data for one vertex. Returns Type Description IObservable < Mesh > A sequence of Mesh objects storing all vertex data for each multi-channel matrix in the source sequence. | Improve this Doc View Source Process<TVertex>(IObservable<TVertex[]>) Creates a new mesh geometry for each vertex array data in an observable sequence. Declaration public IObservable<Mesh> Process<TVertex>(IObservable<TVertex[]> source) where TVertex : struct Parameters Type Name Description IObservable <TVertex[]> source The sequence of vertex array data representing the geometry used to create each new mesh. Returns Type Description IObservable < Mesh > A sequence of Mesh objects storing all vertex data for each array in the source sequence. Type Parameters Name Description TVertex The type of the values used to represent each vertex in the mesh. | Improve this Doc View Source Process<TVertex>(IObservable<Tuple<TVertex[], Byte[]>>) Creates a new mesh geometry for each pair of vertex and index data in an observable sequence. Declaration public IObservable<Mesh> Process<TVertex>(IObservable<Tuple<TVertex[], byte[]>> source) where TVertex : struct Parameters Type Name Description IObservable < Tuple <TVertex[], Byte []>> source A sequence of pairs containing the vertex and index data representing the geometry used to create each new mesh, where each vertex index is stored as an 8-bit unsigned integer. Returns Type Description IObservable < Mesh > A sequence of Mesh objects storing geometry specified by each pair of vertex and index data in the source sequence. Type Parameters Name Description TVertex The type of the values used to represent each vertex in the mesh. | Improve this Doc View Source Process<TVertex>(IObservable<Tuple<TVertex[], Int16[]>>) Creates a new mesh geometry for each pair of vertex and index data in an observable sequence. Declaration public IObservable<Mesh> Process<TVertex>(IObservable<Tuple<TVertex[], short[]>> source) where TVertex : struct Parameters Type Name Description IObservable < Tuple <TVertex[], Int16 []>> source A sequence of pairs containing the vertex and index data representing the geometry used to create each new mesh, where each vertex index is stored as a 16-bit signed integer. Returns Type Description IObservable < Mesh > A sequence of Mesh objects storing geometry specified by each pair of vertex and index data in the source sequence. Type Parameters Name Description TVertex The type of the values used to represent each vertex in the mesh. | Improve this Doc View Source Process<TVertex>(IObservable<Tuple<TVertex[], Int32[]>>) Creates a new mesh geometry for each pair of vertex and index data in an observable sequence. Declaration public IObservable<Mesh> Process<TVertex>(IObservable<Tuple<TVertex[], int[]>> source) where TVertex : struct Parameters Type Name Description IObservable < Tuple <TVertex[], Int32 []>> source A sequence of pairs containing the vertex and index data representing the geometry used to create each new mesh, where each vertex index is stored as a 32-bit signed integer. Returns Type Description IObservable < Mesh > A sequence of Mesh objects storing geometry specified by each pair of vertex and index data in the source sequence. Type Parameters Name Description TVertex The type of the values used to represent each vertex in the mesh. | Improve this Doc View Source Process<TVertex>(IObservable<Tuple<TVertex[], UInt16[]>>) Creates a new mesh geometry for each pair of vertex and index data in an observable sequence. Declaration public IObservable<Mesh> Process<TVertex>(IObservable<Tuple<TVertex[], ushort[]>> source) where TVertex : struct Parameters Type Name Description IObservable < Tuple <TVertex[], UInt16 []>> source A sequence of pairs containing the vertex and index data representing the geometry used to create each new mesh, where each vertex index is stored as a 16-bit unsigned integer. Returns Type Description IObservable < Mesh > A sequence of Mesh objects storing geometry specified by each pair of vertex and index data in the source sequence. Type Parameters Name Description TVertex The type of the values used to represent each vertex in the mesh. | Improve this Doc View Source Process<TVertex>(IObservable<Tuple<TVertex[], UInt32[]>>) Creates a new mesh geometry for each pair of vertex and index data in an observable sequence. Declaration public IObservable<Mesh> Process<TVertex>(IObservable<Tuple<TVertex[], uint[]>> source) where TVertex : struct Parameters Type Name Description IObservable < Tuple <TVertex[], UInt32 []>> source A sequence of pairs containing the vertex and index data representing the geometry used to create each new mesh, where each vertex index is stored as a 32-bit unsigned integer. Returns Type Description IObservable < Mesh > A sequence of Mesh objects storing geometry specified by each pair of vertex and index data in the source sequence. Type Parameters Name Description TVertex The type of the values used to represent each vertex in the mesh."
  },
  "api/Bonsai.Shaders.CreateOrthographic.html": {
    "href": "api/Bonsai.Shaders.CreateOrthographic.html",
    "title": "Class CreateOrthographic",
    "keywords": "Class CreateOrthographic Represents an operator that creates an orthographic projection matrix. Inheritance Object Source < Matrix4 > CreateOrthographic Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateOrthographic : Source<Matrix4> Properties | Improve this Doc View Source FarClip Gets or sets the distance to the far clip plane. Declaration public float FarClip { get; set; } Property Value Type Description Single | Improve this Doc View Source Height Gets or sets the height of the projection volume. Declaration public float Height { get; set; } Property Value Type Description Single | Improve this Doc View Source NearClip Gets or sets the distance to the near clip plane. Declaration public float NearClip { get; set; } Property Value Type Description Single | Improve this Doc View Source Width Gets or sets the width of the projection volume. Declaration public float Width { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a 4x4 orthographic projection matrix with the specified parameters. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the created Matrix4 object. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of orthographic matrices with the specified parameters, where each Matrix4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateOrthographicOffCenter.html": {
    "href": "api/Bonsai.Shaders.CreateOrthographicOffCenter.html",
    "title": "Class CreateOrthographicOffCenter",
    "keywords": "Class CreateOrthographicOffCenter Represents an operator that creates an orthographic projection matrix from specified projection volume boundaries. Inheritance Object Source < Matrix4 > CreateOrthographicOffCenter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateOrthographicOffCenter : Source<Matrix4> Properties | Improve this Doc View Source Bottom Gets or sets the bottom edge of the projection volume. Declaration public float Bottom { get; set; } Property Value Type Description Single | Improve this Doc View Source FarClip Gets or sets the distance to the far clip plane. Declaration public float FarClip { get; set; } Property Value Type Description Single | Improve this Doc View Source Left Gets or sets the left edge of the projection volume. Declaration public float Left { get; set; } Property Value Type Description Single | Improve this Doc View Source NearClip Gets or sets the distance to the near clip plane. Declaration public float NearClip { get; set; } Property Value Type Description Single | Improve this Doc View Source Right Gets or sets the right edge of the projection volume. Declaration public float Right { get; set; } Property Value Type Description Single | Improve this Doc View Source Top Gets or sets the top edge of the projection volume. Declaration public float Top { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a 4x4 orthographic projection matrix with the specified parameters. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the created Matrix4 object. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of orthographic matrices with the specified parameters, where each Matrix4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreatePerspectiveFieldOfView.html": {
    "href": "api/Bonsai.Shaders.CreatePerspectiveFieldOfView.html",
    "title": "Class CreatePerspectiveFieldOfView",
    "keywords": "Class CreatePerspectiveFieldOfView Represents an operator that creates a perspective projection matrix from field of view parameters. Inheritance Object Source < Matrix4 > CreatePerspectiveFieldOfView Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreatePerspectiveFieldOfView : Source<Matrix4> Properties | Improve this Doc View Source AspectRatio Gets or sets the aspect ratio of the viewport. Declaration public float AspectRatio { get; set; } Property Value Type Description Single | Improve this Doc View Source FarClip Gets or sets the distance to the far clip plane. Declaration public float FarClip { get; set; } Property Value Type Description Single | Improve this Doc View Source FovY Gets or sets the angle of the field of view in the y direction, in radians. Declaration [Range(0.017453292519943295, 3.12413936106985)] public float FovY { get; set; } Property Value Type Description Single | Improve this Doc View Source NearClip Gets or sets the distance to the near clip plane. Declaration public float NearClip { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a 4x4 perspective projection matrix with the specified parameters. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the created Matrix4 object. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of perspective matrices with the specified parameters, where each Matrix4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreatePerspectiveOffCenter.html": {
    "href": "api/Bonsai.Shaders.CreatePerspectiveOffCenter.html",
    "title": "Class CreatePerspectiveOffCenter",
    "keywords": "Class CreatePerspectiveOffCenter Represents an operator that creates a perspective projection matrix with the specified view frustum. Inheritance Object Source < Matrix4 > CreatePerspectiveOffCenter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreatePerspectiveOffCenter : Source<Matrix4> Properties | Improve this Doc View Source Bottom Gets or sets the bottom edge of the view frustum. Declaration public float Bottom { get; set; } Property Value Type Description Single | Improve this Doc View Source FarClip Gets or sets the distance to the far clip plane. Declaration public float FarClip { get; set; } Property Value Type Description Single | Improve this Doc View Source Left Gets or sets the left edge of the view frustum. Declaration public float Left { get; set; } Property Value Type Description Single | Improve this Doc View Source NearClip Gets or sets the distance to the near clip plane. Declaration public float NearClip { get; set; } Property Value Type Description Single | Improve this Doc View Source Right Gets or sets the right edge of the view frustum. Declaration public float Right { get; set; } Property Value Type Description Single | Improve this Doc View Source Top Gets or sets the top edge of the view frustum. Declaration public float Top { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a 4x4 perspective projection matrix with the specified parameters. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the created Matrix4 object. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of perspective matrices with the specified parameters, where each Matrix4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateQuaternionRotation.html": {
    "href": "api/Bonsai.Shaders.CreateQuaternionRotation.html",
    "title": "Class CreateQuaternionRotation",
    "keywords": "Class CreateQuaternionRotation Represents an operator that creates a rotation matrix from a quaternion representation. Inheritance Object Source < Matrix4 > CreateQuaternionRotation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateQuaternionRotation : Source<Matrix4> Properties | Improve this Doc View Source Rotation Gets or sets the quaternion representing the rotation transform. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Quaternion Rotation { get; set; } Property Value Type Description Quaternion Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a rotation matrix corresponding to the specified quaternion. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the created Matrix4 object. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of rotation matrices from the specified quaternion, where each Matrix4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateRotationX.html": {
    "href": "api/Bonsai.Shaders.CreateRotationX.html",
    "title": "Class CreateRotationX",
    "keywords": "Class CreateRotationX Represents an operator that creates a rotation matrix for a rotation about the x-axis. Inheritance Object Source < Matrix4 > CreateRotationX Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateRotationX : Source<Matrix4> Properties | Improve this Doc View Source Angle Gets or sets the angle describing the magnitude of the rotation about the x-axis. Declaration [Range(-3.1415926535897931, 3.1415926535897931)] public float Angle { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a rotation matrix for a rotation with the specified angle about the x-axis. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the created Matrix4 object. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of rotation matrices for a rotation with the specified angle about the x-axis, where each Matrix4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateRotationY.html": {
    "href": "api/Bonsai.Shaders.CreateRotationY.html",
    "title": "Class CreateRotationY",
    "keywords": "Class CreateRotationY Represents an operator that creates a rotation matrix for a rotation about the y-axis. Inheritance Object Source < Matrix4 > CreateRotationY Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateRotationY : Source<Matrix4> Properties | Improve this Doc View Source Angle Gets or sets the angle describing the magnitude of the rotation about the y-axis. Declaration [Range(-3.1415926535897931, 3.1415926535897931)] public float Angle { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a rotation matrix for a rotation with the specified angle about the y-axis. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the created Matrix4 object. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of rotation matrices for a rotation with the specified angle about the y-axis, where each Matrix4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateRotationZ.html": {
    "href": "api/Bonsai.Shaders.CreateRotationZ.html",
    "title": "Class CreateRotationZ",
    "keywords": "Class CreateRotationZ Represents an operator that creates a rotation matrix for a rotation about the z-axis. Inheritance Object Source < Matrix4 > CreateRotationZ Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateRotationZ : Source<Matrix4> Properties | Improve this Doc View Source Angle Gets or sets the angle describing the magnitude of the rotation about the z-axis. Declaration [Range(-3.1415926535897931, 3.1415926535897931)] public float Angle { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a rotation matrix for a rotation with the specified angle about the z-axis. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the created Matrix4 object. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of rotation matrices for a rotation with the specified angle about the z-axis, where each Matrix4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateScale.html": {
    "href": "api/Bonsai.Shaders.CreateScale.html",
    "title": "Class CreateScale",
    "keywords": "Class CreateScale Represents an operator that creates a scale matrix. Inheritance Object Source < Matrix4 > CreateScale Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateScale : Source<Matrix4> Properties | Improve this Doc View Source X Gets or sets the scale factor for the x-axis. Declaration [Range(0, 2)] public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the scale factor for the y-axis. Declaration [Range(0, 2)] public float Y { get; set; } Property Value Type Description Single | Improve this Doc View Source Z Gets or sets the scale factor for the z-axis. Declaration [Range(0, 2)] public float Z { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a scale matrix. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the created Matrix4 object. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of scale matrices, where each Matrix4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateTransform.html": {
    "href": "api/Bonsai.Shaders.CreateTransform.html",
    "title": "Class CreateTransform",
    "keywords": "Class CreateTransform Represents an operator that creates a model matrix specifying position, rotation and scale. Inheritance Object Source < Matrix4 > CreateTransform Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateTransform : Source<Matrix4> Constructors | Improve this Doc View Source CreateTransform() Initializes a new instance of the CreateTransform class. Declaration public CreateTransform() Properties | Improve this Doc View Source Position Gets or sets the position of the model, in the local coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Position { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Rotation Gets or sets the quaternion representing the rotation of the model, in the local coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Quaternion Rotation { get; set; } Property Value Type Description Quaternion | Improve this Doc View Source Scale Gets or sets the scale vector applied to the model, in the local coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Scale { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a model matrix specifying position, rotation and scale. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the created Matrix4 object. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of model matrices specifying position, rotation and scale, and where each Matrix4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateTranslation.html": {
    "href": "api/Bonsai.Shaders.CreateTranslation.html",
    "title": "Class CreateTranslation",
    "keywords": "Class CreateTranslation Represents an operator that creates a translation matrix. Inheritance Object Source < Matrix4 > CreateTranslation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateTranslation : Source<Matrix4> Properties | Improve this Doc View Source X Gets or sets the translation along the x-axis. Declaration [Range(-1, 1)] public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the translation along the y-axis. Declaration [Range(-1, 1)] public float Y { get; set; } Property Value Type Description Single | Improve this Doc View Source Z Gets or sets the translation along the z-axis. Declaration [Range(-1, 1)] public float Z { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a translation matrix. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the created Matrix4 object. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of translation matrices, where each Matrix4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new matrices. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateVector2.html": {
    "href": "api/Bonsai.Shaders.CreateVector2.html",
    "title": "Class CreateVector2",
    "keywords": "Class CreateVector2 Represents an operator that creates a 2D vector element. Inheritance Object Source < Vector2 > CreateVector2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateVector2 : Source<Vector2> Properties | Improve this Doc View Source X Gets or sets the x-component of the vector. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y-component of the vector. Declaration public float Y { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a 2D vector element. Declaration public override IObservable<Vector2> Generate() Returns Type Description IObservable < Vector2 > A sequence containing the created Vector2 object. Overrides Bonsai.Source<OpenTK.Vector2>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 2D vectors, where each Vector2 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Vector2> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new vectors. Returns Type Description IObservable < Vector2 > The sequence of created Vector2 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateVector3.html": {
    "href": "api/Bonsai.Shaders.CreateVector3.html",
    "title": "Class CreateVector3",
    "keywords": "Class CreateVector3 Represents an operator that creates a 3D vector element. Inheritance Object Source < Vector3 > CreateVector3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateVector3 : Source<Vector3> Properties | Improve this Doc View Source X Gets or sets the x-component of the vector. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y-component of the vector. Declaration public float Y { get; set; } Property Value Type Description Single | Improve this Doc View Source Z Gets or sets the z-component of the vector. Declaration public float Z { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a 3D vector element. Declaration public override IObservable<Vector3> Generate() Returns Type Description IObservable < Vector3 > A sequence containing the created Vector3 object. Overrides Bonsai.Source<OpenTK.Vector3>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 3D vectors, where each Vector3 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Vector3> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new vectors. Returns Type Description IObservable < Vector3 > The sequence of created Vector3 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateVector4.html": {
    "href": "api/Bonsai.Shaders.CreateVector4.html",
    "title": "Class CreateVector4",
    "keywords": "Class CreateVector4 Represents an operator that creates a 4D vector element. Inheritance Object Source < Vector4 > CreateVector4 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class CreateVector4 : Source<Vector4> Properties | Improve this Doc View Source W Gets or sets the w-component of the vector. Declaration public float W { get; set; } Property Value Type Description Single | Improve this Doc View Source X Gets or sets the x-component of the vector. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y-component of the vector. Declaration public float Y { get; set; } Property Value Type Description Single | Improve this Doc View Source Z Gets or sets the z-component of the vector. Declaration public float Z { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a 4D vector element. Declaration public override IObservable<Vector4> Generate() Returns Type Description IObservable < Vector4 > A sequence containing the created Vector4 object. Overrides Bonsai.Source<OpenTK.Vector4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 4D vectors, where each Vector4 object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Vector4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new vectors. Returns Type Description IObservable < Vector4 > The sequence of created Vector4 values. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.CreateWindow.html": {
    "href": "api/Bonsai.Shaders.CreateWindow.html",
    "title": "Class CreateWindow",
    "keywords": "Class CreateWindow Represents an operator that creates the shader window with the specified display style and render settings. Inheritance Object Source < ShaderWindow > CreateWindow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax [TypeConverter(typeof(SettingsConverter))] public class CreateWindow : Source<ShaderWindow> Constructors | Improve this Doc View Source CreateWindow() Initializes a new instance of the CreateWindow class. Declaration public CreateWindow() Properties | Improve this Doc View Source ClearColor Gets or sets the color used to clear the framebuffer before rendering. Declaration public Color ClearColor { get; set; } Property Value Type Description Color | Improve this Doc View Source ClearColorHtml Gets or sets an HTML representation of the clear color value for serialization. Declaration [Browsable(false)] public string ClearColorHtml { get; set; } Property Value Type Description String | Improve this Doc View Source ClearMask Gets or sets a value specifying which buffers to clear before rendering. Declaration public ClearBufferMask ClearMask { get; set; } Property Value Type Description ClearBufferMask | Improve this Doc View Source CursorVisible Gets or sets a value specifying whether to hide or show the mouse cursor over the shader window. Declaration public bool CursorVisible { get; set; } Property Value Type Description Boolean | Improve this Doc View Source DisplayDevice Gets or sets a value specifying the display device index on which to create the shader window. Declaration public DisplayIndex DisplayDevice { get; set; } Property Value Type Description DisplayIndex | Improve this Doc View Source GraphicsMode Gets or sets a value specifying the graphics mode of the shader window. Declaration [TypeConverter(typeof(ExpandableObjectConverter))] public GraphicsModeConfiguration GraphicsMode { get; set; } Property Value Type Description GraphicsModeConfiguration | Improve this Doc View Source Height Gets or sets the height of the shader window, in pixels. Declaration public int Height { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Location Gets or sets a value specifying the starting location of the shader window. If no value is specified, the window will be located at the center of the screen. Declaration public Point? Location { get; set; } Property Value Type Description Nullable < Point > | Improve this Doc View Source RenderState Gets the collection of configuration objects specifying the initial render state of the shader window graphics context. Declaration public StateConfigurationCollection RenderState { get; } Property Value Type Description StateConfigurationCollection | Improve this Doc View Source SwapSync Gets or sets a value specifying whether to synchronize buffer swaps across application windows. Declaration public bool SwapSync { get; set; } Property Value Type Description Boolean | Improve this Doc View Source TargetRenderFrequency Gets or sets a value specifying the target render frequency. A value of zero indicates the maximum possible frequency will be used to generate render events. Declaration public double TargetRenderFrequency { get; set; } Property Value Type Description Double | Improve this Doc View Source TargetUpdateFrequency Gets or sets a value specifying the target update frequency. If no value is specified, the value of the target render frequency will be used. Declaration public double? TargetUpdateFrequency { get; set; } Property Value Type Description Nullable < Double > | Improve this Doc View Source Title Gets or sets the title of the shader window. Declaration public string Title { get; set; } Property Value Type Description String | Improve this Doc View Source VSync Gets or sets a value specifying the V-Sync configuration for shader window buffer swaps. Declaration public VSyncMode VSync { get; set; } Property Value Type Description VSyncMode | Improve this Doc View Source Width Gets or sets the width of the shader window, in pixels. Declaration public int Width { get; set; } Property Value Type Description Int32 | Improve this Doc View Source WindowBorder Gets or sets a value specifying the shader window border. Declaration public WindowBorder WindowBorder { get; set; } Property Value Type Description WindowBorder | Improve this Doc View Source WindowState Gets or sets a value specifying the starting state of the shader window. Declaration public WindowState WindowState { get; set; } Property Value Type Description WindowState Methods | Improve this Doc View Source Generate() Generates an observable sequence that initializes and returns the shader window object. If a window has already been initialized, this source will return a reference to the created window. Declaration public override IObservable<ShaderWindow> Generate() Returns Type Description IObservable < ShaderWindow > A sequence containing the ShaderWindow object. Overrides Bonsai.Source<Bonsai.Shaders.ShaderWindow>.Generate()"
  },
  "api/Bonsai.Shaders.Delay.html": {
    "href": "api/Bonsai.Shaders.Delay.html",
    "title": "Class Delay",
    "keywords": "Class Delay Represents an operator that delays the notification of values in the sequence by the specified time interval, using the render loop scheduler. Inheritance Object Combinator Delay Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class Delay : Combinator Properties | Improve this Doc View Source DueTime Gets or sets the time interval by which to delay the sequence. Declaration public TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source DueTimeXml Gets or sets an XML representation of the due time for serialization. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Delays the notification of values in an observable sequence by the specified time interval, using the render loop scheduler. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to delay notifications for. Returns Type Description IObservable <TSource> The time-shifted sequence, where all notifications will be raised in the render loop scheduler. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.DelaySubscription.html": {
    "href": "api/Bonsai.Shaders.DelaySubscription.html",
    "title": "Class DelaySubscription",
    "keywords": "Class DelaySubscription Represents an operator that delays subscription to the observable sequence by the specified time interval, using the render loop scheduler. Inheritance Object Combinator DelaySubscription Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class DelaySubscription : Combinator Properties | Improve this Doc View Source DueTime Gets or sets the time interval by which to delay subscription to the sequence. Declaration public TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source DueTimeXml Gets or sets an XML representation of the due time for serialization. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Delays subscription to an observable sequence by the specified time interval, using the render loop scheduler. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to delay subscription for. Returns Type Description IObservable <TSource> The time-shifted sequence, where subscription is delayed by the specified time interval, using the render loop scheduler. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.Design.GlslScriptExample.html": {
    "href": "api/Bonsai.Shaders.Design.GlslScriptExample.html",
    "title": "Class GlslScriptExample",
    "keywords": "Class GlslScriptExample Provides example source code for an OpenGL Shader Language (GLSL) script. Inheritance Object GlslScriptExample Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Design Assembly : Bonsai.Shaders.Design.dll Syntax public class GlslScriptExample Properties | Improve this Doc View Source Name Gets or sets the name of the GLSL example. Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Source Gets or sets the GLSL source code for the example. Declaration public string Source { get; set; } Property Value Type Description String | Improve this Doc View Source Type Gets or sets the shader type targeted by the example. Declaration public ShaderType Type { get; set; } Property Value Type Description ShaderType"
  },
  "api/Bonsai.Shaders.Design.GlslScriptExampleCollection.html": {
    "href": "api/Bonsai.Shaders.Design.GlslScriptExampleCollection.html",
    "title": "Class GlslScriptExampleCollection",
    "keywords": "Class GlslScriptExampleCollection Represents a collection of GLSL example scripts. Inheritance Object Collection < GlslScriptExample > GlslScriptExampleCollection Implements IList < GlslScriptExample > ICollection < GlslScriptExample > IList ICollection IReadOnlyList < GlslScriptExample > IReadOnlyCollection < GlslScriptExample > IEnumerable < GlslScriptExample > IEnumerable Inherited Members Collection<GlslScriptExample>.Add(GlslScriptExample) Collection<GlslScriptExample>.Clear() Collection<GlslScriptExample>.CopyTo(GlslScriptExample[], Int32) Collection<GlslScriptExample>.Contains(GlslScriptExample) Collection<GlslScriptExample>.GetEnumerator() Collection<GlslScriptExample>.IndexOf(GlslScriptExample) Collection<GlslScriptExample>.Insert(Int32, GlslScriptExample) Collection<GlslScriptExample>.Remove(GlslScriptExample) Collection<GlslScriptExample>.RemoveAt(Int32) Collection<GlslScriptExample>.ClearItems() Collection<GlslScriptExample>.InsertItem(Int32, GlslScriptExample) Collection<GlslScriptExample>.RemoveItem(Int32) Collection<GlslScriptExample>.SetItem(Int32, GlslScriptExample) Collection<GlslScriptExample>.IEnumerable.GetEnumerator() Collection<GlslScriptExample>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Design.GlslScriptExample>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Design.GlslScriptExample>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<GlslScriptExample>.IList.Add(Object) Collection<GlslScriptExample>.IList.Contains(Object) Collection<GlslScriptExample>.IList.IndexOf(Object) Collection<GlslScriptExample>.IList.Insert(Int32, Object) Collection<GlslScriptExample>.IList.Remove(Object) Collection<GlslScriptExample>.Count Collection<GlslScriptExample>.Items Collection<GlslScriptExample>.Item[Int32] Collection<GlslScriptExample>.ICollection<GlslScriptExample>.IsReadOnly Collection<GlslScriptExample>.ICollection.IsSynchronized Collection<GlslScriptExample>.ICollection.SyncRoot Collection<GlslScriptExample>.IList.Item[Int32] Collection<GlslScriptExample>.IList.IsReadOnly Collection<GlslScriptExample>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Design Assembly : Bonsai.Shaders.Design.dll Syntax public class GlslScriptExampleCollection : Collection<GlslScriptExample>, IList<GlslScriptExample>, ICollection<GlslScriptExample>, IList, ICollection, IReadOnlyList<GlslScriptExample>, IReadOnlyCollection<GlslScriptExample>, IEnumerable<GlslScriptExample>, IEnumerable Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Shaders.Design.html": {
    "href": "api/Bonsai.Shaders.Design.html",
    "title": "Namespace Bonsai.Shaders.Design",
    "keywords": "Namespace Bonsai.Shaders.Design Classes GlslScriptExample Provides example source code for an OpenGL Shader Language (GLSL) script. GlslScriptExampleCollection Represents a collection of GLSL example scripts."
  },
  "api/Bonsai.Shaders.DispatchCompute.html": {
    "href": "api/Bonsai.Shaders.DispatchCompute.html",
    "title": "Class DispatchCompute",
    "keywords": "Class DispatchCompute Represents an operator that launches one or more compute shader work groups for each notification in the sequence. Inheritance Object Combinator Sink DispatchCompute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class DispatchCompute : Sink Properties | Improve this Doc View Source ShaderName Gets or sets the name of the compute shader program. Declaration [TypeConverter(typeof(ComputeProgramNameConverter))] public string ShaderName { get; set; } Property Value Type Description String | Improve this Doc View Source WorkGroups Gets or sets a value specifying the number of workgroups to be launched when dispatching the compute shader. Declaration public DispatchParameters WorkGroups { get; set; } Property Value Type Description DispatchParameters Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Launches one or more compute shader work groups whenever the source sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to launch the compute shader work groups. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of launching one or more compute shader workgroups whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.DispatchParameters.html": {
    "href": "api/Bonsai.Shaders.DispatchParameters.html",
    "title": "Struct DispatchParameters",
    "keywords": "Struct DispatchParameters Represents parameters used when launching compute shader work groups. Implements IEquatable < DispatchParameters > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax [TypeConverter(typeof(NumericRecordConverter))] public struct DispatchParameters : IEquatable<DispatchParameters> Constructors | Improve this Doc View Source DispatchParameters(Int32, Int32, Int32) Initializes a new instance of the DispatchParameters structure using the specified number of compute work groups. Declaration public DispatchParameters(int numGroupsX, int numGroupsY, int numGroupsZ) Parameters Type Name Description Int32 numGroupsX The number of work groups to be launched in the X dimension. Int32 numGroupsY The number of work groups to be launched in the Y dimension. Int32 numGroupsZ The number of work groups to be launched in the Z dimension. Fields | Improve this Doc View Source NumGroupsX The number of work groups to be launched in the X dimension. Declaration public int NumGroupsX Field Value Type Description Int32 | Improve this Doc View Source NumGroupsY The number of work groups to be launched in the Y dimension. Declaration public int NumGroupsY Field Value Type Description Int32 | Improve this Doc View Source NumGroupsZ The number of work groups to be launched in the Z dimension. Declaration public int NumGroupsZ Field Value Type Description Int32 Methods | Improve this Doc View Source Equals(DispatchParameters) Returns a value indicating whether this instance is equal to the specified DispatchParameters structure. Declaration public bool Equals(DispatchParameters other) Parameters Type Name Description DispatchParameters other The DispatchParameters object to compare with this instance. Returns Type Description Boolean true if other represents the same parameter values as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether the specified object is a DispatchParameters structure with the same parameter values as this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a DispatchParameters structure and has the same parameter values as this structure; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Creates a String representation of this DispatchParameters structure. Declaration public override string ToString() Returns Type Description String A String containing all the parameter values of this DispatchParameters structure. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(DispatchParameters, DispatchParameters) Indicates whether two DispatchParameters structures are equal. Declaration public static bool operator ==(DispatchParameters left, DispatchParameters right) Parameters Type Name Description DispatchParameters left The DispatchParameters structure on the left-hand side of the equality operator. DispatchParameters right The DispatchParameters structure on the right-hand side of the equality operator. Returns Type Description Boolean true if left and right have equal parameter values; otherwise, false . | Improve this Doc View Source Inequality(DispatchParameters, DispatchParameters) Indicates whether two DispatchParameters structures are different. Declaration public static bool operator !=(DispatchParameters left, DispatchParameters right) Parameters Type Name Description DispatchParameters left The DispatchParameters structure on the left-hand side of the inequality operator. DispatchParameters right The DispatchParameters structure on the right-hand side of the inequality operator. Returns Type Description Boolean true if left and right differ in any of their parameter values; false if left and right are equal. Implements System.IEquatable<T>"
  },
  "api/Bonsai.Shaders.DispatchShaderQueue.html": {
    "href": "api/Bonsai.Shaders.DispatchShaderQueue.html",
    "title": "Class DispatchShaderQueue",
    "keywords": "Class DispatchShaderQueue Represents an operator that immediately starts processing the specified shader work queue whenever the sequence emits a notification. Inheritance Object Combinator Sink DispatchShaderQueue Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class DispatchShaderQueue : Sink Properties | Improve this Doc View Source ShaderName Gets or sets the name of the shader program. Declaration [TypeConverter(typeof(ShaderNameConverter))] public string ShaderName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Immediately starts processing the specified shader work queue whenever the source sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to start processing the specified shader work queue. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of immediately start processing the specified shader work queue whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.DrawArrays.html": {
    "href": "api/Bonsai.Shaders.DrawArrays.html",
    "title": "Class DrawArrays",
    "keywords": "Class DrawArrays Represents an operator that renders primitives using each of the array data in the sequence. Inheritance Object Combinator < Mat , Mat > Sink < Mat > DrawArrays Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class DrawArrays : Sink<Mat> Properties | Improve this Doc View Source DrawMode Gets or sets a value specifying the kind of primitives to render with the vertex array data. Declaration public PrimitiveType DrawMode { get; set; } Property Value Type Description PrimitiveType | Improve this Doc View Source ShaderName Gets or sets the name of the material shader program. Declaration [TypeConverter(typeof(MaterialNameConverter))] public string ShaderName { get; set; } Property Value Type Description String | Improve this Doc View Source Usage Gets or sets a value specifying the expected usage pattern of the vertex buffer. Declaration public BufferUsageHint Usage { get; set; } Property Value Type Description BufferUsageHint | Improve this Doc View Source VertexAttributes Gets the collection of vertex attributes specifying how to interpret the vertex array data. Declaration public VertexAttributeMappingCollection VertexAttributes { get; } Property Value Type Description VertexAttributeMappingCollection Methods | Improve this Doc View Source Process(IObservable<Mat>) Renders primitives using each of the matrix data in an observable sequence. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the vertex array data used to render each primitive. Returns Type Description IObservable < Mat > An observable sequence that is identical to the source sequence but where there is an additional side effect of scheduling a primitive render operation where vertex data is drawn from each of the matrices in the sequence. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>) | Improve this Doc View Source Process<TVertex>(IObservable<TVertex[]>) Renders primitives using each of the array data in an observable sequence. Declaration public IObservable<TVertex[]> Process<TVertex>(IObservable<TVertex[]> source) where TVertex : struct Parameters Type Name Description IObservable <TVertex[]> source A sequence of vertex array data used to render each primitive. Returns Type Description IObservable <TVertex[]> An observable sequence that is identical to the source sequence but where there is an additional side effect of scheduling a primitive render operation where vertex data is drawn from each of the arrays in the sequence. Type Parameters Name Description TVertex The type of the array elements used to render each primitive."
  },
  "api/Bonsai.Shaders.DrawFramebuffer.html": {
    "href": "api/Bonsai.Shaders.DrawFramebuffer.html",
    "title": "Class DrawFramebuffer",
    "keywords": "Class DrawFramebuffer Represents an operator that renders all currently stored draw commands to a framebuffer. Inheritance Object Combinator Sink DrawFramebuffer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class DrawFramebuffer : Sink Properties | Improve this Doc View Source FramebufferAttachments Gets a collection of configuration objects specifying any attachments that are required to render the framebuffer. Declaration public Collection<FramebufferAttachmentConfiguration> FramebufferAttachments { get; } Property Value Type Description Collection < FramebufferAttachmentConfiguration > | Improve this Doc View Source RenderState Gets a collection of state configuration objects specifying any render states that are required to render the framebuffer. Declaration public StateConfigurationCollection RenderState { get; } Property Value Type Description StateConfigurationCollection Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Renders all currently stored draw commands to a framebuffer whenever an observable sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to start rendering all stored draw commands to a framebuffer. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of rendering all stored draw commands to a framebuffer whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.DrawMesh.html": {
    "href": "api/Bonsai.Shaders.DrawMesh.html",
    "title": "Class DrawMesh",
    "keywords": "Class DrawMesh Represents an operator that draws the specified mesh geometry. Inheritance Object DrawMesh Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Sink)] public class DrawMesh Properties | Improve this Doc View Source MeshName Gets or sets the name of the mesh geometry to draw. Declaration [TypeConverter(typeof(MeshNameConverter))] public string MeshName { get; set; } Property Value Type Description String | Improve this Doc View Source ShaderName Gets or sets the name of the material shader program used in the drawing operation. Declaration [TypeConverter(typeof(MaterialNameConverter))] public string ShaderName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<Mesh>) Draws each of the mesh geometries in an observable sequence. Declaration public IObservable<Mesh> Process(IObservable<Mesh> source) Parameters Type Name Description IObservable < Mesh > source A sequence of Mesh objects representing the geometry to draw. If MeshName is specified, the named mesh geometry will be used instead. Returns Type Description IObservable < Mesh > An observable sequence that is identical to the source sequence but where there is an additional side effect of drawing each of the mesh geometries in the sequence. | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Draws the specified mesh geometry whenever an observable sequence emits a notification. Declaration public IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to start drawing the specified mesh geometry. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of drawing the specified mesh geometry whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.DrawMeshAggregate.html": {
    "href": "api/Bonsai.Shaders.DrawMeshAggregate.html",
    "title": "Class DrawMeshAggregate",
    "keywords": "Class DrawMeshAggregate Represents an operator that aggregates the specified mesh geometry attributes into a single draw command. Inheritance Object Combinator Sink DrawMeshAggregate Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class DrawMeshAggregate : Sink Properties | Improve this Doc View Source MeshNames Gets the collection of references to pre-declared mesh geometry specifying the set of attributes to aggregate for drawing. Declaration public Collection<MeshName> MeshNames { get; } Property Value Type Description Collection < MeshName > Remarks Each mesh geometry will have all its attributes combined into the final rendered buffer, as if they are all part of the same mesh. | Improve this Doc View Source ShaderName Gets or sets the name of the material shader program used in the drawing operation. Declaration [TypeConverter(typeof(MaterialNameConverter))] public string ShaderName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Draws the aggregate mesh geometry whenever an observable sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to start drawing the aggregate mesh geometry. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of drawing the aggregate mesh geometry whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.DrawMeshInstanced.html": {
    "href": "api/Bonsai.Shaders.DrawMeshInstanced.html",
    "title": "Class DrawMeshInstanced",
    "keywords": "Class DrawMeshInstanced Represents an operator that draws the specified mesh geometry using instanced rendering, where each array in the sequence stores the per-instance attributes. Inheritance Object Combinator < Mat , Mat > Sink < Mat > DrawMeshInstanced Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class DrawMeshInstanced : Sink<Mat> Properties | Improve this Doc View Source InstanceAttributes Gets a collection of instance attributes specifying how to map instance buffer data into per-instance input values in the vertex shader. Declaration public InstanceAttributeMappingCollection InstanceAttributes { get; } Property Value Type Description InstanceAttributeMappingCollection | Improve this Doc View Source MeshName Gets or sets the name of the mesh geometry to draw. Declaration [TypeConverter(typeof(MeshNameConverter))] public string MeshName { get; set; } Property Value Type Description String | Improve this Doc View Source ShaderName Gets or sets the name of the material shader program used in the drawing operation. Declaration [TypeConverter(typeof(MaterialNameConverter))] public string ShaderName { get; set; } Property Value Type Description String | Improve this Doc View Source Usage Gets or sets a value specifying the expected usage pattern of the instance buffer data. Declaration public BufferUsageHint Usage { get; set; } Property Value Type Description BufferUsageHint Methods | Improve this Doc View Source Process(IObservable<Mat>) Draws the specified mesh geometry using instanced rendering, where each of the matrix data in an observable sequence stores the per-instance attributes. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the per-instance attribute data used to render each instance. Returns Type Description IObservable < Mat > An observable sequence that is identical to the source sequence but where there is an additional side effect of scheduling an instanced rendering operation where instance attribute data is drawn from each of the matrices in the sequence. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>) | Improve this Doc View Source Process<TVertex>(IObservable<TVertex[]>) Draws the specified mesh geometry using instanced rendering, where each array in an observable sequence stores the per-instance attributes. Declaration public IObservable<TVertex[]> Process<TVertex>(IObservable<TVertex[]> source) where TVertex : struct Parameters Type Name Description IObservable <TVertex[]> source A sequence of per-instance attribute data used to render each instance. Returns Type Description IObservable <TVertex[]> An observable sequence that is identical to the source sequence but where there is an additional side effect of scheduling an instanced rendering operation where instance attribute data is drawn from each of the arrays in the sequence. Type Parameters Name Description TVertex The type of the array elements used to store the per-instance attributes."
  },
  "api/Bonsai.Shaders.Effect.html": {
    "href": "api/Bonsai.Shaders.Effect.html",
    "title": "Class Effect",
    "keywords": "Class Effect Provides an abstract base class for common functionality used in render effects specifying a vertex, geometry or fragment shader. Inheritance Object Shader Effect Material ViewportEffect Implements IDisposable Inherited Members Shader.Name Shader.Program Shader.Window Shader.Update(Action) Shader.CreateShaderState(IEnumerable<StateConfiguration>, IEnumerable<UniformConfiguration>, IEnumerable<BufferBindingConfiguration>, FramebufferConfiguration) Shader.OnDispatch() Shader.Dispatch() Shader.Dispose(Boolean) Shader.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public abstract class Effect : Shader, IDisposable Methods | Improve this Doc View Source CreateShader() Compiles the effect shader and returns the program object handle. Declaration protected override int CreateShader() Returns Type Description Int32 A handle to the shader program object. Overrides Shader.CreateShader() Implements System.IDisposable"
  },
  "api/Bonsai.Shaders.ExtractRotation.html": {
    "href": "api/Bonsai.Shaders.ExtractRotation.html",
    "title": "Class ExtractRotation",
    "keywords": "Class ExtractRotation Represents an operator that returns the rotation component of every matrix in the sequence. Inheritance Object Combinator < Matrix4 , Quaternion > Transform < Matrix4 , Quaternion > ExtractRotation Inherited Members Combinator<Matrix4, Quaternion>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class ExtractRotation : Transform<Matrix4, Quaternion> Properties | Improve this Doc View Source RowNormalize Gets or sets a value indicating whether to row-normalize the input matrix. Keep this unless you know the input is already normalized. Declaration public bool RowNormalize { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Process(IObservable<Matrix4>) Returns the rotation component of every 4x4 matrix in an observable sequence. Declaration public override IObservable<Quaternion> Process(IObservable<Matrix4> source) Parameters Type Name Description IObservable < Matrix4 > source The sequence of 4x4 matrices for which to extract the rotation component. Returns Type Description IObservable < Quaternion > A Quaternion object representing the rotation component of each 4x4 matrix in the sequence. Overrides Bonsai.Combinator<OpenTK.Matrix4, OpenTK.Quaternion>.Process(System.IObservable<OpenTK.Matrix4>)"
  },
  "api/Bonsai.Shaders.ExtractScale.html": {
    "href": "api/Bonsai.Shaders.ExtractScale.html",
    "title": "Class ExtractScale",
    "keywords": "Class ExtractScale Represents an operator that returns the scale component of every matrix in the sequence. Inheritance Object Combinator < Matrix4 , Vector3 > Transform < Matrix4 , Vector3 > ExtractScale Inherited Members Combinator<Matrix4, Vector3>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class ExtractScale : Transform<Matrix4, Vector3> Methods | Improve this Doc View Source Process(IObservable<Matrix4>) Returns the scale component of every 4x4 matrix in an observable sequence. Declaration public override IObservable<Vector3> Process(IObservable<Matrix4> source) Parameters Type Name Description IObservable < Matrix4 > source The sequence of 4x4 matrices for which to extract the scale component. Returns Type Description IObservable < Vector3 > A Vector3 object representing the scale component of each 4x4 matrix in the sequence. Overrides Bonsai.Combinator<OpenTK.Matrix4, OpenTK.Vector3>.Process(System.IObservable<OpenTK.Matrix4>)"
  },
  "api/Bonsai.Shaders.ExtractTranslation.html": {
    "href": "api/Bonsai.Shaders.ExtractTranslation.html",
    "title": "Class ExtractTranslation",
    "keywords": "Class ExtractTranslation Represents an operator that returns the translation component of every matrix in the sequence. Inheritance Object Combinator < Matrix4 , Vector3 > Transform < Matrix4 , Vector3 > ExtractTranslation Inherited Members Combinator<Matrix4, Vector3>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class ExtractTranslation : Transform<Matrix4, Vector3> Methods | Improve this Doc View Source Process(IObservable<Matrix4>) Returns the translation component of every 4x4 matrix in an observable sequence. Declaration public override IObservable<Vector3> Process(IObservable<Matrix4> source) Parameters Type Name Description IObservable < Matrix4 > source The sequence of 4x4 matrices for which to extract the translation component. Returns Type Description IObservable < Vector3 > A Vector3 object representing the translation component of each 4x4 matrix in the sequence. Overrides Bonsai.Combinator<OpenTK.Matrix4, OpenTK.Vector3>.Process(System.IObservable<OpenTK.Matrix4>)"
  },
  "api/Bonsai.Shaders.ExtrinsicsTransform.html": {
    "href": "api/Bonsai.Shaders.ExtrinsicsTransform.html",
    "title": "Class ExtrinsicsTransform",
    "keywords": "Class ExtrinsicsTransform Represents an operator that converts extrinsics rotation and translation vectors in the sequence into a transform matrix, and vice-versa. Inheritance Object Combinator < Tuple < Point3d , Point3d >, Matrix4 > Transform < Tuple < Point3d , Point3d >, Matrix4 > ExtrinsicsTransform Inherited Members Combinator<Tuple<Point3d, Point3d>, Matrix4>.Process(IObservable<Tuple<Point3d, Point3d>>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class ExtrinsicsTransform : Transform<Tuple<Point3d, Point3d>, Matrix4> Properties | Improve this Doc View Source Scale Gets or sets a 3D vector specifying the optional scale factor for rotation and translation vectors. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3? Scale { get; set; } Property Value Type Description Nullable < Vector3 > | Improve this Doc View Source ScaleSpecified Gets a value indicating whether the Scale property should be serialized. Declaration [Browsable(false)] public bool ScaleSpecified { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Process(IObservable<Matrix4>) Converts each transform matrix in an observable sequence into a pair of extrinsics rotation and translation vectors. Declaration public IObservable<Tuple<Point3d, Point3d>> Process(IObservable<Matrix4> source) Parameters Type Name Description IObservable < Matrix4 > source A sequence of Matrix4 objects representing the transform matrix to convert into a pair of extrinsics rotation and translation vectors. Returns Type Description IObservable < Tuple < Point3d , Point3d >> A sequence of pairs of extrinsics rotation and translation vectors corresponding to each transform matrix in the sequence. | Improve this Doc View Source Process(IObservable<Tuple<Point3d, Point3d>>) Converts each pair of extrinsics rotation and translation vectors in an observable sequence into a transform matrix. Declaration public override IObservable<Matrix4> Process(IObservable<Tuple<Point3d, Point3d>> source) Parameters Type Name Description IObservable < Tuple < Point3d , Point3d >> source A sequence of pairs containing the extrinsics rotation and translation vectors to convert into a transform matrix. Returns Type Description IObservable < Matrix4 > A sequence of Matrix4 objects corresponding to each pair of extrinsics rotation and translation vectors in the sequence. Overrides Bonsai.Combinator<System.Tuple<OpenCV.Net.Point3d, OpenCV.Net.Point3d>, OpenTK.Matrix4>.Process(System.IObservable<System.Tuple<OpenCV.Net.Point3d, OpenCV.Net.Point3d>>)"
  },
  "api/Bonsai.Shaders.FrameEvent.html": {
    "href": "api/Bonsai.Shaders.FrameEvent.html",
    "title": "Class FrameEvent",
    "keywords": "Class FrameEvent Represents an update or render frame event raised by the shader window. Inheritance Object EventPattern < INativeWindow , FrameEventArgs > FrameEvent Implements IEquatable < EventPattern < INativeWindow , FrameEventArgs >> IEventPattern < INativeWindow , FrameEventArgs > Inherited Members EventPattern<INativeWindow, FrameEventArgs>.Equals(EventPattern<INativeWindow, FrameEventArgs>) EventPattern<INativeWindow, FrameEventArgs>.Equals(Object) EventPattern<INativeWindow, FrameEventArgs>.GetHashCode() EventPattern<INativeWindow, FrameEventArgs>.Sender EventPattern<INativeWindow, FrameEventArgs>.EventArgs Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class FrameEvent : EventPattern<INativeWindow, FrameEventArgs>, IEquatable<EventPattern<INativeWindow, FrameEventArgs>>, IEventPattern<INativeWindow, FrameEventArgs> Properties | Improve this Doc View Source TimeStep Gets the amount of time elapsed since the last update. Declaration public TimeStep TimeStep { get; } Property Value Type Description TimeStep Implements System.IEquatable<T> IEventPattern<TSender, TEventArgs>"
  },
  "api/Bonsai.Shaders.html": {
    "href": "api/Bonsai.Shaders.html",
    "title": "Namespace Bonsai.Shaders",
    "keywords": "Namespace Bonsai.Shaders Classes AspectRatio Represents an operator that calculates the ratio of window viewport width to its height for each viewport size in the sequence. BindTexture Represents an operator that binds a buffer to the specified texture unit for each texture or notification in the sequence. Bounds Represents an axis-aligned bounding box for mesh vertices. Camera Represents a point of view from which to render a 3D scene. ComputeProgram Provides functionality for executing and updating the state of a compute shader program. CreateAxisAngleRotation Represents an operator that creates a rotation matrix from an axis-angle representation. CreateCubemapCamera Represents an operator that generates a sequence of perspective camera objects which can be used to render a dynamic cubemap texture. CreateLookAt Represents an operator that creates a view matrix specifying a camera looking at a target position. CreateMatrix2 Represents an operator that creates a 2x2 matrix. CreateMatrix2x3 Represents an operator that creates a 2x3 matrix. CreateMatrix2x4 Represents an operator that creates a 2x4 matrix. CreateMatrix3 Represents an operator that creates a 3x3 matrix containing 3D rotation and scale. CreateMatrix3x2 Represents an operator that creates a 3x2 matrix. CreateMatrix3x4 Represents an operator that creates a 3x4 matrix. CreateMatrix4 Represents an operator that creates a 4x4 matrix containing 3D rotation, scale, position and projection. CreateMatrix4x2 Represents an operator that creates a 4x2 matrix. CreateMatrix4x3 Represents an operator that creates a 4x3 matrix. CreateMesh Represents an operator that creates a new mesh geometry for each vertex array data in the sequence. CreateOrthographic Represents an operator that creates an orthographic projection matrix. CreateOrthographicOffCenter Represents an operator that creates an orthographic projection matrix from specified projection volume boundaries. CreatePerspectiveFieldOfView Represents an operator that creates a perspective projection matrix from field of view parameters. CreatePerspectiveOffCenter Represents an operator that creates a perspective projection matrix with the specified view frustum. CreateQuaternionRotation Represents an operator that creates a rotation matrix from a quaternion representation. CreateRotationX Represents an operator that creates a rotation matrix for a rotation about the x-axis. CreateRotationY Represents an operator that creates a rotation matrix for a rotation about the y-axis. CreateRotationZ Represents an operator that creates a rotation matrix for a rotation about the z-axis. CreateScale Represents an operator that creates a scale matrix. CreateTransform Represents an operator that creates a model matrix specifying position, rotation and scale. CreateTranslation Represents an operator that creates a translation matrix. CreateVector2 Represents an operator that creates a 2D vector element. CreateVector3 Represents an operator that creates a 3D vector element. CreateVector4 Represents an operator that creates a 4D vector element. CreateWindow Represents an operator that creates the shader window with the specified display style and render settings. Delay Represents an operator that delays the notification of values in the sequence by the specified time interval, using the render loop scheduler. DelaySubscription Represents an operator that delays subscription to the observable sequence by the specified time interval, using the render loop scheduler. DispatchCompute Represents an operator that launches one or more compute shader work groups for each notification in the sequence. DispatchShaderQueue Represents an operator that immediately starts processing the specified shader work queue whenever the sequence emits a notification. DrawArrays Represents an operator that renders primitives using each of the array data in the sequence. DrawFramebuffer Represents an operator that renders all currently stored draw commands to a framebuffer. DrawMesh Represents an operator that draws the specified mesh geometry. DrawMeshAggregate Represents an operator that aggregates the specified mesh geometry attributes into a single draw command. DrawMeshInstanced Represents an operator that draws the specified mesh geometry using instanced rendering, where each array in the sequence stores the per-instance attributes. Effect Provides an abstract base class for common functionality used in render effects specifying a vertex, geometry or fragment shader. ExtractRotation Represents an operator that returns the rotation component of every matrix in the sequence. ExtractScale Represents an operator that returns the scale component of every matrix in the sequence. ExtractTranslation Represents an operator that returns the translation component of every matrix in the sequence. ExtrinsicsTransform Represents an operator that converts extrinsics rotation and translation vectors in the sequence into a transform matrix, and vice-versa. FrameEvent Represents an update or render frame event raised by the shader window. InstanceAttributeMapping Represents the format of a per-instance defined input value to a vertex shader. InstanceAttributeMappingCollection Represents a collection of InstanceAttributeMapping objects. Invert Represents an operator that converts every matrix in the sequence to its inverse. LatestOnRenderFrame Represents an operator that replays the latest notification of the sequence at each render frame event. LatestOnUpdateFrame Represents an operator that replays the latest notification of the sequence at each update frame event. LoadImage Represents an operator that loads a texture buffer from the specified image file. LoadImageSequence Represents an operator that loads an image texture sequence from the specified movie file or image sequence pattern. LoadVideo Represents an operator that initializes a video texture which is dynamically updated from the specified movie file. Material Provides functionality for rendering geometry using a shaded material pass using the specified vertex, geometry or fragment shader. MatrixTransform Provides an abstract base class for operators specifying cumulative matrix transform operations. Mesh Represents a collection of vertices and indices used to describe arbitrary geometry. MeshBounds Represents an operator that retrieves the bounds of the specified mesh geometry. MeshName Represents the properties of a mesh geometry which is part of an aggregate rendering operation. MeshNameConverter Provides a type converter to convert a mesh name to and from other representations. It also provides a mechanism to find existing meshes which have been declared in the workflow. MeshResources Represents an operator that creates a collection of mesh resources to be loaded into the resource manager. NormalMatrix Represents an operator that computes the normal matrix for each modelview matrix in the sequence. PlayTextureSequence Represents an operator that starts playing the frame sequence of a video texture or texture array. ReadPixels Represents an operator that reads a block of pixels from the framebuffer. RenderCubemap Represents an operator that renders all currently stored draw commands to one of the cubemap textures. Each pass renders one face of the cubemap in the order +X, -X, +Y, -Y, +Z, -Z. RenderCubemapTarget Represents an operator that renders all currently stored draw commands to a cubemap render target. RenderFrame Represents an operator that generates a sequence of events produced whenever it is time to render a new frame. RenderTexture Represents an operator that renders all currently stored draw commands to a texture. ResourceLoader Provides the abstract base class for operators that load resources into the shader window resource manager. RetrieveImage Represents an operator that reads the pixel data from each texture in the sequence to an image. RotateAxisAngle Represents an operator that applies a rotation around an arbitrary axis to every transform in the sequence. RotateQuaternion Represents an operator that applies a rotation specified by a quaternion to every transform in the sequence. RotateX Represents an operator that applies a rotation about the x-axis to every transform in the sequence. RotateY Represents an operator that applies a rotation about the y-axis to every transform in the sequence. RotateZ Represents an operator that applies a rotation about the z-axis to every transform in the sequence. SampleOnRenderFrame Represents an operator that samples notifications from the sequence whenever there is a new render frame event. SampleOnUpdateFrame Represents an operator that samples notifications from the sequence whenever there is a new update frame event. Scale Represents an operator that applies a scale factor along the specified axes to every transform in the sequence. Shader Provides common functionality for executing and updating the state of compiled shader programs. ShaderException Represents errors that occur when compiling or linking shader programs. ShaderManager Provides functionality for accessing shader window resources and scheduling actions on the main render loop. ShaderNameConverter Provides a type converter to convert a shader name to and from other representations. It also provides a mechanism to find existing shaders which have been declared in the workflow. ShaderResources Represents an operator that creates a collection of shader resources to be loaded into the resource manager. ShaderWindow Creates and renders a window using the specified resources and a programmable shader pipeline. StoreImage Represents an operator that writes each image in the sequence to a texture object. StoreImageSequence Represents an operator that writes a sequence of images to a texture array. Texture Represents a texture object containing one or more images with the same image format. TextureArray Represents an array of texture objects. TextureNameConverter Provides a type converter to convert a texture name to and from other representations. It also provides a mechanism to find existing textures which have been declared in the workflow. TextureResources Represents an operator that creates a collection of texture resources to be loaded into the resource manager. Timer Represents an operator that generates an observable sequence that periodically produces a value after the specified initial relative due time has elapsed, using the render loop timing. TransformRelative Represents an operator that applies a model matrix transform specifying relative position, rotation and scale to every transform in the sequence. Translate Represents an operator that applies a translation along the specified axes to every transform in the sequence. Transpose Represents an operator that calculates the transpose of every matrix in the sequence. UpdateClearColorState Represents an operator that updates the clear color state of the shader window. UpdateFrame Represents an operator that generates a sequence of events produced whenever it is time to update the render state. UpdateRenderState Represents an operator that updates the render state of the shader window. UpdateScissorState Represents an operator that updates the active scissor box in the shader window. Any fragments falling outside the scissor box will be discarded. UpdateTexture Represents an operator that updates the pixel store of the specified texture target from a sequence of images. UpdateUniform Represents an operator that updates the value of a uniform variable on the specified shader. UpdateVertexBuffer Represents an operator that updates the vertex buffer data used by the specified mesh geometry. UpdateViewportState Represents an operator that updates the active viewport in the shader window. VertexAttributeMapping Represents the format of a user-defined input value to a vertex shader. VertexAttributeMappingCollection Represents a collection of VertexAttributeMapping objects. ViewportEffect Provides functionality for rendering a fullscreen effect using a fragment shader pass. WarpPerspective Represents an operator that creates a warp perspective transform matrix for planar projection mapping. WindowClosed Represents an operator that generates a sequence of events produced whenever the shader window is closed. Structs DispatchParameters Represents parameters used when launching compute shader work groups. TimeStep Represents the amount of time elapsed since the last update. Enums MatrixOrder Specifies the transformation order for cumulative matrix transform operations. QuadEffects Specifies available fullscreen quad rendering effects."
  },
  "api/Bonsai.Shaders.Input.GamePad.html": {
    "href": "api/Bonsai.Shaders.Input.GamePad.html",
    "title": "Class GamePad",
    "keywords": "Class GamePad Represents an operator that generates a sequence with the current state of the specified gamepad device. Inheritance Object Source < GamePadState > GamePad Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Input Assembly : Bonsai.Shaders.dll Syntax public class GamePad : Source<GamePadState> Properties | Improve this Doc View Source Index Gets or sets the index of the gamepad device. Declaration public int Index { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Generate() Generates an observable sequence where each element represents the current state of the specified gamepad device. Declaration public override IObservable<GamePadState> Generate() Returns Type Description IObservable < GamePadState > A sequence of GamePadState values representing the current state of the gamepad device. Overrides Bonsai.Source<OpenTK.Input.GamePadState>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence where each element represents the current state of the specified gamepad device, at the time the source sequence emits a notification. Declaration public IObservable<GamePadState> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications indicating when to check for the current state of the gamepad device. Returns Type Description IObservable < GamePadState > A sequence of GamePadState values representing the current state of the gamepad device, at the time the source sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.Input.html": {
    "href": "api/Bonsai.Shaders.Input.html",
    "title": "Namespace Bonsai.Shaders.Input",
    "keywords": "Namespace Bonsai.Shaders.Input Classes GamePad Represents an operator that generates a sequence with the current state of the specified gamepad device. Keyboard Represents an operator that generates a sequence with the current state of the specified keyboard device. KeyDown Represents an operator that generates a sequence of events produced whenever a key is pressed while the shader window has focus. KeyPress Represents an operator that generates a sequence of characters produced whenever a key is pressed while the shader window has focus. KeyUp Represents an operator that generates a sequence of events produced whenever a key is released while the shader window has focus. Mouse Represents an operator that generates a sequence with the current state of the specified mouse device. MouseCursor Represents an operator that generates a sequence with the current state of the mouse cursor. The position is defined in absolute desktop points, with the origin placed at the top-left corner of the display. MouseDown Represents an operator that generates a sequence of events produced whenever a mouse button is pressed over the shader window. MouseEnter Represents an operator that generates a sequence of events produced whenever the mouse cursor enters the shader window bounds. MouseLeave Represents an operator that generates a sequence of events produced whenever the mouse cursor leaves the shader window bounds. MouseMove Represents an operator that generates a sequence of events produced whenever the mouse is moved over the shader window. MouseUp Represents an operator that generates a sequence of events produced whenever a mouse button is released over the shader window. MouseWheel Represents an operator that generates a sequence of events produced whenever the mouse wheel is moved over the shader window. NormalizedDeviceCoordinates Represents an operator that converts each point in the sequence from window client coordinates into normalized device coordinates."
  },
  "api/Bonsai.Shaders.Input.Keyboard.html": {
    "href": "api/Bonsai.Shaders.Input.Keyboard.html",
    "title": "Class Keyboard",
    "keywords": "Class Keyboard Represents an operator that generates a sequence with the current state of the specified keyboard device. Inheritance Object Source < KeyboardState > Keyboard Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Input Assembly : Bonsai.Shaders.dll Syntax public class Keyboard : Source<KeyboardState> Properties | Improve this Doc View Source Index Gets or sets the index of the keyboard device. If it is not specified, the combined state of all devices is retrieved. Declaration public int? Index { get; set; } Property Value Type Description Nullable < Int32 > Methods | Improve this Doc View Source Generate() Generates an observable sequence where each element represents the current state of the specified keyboard device. Declaration public override IObservable<KeyboardState> Generate() Returns Type Description IObservable < KeyboardState > A sequence of KeyboardState values representing the current state of the keyboard device. Overrides Bonsai.Source<OpenTK.Input.KeyboardState>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence where each element represents the current state of the specified keyboard device, at the time the source sequence emits a notification. Declaration public IObservable<KeyboardState> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications indicating when to check for the current state of the keyboard device. Returns Type Description IObservable < KeyboardState > A sequence of KeyboardState values representing the current state of the keyboard device, at the time the source sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.Input.KeyDown.html": {
    "href": "api/Bonsai.Shaders.Input.KeyDown.html",
    "title": "Class KeyDown",
    "keywords": "Class KeyDown Represents an operator that generates a sequence of events produced whenever a key is pressed while the shader window has focus. Inheritance Object Source < EventPattern < INativeWindow , KeyboardKeyEventArgs >> KeyDown Inherited Members Source<EventPattern<INativeWindow, KeyboardKeyEventArgs>>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Input Assembly : Bonsai.Shaders.dll Syntax public class KeyDown : Source<EventPattern<INativeWindow, KeyboardKeyEventArgs>> Properties | Improve this Doc View Source Key Gets or sets a value specifying an optional key to use as a filter. Declaration [TypeConverter(typeof(NullableEnumConverter))] public Key? Key { get; set; } Property Value Type Description Nullable < Key > | Improve this Doc View Source Modifiers Gets or sets a value specifying optional key modifiers to use as a filter. Declaration [TypeConverter(typeof(NullableEnumConverter))] public KeyModifiers? Modifiers { get; set; } Property Value Type Description Nullable < KeyModifiers > Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever a key is pressed while the shader window has focus. Declaration public override IObservable<EventPattern<INativeWindow, KeyboardKeyEventArgs>> Generate() Returns Type Description IObservable < EventPattern < INativeWindow , KeyboardKeyEventArgs >> A sequence of events containing KeyboardKeyEventArgs event data produced whenever a key is pressed while the shader window has focus. Overrides Bonsai.Source<System.Reactive.EventPattern<OpenTK.INativeWindow, OpenTK.Input.KeyboardKeyEventArgs>>.Generate()"
  },
  "api/Bonsai.Shaders.Input.KeyPress.html": {
    "href": "api/Bonsai.Shaders.Input.KeyPress.html",
    "title": "Class KeyPress",
    "keywords": "Class KeyPress Represents an operator that generates a sequence of characters produced whenever a key is pressed while the shader window has focus. Inheritance Object Source < EventPattern < INativeWindow , KeyPressEventArgs >> KeyPress Inherited Members Source<EventPattern<INativeWindow, KeyPressEventArgs>>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Input Assembly : Bonsai.Shaders.dll Syntax public class KeyPress : Source<EventPattern<INativeWindow, KeyPressEventArgs>> Properties | Improve this Doc View Source KeyChar Gets or sets a value specifying an optional character to use as a filter. Declaration public char? KeyChar { get; set; } Property Value Type Description Nullable < Char > Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a character whenever the corresponding key is pressed while the shader window has focus. Declaration public override IObservable<EventPattern<INativeWindow, KeyPressEventArgs>> Generate() Returns Type Description IObservable < EventPattern < INativeWindow , KeyPressEventArgs >> A sequence of events containing KeyPressEventArgs event data produced whenever a character key is pressed while the shader window has focus. Overrides Bonsai.Source<System.Reactive.EventPattern<OpenTK.INativeWindow, OpenTK.KeyPressEventArgs>>.Generate()"
  },
  "api/Bonsai.Shaders.Input.KeyUp.html": {
    "href": "api/Bonsai.Shaders.Input.KeyUp.html",
    "title": "Class KeyUp",
    "keywords": "Class KeyUp Represents an operator that generates a sequence of events produced whenever a key is released while the shader window has focus. Inheritance Object Source < EventPattern < INativeWindow , KeyboardKeyEventArgs >> KeyUp Inherited Members Source<EventPattern<INativeWindow, KeyboardKeyEventArgs>>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Input Assembly : Bonsai.Shaders.dll Syntax public class KeyUp : Source<EventPattern<INativeWindow, KeyboardKeyEventArgs>> Properties | Improve this Doc View Source Key Gets or sets a value specifying an optional key to use as a filter. Declaration [TypeConverter(typeof(NullableEnumConverter))] public Key? Key { get; set; } Property Value Type Description Nullable < Key > | Improve this Doc View Source Modifiers Gets or sets a value specifying optional key modifiers to use as a filter. Declaration [TypeConverter(typeof(NullableEnumConverter))] public KeyModifiers? Modifiers { get; set; } Property Value Type Description Nullable < KeyModifiers > Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever a key is released while the shader window has focus. Declaration public override IObservable<EventPattern<INativeWindow, KeyboardKeyEventArgs>> Generate() Returns Type Description IObservable < EventPattern < INativeWindow , KeyboardKeyEventArgs >> A sequence of events containing KeyboardKeyEventArgs event data produced whenever a key is released while the shader window has focus. Overrides Bonsai.Source<System.Reactive.EventPattern<OpenTK.INativeWindow, OpenTK.Input.KeyboardKeyEventArgs>>.Generate()"
  },
  "api/Bonsai.Shaders.Input.Mouse.html": {
    "href": "api/Bonsai.Shaders.Input.Mouse.html",
    "title": "Class Mouse",
    "keywords": "Class Mouse Represents an operator that generates a sequence with the current state of the specified mouse device. Inheritance Object Source < MouseState > Mouse Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Input Assembly : Bonsai.Shaders.dll Syntax public class Mouse : Source<MouseState> Remarks The position and wheel values are defined in a hardware-specific coordinate system. Properties | Improve this Doc View Source Index Gets or sets the index of the mouse device. If it is not specified, the combined state of all devices is retrieved. Declaration public int? Index { get; set; } Property Value Type Description Nullable < Int32 > Methods | Improve this Doc View Source Generate() Generates an observable sequence where each element represents the current state of the specified mouse device. Declaration public override IObservable<MouseState> Generate() Returns Type Description IObservable < MouseState > A sequence of MouseState values representing the current state of the mouse device. Overrides Bonsai.Source<OpenTK.Input.MouseState>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence where each element represents the current state of the specified mouse device, at the time the source sequence emits a notification. Declaration public IObservable<MouseState> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications indicating when to check for the current state of the mouse device. Returns Type Description IObservable < MouseState > A sequence of MouseState values representing the current state of the mouse device, at the time the source sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.Input.MouseCursor.html": {
    "href": "api/Bonsai.Shaders.Input.MouseCursor.html",
    "title": "Class MouseCursor",
    "keywords": "Class MouseCursor Represents an operator that generates a sequence with the current state of the mouse cursor. The position is defined in absolute desktop points, with the origin placed at the top-left corner of the display. Inheritance Object Source < MouseState > MouseCursor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Input Assembly : Bonsai.Shaders.dll Syntax public class MouseCursor : Source<MouseState> Methods | Improve this Doc View Source Generate() Generates an observable sequence where each element represents the current state of the mouse cursor. Declaration public override IObservable<MouseState> Generate() Returns Type Description IObservable < MouseState > A sequence of MouseState values representing the current state of the mouse cursor. Overrides Bonsai.Source<OpenTK.Input.MouseState>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence where each element represents the current state of the mouse cursor, at the time the source sequence emits a notification. Declaration public IObservable<MouseState> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications indicating when to check for the current state of the mouse cursor. Returns Type Description IObservable < MouseState > A sequence of MouseState values representing the current state of the mouse cursor, at the time the source sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.Input.MouseDown.html": {
    "href": "api/Bonsai.Shaders.Input.MouseDown.html",
    "title": "Class MouseDown",
    "keywords": "Class MouseDown Represents an operator that generates a sequence of events produced whenever a mouse button is pressed over the shader window. Inheritance Object Source < EventPattern < INativeWindow , MouseButtonEventArgs >> MouseDown Inherited Members Source<EventPattern<INativeWindow, MouseButtonEventArgs>>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Input Assembly : Bonsai.Shaders.dll Syntax public class MouseDown : Source<EventPattern<INativeWindow, MouseButtonEventArgs>> Properties | Improve this Doc View Source Button Gets or sets a value specifying an optional mouse button to use as a filter. Declaration [TypeConverter(typeof(NullableEnumConverter))] public MouseButton? Button { get; set; } Property Value Type Description Nullable < MouseButton > Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever a mouse button is pressed over the shader window. Declaration public override IObservable<EventPattern<INativeWindow, MouseButtonEventArgs>> Generate() Returns Type Description IObservable < EventPattern < INativeWindow , MouseButtonEventArgs >> A sequence of events containing MouseButtonEventArgs event data produced whenever a mouse button is pressed over the shader window. Overrides Bonsai.Source<System.Reactive.EventPattern<OpenTK.INativeWindow, OpenTK.Input.MouseButtonEventArgs>>.Generate()"
  },
  "api/Bonsai.Shaders.Input.MouseEnter.html": {
    "href": "api/Bonsai.Shaders.Input.MouseEnter.html",
    "title": "Class MouseEnter",
    "keywords": "Class MouseEnter Represents an operator that generates a sequence of events produced whenever the mouse cursor enters the shader window bounds. Inheritance Object Source < EventPattern < INativeWindow , EventArgs >> MouseEnter Inherited Members Source<EventPattern<INativeWindow, EventArgs>>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Input Assembly : Bonsai.Shaders.dll Syntax public class MouseEnter : Source<EventPattern<INativeWindow, EventArgs>> Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever the mouse cursor enters the shader window bounds. Declaration public override IObservable<EventPattern<INativeWindow, EventArgs>> Generate() Returns Type Description IObservable < EventPattern < INativeWindow , EventArgs >> A sequence of events produced whenever the mouse cursor enters the shader window bounds. Overrides Bonsai.Source<System.Reactive.EventPattern<OpenTK.INativeWindow, System.EventArgs>>.Generate()"
  },
  "api/Bonsai.Shaders.Input.MouseLeave.html": {
    "href": "api/Bonsai.Shaders.Input.MouseLeave.html",
    "title": "Class MouseLeave",
    "keywords": "Class MouseLeave Represents an operator that generates a sequence of events produced whenever the mouse cursor leaves the shader window bounds. Inheritance Object Source < EventPattern < INativeWindow , EventArgs >> MouseLeave Inherited Members Source<EventPattern<INativeWindow, EventArgs>>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Input Assembly : Bonsai.Shaders.dll Syntax public class MouseLeave : Source<EventPattern<INativeWindow, EventArgs>> Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever the mouse cursor leaves the shader window bounds. Declaration public override IObservable<EventPattern<INativeWindow, EventArgs>> Generate() Returns Type Description IObservable < EventPattern < INativeWindow , EventArgs >> A sequence of events produced whenever the mouse cursor leaves the shader window bounds. Overrides Bonsai.Source<System.Reactive.EventPattern<OpenTK.INativeWindow, System.EventArgs>>.Generate()"
  },
  "api/Bonsai.Shaders.Input.MouseMove.html": {
    "href": "api/Bonsai.Shaders.Input.MouseMove.html",
    "title": "Class MouseMove",
    "keywords": "Class MouseMove Represents an operator that generates a sequence of events produced whenever the mouse is moved over the shader window. Inheritance Object Source < EventPattern < INativeWindow , MouseMoveEventArgs >> MouseMove Inherited Members Source<EventPattern<INativeWindow, MouseMoveEventArgs>>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Input Assembly : Bonsai.Shaders.dll Syntax public class MouseMove : Source<EventPattern<INativeWindow, MouseMoveEventArgs>> Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever the mouse is moved over the shader window. Declaration public override IObservable<EventPattern<INativeWindow, MouseMoveEventArgs>> Generate() Returns Type Description IObservable < EventPattern < INativeWindow , MouseMoveEventArgs >> A sequence of events produced whenever the mouse is moved over the shader window. Overrides Bonsai.Source<System.Reactive.EventPattern<OpenTK.INativeWindow, OpenTK.Input.MouseMoveEventArgs>>.Generate()"
  },
  "api/Bonsai.Shaders.Input.MouseUp.html": {
    "href": "api/Bonsai.Shaders.Input.MouseUp.html",
    "title": "Class MouseUp",
    "keywords": "Class MouseUp Represents an operator that generates a sequence of events produced whenever a mouse button is released over the shader window. Inheritance Object Source < EventPattern < INativeWindow , MouseButtonEventArgs >> MouseUp Inherited Members Source<EventPattern<INativeWindow, MouseButtonEventArgs>>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Input Assembly : Bonsai.Shaders.dll Syntax public class MouseUp : Source<EventPattern<INativeWindow, MouseButtonEventArgs>> Properties | Improve this Doc View Source Button Gets or sets a value specifying an optional mouse button to use as a filter. Declaration [TypeConverter(typeof(NullableEnumConverter))] public MouseButton? Button { get; set; } Property Value Type Description Nullable < MouseButton > Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever a mouse button is released over the shader window. Declaration public override IObservable<EventPattern<INativeWindow, MouseButtonEventArgs>> Generate() Returns Type Description IObservable < EventPattern < INativeWindow , MouseButtonEventArgs >> A sequence of events containing MouseButtonEventArgs event data produced whenever a mouse button is released over the shader window. Overrides Bonsai.Source<System.Reactive.EventPattern<OpenTK.INativeWindow, OpenTK.Input.MouseButtonEventArgs>>.Generate()"
  },
  "api/Bonsai.Shaders.Input.MouseWheel.html": {
    "href": "api/Bonsai.Shaders.Input.MouseWheel.html",
    "title": "Class MouseWheel",
    "keywords": "Class MouseWheel Represents an operator that generates a sequence of events produced whenever the mouse wheel is moved over the shader window. Inheritance Object Source < EventPattern < INativeWindow , MouseWheelEventArgs >> MouseWheel Inherited Members Source<EventPattern<INativeWindow, MouseWheelEventArgs>>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Input Assembly : Bonsai.Shaders.dll Syntax public class MouseWheel : Source<EventPattern<INativeWindow, MouseWheelEventArgs>> Methods | Improve this Doc View Source Generate() Generates an observable sequence that produces a value whenever the mouse wheel is moved over the shader window. Declaration public override IObservable<EventPattern<INativeWindow, MouseWheelEventArgs>> Generate() Returns Type Description IObservable < EventPattern < INativeWindow , MouseWheelEventArgs >> A sequence of events produced whenever the mouse wheel is moved over the shader window. Overrides Bonsai.Source<System.Reactive.EventPattern<OpenTK.INativeWindow, OpenTK.Input.MouseWheelEventArgs>>.Generate()"
  },
  "api/Bonsai.Shaders.Input.NormalizedDeviceCoordinates.html": {
    "href": "api/Bonsai.Shaders.Input.NormalizedDeviceCoordinates.html",
    "title": "Class NormalizedDeviceCoordinates",
    "keywords": "Class NormalizedDeviceCoordinates Represents an operator that converts each point in the sequence from window client coordinates into normalized device coordinates. Inheritance Object Combinator < EventPattern < INativeWindow , MouseEventArgs >, Vector2 > Transform < EventPattern < INativeWindow , MouseEventArgs >, Vector2 > NormalizedDeviceCoordinates Inherited Members Combinator<EventPattern<INativeWindow, MouseEventArgs>, Vector2>.Process(IObservable<EventPattern<INativeWindow, MouseEventArgs>>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Input Assembly : Bonsai.Shaders.dll Syntax public class NormalizedDeviceCoordinates : Transform<EventPattern<INativeWindow, MouseEventArgs>, Vector2> Methods | Improve this Doc View Source Process(IObservable<EventPattern<INativeWindow, MouseButtonEventArgs>>) Converts each point in an observable sequence of mouse button event data from window client coordinates into normalized device coordinates. Declaration public IObservable<Vector2> Process(IObservable<EventPattern<INativeWindow, MouseButtonEventArgs>> source) Parameters Type Name Description IObservable < EventPattern < INativeWindow , MouseButtonEventArgs >> source A sequence of events containing MouseButtonEventArgs event data. Returns Type Description IObservable < Vector2 > A sequence of Vector2 values representing the normalized device coordinates corresponding to the window client location stored in the event data. | Improve this Doc View Source Process(IObservable<EventPattern<INativeWindow, MouseEventArgs>>) Converts each point in an observable sequence of mouse device event data from window client coordinates into normalized device coordinates. Declaration public override IObservable<Vector2> Process(IObservable<EventPattern<INativeWindow, MouseEventArgs>> source) Parameters Type Name Description IObservable < EventPattern < INativeWindow , MouseEventArgs >> source A sequence of events containing MouseEventArgs event data. Returns Type Description IObservable < Vector2 > A sequence of Vector2 values representing the normalized device coordinates corresponding to the window client location stored in the event data. Overrides Bonsai.Combinator<System.Reactive.EventPattern<OpenTK.INativeWindow, OpenTK.Input.MouseEventArgs>, OpenTK.Vector2>.Process(System.IObservable<System.Reactive.EventPattern<OpenTK.INativeWindow, OpenTK.Input.MouseEventArgs>>) | Improve this Doc View Source Process(IObservable<EventPattern<INativeWindow, MouseMoveEventArgs>>) Converts each point in an observable sequence of mouse move event data from window client coordinates into normalized device coordinates. Declaration public IObservable<Vector2> Process(IObservable<EventPattern<INativeWindow, MouseMoveEventArgs>> source) Parameters Type Name Description IObservable < EventPattern < INativeWindow , MouseMoveEventArgs >> source A sequence of events containing MouseMoveEventArgs event data. Returns Type Description IObservable < Vector2 > A sequence of Vector2 values representing the normalized device coordinates corresponding to the window client location stored in the event data. | Improve this Doc View Source Process(IObservable<EventPattern<INativeWindow, MouseWheelEventArgs>>) Converts each point in an observable sequence of mouse wheel event data from window client coordinates into normalized device coordinates. Declaration public IObservable<Vector2> Process(IObservable<EventPattern<INativeWindow, MouseWheelEventArgs>> source) Parameters Type Name Description IObservable < EventPattern < INativeWindow , MouseWheelEventArgs >> source A sequence of events containing MouseWheelEventArgs event data. Returns Type Description IObservable < Vector2 > A sequence of Vector2 values representing the normalized device coordinates corresponding to the window client location stored in the event data."
  },
  "api/Bonsai.Shaders.InstanceAttributeMapping.html": {
    "href": "api/Bonsai.Shaders.InstanceAttributeMapping.html",
    "title": "Class InstanceAttributeMapping",
    "keywords": "Class InstanceAttributeMapping Represents the format of a per-instance defined input value to a vertex shader. Inheritance Object VertexAttributeMapping InstanceAttributeMapping Inherited Members VertexAttributeMapping.Size VertexAttributeMapping.Normalized VertexAttributeMapping.Type Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class InstanceAttributeMapping : VertexAttributeMapping Properties | Improve this Doc View Source Divisor Gets or sets a value specifying the number of instances that each attribute in the buffer represents during instanced rendering. Declaration public int Divisor { get; set; } Property Value Type Description Int32 Remarks If divisor is zero, the attribute advances once per vertex. If divisor is non-zero, the attribute advances once per divisor instances of the sets of vertices being rendered. Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides VertexAttributeMapping.ToString()"
  },
  "api/Bonsai.Shaders.InstanceAttributeMappingCollection.html": {
    "href": "api/Bonsai.Shaders.InstanceAttributeMappingCollection.html",
    "title": "Class InstanceAttributeMappingCollection",
    "keywords": "Class InstanceAttributeMappingCollection Represents a collection of InstanceAttributeMapping objects. Inheritance Object Collection < InstanceAttributeMapping > InstanceAttributeMappingCollection Implements IList < InstanceAttributeMapping > ICollection < InstanceAttributeMapping > IList ICollection IReadOnlyList < InstanceAttributeMapping > IReadOnlyCollection < InstanceAttributeMapping > IEnumerable < InstanceAttributeMapping > IEnumerable Inherited Members Collection<InstanceAttributeMapping>.Add(InstanceAttributeMapping) Collection<InstanceAttributeMapping>.Clear() Collection<InstanceAttributeMapping>.CopyTo(InstanceAttributeMapping[], Int32) Collection<InstanceAttributeMapping>.Contains(InstanceAttributeMapping) Collection<InstanceAttributeMapping>.GetEnumerator() Collection<InstanceAttributeMapping>.IndexOf(InstanceAttributeMapping) Collection<InstanceAttributeMapping>.Insert(Int32, InstanceAttributeMapping) Collection<InstanceAttributeMapping>.Remove(InstanceAttributeMapping) Collection<InstanceAttributeMapping>.RemoveAt(Int32) Collection<InstanceAttributeMapping>.ClearItems() Collection<InstanceAttributeMapping>.InsertItem(Int32, InstanceAttributeMapping) Collection<InstanceAttributeMapping>.RemoveItem(Int32) Collection<InstanceAttributeMapping>.SetItem(Int32, InstanceAttributeMapping) Collection<InstanceAttributeMapping>.IEnumerable.GetEnumerator() Collection<InstanceAttributeMapping>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.InstanceAttributeMapping>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.InstanceAttributeMapping>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<InstanceAttributeMapping>.IList.Add(Object) Collection<InstanceAttributeMapping>.IList.Contains(Object) Collection<InstanceAttributeMapping>.IList.IndexOf(Object) Collection<InstanceAttributeMapping>.IList.Insert(Int32, Object) Collection<InstanceAttributeMapping>.IList.Remove(Object) Collection<InstanceAttributeMapping>.Count Collection<InstanceAttributeMapping>.Items Collection<InstanceAttributeMapping>.Item[Int32] Collection<InstanceAttributeMapping>.ICollection<InstanceAttributeMapping>.IsReadOnly Collection<InstanceAttributeMapping>.ICollection.IsSynchronized Collection<InstanceAttributeMapping>.ICollection.SyncRoot Collection<InstanceAttributeMapping>.IList.Item[Int32] Collection<InstanceAttributeMapping>.IList.IsReadOnly Collection<InstanceAttributeMapping>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class InstanceAttributeMappingCollection : Collection<InstanceAttributeMapping>, IList<InstanceAttributeMapping>, ICollection<InstanceAttributeMapping>, IList, ICollection, IReadOnlyList<InstanceAttributeMapping>, IReadOnlyCollection<InstanceAttributeMapping>, IEnumerable<InstanceAttributeMapping>, IEnumerable Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Shaders.Invert.html": {
    "href": "api/Bonsai.Shaders.Invert.html",
    "title": "Class Invert",
    "keywords": "Class Invert Represents an operator that converts every matrix in the sequence to its inverse. Inheritance Object Combinator < Matrix4 , Matrix4 > Transform < Matrix4 , Matrix4 > Invert Inherited Members Combinator<Matrix4, Matrix4>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class Invert : Transform<Matrix4, Matrix4> Methods | Improve this Doc View Source Process(IObservable<Matrix3>) Converts every 3x3 matrix in an observable sequence to its inverse. Declaration public IObservable<Matrix3> Process(IObservable<Matrix3> source) Parameters Type Name Description IObservable < Matrix3 > source The sequence of 3x3 matrices to invert. Returns Type Description IObservable < Matrix3 > The sequence of inverted 3x3 matrices. | Improve this Doc View Source Process(IObservable<Matrix4>) Converts every 4x4 matrix in an observable sequence to its inverse. Declaration public override IObservable<Matrix4> Process(IObservable<Matrix4> source) Parameters Type Name Description IObservable < Matrix4 > source The sequence of 4x4 matrices to invert. Returns Type Description IObservable < Matrix4 > The sequence of inverted 4x4 matrices. Overrides Bonsai.Combinator<OpenTK.Matrix4, OpenTK.Matrix4>.Process(System.IObservable<OpenTK.Matrix4>)"
  },
  "api/Bonsai.Shaders.LatestOnRenderFrame.html": {
    "href": "api/Bonsai.Shaders.LatestOnRenderFrame.html",
    "title": "Class LatestOnRenderFrame",
    "keywords": "Class LatestOnRenderFrame Represents an operator that replays the latest notification of the sequence at each render frame event. Inheritance Object Combinator LatestOnRenderFrame Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class LatestOnRenderFrame : Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Replays the latest notification of an observable sequence at each render frame event. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence whose latest notification will be replayed at each render frame event. Returns Type Description IObservable <TSource> The sequence of replayed values from the source sequence, sampled at each render frame event. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.LatestOnUpdateFrame.html": {
    "href": "api/Bonsai.Shaders.LatestOnUpdateFrame.html",
    "title": "Class LatestOnUpdateFrame",
    "keywords": "Class LatestOnUpdateFrame Represents an operator that replays the latest notification of the sequence at each update frame event. Inheritance Object Combinator LatestOnUpdateFrame Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class LatestOnUpdateFrame : Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Replays the latest notification of an observable sequence at each update frame event. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence whose latest notification will be replayed at each update frame event. Returns Type Description IObservable <TSource> The sequence of replayed values from the source sequence, sampled at each update frame event. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.LoadImage.html": {
    "href": "api/Bonsai.Shaders.LoadImage.html",
    "title": "Class LoadImage",
    "keywords": "Class LoadImage Represents an operator that loads a texture buffer from the specified image file. Inheritance Object Source < Texture > LoadImage Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class LoadImage : Source<Texture> Properties | Improve this Doc View Source ColorType Gets or sets a value specifying the color type of the loaded image. Declaration public LoadImageFlags ColorType { get; set; } Property Value Type Description LoadImageFlags | Improve this Doc View Source FileName Gets or sets the name of the image file. Declaration [FileNameFilter(\"Image Files|*.png;*.bmp;*.jpg;*.jpeg;*.tif;*.tiff;*.exr|PNG Files|*.png|BMP Files|*.bmp|JPEG Files|*.jpg;*.jpeg|TIFF Files|*.tif;*.tiff|EXR Files|*.exr|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source FlipMode Gets or sets a value specifying the flip mode applied to the loaded image. Declaration public FlipMode? FlipMode { get; set; } Property Value Type Description Nullable < FlipMode > | Improve this Doc View Source Height Gets or sets the height of the texture. If no value is specified, the texture buffer will not be initialized. Declaration public int? Height { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source InternalFormat Gets or sets a value specifying the internal pixel format of the texture. Declaration public PixelInternalFormat InternalFormat { get; set; } Property Value Type Description PixelInternalFormat | Improve this Doc View Source MagFilter Gets or sets a value specifying the texture magnification filter. Declaration public TextureMagFilter MagFilter { get; set; } Property Value Type Description TextureMagFilter | Improve this Doc View Source MinFilter Gets or sets a value specifying the texture minification filter. Declaration public TextureMinFilter MinFilter { get; set; } Property Value Type Description TextureMinFilter | Improve this Doc View Source Width Gets or sets the width of the texture. If no value is specified, the texture buffer will not be initialized. Declaration public int? Width { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source WrapS Gets or sets a value specifying wrapping parameters for the column coordinates of the texture sampler. Declaration public TextureWrapMode WrapS { get; set; } Property Value Type Description TextureWrapMode | Improve this Doc View Source WrapT Gets or sets a value specifying wrapping parameters for the row coordinates of the texture sampler. Declaration public TextureWrapMode WrapT { get; set; } Property Value Type Description TextureWrapMode Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a texture buffer loaded from the specified image file. Declaration public override IObservable<Texture> Generate() Returns Type Description IObservable < Texture > A sequence containing a single instance of the Texture class representing the data loaded from the specified image file. Overrides Bonsai.Source<Bonsai.Shaders.Texture>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Returns a texture buffer loaded from the specified image file whenever an observable sequence emits a notification. Declaration public IObservable<Texture> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to start loading a new texture buffer from the specified image file. Returns Type Description IObservable < Texture > The sequence of Texture objects loaded from the specified image file whenever the source sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.LoadImageSequence.html": {
    "href": "api/Bonsai.Shaders.LoadImageSequence.html",
    "title": "Class LoadImageSequence",
    "keywords": "Class LoadImageSequence Represents an operator that loads an image texture sequence from the specified movie file or image sequence pattern. Inheritance Object Source < Texture > LoadImageSequence Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class LoadImageSequence : Source<Texture> Properties | Improve this Doc View Source FileName Gets or sets the path to a movie file or image sequence search pattern. Declaration [FileNameFilter(\"Video Files|*.avi;*.mp4;*.ogg;*.ogv;*.wmv|AVI Files (*.avi)|*.avi|MP4 Files (*.mp4)|*.mp4|OGG Files (*.ogg;*.ogv)|*.ogg;*.ogv|WMV Files (*.wmv)|*.wmv\")] public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source FlipMode Gets or sets a value specifying the flip mode applied to individual frames. Declaration public FlipMode? FlipMode { get; set; } Property Value Type Description Nullable < FlipMode > | Improve this Doc View Source FrameCount Gets or sets the maximum number of frames to include in the image sequence. Declaration public int? FrameCount { get; set; } Property Value Type Description Nullable < Int32 > Remarks If no value is specified, all frames in the video will be loaded in the image sequence. | Improve this Doc View Source Height Gets or sets the height of the texture. If no value is specified, the texture buffer will not be initialized. Declaration public int? Height { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source InternalFormat Gets or sets a value specifying the internal pixel format of the texture. Declaration public PixelInternalFormat InternalFormat { get; set; } Property Value Type Description PixelInternalFormat | Improve this Doc View Source MagFilter Gets or sets a value specifying the texture magnification filter. Declaration public TextureMagFilter MagFilter { get; set; } Property Value Type Description TextureMagFilter | Improve this Doc View Source MinFilter Gets or sets a value specifying the texture minification filter. Declaration public TextureMinFilter MinFilter { get; set; } Property Value Type Description TextureMinFilter | Improve this Doc View Source StartPosition Gets or sets the offset, in frames, at which the image sequence should start. Declaration public int StartPosition { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Width Gets or sets the width of the texture. If no value is specified, the texture buffer will not be initialized. Declaration public int? Width { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source WrapS Gets or sets a value specifying wrapping parameters for the column coordinates of the texture sampler. Declaration public TextureWrapMode WrapS { get; set; } Property Value Type Description TextureWrapMode | Improve this Doc View Source WrapT Gets or sets a value specifying wrapping parameters for the row coordinates of the texture sampler. Declaration public TextureWrapMode WrapT { get; set; } Property Value Type Description TextureWrapMode Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns an image texture sequence initialized from the specified movie file or image sequence pattern. Declaration public override IObservable<Texture> Generate() Returns Type Description IObservable < Texture > A sequence containing a single instance of the Texture class representing the image texture sequence. Overrides Bonsai.Source<Bonsai.Shaders.Texture>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Returns an image texture sequence initialized from the specified movie file or image sequence pattern whenever an observable sequence emits a notification. Declaration public IObservable<Texture> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to start loading a new image texture sequence. Returns Type Description IObservable < Texture > The sequence of Texture objects initialized from the specified movie file or image sequence pattern whenever the source sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.LoadVideo.html": {
    "href": "api/Bonsai.Shaders.LoadVideo.html",
    "title": "Class LoadVideo",
    "keywords": "Class LoadVideo Represents an operator that initializes a video texture which is dynamically updated from the specified movie file. Inheritance Object Source < Texture > LoadVideo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class LoadVideo : Source<Texture> Properties | Improve this Doc View Source BufferLength Gets or sets the size of the pre-loading buffer for video frames. Declaration public int? BufferLength { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source FileName Gets or sets the path to a movie file. Declaration [FileNameFilter(\"Video Files|*.avi;*.mp4;*.ogg;*.ogv;*.wmv|AVI Files (*.avi)|*.avi|MP4 Files (*.mp4)|*.mp4|OGG Files (*.ogg;*.ogv)|*.ogg;*.ogv|WMV Files (*.wmv)|*.wmv\")] public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source FlipMode Gets or sets a value specifying the flip mode applied to individual frames. Declaration public FlipMode? FlipMode { get; set; } Property Value Type Description Nullable < FlipMode > | Improve this Doc View Source FrameCount Gets or sets the maximum number of frames to include in the video sequence. Declaration public int? FrameCount { get; set; } Property Value Type Description Nullable < Int32 > Remarks If no value is specified, all frames in the video will be played. | Improve this Doc View Source Height Gets or sets the height of the texture. If no value is specified, the texture buffer will not be initialized. Declaration public int? Height { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source InternalFormat Gets or sets a value specifying the internal pixel format of the texture. Declaration public PixelInternalFormat InternalFormat { get; set; } Property Value Type Description PixelInternalFormat | Improve this Doc View Source MagFilter Gets or sets a value specifying the texture magnification filter. Declaration public TextureMagFilter MagFilter { get; set; } Property Value Type Description TextureMagFilter | Improve this Doc View Source MinFilter Gets or sets a value specifying the texture minification filter. Declaration public TextureMinFilter MinFilter { get; set; } Property Value Type Description TextureMinFilter | Improve this Doc View Source StartPosition Gets or sets the offset, in frames, at which the video sequence should start. Declaration public int StartPosition { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Width Gets or sets the width of the texture. If no value is specified, the texture buffer will not be initialized. Declaration public int? Width { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source WrapS Gets or sets a value specifying wrapping parameters for the column coordinates of the texture sampler. Declaration public TextureWrapMode WrapS { get; set; } Property Value Type Description TextureWrapMode | Improve this Doc View Source WrapT Gets or sets a value specifying wrapping parameters for the row coordinates of the texture sampler. Declaration public TextureWrapMode WrapT { get; set; } Property Value Type Description TextureWrapMode Methods | Improve this Doc View Source Generate() Generates an observable sequence that returns a video texture initialized from the specified movie file. Declaration public override IObservable<Texture> Generate() Returns Type Description IObservable < Texture > A sequence containing a single instance of the Texture class representing the video texture. Overrides Bonsai.Source<Bonsai.Shaders.Texture>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Returns a video texture initialized from the specified movie file whenever an observable sequence emits a notification. Declaration public IObservable<Texture> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to start loading a new video texture. Returns Type Description IObservable < Texture > The sequence of Texture objects initialized from the specified movie file whenever the source sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.Material.html": {
    "href": "api/Bonsai.Shaders.Material.html",
    "title": "Class Material",
    "keywords": "Class Material Provides functionality for rendering geometry using a shaded material pass using the specified vertex, geometry or fragment shader. Inheritance Object Shader Effect Material Implements IDisposable Inherited Members Effect.CreateShader() Shader.Name Shader.Program Shader.Window Shader.Update(Action) Shader.CreateShaderState(IEnumerable<StateConfiguration>, IEnumerable<UniformConfiguration>, IEnumerable<BufferBindingConfiguration>, FramebufferConfiguration) Shader.Dispatch() Shader.Dispose(Boolean) Shader.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class Material : Effect, IDisposable Properties | Improve this Doc View Source Mesh Gets the geometry to draw when running the material pass. Declaration public Mesh Mesh { get; } Property Value Type Description Mesh Methods | Improve this Doc View Source OnDispatch() Returns any actions that should be executed before running the shader program. Declaration protected override Action OnDispatch() Returns Type Description Action An Action object to be called before running the shader program. If the return value is null , no action will be executed. Overrides Shader.OnDispatch() Implements System.IDisposable"
  },
  "api/Bonsai.Shaders.MatrixOrder.html": {
    "href": "api/Bonsai.Shaders.MatrixOrder.html",
    "title": "Enum MatrixOrder",
    "keywords": "Enum MatrixOrder Specifies the transformation order for cumulative matrix transform operations. Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public enum MatrixOrder Fields Name Description Append Specifies that the new operation is applied after the preceding transform. Prepend Specifies that the new operation is applied before the preceding transform."
  },
  "api/Bonsai.Shaders.MatrixTransform.html": {
    "href": "api/Bonsai.Shaders.MatrixTransform.html",
    "title": "Class MatrixTransform",
    "keywords": "Class MatrixTransform Provides an abstract base class for operators specifying cumulative matrix transform operations. Inheritance Object Combinator < Matrix4 , Matrix4 > Transform < Matrix4 , Matrix4 > MatrixTransform RotateAxisAngle RotateQuaternion RotateX RotateY RotateZ Scale TransformRelative Translate Inherited Members Combinator<Matrix4, Matrix4>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public abstract class MatrixTransform : Transform<Matrix4, Matrix4> Properties | Improve this Doc View Source Order Gets or sets a value specifying the order of relative matrix transform operations. Declaration public MatrixOrder Order { get; set; } Property Value Type Description MatrixOrder Methods | Improve this Doc View Source CreateTransform(out Matrix4) When overridden in a derived class, initializes the matrix transform that should be combined with each element in the sequence. Declaration protected abstract void CreateTransform(out Matrix4 result) Parameters Type Name Description Matrix4 result When this method returns, contains the relative matrix transform to be combined with each element in the sequence. | Improve this Doc View Source Process(IObservable<Matrix4>) Performs a relative matrix transform operation on each matrix in an observable sequence. Declaration public override IObservable<Matrix4> Process(IObservable<Matrix4> source) Parameters Type Name Description IObservable < Matrix4 > source The sequence of transform matrices to be combined with the specified relative matrix transform. Returns Type Description IObservable < Matrix4 > A sequence of Matrix4 objects representing the combined transform. Overrides Bonsai.Combinator<OpenTK.Matrix4, OpenTK.Matrix4>.Process(System.IObservable<OpenTK.Matrix4>)"
  },
  "api/Bonsai.Shaders.Mesh.html": {
    "href": "api/Bonsai.Shaders.Mesh.html",
    "title": "Class Mesh",
    "keywords": "Class Mesh Represents a collection of vertices and indices used to describe arbitrary geometry. Inheritance Object Mesh Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class Mesh : IDisposable Constructors | Improve this Doc View Source Mesh() Initializes a new instance of the Mesh class. Declaration public Mesh() Properties | Improve this Doc View Source Bounds Gets or sets the axis-aligned bounding box of the mesh vertices. Declaration public Bounds Bounds { get; set; } Property Value Type Description Bounds | Improve this Doc View Source DrawMode Gets or sets a value specifying the draw mode to use for rendering the mesh. Declaration public PrimitiveType DrawMode { get; set; } Property Value Type Description PrimitiveType | Improve this Doc View Source ElementArray Gets the handle to the element array object. Declaration public int ElementArray { get; } Property Value Type Description Int32 | Improve this Doc View Source ElementArrayType Gets or sets a value specifying the type of the elements in the element array object. Declaration public DrawElementsType ElementArrayType { get; set; } Property Value Type Description DrawElementsType | Improve this Doc View Source VertexArray Gets the handle to the vertex array object. Declaration public int VertexArray { get; } Property Value Type Description Int32 | Improve this Doc View Source VertexBuffer Gets the handle to the vertex buffer object. Declaration public int VertexBuffer { get; } Property Value Type Description Int32 | Improve this Doc View Source VertexCount Gets or sets the number of vertices in the mesh vertex buffer. Declaration public int VertexCount { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Dispose() Releases all resources used by the Mesh class. Declaration public void Dispose() | Improve this Doc View Source Draw() Renders primitives from mesh vertex array data. Declaration public void Draw() | Improve this Doc View Source EnsureElementArray() Ensures the element array object is initialized. Declaration public void EnsureElementArray() Implements System.IDisposable"
  },
  "api/Bonsai.Shaders.MeshBounds.html": {
    "href": "api/Bonsai.Shaders.MeshBounds.html",
    "title": "Class MeshBounds",
    "keywords": "Class MeshBounds Represents an operator that retrieves the bounds of the specified mesh geometry. Inheritance Object Source < Bounds > MeshBounds Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class MeshBounds : Source<Bounds> Properties | Improve this Doc View Source MeshName Gets or sets the name of the mesh geometry for which to retrieve the bounds. Declaration [TypeConverter(typeof(MeshNameConverter))] public string MeshName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Retrieves the bounds of the specified mesh geometry and surfaces them through an observable sequence. Declaration public override IObservable<Bounds> Generate() Returns Type Description IObservable < Bounds > A sequence containing the retrieved mesh Bounds . Overrides Bonsai.Source<Bonsai.Shaders.Bounds>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Retrieves the bounds of the specified mesh geometry whenever an observable sequence emits a notification. Declaration public IObservable<Bounds> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for retrieving mesh bounds. Returns Type Description IObservable < Bounds > The sequence of retrieved mesh Bounds . Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.MeshName.html": {
    "href": "api/Bonsai.Shaders.MeshName.html",
    "title": "Class MeshName",
    "keywords": "Class MeshName Represents the properties of a mesh geometry which is part of an aggregate rendering operation. Inheritance Object MeshName Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class MeshName Properties | Improve this Doc View Source Divisor Gets or sets a value specifying the number of instances that each attribute in the mesh geometry buffer represents during instanced rendering. Declaration public int Divisor { get; set; } Property Value Type Description Int32 Remarks If divisor is zero, the attribute advances once per vertex. If divisor is non-zero, the attribute advances once per divisor instances of the sets of vertices being rendered. | Improve this Doc View Source Name Gets or sets the name of the mesh geometry to aggregate. Declaration [TypeConverter(typeof(MeshNameConverter))] public string Name { get; set; } Property Value Type Description String"
  },
  "api/Bonsai.Shaders.MeshNameConverter.html": {
    "href": "api/Bonsai.Shaders.MeshNameConverter.html",
    "title": "Class MeshNameConverter",
    "keywords": "Class MeshNameConverter Provides a type converter to convert a mesh name to and from other representations. It also provides a mechanism to find existing meshes which have been declared in the workflow. Inheritance Object TypeConverter StringConverter ResourceNameConverter MeshNameConverter Inherited Members ResourceNameConverter.IsResourceSupported(IResourceConfiguration) ResourceNameConverter.GetStandardValuesSupported(ITypeDescriptorContext) StringConverter.CanConvertFrom(ITypeDescriptorContext, Type) StringConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class MeshNameConverter : ResourceNameConverter Constructors | Improve this Doc View Source MeshNameConverter() Initializes a new instance of the MeshNameConverter class. Declaration public MeshNameConverter() Methods | Improve this Doc View Source GetStandardValues(ITypeDescriptorContext) Returns a collection of resource names which are available in the call context of this type converter request. Declaration public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description TypeConverter.StandardValuesCollection A TypeConverter.StandardValuesCollection containing the set of available resources. Only resources for which IsResourceSupported(IResourceConfiguration) returns true will be included. Overrides ResourceNameConverter.GetStandardValues(ITypeDescriptorContext)"
  },
  "api/Bonsai.Shaders.MeshResources.html": {
    "href": "api/Bonsai.Shaders.MeshResources.html",
    "title": "Class MeshResources",
    "keywords": "Class MeshResources Represents an operator that creates a collection of mesh resources to be loaded into the resource manager. Inheritance Object Combinator < ResourceConfigurationCollection , ResourceConfigurationCollection > Transform < ResourceConfigurationCollection , ResourceConfigurationCollection > ResourceLoader ResourceLoader MeshResources Inherited Members ResourceLoader.Process(IObservable<INativeWindow>) ResourceLoader.Process<TEventArgs>(IObservable<EventPattern<INativeWindow, TEventArgs>>) ResourceLoader.Process(IObservable<ResourceManager>) ResourceLoader.Process(IObservable<ResourceConfigurationCollection>) Combinator<ResourceConfigurationCollection, ResourceConfigurationCollection>.Process(IObservable<ResourceConfigurationCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class MeshResources : ResourceLoader Properties | Improve this Doc View Source Meshes Gets the collection of mesh resources to be loaded into the resource manager. Declaration public MeshConfigurationCollection Meshes { get; } Property Value Type Description MeshConfigurationCollection Methods | Improve this Doc View Source GetResources() Returns the set of resources to be loaded into the resource manager. Declaration protected override IEnumerable<IResourceConfiguration> GetResources() Returns Type Description IEnumerable < IResourceConfiguration > A collection of IResourceConfiguration objects to be loaded into the resource manager. Overrides ResourceLoader.GetResources()"
  },
  "api/Bonsai.Shaders.NormalMatrix.html": {
    "href": "api/Bonsai.Shaders.NormalMatrix.html",
    "title": "Class NormalMatrix",
    "keywords": "Class NormalMatrix Represents an operator that computes the normal matrix for each modelview matrix in the sequence. Inheritance Object Combinator < Matrix4 , Matrix4 > Transform < Matrix4 , Matrix4 > NormalMatrix Inherited Members Combinator<Matrix4, Matrix4>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class NormalMatrix : Transform<Matrix4, Matrix4> Methods | Improve this Doc View Source Process(IObservable<Matrix3>) Computes the normal matrix for each 3x3 modelview matrix in an observable sequence. Declaration public IObservable<Matrix3> Process(IObservable<Matrix3> source) Parameters Type Name Description IObservable < Matrix3 > source The sequence of 3x3 modelview matrices for which to compute the normal matrix. Returns Type Description IObservable < Matrix3 > A sequence of Matrix3 objects representing the normal matrix for each modelview matrix in the source sequence. | Improve this Doc View Source Process(IObservable<Matrix4>) Computes the normal matrix for each 4x4 modelview matrix in an observable sequence. Declaration public override IObservable<Matrix4> Process(IObservable<Matrix4> source) Parameters Type Name Description IObservable < Matrix4 > source The sequence of 4x4 modelview matrices for which to compute the normal matrix. Returns Type Description IObservable < Matrix4 > A sequence of Matrix4 objects representing the normal matrix for each modelview matrix in the source sequence. Overrides Bonsai.Combinator<OpenTK.Matrix4, OpenTK.Matrix4>.Process(System.IObservable<OpenTK.Matrix4>)"
  },
  "api/Bonsai.Shaders.PlayTextureSequence.html": {
    "href": "api/Bonsai.Shaders.PlayTextureSequence.html",
    "title": "Class PlayTextureSequence",
    "keywords": "Class PlayTextureSequence Represents an operator that starts playing the frame sequence of a video texture or texture array. Inheritance Object Combinator < ElementIndex < Texture >> PlayTextureSequence Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class PlayTextureSequence : Combinator<ElementIndex<Texture>> Properties | Improve this Doc View Source Loop Gets or sets a value indicating whether the video should loop when the end of the file is reached. Declaration public bool Loop { get; set; } Property Value Type Description Boolean | Improve this Doc View Source PlaybackRate Gets or sets the rate at which to playback the sequence. A value of zero means the native frame rate will be used. Declaration [Range(0, 2147483647)] public double PlaybackRate { get; set; } Property Value Type Description Double | Improve this Doc View Source TextureName Gets or sets the name of the texture sequence. Declaration [TypeConverter(typeof(TextureNameConverter))] public string TextureName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process() Generates an observable sequence that starts playing the frames of a video texture or texture array in order. Declaration public IObservable<ElementIndex<Texture>> Process() Returns Type Description IObservable < ElementIndex < Texture >> An observable sequence reporting the zero-based index of the frame which is currently active in the specified texture. | Improve this Doc View Source Process(IObservable<Texture>) Starts playing the frames of the video texture or texture array in an observable sequence. Declaration public IObservable<ElementIndex<Texture>> Process(IObservable<Texture> source) Parameters Type Name Description IObservable < Texture > source The sequence of Texture objects for which to start playing the frames in orer. The texture must be either a video texture or a texture array. Returns Type Description IObservable < ElementIndex < Texture >> An observable sequence reporting the zero-based index of the frame which is currently active in the specified texture. | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Starts playing the frames of a video texture or texture array in order whenever an observable sequence emits a notification. Declaration public override IObservable<ElementIndex<Texture>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to start playing the video texture or texture array. Returns Type Description IObservable < ElementIndex < Texture >> An observable sequence reporting the zero-based index of the frame which is currently active in the specified texture. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator<Bonsai.Reactive.ElementIndex<Bonsai.Shaders.Texture>>.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.QuadEffects.html": {
    "href": "api/Bonsai.Shaders.QuadEffects.html",
    "title": "Enum QuadEffects",
    "keywords": "Enum QuadEffects Specifies available fullscreen quad rendering effects. Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax [Flags] public enum QuadEffects Fields Name Description FlipBoth Specifies the quad should be flipped both vertically and horizontally. FlipHorizontally Specifies the quad should be flipped horizontally. FlipVertically Specifies the quad should be flipped vertically. None Specifies the quad should not be flipped."
  },
  "api/Bonsai.Shaders.ReadPixels.html": {
    "href": "api/Bonsai.Shaders.ReadPixels.html",
    "title": "Class ReadPixels",
    "keywords": "Class ReadPixels Represents an operator that reads a block of pixels from the framebuffer. Inheritance Object Source < IplImage > ReadPixels Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class ReadPixels : Source<IplImage> Properties | Improve this Doc View Source RegionOfInterest Gets or sets the pixel region of interest to read from the framebuffer, in upper left coordinates. If no region is specified, the entire framebuffer is read. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Rect? RegionOfInterest { get; set; } Property Value Type Description Nullable < Rect > Methods | Improve this Doc View Source Generate() Generates an observable sequence that reads a block of pixels from the framebuffer and returns the data as an image object. Declaration public override IObservable<IplImage> Generate() Returns Type Description IObservable < IplImage > An observable sequence with a single IplImage object storing the pixels read from the framebuffer at the next state update. Overrides Bonsai.Source<OpenCV.Net.IplImage>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Reads a block of pixels from the framebuffer whenever an observable sequence emits a notification. Declaration public IObservable<IplImage> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to read a block of pixels from the framebuffer. Returns Type Description IObservable < IplImage > A sequence of IplImage objects storing the pixels read from the framebuffer whenever the source sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.RenderCubemap.html": {
    "href": "api/Bonsai.Shaders.RenderCubemap.html",
    "title": "Class RenderCubemap",
    "keywords": "Class RenderCubemap Represents an operator that renders all currently stored draw commands to one of the cubemap textures. Each pass renders one face of the cubemap in the order +X, -X, +Y, -Y, +Z, -Z. Inheritance Object Combinator < Texture > RenderCubemap Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class RenderCubemap : Combinator<Texture> Constructors | Improve this Doc View Source RenderCubemap() Initializes a new instance of the RenderCubemap class. Declaration public RenderCubemap() Properties | Improve this Doc View Source ClearColor Gets or sets the color used to clear the framebuffer before rendering. Declaration public Color ClearColor { get; set; } Property Value Type Description Color | Improve this Doc View Source ClearColorHtml Gets or sets an XML representation of the clear color for serialization. Declaration [Browsable(false)] public string ClearColorHtml { get; set; } Property Value Type Description String | Improve this Doc View Source ClearMask Gets or sets a value specifying which buffers to clear before rendering. Declaration public ClearBufferMask ClearMask { get; set; } Property Value Type Description ClearBufferMask | Improve this Doc View Source FaceSize Gets or sets the texture size for each of the cubemap faces. If no value is specified, the size of the shader window in pixels is used. Declaration public int? FaceSize { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source InternalFormat Gets or sets a value specifying the internal pixel format of the cubemap. Declaration public PixelInternalFormat InternalFormat { get; set; } Property Value Type Description PixelInternalFormat | Improve this Doc View Source MagFilter Gets or sets a value specifying the texture magnification filter. Declaration public TextureMagFilter MagFilter { get; set; } Property Value Type Description TextureMagFilter | Improve this Doc View Source MinFilter Gets or sets a value specifying the texture minification filter. Declaration public TextureMinFilter MinFilter { get; set; } Property Value Type Description TextureMinFilter | Improve this Doc View Source RenderState Gets the collection of configuration objects specifying the render states to be set when rendering the cubemap. Declaration public StateConfigurationCollection RenderState { get; } Property Value Type Description StateConfigurationCollection Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Renders all currently stored draw commands to one of the cubemap textures whenever an observable sequence emits a notification. Each pass renders one face of the cubemap in the order +X, -X, +Y, -Y, +Z, -Z. Declaration public override IObservable<Texture> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence of notifications used to render each of the cubemap faces. Returns Type Description IObservable < Texture > A sequence returning the Texture object representing the cubemap texture, whenever all six faces of the cubemap have been updated. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator<Bonsai.Shaders.Texture>.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.RenderCubemapTarget.html": {
    "href": "api/Bonsai.Shaders.RenderCubemapTarget.html",
    "title": "Class RenderCubemapTarget",
    "keywords": "Class RenderCubemapTarget Represents an operator that renders all currently stored draw commands to a cubemap render target. Inheritance Object Combinator Sink RenderCubemapTarget Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class RenderCubemapTarget : Sink Constructors | Improve this Doc View Source RenderCubemapTarget() Initializes a new instance of the RenderCubemapTarget class. Declaration public RenderCubemapTarget() Properties | Improve this Doc View Source ClearColor Gets or sets the color used to clear the framebuffer before rendering. Declaration public Color ClearColor { get; set; } Property Value Type Description Color | Improve this Doc View Source ClearColorHtml Gets or sets an XML representation of the clear color for serialization. Declaration [Browsable(false)] public string ClearColorHtml { get; set; } Property Value Type Description String | Improve this Doc View Source ClearMask Gets or sets a value specifying which buffers to clear before rendering. Declaration public ClearBufferMask ClearMask { get; set; } Property Value Type Description ClearBufferMask | Improve this Doc View Source RenderState Gets the collection of configuration objects specifying the render states to be set when rendering the cubemap. Declaration public StateConfigurationCollection RenderState { get; } Property Value Type Description StateConfigurationCollection | Improve this Doc View Source TextureName Gets or sets the name of the cubemap texture to update. Declaration [TypeConverter(typeof(TextureNameConverter))] public string TextureName { get; set; } Property Value Type Description String | Improve this Doc View Source TextureTarget Gets or sets a value specifying which cubemap texture target to update. Declaration [TypeConverter(typeof(CubemapTargetConverter))] public TextureTarget TextureTarget { get; set; } Property Value Type Description TextureTarget Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Renders all currently stored draw commands to a cubemap render target whenever an observable sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence of notifications used to start rendering to the cubemap target. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of rendering the specified cubemap target whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.RenderFrame.html": {
    "href": "api/Bonsai.Shaders.RenderFrame.html",
    "title": "Class RenderFrame",
    "keywords": "Class RenderFrame Represents an operator that generates a sequence of events produced whenever it is time to render a new frame. Inheritance Object Source < FrameEvent > RenderFrame Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class RenderFrame : Source<FrameEvent> Methods | Improve this Doc View Source Generate() Generates an observable sequence that emits a notification whenever it is time to render a new frame. Declaration public override IObservable<FrameEvent> Generate() Returns Type Description IObservable < FrameEvent > A sequence of FrameEvent objects produced whenever it is time to render a new frame. Overrides Bonsai.Source<Bonsai.Shaders.FrameEvent>.Generate()"
  },
  "api/Bonsai.Shaders.Rendering.DrawScene.html": {
    "href": "api/Bonsai.Shaders.Rendering.DrawScene.html",
    "title": "Class DrawScene",
    "keywords": "Class DrawScene Represents an operator that draws the specified scene. Inheritance Object Combinator Sink DrawScene Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Rendering Assembly : Bonsai.Shaders.Rendering.dll Syntax public class DrawScene : Sink Remarks Each scene is assigned to a specific renderer which controls the rendering steps. Properties | Improve this Doc View Source SceneName Gets or sets the name of the scene to draw. Declaration [TypeConverter(typeof(SceneNameConverter))] public string SceneName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Draws the specified scene whenever an observable sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence of notifications used to start drawing the scene. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of drawing the specified scene whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements of the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.Rendering.html": {
    "href": "api/Bonsai.Shaders.Rendering.html",
    "title": "Namespace Bonsai.Shaders.Rendering",
    "keywords": "Namespace Bonsai.Shaders.Rendering Classes DrawScene Represents an operator that draws the specified scene. SceneConfiguration Provides configuration information for scene resources. SceneConfigurationCollection Represents a collection of scene configuration objects. SceneNode Represents a node in the scene graph containing a transform and a set of mesh geometries to render. SceneResources Represents an operator that creates a collection of scene resources to be loaded into the resource manager. SceneTransform Represents an operator that gets the transform matrix of the specified scene node. UpdateProjectionMatrix Represents an operator that updates the projection matrix used to render the specified scene. UpdateTransform Represents an operator that updates the transform matrix of the specified scene node. UpdateViewMatrix Represents an operator that updates the view matrix used to render the specified scene. Interfaces ISceneRenderer Provides common functionality for rendering a scene graph."
  },
  "api/Bonsai.Shaders.Rendering.ISceneRenderer.html": {
    "href": "api/Bonsai.Shaders.Rendering.ISceneRenderer.html",
    "title": "Interface ISceneRenderer",
    "keywords": "Interface ISceneRenderer Provides common functionality for rendering a scene graph. Inherited Members IDisposable.Dispose() Namespace : Bonsai.Shaders.Rendering Assembly : Bonsai.Shaders.Rendering.dll Syntax public interface ISceneRenderer : IDisposable Properties | Improve this Doc View Source RootNode Gets the root node of the scene graph. Declaration SceneNode RootNode { get; } Property Value Type Description SceneNode Methods | Improve this Doc View Source Draw() Draws all nodes in the scene graph. Declaration void Draw()"
  },
  "api/Bonsai.Shaders.Rendering.SceneConfiguration.html": {
    "href": "api/Bonsai.Shaders.Rendering.SceneConfiguration.html",
    "title": "Class SceneConfiguration",
    "keywords": "Class SceneConfiguration Provides configuration information for scene resources. Inheritance Object SceneConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Rendering Assembly : Bonsai.Shaders.Rendering.dll Syntax public class SceneConfiguration Properties | Improve this Doc View Source FileName Gets or sets the name of the file from which to load the scene. Declaration [TypeConverter(typeof(ResourceFileNameConverter))] [FileNameFilter(\"Blender Files (*.blend)|*.blend|OBJ Files (*.obj)|*.obj|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the name of the scene. Declaration public string Name { get; set; } Property Value Type Description String Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.Rendering.SceneConfigurationCollection.html": {
    "href": "api/Bonsai.Shaders.Rendering.SceneConfigurationCollection.html",
    "title": "Class SceneConfigurationCollection",
    "keywords": "Class SceneConfigurationCollection Represents a collection of scene configuration objects. Inheritance Object Collection < SceneConfiguration > KeyedCollection < String , SceneConfiguration > SceneConfigurationCollection Implements IList < SceneConfiguration > ICollection < SceneConfiguration > IList ICollection IReadOnlyList < SceneConfiguration > IReadOnlyCollection < SceneConfiguration > IEnumerable < SceneConfiguration > IEnumerable Inherited Members KeyedCollection<String, SceneConfiguration>.Contains(String) KeyedCollection<String, SceneConfiguration>.Remove(String) KeyedCollection<String, SceneConfiguration>.ChangeItemKey(SceneConfiguration, String) KeyedCollection<String, SceneConfiguration>.ClearItems() KeyedCollection<String, SceneConfiguration>.GetKeyForItem(SceneConfiguration) KeyedCollection<String, SceneConfiguration>.InsertItem(Int32, SceneConfiguration) KeyedCollection<String, SceneConfiguration>.RemoveItem(Int32) KeyedCollection<String, SceneConfiguration>.SetItem(Int32, SceneConfiguration) KeyedCollection<String, SceneConfiguration>.Comparer KeyedCollection<String, SceneConfiguration>.Item[String] KeyedCollection<String, SceneConfiguration>.Dictionary Collection<SceneConfiguration>.Add(SceneConfiguration) Collection<SceneConfiguration>.Clear() Collection<SceneConfiguration>.CopyTo(SceneConfiguration[], Int32) Collection<SceneConfiguration>.Contains(SceneConfiguration) Collection<SceneConfiguration>.GetEnumerator() Collection<SceneConfiguration>.IndexOf(SceneConfiguration) Collection<SceneConfiguration>.Insert(Int32, SceneConfiguration) Collection<SceneConfiguration>.Remove(SceneConfiguration) Collection<SceneConfiguration>.RemoveAt(Int32) Collection<SceneConfiguration>.ClearItems() Collection<SceneConfiguration>.InsertItem(Int32, SceneConfiguration) Collection<SceneConfiguration>.RemoveItem(Int32) Collection<SceneConfiguration>.SetItem(Int32, SceneConfiguration) Collection<SceneConfiguration>.IEnumerable.GetEnumerator() Collection<SceneConfiguration>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Rendering.SceneConfiguration>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.Rendering.SceneConfiguration>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<SceneConfiguration>.IList.Add(Object) Collection<SceneConfiguration>.IList.Contains(Object) Collection<SceneConfiguration>.IList.IndexOf(Object) Collection<SceneConfiguration>.IList.Insert(Int32, Object) Collection<SceneConfiguration>.IList.Remove(Object) Collection<SceneConfiguration>.Count Collection<SceneConfiguration>.Items Collection<SceneConfiguration>.Item[Int32] Collection<SceneConfiguration>.ICollection<SceneConfiguration>.IsReadOnly Collection<SceneConfiguration>.ICollection.IsSynchronized Collection<SceneConfiguration>.ICollection.SyncRoot Collection<SceneConfiguration>.IList.Item[Int32] Collection<SceneConfiguration>.IList.IsReadOnly Collection<SceneConfiguration>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Rendering Assembly : Bonsai.Shaders.Rendering.dll Syntax public class SceneConfigurationCollection : KeyedCollection<string, SceneConfiguration>, IList<SceneConfiguration>, ICollection<SceneConfiguration>, IList, ICollection, IReadOnlyList<SceneConfiguration>, IReadOnlyCollection<SceneConfiguration>, IEnumerable<SceneConfiguration>, IEnumerable Methods | Improve this Doc View Source GetKeyForItem(SceneConfiguration) Returns the key for the specified configuration object. Declaration protected override string GetKeyForItem(SceneConfiguration item) Parameters Type Name Description SceneConfiguration item The configuration object from which to extract the key. Returns Type Description String The key for the specified configuration object. Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Bonsai.Shaders.Rendering.SceneConfiguration>.GetKeyForItem(Bonsai.Shaders.Rendering.SceneConfiguration) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Shaders.Rendering.SceneNode.html": {
    "href": "api/Bonsai.Shaders.Rendering.SceneNode.html",
    "title": "Class SceneNode",
    "keywords": "Class SceneNode Represents a node in the scene graph containing a transform and a set of mesh geometries to render. Inheritance Object SceneNode Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Rendering Assembly : Bonsai.Shaders.Rendering.dll Syntax public class SceneNode Properties | Improve this Doc View Source Children Gets the collection of children of this scene node. Declaration public IEnumerable<SceneNode> Children { get; } Property Value Type Description IEnumerable < SceneNode > | Improve this Doc View Source Name Gets the name of the scene node. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Transform Gets or sets the transform matrix specifying the rotation, scale, and position of the scene node. Declaration public Matrix4 Transform { get; set; } Property Value Type Description Matrix4 Methods | Improve this Doc View Source FindNode(String) Searches the hierarchy for a scene node with the specified name. Declaration public SceneNode FindNode(string name) Parameters Type Name Description String name The name of the scene node to find. Returns Type Description SceneNode A SceneNode object which is either the current node, or one of its children, that matches the specified name; or null if no matching node is found."
  },
  "api/Bonsai.Shaders.Rendering.SceneResources.html": {
    "href": "api/Bonsai.Shaders.Rendering.SceneResources.html",
    "title": "Class SceneResources",
    "keywords": "Class SceneResources Represents an operator that creates a collection of scene resources to be loaded into the resource manager. Inheritance Object Combinator < ResourceConfigurationCollection , ResourceConfigurationCollection > Transform < ResourceConfigurationCollection , ResourceConfigurationCollection > ResourceLoader ResourceLoader SceneResources Inherited Members ResourceLoader.Process(IObservable<INativeWindow>) ResourceLoader.Process<TEventArgs>(IObservable<EventPattern<INativeWindow, TEventArgs>>) ResourceLoader.Process(IObservable<ResourceManager>) ResourceLoader.Process(IObservable<ResourceConfigurationCollection>) Combinator<ResourceConfigurationCollection, ResourceConfigurationCollection>.Process(IObservable<ResourceConfigurationCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Rendering Assembly : Bonsai.Shaders.Rendering.dll Syntax public class SceneResources : ResourceLoader Properties | Improve this Doc View Source PostProcessSteps Gets or sets a value specifying post processing steps to run on the data for generating or optimizing vertex data. Declaration public PostProcessSteps PostProcessSteps { get; set; } Property Value Type Description Assimp.PostProcessSteps | Improve this Doc View Source RotationX Gets or sets the model rotation about the X-axis. This property is only used during the loading stage. Declaration public float RotationX { get; set; } Property Value Type Description Single | Improve this Doc View Source RotationY Gets or sets the model rotation about the Y-axis. This property is only used during the loading stage. Declaration public float RotationY { get; set; } Property Value Type Description Single | Improve this Doc View Source RotationZ Gets or sets the model rotation about the Z-axis. This property is only used during the loading stage. Declaration public float RotationZ { get; set; } Property Value Type Description Single | Improve this Doc View Source Scale Gets or sets the uniform scale factor to apply to the model transform nodes. Declaration public float Scale { get; set; } Property Value Type Description Single | Improve this Doc View Source Scenes Gets the collection of scene resources to be loaded into the resource manager. Declaration public SceneConfigurationCollection Scenes { get; } Property Value Type Description SceneConfigurationCollection | Improve this Doc View Source ShaderName Gets or sets the name of the shader program used to render scene materials. Declaration [TypeConverter(typeof(ShaderNameConverter))] public string ShaderName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source GetResources() Returns the set of resources to be loaded into the resource manager. Declaration protected override IEnumerable<IResourceConfiguration> GetResources() Returns Type Description IEnumerable < IResourceConfiguration > A collection of IResourceConfiguration objects to be loaded into the resource manager. Overrides ResourceLoader.GetResources()"
  },
  "api/Bonsai.Shaders.Rendering.SceneTransform.html": {
    "href": "api/Bonsai.Shaders.Rendering.SceneTransform.html",
    "title": "Class SceneTransform",
    "keywords": "Class SceneTransform Represents an operator that gets the transform matrix of the specified scene node. Inheritance Object Source < Matrix4 > SceneTransform Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Rendering Assembly : Bonsai.Shaders.Rendering.dll Syntax public class SceneTransform : Source<Matrix4> Properties | Improve this Doc View Source NodeName Gets or sets the name of the scene node to get the transform from. If no name is specified, the root node will be used. Declaration public string NodeName { get; set; } Property Value Type Description String | Improve this Doc View Source SceneName Gets or sets the name of the scene where the node is located. Declaration [TypeConverter(typeof(SceneNameConverter))] public string SceneName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Gets the transform matrix of the specified scene node and surfaces it through an observable sequence. Declaration public override IObservable<Matrix4> Generate() Returns Type Description IObservable < Matrix4 > A sequence containing the Matrix4 object representing the transform of the specified scene node. Overrides Bonsai.Source<OpenTK.Matrix4>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Gets the transform matrix of the specified scene node whenever an observable sequence emits a notification. Declaration public IObservable<Matrix4> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence of notifications used to extract the node transform. Returns Type Description IObservable < Matrix4 > A sequence of Matrix4 objects representing the transform of the specified scene node. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.Rendering.UpdateProjectionMatrix.html": {
    "href": "api/Bonsai.Shaders.Rendering.UpdateProjectionMatrix.html",
    "title": "Class UpdateProjectionMatrix",
    "keywords": "Class UpdateProjectionMatrix Represents an operator that updates the projection matrix used to render the specified scene. Inheritance Object Combinator Sink UpdateProjectionMatrix Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Rendering Assembly : Bonsai.Shaders.Rendering.dll Syntax public class UpdateProjectionMatrix : Sink Properties | Improve this Doc View Source CameraName Gets or sets the name of the camera used to render the scene. Declaration public string CameraName { get; set; } Property Value Type Description String Remarks If a sequence of projection matrices is provided to the operator, this property is optional. | Improve this Doc View Source SceneName Gets or sets the name of the scene to update. Declaration [TypeConverter(typeof(SceneNameConverter))] public string SceneName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<Matrix4>) Updates the projection matrix used to render the scene using each of the matrix values in an observable sequence. Declaration public IObservable<Matrix4> Process(IObservable<Matrix4> source) Parameters Type Name Description IObservable < Matrix4 > source A sequence of Matrix4 objects representing the projection matrix used to render the scene, if no camera is specified. Returns Type Description IObservable < Matrix4 > An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the projection matrix used to render the scene. | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Updates the projection matrix used to render the scene whenever an observable sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence of notifications used to update the projection matrix. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the projection matrix used to render the scene whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.Rendering.UpdateTransform.html": {
    "href": "api/Bonsai.Shaders.Rendering.UpdateTransform.html",
    "title": "Class UpdateTransform",
    "keywords": "Class UpdateTransform Represents an operator that updates the transform matrix of the specified scene node. Inheritance Object Combinator < Matrix4 , Matrix4 > Sink < Matrix4 > UpdateTransform Inherited Members Combinator<Matrix4, Matrix4>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Rendering Assembly : Bonsai.Shaders.Rendering.dll Syntax public class UpdateTransform : Sink<Matrix4> Properties | Improve this Doc View Source NodeName Gets or sets the name of the scene node to update. If no name is specified, the root node will be updated. Declaration public string NodeName { get; set; } Property Value Type Description String | Improve this Doc View Source SceneName Gets or sets the name of the scene to update. Declaration [TypeConverter(typeof(SceneNameConverter))] public string SceneName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<Matrix4>) Updates the transform matrix of the specified scene node using each of the matrix values in an observable sequence. Declaration public override IObservable<Matrix4> Process(IObservable<Matrix4> source) Parameters Type Name Description IObservable < Matrix4 > source A sequence of Matrix4 objects representing the transform matrix used to render the scene node. Returns Type Description IObservable < Matrix4 > An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the transform matrix used to render the scene node. Overrides Bonsai.Combinator<OpenTK.Matrix4, OpenTK.Matrix4>.Process(System.IObservable<OpenTK.Matrix4>)"
  },
  "api/Bonsai.Shaders.Rendering.UpdateViewMatrix.html": {
    "href": "api/Bonsai.Shaders.Rendering.UpdateViewMatrix.html",
    "title": "Class UpdateViewMatrix",
    "keywords": "Class UpdateViewMatrix Represents an operator that updates the view matrix used to render the specified scene. Inheritance Object Combinator Sink UpdateViewMatrix Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders.Rendering Assembly : Bonsai.Shaders.Rendering.dll Syntax public class UpdateViewMatrix : Sink Properties | Improve this Doc View Source CameraName Gets or sets the name of the camera used to render the scene. Declaration public string CameraName { get; set; } Property Value Type Description String Remarks If a sequence of view matrices is provided to the operator, this property is optional. | Improve this Doc View Source SceneName Gets or sets the name of the scene to update. Declaration [TypeConverter(typeof(SceneNameConverter))] public string SceneName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<Matrix4>) Updates the view matrix used to render the scene using each of the matrix values in an observable sequence. Declaration public IObservable<Matrix4> Process(IObservable<Matrix4> source) Parameters Type Name Description IObservable < Matrix4 > source A sequence of Matrix4 objects representing the view matrix used to render the scene, if no camera is specified. Returns Type Description IObservable < Matrix4 > An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the view matrix used to render the scene. | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Updates the view matrix used to render the scene whenever an observable sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence of notifications used to update the view matrix. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the view matrix used to render the scene whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.RenderTexture.html": {
    "href": "api/Bonsai.Shaders.RenderTexture.html",
    "title": "Class RenderTexture",
    "keywords": "Class RenderTexture Represents an operator that renders all currently stored draw commands to a texture. Inheritance Object Combinator < Texture > RenderTexture Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class RenderTexture : Combinator<Texture> Constructors | Improve this Doc View Source RenderTexture() Initializes a new instance of the RenderTexture class. Declaration public RenderTexture() Properties | Improve this Doc View Source ClearColor Gets or sets the color used to clear the framebuffer before rendering. Declaration public Color ClearColor { get; set; } Property Value Type Description Color | Improve this Doc View Source ClearColorHtml Gets or sets an XML representation of the clear color for serialization. Declaration [Browsable(false)] public string ClearColorHtml { get; set; } Property Value Type Description String | Improve this Doc View Source ClearMask Gets or sets a value specifying which buffers to clear before rendering. Declaration public ClearBufferMask ClearMask { get; set; } Property Value Type Description ClearBufferMask | Improve this Doc View Source Height Gets or sets the height of the texture. If no value is specified, the texture buffer will be initialized to the height of the shader window. Declaration public int? Height { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source InternalFormat Gets or sets a value specifying the internal storage format of the render texture. Declaration public PixelInternalFormat InternalFormat { get; set; } Property Value Type Description PixelInternalFormat | Improve this Doc View Source MagFilter Gets or sets a value specifying the texture magnification filter. Declaration public TextureMagFilter MagFilter { get; set; } Property Value Type Description TextureMagFilter | Improve this Doc View Source MinFilter Gets or sets a value specifying the texture minification filter. Declaration public TextureMinFilter MinFilter { get; set; } Property Value Type Description TextureMinFilter | Improve this Doc View Source RenderState Gets the collection of configuration objects specifying the render states to be set when rendering the texture. Declaration public StateConfigurationCollection RenderState { get; } Property Value Type Description StateConfigurationCollection | Improve this Doc View Source Width Gets or sets the width of the texture. If no value is specified, the texture buffer will be initialized to the width of the shader window. Declaration public int? Width { get; set; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source WrapS Gets or sets a value specifying wrapping parameters for the column coordinates of the texture sampler. Declaration public TextureWrapMode WrapS { get; set; } Property Value Type Description TextureWrapMode | Improve this Doc View Source WrapT Gets or sets a value specifying wrapping parameters for the row coordinates of the texture sampler. Declaration public TextureWrapMode WrapT { get; set; } Property Value Type Description TextureWrapMode Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Renders all currently stored draw commands to a texture whenever an observable sequence emits a notification. Declaration public override IObservable<Texture> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence of notifications used to start the render to texture. Returns Type Description IObservable < Texture > A sequence returning the Texture object representing the render target, whenever the render to texture operation completes. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator<Bonsai.Shaders.Texture>.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.ResourceLoader.html": {
    "href": "api/Bonsai.Shaders.ResourceLoader.html",
    "title": "Class ResourceLoader",
    "keywords": "Class ResourceLoader Provides the abstract base class for operators that load resources into the shader window resource manager. Inheritance Object Combinator < ResourceConfigurationCollection , ResourceConfigurationCollection > Transform < ResourceConfigurationCollection , ResourceConfigurationCollection > ResourceLoader ResourceLoader MeshResources SceneResources ShaderResources TextureResources Inherited Members ResourceLoader.GetResources() ResourceLoader.Process(IObservable<ResourceManager>) ResourceLoader.Process(IObservable<ResourceConfigurationCollection>) Combinator<ResourceConfigurationCollection, ResourceConfigurationCollection>.Process(IObservable<ResourceConfigurationCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public abstract class ResourceLoader : ResourceLoader Methods | Improve this Doc View Source Process(IObservable<INativeWindow>) Bundles a set of resources to be loaded into the shader window resource manager. Declaration public IObservable<ResourceConfigurationCollection> Process(IObservable<INativeWindow> source) Parameters Type Name Description IObservable < INativeWindow > source A sequence of INativeWindow objects into which the resources will be loaded. Returns Type Description IObservable < ResourceConfigurationCollection > A sequence of ResourceConfigurationCollection objects which can be used to load resources into the resource manager. | Improve this Doc View Source Process<TEventArgs>(IObservable<EventPattern<INativeWindow, TEventArgs>>) Bundles a set of resources to be loaded into the shader window resource manager when an observable sequence of window events emits a notification. Declaration public IObservable<ResourceConfigurationCollection> Process<TEventArgs>(IObservable<EventPattern<INativeWindow, TEventArgs>> source) Parameters Type Name Description IObservable < EventPattern < INativeWindow , TEventArgs>> source A sequence of event data generated from a shader window. Returns Type Description IObservable < ResourceConfigurationCollection > A sequence of ResourceConfigurationCollection objects which can be used to load resources into the resource manager. Type Parameters Name Description TEventArgs The type of the event data generated by the window event."
  },
  "api/Bonsai.Shaders.RetrieveImage.html": {
    "href": "api/Bonsai.Shaders.RetrieveImage.html",
    "title": "Class RetrieveImage",
    "keywords": "Class RetrieveImage Represents an operator that reads the pixel data from each texture in the sequence to an image. Inheritance Object Combinator < Texture , IplImage > Transform < Texture , IplImage > RetrieveImage Inherited Members Combinator<Texture, IplImage>.Process(IObservable<Texture>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class RetrieveImage : Transform<Texture, IplImage> Properties | Improve this Doc View Source Channels Gets or sets the number of channels in the retrieved image. Declaration public int Channels { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Depth Gets or sets the bit depth of each pixel in the retrieved image. Declaration public IplDepth Depth { get; set; } Property Value Type Description IplDepth | Improve this Doc View Source FlipMode Gets or sets a value specifying the flip mode applied to the retrieved image. Declaration public FlipMode? FlipMode { get; set; } Property Value Type Description Nullable < FlipMode > Methods | Improve this Doc View Source Process(IObservable<Texture>) Reads the pixel data from each texture in an observable sequence to an image. Declaration public override IObservable<IplImage> Process(IObservable<Texture> source) Parameters Type Name Description IObservable < Texture > source The sequence of texture objects from which to retrieve the pixel data. Returns Type Description IObservable < IplImage > A sequence of IplImage objects containing the pixel data for each texture in the source sequence. Overrides Bonsai.Combinator<Bonsai.Shaders.Texture, OpenCV.Net.IplImage>.Process(System.IObservable<Bonsai.Shaders.Texture>)"
  },
  "api/Bonsai.Shaders.RotateAxisAngle.html": {
    "href": "api/Bonsai.Shaders.RotateAxisAngle.html",
    "title": "Class RotateAxisAngle",
    "keywords": "Class RotateAxisAngle Represents an operator that applies a rotation around an arbitrary axis to every transform in the sequence. Inheritance Object Combinator < Matrix4 , Matrix4 > Transform < Matrix4 , Matrix4 > MatrixTransform RotateAxisAngle Inherited Members MatrixTransform.Order MatrixTransform.Process(IObservable<Matrix4>) Combinator<Matrix4, Matrix4>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class RotateAxisAngle : MatrixTransform Properties | Improve this Doc View Source Angle Gets or sets the angle describing the magnitude of the rotation about the axis. Declaration [Range(-3.1415926535897931, 3.1415926535897931)] public float Angle { get; set; } Property Value Type Description Single | Improve this Doc View Source Axis Gets or sets a 3D vector specifying the direction of the axis of rotation. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Axis { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source CreateTransform(out Matrix4) Initializes a transform matrix for applying a rotation around the specified axis. Declaration protected override void CreateTransform(out Matrix4 result) Parameters Type Name Description Matrix4 result When this method returns, contains the relative matrix transform to be combined with each element in the sequence. Overrides MatrixTransform.CreateTransform(out Matrix4)"
  },
  "api/Bonsai.Shaders.RotateQuaternion.html": {
    "href": "api/Bonsai.Shaders.RotateQuaternion.html",
    "title": "Class RotateQuaternion",
    "keywords": "Class RotateQuaternion Represents an operator that applies a rotation specified by a quaternion to every transform in the sequence. Inheritance Object Combinator < Matrix4 , Matrix4 > Transform < Matrix4 , Matrix4 > MatrixTransform RotateQuaternion Inherited Members MatrixTransform.Order MatrixTransform.Process(IObservable<Matrix4>) Combinator<Matrix4, Matrix4>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class RotateQuaternion : MatrixTransform Constructors | Improve this Doc View Source RotateQuaternion() Initializes a new instance of the RotateQuaternion class. Declaration public RotateQuaternion() Properties | Improve this Doc View Source Rotation Gets or sets the quaternion representing the rotation transform. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Quaternion Rotation { get; set; } Property Value Type Description Quaternion Methods | Improve this Doc View Source CreateTransform(out Matrix4) Initializes a transform matrix for applying a rotation specified by a quaternion. Declaration protected override void CreateTransform(out Matrix4 result) Parameters Type Name Description Matrix4 result When this method returns, contains the relative matrix transform to be combined with each element in the sequence. Overrides MatrixTransform.CreateTransform(out Matrix4)"
  },
  "api/Bonsai.Shaders.RotateX.html": {
    "href": "api/Bonsai.Shaders.RotateX.html",
    "title": "Class RotateX",
    "keywords": "Class RotateX Represents an operator that applies a rotation about the x-axis to every transform in the sequence. Inheritance Object Combinator < Matrix4 , Matrix4 > Transform < Matrix4 , Matrix4 > MatrixTransform RotateX Inherited Members MatrixTransform.Order MatrixTransform.Process(IObservable<Matrix4>) Combinator<Matrix4, Matrix4>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class RotateX : MatrixTransform Properties | Improve this Doc View Source Angle Gets or sets the angle describing the magnitude of the rotation about the x-axis. Declaration [Range(-3.1415926535897931, 3.1415926535897931)] public float Angle { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source CreateTransform(out Matrix4) Initializes a transform matrix for a rotation about the x-axis. Declaration protected override void CreateTransform(out Matrix4 result) Parameters Type Name Description Matrix4 result When this method returns, contains the relative matrix transform to be combined with each element in the sequence. Overrides MatrixTransform.CreateTransform(out Matrix4)"
  },
  "api/Bonsai.Shaders.RotateY.html": {
    "href": "api/Bonsai.Shaders.RotateY.html",
    "title": "Class RotateY",
    "keywords": "Class RotateY Represents an operator that applies a rotation about the y-axis to every transform in the sequence. Inheritance Object Combinator < Matrix4 , Matrix4 > Transform < Matrix4 , Matrix4 > MatrixTransform RotateY Inherited Members MatrixTransform.Order MatrixTransform.Process(IObservable<Matrix4>) Combinator<Matrix4, Matrix4>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class RotateY : MatrixTransform Properties | Improve this Doc View Source Angle Gets or sets the angle describing the magnitude of the rotation about the y-axis. Declaration [Range(-3.1415926535897931, 3.1415926535897931)] public float Angle { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source CreateTransform(out Matrix4) Initializes a transform matrix for a rotation about the y-axis. Declaration protected override void CreateTransform(out Matrix4 result) Parameters Type Name Description Matrix4 result When this method returns, contains the relative matrix transform to be combined with each element in the sequence. Overrides MatrixTransform.CreateTransform(out Matrix4)"
  },
  "api/Bonsai.Shaders.RotateZ.html": {
    "href": "api/Bonsai.Shaders.RotateZ.html",
    "title": "Class RotateZ",
    "keywords": "Class RotateZ Represents an operator that applies a rotation about the z-axis to every transform in the sequence. Inheritance Object Combinator < Matrix4 , Matrix4 > Transform < Matrix4 , Matrix4 > MatrixTransform RotateZ Inherited Members MatrixTransform.Order MatrixTransform.Process(IObservable<Matrix4>) Combinator<Matrix4, Matrix4>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class RotateZ : MatrixTransform Properties | Improve this Doc View Source Angle Gets or sets the angle describing the magnitude of the rotation about the z-axis. Declaration [Range(-3.1415926535897931, 3.1415926535897931)] public float Angle { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source CreateTransform(out Matrix4) Initializes a transform matrix for a rotation about the z-axis. Declaration protected override void CreateTransform(out Matrix4 result) Parameters Type Name Description Matrix4 result When this method returns, contains the relative matrix transform to be combined with each element in the sequence. Overrides MatrixTransform.CreateTransform(out Matrix4)"
  },
  "api/Bonsai.Shaders.SampleOnRenderFrame.html": {
    "href": "api/Bonsai.Shaders.SampleOnRenderFrame.html",
    "title": "Class SampleOnRenderFrame",
    "keywords": "Class SampleOnRenderFrame Represents an operator that samples notifications from the sequence whenever there is a new render frame event. Inheritance Object Combinator SampleOnRenderFrame Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class SampleOnRenderFrame : Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Samples notifications from an observable sequence whenever there is a new render frame event. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence whose notifications will be sampled at each render frame event. Returns Type Description IObservable <TSource> The sequence of sampled notifications from the source sequence, emitted at each render frame event. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.SampleOnUpdateFrame.html": {
    "href": "api/Bonsai.Shaders.SampleOnUpdateFrame.html",
    "title": "Class SampleOnUpdateFrame",
    "keywords": "Class SampleOnUpdateFrame Represents an operator that samples notifications from the sequence whenever there is a new update frame event. Inheritance Object Combinator SampleOnUpdateFrame Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class SampleOnUpdateFrame : Combinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Samples notifications from an observable sequence whenever there is a new update frame event. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The observable sequence whose notifications will be sampled at each update frame event. Returns Type Description IObservable <TSource> The sequence of sampled notifications from the source sequence, emitted at each update frame event. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.Scale.html": {
    "href": "api/Bonsai.Shaders.Scale.html",
    "title": "Class Scale",
    "keywords": "Class Scale Represents an operator that applies a scale factor along the specified axes to every transform in the sequence. Inheritance Object Combinator < Matrix4 , Matrix4 > Transform < Matrix4 , Matrix4 > MatrixTransform Scale Inherited Members MatrixTransform.Order MatrixTransform.Process(IObservable<Matrix4>) Combinator<Matrix4, Matrix4>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class Scale : MatrixTransform Properties | Improve this Doc View Source X Gets or sets the scale factor for the x-axis. Declaration [Range(0, 2)] public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the scale factor for the y-axis. Declaration [Range(0, 2)] public float Y { get; set; } Property Value Type Description Single | Improve this Doc View Source Z Gets or sets the scale factor for the z-axis. Declaration [Range(0, 2)] public float Z { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source CreateTransform(out Matrix4) Initializes a transform matrix for applying a scale factor along the specified axes. Declaration protected override void CreateTransform(out Matrix4 result) Parameters Type Name Description Matrix4 result When this method returns, contains the relative matrix transform to be combined with each element in the sequence. Overrides MatrixTransform.CreateTransform(out Matrix4)"
  },
  "api/Bonsai.Shaders.Shader.html": {
    "href": "api/Bonsai.Shaders.Shader.html",
    "title": "Class Shader",
    "keywords": "Class Shader Provides common functionality for executing and updating the state of compiled shader programs. Inheritance Object Shader ComputeProgram Effect Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public abstract class Shader : IDisposable Properties | Improve this Doc View Source Name Gets the name of the shader. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Program Gets the handle to the shader program object. Declaration public int Program { get; } Property Value Type Description Int32 | Improve this Doc View Source Window Gets the window containing the graphics context on which to render the shader program. Declaration public ShaderWindow Window { get; } Property Value Type Description ShaderWindow Methods | Improve this Doc View Source CreateShader() When overridden in a derived class, compiles the shader program and returns the program object handle. Declaration protected abstract int CreateShader() Returns Type Description Int32 A handle to the shader program object. | Improve this Doc View Source CreateShaderState(IEnumerable<StateConfiguration>, IEnumerable<UniformConfiguration>, IEnumerable<BufferBindingConfiguration>, FramebufferConfiguration) Initializes the shader state object used to specify the render state, uniform values, buffer bindings and framebuffer configuration to use when running the shader program. Declaration protected void CreateShaderState(IEnumerable<StateConfiguration> renderState, IEnumerable<UniformConfiguration> shaderUniforms, IEnumerable<BufferBindingConfiguration> bufferBindings, FramebufferConfiguration framebuffer) Parameters Type Name Description IEnumerable < StateConfiguration > renderState The collection of configuration objects specifying the render states required for running the shader program. IEnumerable < UniformConfiguration > shaderUniforms The collection of configuration objects specifying the default values of uniform variables in the shader program. IEnumerable < BufferBindingConfiguration > bufferBindings The collection of configuration objects specifying the buffer bindings to set before running the shader. FramebufferConfiguration framebuffer The configuration state of the framebuffer object used for render to texture passes. | Improve this Doc View Source Dispatch() Loads the shader program into the current render state and dispatches all pending render operations. Declaration public void Dispatch() | Improve this Doc View Source Dispose() Releases all resources used by the Shader class. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases all resources used by the Shader class. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc View Source OnDispatch() Returns any actions that should be executed before running the shader program. Declaration protected virtual Action OnDispatch() Returns Type Description Action An Action object to be called before running the shader program. If the return value is null , no action will be executed. | Improve this Doc View Source Update(Action) Schedules an action for execution when running the shader program. Any render operations called as part of the action will execute in the context of this shader program. Declaration public void Update(Action action) Parameters Type Name Description Action action The Action to invoke when running the shader program. Implements System.IDisposable"
  },
  "api/Bonsai.Shaders.ShaderException.html": {
    "href": "api/Bonsai.Shaders.ShaderException.html",
    "title": "Class ShaderException",
    "keywords": "Class ShaderException Represents errors that occur when compiling or linking shader programs. Inheritance Object Exception GraphicsException ShaderException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax [Serializable] public class ShaderException : GraphicsException, ISerializable, _Exception Constructors | Improve this Doc View Source ShaderException() Initializes a new instance of the ShaderException class. Declaration public ShaderException() | Improve this Doc View Source ShaderException(String) Initializes a new instance of the ShaderException class with the specified message. Declaration public ShaderException(string message) Parameters Type Name Description String message The message that describes the error. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Bonsai.Shaders.ShaderManager.html": {
    "href": "api/Bonsai.Shaders.ShaderManager.html",
    "title": "Class ShaderManager",
    "keywords": "Class ShaderManager Provides functionality for accessing shader window resources and scheduling actions on the main render loop. Inheritance Object ShaderManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public static class ShaderManager Properties | Improve this Doc View Source WindowSource Gets an observable sequence containing the active shader window. Declaration public static IObservable<ShaderWindow> WindowSource { get; } Property Value Type Description IObservable < ShaderWindow > Methods | Improve this Doc View Source ReserveComputeProgram(String) Returns an observable sequence that retrieves the compute shader with the specified name. Declaration public static IObservable<ComputeProgram> ReserveComputeProgram(string shaderName) Parameters Type Name Description String shaderName The name of the shader program to retrieve. Returns Type Description IObservable < ComputeProgram > A sequence containing a single instance of the ComputeProgram class matching the specified shader name; or an exception, if no such shader exists. | Improve this Doc View Source ReserveMaterial(String) Returns an observable sequence that retrieves the material shader with the specified name. Declaration public static IObservable<Material> ReserveMaterial(string shaderName) Parameters Type Name Description String shaderName The name of the shader program to retrieve. Returns Type Description IObservable < Material > A sequence containing a single instance of the Material class matching the specified shader name; or an exception, if no such shader exists. | Improve this Doc View Source ReserveShader(String) Returns an observable sequence that retrieves the shader with the specified name. Declaration public static IObservable<Shader> ReserveShader(string shaderName) Parameters Type Name Description String shaderName The name of the shader program to retrieve. Returns Type Description IObservable < Shader > A sequence containing a single instance of the Shader class matching the specified name; or an exception, if no such shader exists. | Improve this Doc View Source WindowUpdate(Action<ShaderWindow>) Invokes an action on the next update of the active shader window and returns the window instance through an observable sequence. Declaration public static IObservable<ShaderWindow> WindowUpdate(Action<ShaderWindow> update) Parameters Type Name Description Action < ShaderWindow > update The action to invoke on the next update of the active shader window. Returns Type Description IObservable < ShaderWindow > An observable sequence returning the active ShaderWindow instance immediately after the action has been invoked."
  },
  "api/Bonsai.Shaders.ShaderNameConverter.html": {
    "href": "api/Bonsai.Shaders.ShaderNameConverter.html",
    "title": "Class ShaderNameConverter",
    "keywords": "Class ShaderNameConverter Provides a type converter to convert a shader name to and from other representations. It also provides a mechanism to find existing shaders which have been declared in the workflow. Inheritance Object TypeConverter StringConverter ResourceNameConverter ShaderNameConverter Inherited Members ResourceNameConverter.IsResourceSupported(IResourceConfiguration) ResourceNameConverter.GetStandardValuesSupported(ITypeDescriptorContext) StringConverter.CanConvertFrom(ITypeDescriptorContext, Type) StringConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class ShaderNameConverter : ResourceNameConverter Constructors | Improve this Doc View Source ShaderNameConverter() Initializes a new instance of the ShaderNameConverter class. Declaration public ShaderNameConverter() Methods | Improve this Doc View Source GetStandardValues(ITypeDescriptorContext) Returns a collection of resource names which are available in the call context of this type converter request. Declaration public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description TypeConverter.StandardValuesCollection A TypeConverter.StandardValuesCollection containing the set of available resources. Only resources for which IsResourceSupported(IResourceConfiguration) returns true will be included. Overrides ResourceNameConverter.GetStandardValues(ITypeDescriptorContext)"
  },
  "api/Bonsai.Shaders.ShaderResources.html": {
    "href": "api/Bonsai.Shaders.ShaderResources.html",
    "title": "Class ShaderResources",
    "keywords": "Class ShaderResources Represents an operator that creates a collection of shader resources to be loaded into the resource manager. Inheritance Object Combinator < ResourceConfigurationCollection , ResourceConfigurationCollection > Transform < ResourceConfigurationCollection , ResourceConfigurationCollection > ResourceLoader ResourceLoader ShaderResources Inherited Members ResourceLoader.Process(IObservable<INativeWindow>) ResourceLoader.Process<TEventArgs>(IObservable<EventPattern<INativeWindow, TEventArgs>>) ResourceLoader.Process(IObservable<ResourceManager>) ResourceLoader.Process(IObservable<ResourceConfigurationCollection>) Combinator<ResourceConfigurationCollection, ResourceConfigurationCollection>.Process(IObservable<ResourceConfigurationCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class ShaderResources : ResourceLoader Properties | Improve this Doc View Source Shaders Gets the collection of shader resources to be loaded into the resource manager. Declaration public ShaderConfigurationCollection Shaders { get; } Property Value Type Description ShaderConfigurationCollection Methods | Improve this Doc View Source GetResources() Returns the set of resources to be loaded into the resource manager. Declaration protected override IEnumerable<IResourceConfiguration> GetResources() Returns Type Description IEnumerable < IResourceConfiguration > A collection of IResourceConfiguration objects to be loaded into the resource manager. Overrides ResourceLoader.GetResources()"
  },
  "api/Bonsai.Shaders.ShaderWindow.html": {
    "href": "api/Bonsai.Shaders.ShaderWindow.html",
    "title": "Class ShaderWindow",
    "keywords": "Class ShaderWindow Creates and renders a window using the specified resources and a programmable shader pipeline. Inheritance Object NativeWindow GameWindow ShaderWindow Implements IGameWindow INativeWindow IDisposable Inherited Members GameWindow.Dispose() GameWindow.Exit() GameWindow.MakeCurrent() GameWindow.OnClosing(CancelEventArgs) GameWindow.Run() GameWindow.Run(Double) GameWindow.Run(Double, Double) GameWindow.SwapBuffers() GameWindow.Dispose(Boolean) GameWindow.OnWindowInfoChanged(EventArgs) GameWindow.Context GameWindow.IsExiting GameWindow.RenderFrequency GameWindow.RenderPeriod GameWindow.RenderTime GameWindow.TargetRenderFrequency GameWindow.TargetRenderPeriod GameWindow.TargetUpdateFrequency GameWindow.TargetUpdatePeriod GameWindow.UpdateFrequency GameWindow.UpdatePeriod GameWindow.UpdateTime GameWindow.VSync GameWindow.WindowState GameWindow.Load GameWindow.RenderFrame GameWindow.Unload GameWindow.UpdateFrame GameWindow.OnUpdateThreadStarted NativeWindow.Close() NativeWindow.PointToClient(Point) NativeWindow.PointToScreen(Point) NativeWindow.ProcessEvents() NativeWindow.EnsureUndisposed() NativeWindow.OnDisposed(EventArgs) NativeWindow.OnFocusedChanged(EventArgs) NativeWindow.OnIconChanged(EventArgs) NativeWindow.OnKeyPress(KeyPressEventArgs) NativeWindow.OnKeyUp(KeyboardKeyEventArgs) NativeWindow.OnMove(EventArgs) NativeWindow.OnMouseEnter(EventArgs) NativeWindow.OnMouseLeave(EventArgs) NativeWindow.OnMouseDown(MouseButtonEventArgs) NativeWindow.OnMouseUp(MouseButtonEventArgs) NativeWindow.OnMouseMove(MouseMoveEventArgs) NativeWindow.OnMouseWheel(MouseWheelEventArgs) NativeWindow.OnFileDrop(FileDropEventArgs) NativeWindow.OnTitleChanged(EventArgs) NativeWindow.OnVisibleChanged(EventArgs) NativeWindow.OnWindowBorderChanged(EventArgs) NativeWindow.OnWindowStateChanged(EventArgs) NativeWindow.ProcessEvents(Boolean) NativeWindow.Bounds NativeWindow.ClientRectangle NativeWindow.Cursor NativeWindow.Exists NativeWindow.Focused NativeWindow.Icon NativeWindow.Location NativeWindow.Size NativeWindow.Title NativeWindow.Visible NativeWindow.WindowBorder NativeWindow.WindowInfo NativeWindow.X NativeWindow.Y NativeWindow.CursorVisible NativeWindow.CursorGrabbed NativeWindow.IsDisposed NativeWindow.Closed NativeWindow.Closing NativeWindow.Disposed NativeWindow.FocusedChanged NativeWindow.IconChanged NativeWindow.KeyDown NativeWindow.KeyPress NativeWindow.KeyUp NativeWindow.Move NativeWindow.MouseEnter NativeWindow.MouseLeave NativeWindow.Resize NativeWindow.TitleChanged NativeWindow.VisibleChanged NativeWindow.WindowBorderChanged NativeWindow.WindowStateChanged NativeWindow.MouseDown NativeWindow.MouseUp NativeWindow.MouseMove NativeWindow.MouseWheel NativeWindow.FileDrop Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class ShaderWindow : GameWindow, IGameWindow, INativeWindow, IDisposable Constructors | Improve this Doc View Source ShaderWindow(ShaderWindowSettings) Initializes a new instance of the ShaderWindow class using the specified window configuration settings. Declaration public ShaderWindow(ShaderWindowSettings configuration) Parameters Type Name Description ShaderWindowSettings configuration The configuration settings used to initialize the shader window. Properties | Improve this Doc View Source ClearColor Gets or sets the color used to clear the framebuffer before rendering. Declaration public Color ClearColor { get; set; } Property Value Type Description Color | Improve this Doc View Source ClientSize Gets or sets the size of the OpenGL surface in window coordinates. The coordinates are specified in device-dependent pixels. Declaration public Size ClientSize { get; set; } Property Value Type Description Size | Improve this Doc View Source Height Gets or sets the height of the OpenGL surface in window coordinates. The coordinates are specified in device-dependent pixels. Declaration public int Height { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ResourceManager Gets the resource manager used to load and release sets of render resources to the shader window. Declaration public ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager | Improve this Doc View Source Scissor Gets or sets the active scissor box, in normalized coordinates. Any fragments falling outside the scissor box will be discarded. Declaration public RectangleF Scissor { get; set; } Property Value Type Description RectangleF | Improve this Doc View Source Shaders Gets the collection of shaders specifying the active render pipeline. Declaration public IEnumerable<Shader> Shaders { get; } Property Value Type Description IEnumerable < Shader > | Improve this Doc View Source Viewport Gets or sets the active viewport for rendering, in normalized coordinates. Declaration public RectangleF Viewport { get; set; } Property Value Type Description RectangleF | Improve this Doc View Source Width Gets or sets the width of the OpenGL surface in window coordinates. The coordinates are specified in device-dependent pixels. Declaration public int Width { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source OnClosed(EventArgs) Declaration protected override void OnClosed(EventArgs e) Parameters Type Name Description EventArgs e Overrides NativeWindow.OnClosed(EventArgs) | Improve this Doc View Source OnKeyDown(KeyboardKeyEventArgs) Declaration protected override void OnKeyDown(KeyboardKeyEventArgs e) Parameters Type Name Description KeyboardKeyEventArgs e Overrides NativeWindow.OnKeyDown(KeyboardKeyEventArgs) | Improve this Doc View Source OnLoad(EventArgs) Declaration protected override void OnLoad(EventArgs e) Parameters Type Name Description EventArgs e Overrides GameWindow.OnLoad(EventArgs) | Improve this Doc View Source OnRenderFrame(FrameEventArgs) Declaration protected override void OnRenderFrame(FrameEventArgs e) Parameters Type Name Description FrameEventArgs e Overrides GameWindow.OnRenderFrame(FrameEventArgs) | Improve this Doc View Source OnResize(EventArgs) Declaration protected override void OnResize(EventArgs e) Parameters Type Name Description EventArgs e Overrides GameWindow.OnResize(EventArgs) | Improve this Doc View Source OnUnload(EventArgs) Declaration protected override void OnUnload(EventArgs e) Parameters Type Name Description EventArgs e Overrides GameWindow.OnUnload(EventArgs) | Improve this Doc View Source OnUpdateFrame(FrameEventArgs) Declaration protected override void OnUpdateFrame(FrameEventArgs e) Parameters Type Name Description FrameEventArgs e Overrides GameWindow.OnUpdateFrame(FrameEventArgs) | Improve this Doc View Source Update(Action) Queues a render command or state update. Declaration public void Update(Action action) Parameters Type Name Description Action action The action that will execute when the next frame is rendered. Implements IGameWindow INativeWindow System.IDisposable"
  },
  "api/Bonsai.Shaders.StoreImage.html": {
    "href": "api/Bonsai.Shaders.StoreImage.html",
    "title": "Class StoreImage",
    "keywords": "Class StoreImage Represents an operator that writes each image in the sequence to a texture object. Inheritance Object Combinator < IplImage , Texture > StoreImage Inherited Members Combinator<IplImage, Texture>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class StoreImage : Combinator<IplImage, Texture> Properties | Improve this Doc View Source InternalFormat Gets or sets a value specifying the internal pixel format of the texture. Declaration public PixelInternalFormat InternalFormat { get; set; } Property Value Type Description PixelInternalFormat | Improve this Doc View Source MagFilter Gets or sets a value specifying the texture magnification filter. Declaration public TextureMagFilter MagFilter { get; set; } Property Value Type Description TextureMagFilter | Improve this Doc View Source MinFilter Gets or sets a value specifying the texture minification filter. Declaration public TextureMinFilter MinFilter { get; set; } Property Value Type Description TextureMinFilter | Improve this Doc View Source WrapS Gets or sets a value specifying wrapping parameters for the column coordinates of the texture sampler. Declaration public TextureWrapMode WrapS { get; set; } Property Value Type Description TextureWrapMode | Improve this Doc View Source WrapT Gets or sets a value specifying wrapping parameters for the row coordinates of the texture sampler. Declaration public TextureWrapMode WrapT { get; set; } Property Value Type Description TextureWrapMode Methods | Improve this Doc View Source Process(IObservable<IplImage>) Writes each image in an observable sequence to a texture object. Declaration public override IObservable<Texture> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to write into the texture. Returns Type Description IObservable < Texture > An observable sequence returning the Texture object on which each image is stored, whenever the source sequence emits a new image. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, Bonsai.Shaders.Texture>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Shaders.StoreImageSequence.html": {
    "href": "api/Bonsai.Shaders.StoreImageSequence.html",
    "title": "Class StoreImageSequence",
    "keywords": "Class StoreImageSequence Represents an operator that writes a sequence of images to a texture array. Inheritance Object Combinator < IplImage [], Texture > StoreImageSequence Inherited Members Combinator<IplImage[], Texture>.Process(IObservable<IplImage[]>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class StoreImageSequence : Combinator<IplImage[], Texture> Properties | Improve this Doc View Source InternalFormat Gets or sets a value specifying the internal pixel format of the texture. Declaration public PixelInternalFormat InternalFormat { get; set; } Property Value Type Description PixelInternalFormat | Improve this Doc View Source MagFilter Gets or sets a value specifying the texture magnification filter. Declaration public TextureMagFilter MagFilter { get; set; } Property Value Type Description TextureMagFilter | Improve this Doc View Source MinFilter Gets or sets a value specifying the texture minification filter. Declaration public TextureMinFilter MinFilter { get; set; } Property Value Type Description TextureMinFilter | Improve this Doc View Source PlaybackRate Gets or sets the default rate at which to playback the stored image sequence. Declaration [Range(0, 2147483647)] public double PlaybackRate { get; set; } Property Value Type Description Double | Improve this Doc View Source WrapS Gets or sets a value specifying wrapping parameters for the column coordinates of the texture sampler. Declaration public TextureWrapMode WrapS { get; set; } Property Value Type Description TextureWrapMode | Improve this Doc View Source WrapT Gets or sets a value specifying wrapping parameters for the row coordinates of the texture sampler. Declaration public TextureWrapMode WrapT { get; set; } Property Value Type Description TextureWrapMode Methods | Improve this Doc View Source Process(IObservable<IplImage[]>) Writes each array of images in an observable sequence into a new texture array. Declaration public override IObservable<Texture> Process(IObservable<IplImage[]> source) Parameters Type Name Description IObservable < IplImage []> source A sequence of arrays of IplImage objects used to initialize the texture array. Returns Type Description IObservable < Texture > A sequence of Texture objects where each texture stores the corresponding array of images in the source sequence. Overrides Bonsai.Combinator<OpenCV.Net.IplImage[], Bonsai.Shaders.Texture>.Process(System.IObservable<OpenCV.Net.IplImage[]>) | Improve this Doc View Source Process(IObservable<IplImage>) Writes an observable sequence of images to a texture array. Declaration public IObservable<Texture> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to be stored in the texture array. Returns Type Description IObservable < Texture > An observable sequence containing the Texture object used to store all the images in the source sequence. The initialized texture array is returned only when the image sequence is completed."
  },
  "api/Bonsai.Shaders.Texture.html": {
    "href": "api/Bonsai.Shaders.Texture.html",
    "title": "Class Texture",
    "keywords": "Class Texture Represents a texture object containing one or more images with the same image format. Inheritance Object Texture Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class Texture : IDisposable Constructors | Improve this Doc View Source Texture() Initializes a new instance of the Texture class. Declaration public Texture() Properties | Improve this Doc View Source Id Gets the handle to the texture object. Declaration public int Id { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Dispose() Releases all resources used by the Texture class. Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/Bonsai.Shaders.TextureArray.html": {
    "href": "api/Bonsai.Shaders.TextureArray.html",
    "title": "Class TextureArray",
    "keywords": "Class TextureArray Represents an array of texture objects. Inheritance Object TextureArray Implements IDisposable IEnumerable < Int32 > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class TextureArray : IDisposable, IEnumerable<int>, IEnumerable Constructors | Improve this Doc View Source TextureArray(Int32) Initializes a new instance of the TextureArray class with the specified number of texture objects. Declaration public TextureArray(int length) Parameters Type Name Description Int32 length The total number of texture objects in the array. Properties | Improve this Doc View Source Item[Int32] Gets the texture object at the specified index. Declaration public int this[int index] { get; } Parameters Type Name Description Int32 index The zero-based index of the texture object to get. Property Value Type Description Int32 The handle to the texture object at the specified index. | Improve this Doc View Source Length Gets the total number of texture objects in the array. Declaration public int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Dispose() Releases all resources used by the TextureArray class. Declaration public void Dispose() | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through all texture objects in the array. Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator < Int32 > An enumerator that can be used to iterate through the texture objects in the array. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.IDisposable System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Shaders.TextureNameConverter.html": {
    "href": "api/Bonsai.Shaders.TextureNameConverter.html",
    "title": "Class TextureNameConverter",
    "keywords": "Class TextureNameConverter Provides a type converter to convert a texture name to and from other representations. It also provides a mechanism to find existing textures which have been declared in the workflow. Inheritance Object TypeConverter StringConverter ResourceNameConverter TextureNameConverter Inherited Members ResourceNameConverter.IsResourceSupported(IResourceConfiguration) ResourceNameConverter.GetStandardValuesSupported(ITypeDescriptorContext) StringConverter.CanConvertFrom(ITypeDescriptorContext, Type) StringConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class TextureNameConverter : ResourceNameConverter Constructors | Improve this Doc View Source TextureNameConverter() Initializes a new instance of the TextureNameConverter class. Declaration public TextureNameConverter() Methods | Improve this Doc View Source GetStandardValues(ITypeDescriptorContext) Returns a collection of resource names which are available in the call context of this type converter request. Declaration public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description TypeConverter.StandardValuesCollection A TypeConverter.StandardValuesCollection containing the set of available resources. Only resources for which IsResourceSupported(IResourceConfiguration) returns true will be included. Overrides ResourceNameConverter.GetStandardValues(ITypeDescriptorContext)"
  },
  "api/Bonsai.Shaders.TextureResources.html": {
    "href": "api/Bonsai.Shaders.TextureResources.html",
    "title": "Class TextureResources",
    "keywords": "Class TextureResources Represents an operator that creates a collection of texture resources to be loaded into the resource manager. Inheritance Object Combinator < ResourceConfigurationCollection , ResourceConfigurationCollection > Transform < ResourceConfigurationCollection , ResourceConfigurationCollection > ResourceLoader ResourceLoader TextureResources Inherited Members ResourceLoader.Process(IObservable<INativeWindow>) ResourceLoader.Process<TEventArgs>(IObservable<EventPattern<INativeWindow, TEventArgs>>) ResourceLoader.Process(IObservable<ResourceManager>) ResourceLoader.Process(IObservable<ResourceConfigurationCollection>) Combinator<ResourceConfigurationCollection, ResourceConfigurationCollection>.Process(IObservable<ResourceConfigurationCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class TextureResources : ResourceLoader Properties | Improve this Doc View Source Textures Gets the collection of texture resources to be loaded into the resource manager. Declaration public TextureConfigurationCollection Textures { get; } Property Value Type Description TextureConfigurationCollection Methods | Improve this Doc View Source GetResources() Returns the set of resources to be loaded into the resource manager. Declaration protected override IEnumerable<IResourceConfiguration> GetResources() Returns Type Description IEnumerable < IResourceConfiguration > A collection of IResourceConfiguration objects to be loaded into the resource manager. Overrides ResourceLoader.GetResources()"
  },
  "api/Bonsai.Shaders.Timer.html": {
    "href": "api/Bonsai.Shaders.Timer.html",
    "title": "Class Timer",
    "keywords": "Class Timer Represents an operator that generates an observable sequence that periodically produces a value after the specified initial relative due time has elapsed, using the render loop timing. Inheritance Object Source < Int64 > Timer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class Timer : Source<long> Properties | Improve this Doc View Source DueTime Gets or sets the relative time at which to produce the first value. If this value is less than or equal to zero, the timer will fire as soon as possible. Declaration public TimeSpan DueTime { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source DueTimeXml Gets or sets an XML representation of the due time for serialization. Declaration [Browsable(false)] public string DueTimeXml { get; set; } Property Value Type Description String | Improve this Doc View Source Period Gets or sets the period to produce subsequent values. If this value is undefined or equal to zero the timer will only fire once. Declaration public TimeSpan? Period { get; set; } Property Value Type Description Nullable < TimeSpan > | Improve this Doc View Source PeriodXml Gets or sets an XML representation of the period for serialization. Declaration [Browsable(false)] public string PeriodXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence that periodically produces a value after the specified initial relative due time has elapsed, using the render loop timing. Declaration public override IObservable<long> Generate() Returns Type Description IObservable < Int64 > An observable sequence of integer values counting how many times the timer has fired. Overrides Bonsai.Source<System.Int64>.Generate() | Improve this Doc View Source Generate(IObservable<FrameEvent>) Generates an observable sequence that periodically produces a value after the specified initial relative due time has elapsed, using the timing from the specified sequence of frame events. Declaration public IObservable<long> Generate(IObservable<FrameEvent> source) Parameters Type Name Description IObservable < FrameEvent > source The sequence of frame events controlling the timing of the timer. Returns Type Description IObservable < Int64 > An observable sequence of integer values counting how many times the timer has fired. | Improve this Doc View Source Generate(IObservable<TimeStep>) Generates an observable sequence that periodically produces a value after the specified initial relative due time has elapsed, using the timing from the specified sequence of time steps. Declaration public IObservable<long> Generate(IObservable<TimeStep> source) Parameters Type Name Description IObservable < TimeStep > source The sequence of time steps controlling the timing of the timer. Returns Type Description IObservable < Int64 > An observable sequence of integer values counting how many times the timer has fired. | Improve this Doc View Source Generate(IObservable<Double>) Generates an observable sequence that periodically produces a value after the specified initial relative due time has elapsed, using the timing from the specified sequence of time steps in seconds. Declaration public IObservable<long> Generate(IObservable<double> source) Parameters Type Name Description IObservable < Double > source The sequence of time steps, in seconds, controlling the timing of the timer. Returns Type Description IObservable < Int64 > An observable sequence of integer values counting how many times the timer has fired."
  },
  "api/Bonsai.Shaders.TimeStep.html": {
    "href": "api/Bonsai.Shaders.TimeStep.html",
    "title": "Struct TimeStep",
    "keywords": "Struct TimeStep Represents the amount of time elapsed since the last update. Implements IEquatable < TimeStep > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public struct TimeStep : IEquatable<TimeStep> Constructors | Improve this Doc View Source TimeStep(Double, Double) Initializes a new instance of the TimeStep structure using the specified fixed-step elapsed time and variable-step elapsed clock time. Declaration public TimeStep(double elapsedTime, double elapsedRealTime) Parameters Type Name Description Double elapsedTime The amount of elapsed time since the last update, in seconds. Double elapsedRealTime The amount of elapsed time since the last update, in seconds, following the host computer clock. Fields | Improve this Doc View Source ElapsedRealTime The amount of elapsed time since the last update, in seconds, following the host computer clock. Declaration public double ElapsedRealTime Field Value Type Description Double Remarks This field can be used to measure the real-time jitter of the update and render loops, or in variable-step state updates. | Improve this Doc View Source ElapsedTime The amount of elapsed time since the last update, in seconds. Declaration public double ElapsedTime Field Value Type Description Double Remarks This field is useful for fixed-step deterministic state updates, where each step follows the target update or render refresh rates. | Improve this Doc View Source Zero Represents the zero TimeStep value. This field is read-only. Declaration public static readonly TimeStep Zero Field Value Type Description TimeStep Methods | Improve this Doc View Source Add(TimeStep, TimeStep) Adds two TimeStep values together. Declaration public static TimeStep Add(TimeStep left, TimeStep right) Parameters Type Name Description TimeStep left The first TimeStep to add. TimeStep right The second TimeStep to add. Returns Type Description TimeStep A new TimeStep object representing the sum of the left and right values. | Improve this Doc View Source Add(ref TimeStep, ref TimeStep, out TimeStep) Adds two TimeStep values together and stores the result in a return value. Declaration public static void Add(ref TimeStep left, ref TimeStep right, out TimeStep result) Parameters Type Name Description TimeStep left The first TimeStep to add. TimeStep right The second TimeStep to add. TimeStep result When this method returns, contains the TimeStep object representing the sum of the left and right values. | Improve this Doc View Source Equals(TimeStep) Returns a value indicating whether this instance is equal to the specified TimeStep structure. Declaration public bool Equals(TimeStep other) Parameters Type Name Description TimeStep other The TimeStep object to compare with this instance. Returns Type Description Boolean true if other represents the same timing values as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether the specified object is a TimeStep structure with the same timing values as this TimeStep object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a TimeStep structure and has the same timing values as this object; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this TimeStep value. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this TimeStep object. Overrides ValueType.GetHashCode() | Improve this Doc View Source Subtract(TimeStep, TimeStep) Subtracts the second TimeStep value from the first. Declaration public static TimeStep Subtract(TimeStep left, TimeStep right) Parameters Type Name Description TimeStep left The first TimeStep value. TimeStep right The second TimeStep value. Returns Type Description TimeStep A new TimeStep object representing the difference between the left and right values. | Improve this Doc View Source Subtract(ref TimeStep, ref TimeStep, out TimeStep) Subtracts the second TimeStep value from the first and stores the result in a return value. Declaration public static void Subtract(ref TimeStep left, ref TimeStep right, out TimeStep result) Parameters Type Name Description TimeStep left The first TimeStep value. TimeStep right The second TimeStep value. TimeStep result When this method returns, contains the TimeStep object representing the difference between the left and right values. | Improve this Doc View Source ToString() Creates a String representation of this TimeStep value. Declaration public override string ToString() Returns Type Description String A String representing all the timing values of this TimeStep object. Overrides ValueType.ToString() Operators | Improve this Doc View Source Addition(TimeStep, TimeStep) Adds two TimeStep values together. Declaration public static TimeStep operator +(TimeStep left, TimeStep right) Parameters Type Name Description TimeStep left The TimeStep value on the left-hand side of the addition operator. TimeStep right The TimeStep value on the right-hand side of the addition operator. Returns Type Description TimeStep A new TimeStep object representing the sum of the left and right values. | Improve this Doc View Source Equality(TimeStep, TimeStep) Indicates whether two TimeStep values are equal. Declaration public static bool operator ==(TimeStep left, TimeStep right) Parameters Type Name Description TimeStep left The TimeStep value on the left-hand side of the equality operator. TimeStep right The TimeStep value on the right-hand side of the equality operator. Returns Type Description Boolean true if left and right have equal timing values; otherwise, false . | Improve this Doc View Source Inequality(TimeStep, TimeStep) Indicates whether two TimeStep values are different. Declaration public static bool operator !=(TimeStep left, TimeStep right) Parameters Type Name Description TimeStep left The TimeStep value on the left-hand side of the inequality operator. TimeStep right The TimeStep value on the right-hand side of the inequality operator. Returns Type Description Boolean true if left and right differ in any of their timing values; false if left and right are equal. | Improve this Doc View Source Subtraction(TimeStep, TimeStep) Subtracts the second TimeStep value from the first. Declaration public static TimeStep operator -(TimeStep left, TimeStep right) Parameters Type Name Description TimeStep left The TimeStep value on the left-hand side of the subtraction operator. TimeStep right The TimeStep value on the right-hand side of the subtraction operator. Returns Type Description TimeStep A new TimeStep object representing the difference between the left and right values. Implements System.IEquatable<T>"
  },
  "api/Bonsai.Shaders.TransformRelative.html": {
    "href": "api/Bonsai.Shaders.TransformRelative.html",
    "title": "Class TransformRelative",
    "keywords": "Class TransformRelative Represents an operator that applies a model matrix transform specifying relative position, rotation and scale to every transform in the sequence. Inheritance Object Combinator < Matrix4 , Matrix4 > Transform < Matrix4 , Matrix4 > MatrixTransform TransformRelative Inherited Members MatrixTransform.Order MatrixTransform.Process(IObservable<Matrix4>) Combinator<Matrix4, Matrix4>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class TransformRelative : MatrixTransform Constructors | Improve this Doc View Source TransformRelative() Initializes a new instance of the TransformRelative class. Declaration public TransformRelative() Properties | Improve this Doc View Source Position Gets or sets the relative position of the model, in the local coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Position { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Rotation Gets or sets the quaternion representing the relative rotation of the model, in the local coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Quaternion Rotation { get; set; } Property Value Type Description Quaternion | Improve this Doc View Source Scale Gets or sets the relative scale vector applied to the model, in the local coordinate frame. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Vector3 Scale { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source CreateTransform(out Matrix4) Initializes a transform matrix for applying a model matrix transform specifying relative position, rotation and scale. Declaration protected override void CreateTransform(out Matrix4 result) Parameters Type Name Description Matrix4 result When this method returns, contains the relative matrix transform to be combined with each element in the sequence. Overrides MatrixTransform.CreateTransform(out Matrix4)"
  },
  "api/Bonsai.Shaders.Translate.html": {
    "href": "api/Bonsai.Shaders.Translate.html",
    "title": "Class Translate",
    "keywords": "Class Translate Represents an operator that applies a translation along the specified axes to every transform in the sequence. Inheritance Object Combinator < Matrix4 , Matrix4 > Transform < Matrix4 , Matrix4 > MatrixTransform Translate Inherited Members MatrixTransform.Order MatrixTransform.Process(IObservable<Matrix4>) Combinator<Matrix4, Matrix4>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class Translate : MatrixTransform Properties | Improve this Doc View Source X Gets or sets the translation along the x-axis. Declaration [Range(-1, 1)] public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the translation along the y-axis. Declaration [Range(-1, 1)] public float Y { get; set; } Property Value Type Description Single | Improve this Doc View Source Z Gets or sets the translation along the z-axis. Declaration [Range(-1, 1)] public float Z { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source CreateTransform(out Matrix4) Initializes a transform matrix for applying a translation along the specified axes. Declaration protected override void CreateTransform(out Matrix4 result) Parameters Type Name Description Matrix4 result When this method returns, contains the relative matrix transform to be combined with each element in the sequence. Overrides MatrixTransform.CreateTransform(out Matrix4)"
  },
  "api/Bonsai.Shaders.Transpose.html": {
    "href": "api/Bonsai.Shaders.Transpose.html",
    "title": "Class Transpose",
    "keywords": "Class Transpose Represents an operator that calculates the transpose of every matrix in the sequence. Inheritance Object Combinator < Matrix4 , Matrix4 > Transform < Matrix4 , Matrix4 > Transpose Inherited Members Combinator<Matrix4, Matrix4>.Process(IObservable<Matrix4>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class Transpose : Transform<Matrix4, Matrix4> Methods | Improve this Doc View Source Process(IObservable<Matrix3>) Calculates the transpose of every 3x3 matrix in an observable sequence. Declaration public IObservable<Matrix3> Process(IObservable<Matrix3> source) Parameters Type Name Description IObservable < Matrix3 > source The sequence of 3x3 matrices to transpose. Returns Type Description IObservable < Matrix3 > The sequence of transposed 3x3 matrices. | Improve this Doc View Source Process(IObservable<Matrix4>) Calculates the transpose of every 4x4 matrix in an observable sequence. Declaration public override IObservable<Matrix4> Process(IObservable<Matrix4> source) Parameters Type Name Description IObservable < Matrix4 > source The sequence of 4x4 matrices to transpose. Returns Type Description IObservable < Matrix4 > The sequence of transposed 4x4 matrices. Overrides Bonsai.Combinator<OpenTK.Matrix4, OpenTK.Matrix4>.Process(System.IObservable<OpenTK.Matrix4>)"
  },
  "api/Bonsai.Shaders.UpdateClearColorState.html": {
    "href": "api/Bonsai.Shaders.UpdateClearColorState.html",
    "title": "Class UpdateClearColorState",
    "keywords": "Class UpdateClearColorState Represents an operator that updates the clear color state of the shader window. Inheritance Object Combinator Sink UpdateClearColorState Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class UpdateClearColorState : Sink Properties | Improve this Doc View Source ClearColor Gets or sets the color used to clear the framebuffer before rendering. Declaration public Color ClearColor { get; set; } Property Value Type Description Color | Improve this Doc View Source ClearColorHtml Gets or sets an XML representation of the clear color for serialization. Declaration [Browsable(false)] public string ClearColorHtml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Updates the clear color state of the shader window whenever an observable sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to update the clear color state of the shader window. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the clear color of the shader window whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.UpdateFrame.html": {
    "href": "api/Bonsai.Shaders.UpdateFrame.html",
    "title": "Class UpdateFrame",
    "keywords": "Class UpdateFrame Represents an operator that generates a sequence of events produced whenever it is time to update the render state. Inheritance Object Source < FrameEvent > UpdateFrame Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class UpdateFrame : Source<FrameEvent> Methods | Improve this Doc View Source Generate() Generates an observable sequence that emits a notification whenever it is time to update the render state. Declaration public override IObservable<FrameEvent> Generate() Returns Type Description IObservable < FrameEvent > A sequence of FrameEvent objects produced whenever it is time to update the render state. Overrides Bonsai.Source<Bonsai.Shaders.FrameEvent>.Generate()"
  },
  "api/Bonsai.Shaders.UpdateRenderState.html": {
    "href": "api/Bonsai.Shaders.UpdateRenderState.html",
    "title": "Class UpdateRenderState",
    "keywords": "Class UpdateRenderState Represents an operator that updates the render state of the shader window. Inheritance Object Combinator Sink UpdateRenderState Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class UpdateRenderState : Sink Properties | Improve this Doc View Source RenderState Gets the collection of configuration objects specifying the render states to assign for subsequent operations. Declaration public StateConfigurationCollection RenderState { get; } Property Value Type Description StateConfigurationCollection Methods | Improve this Doc View Source Process(IObservable<ResourceConfigurationCollection>) Updates the render state of the shader window contained in each set of resources in an observable sequence. Declaration public IObservable<ResourceConfigurationCollection> Process(IObservable<ResourceConfigurationCollection> source) Parameters Type Name Description IObservable < ResourceConfigurationCollection > source A sequence of ResourceConfigurationCollection objects containing the shader windows to update. Returns Type Description IObservable < ResourceConfigurationCollection > An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the render state of the shader window contained in each set of resources in the sequence. | Improve this Doc View Source Process(IObservable<ShaderWindow>) Updates the render state of each shader window in an observable sequence. Declaration public IObservable<ShaderWindow> Process(IObservable<ShaderWindow> source) Parameters Type Name Description IObservable < ShaderWindow > source The sequence of shader windows to update. Returns Type Description IObservable < ShaderWindow > An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the render state of each shader window in the sequence. | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Updates the render state of the shader window whenever an observable sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used to update the render state of the shader window. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the render state of the shader window whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.UpdateScissorState.html": {
    "href": "api/Bonsai.Shaders.UpdateScissorState.html",
    "title": "Class UpdateScissorState",
    "keywords": "Class UpdateScissorState Represents an operator that updates the active scissor box in the shader window. Any fragments falling outside the scissor box will be discarded. Inheritance Object Combinator Sink UpdateScissorState Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class UpdateScissorState : Sink Properties | Improve this Doc View Source Height Gets or sets the height of the scissor box, in normalized coordinates. Declaration public float Height { get; set; } Property Value Type Description Single | Improve this Doc View Source Width Gets or sets the width of the scissor box, in normalized coordinates. Declaration public float Width { get; set; } Property Value Type Description Single | Improve this Doc View Source X Gets or sets the x-coordinate of the lower left corner of the scissor box. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y-coordinate of the lower left corner of the scissor box. Declaration public float Y { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Updates the active scissor box in the shader window whenever an observable sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence of notifications used to update the active scissor box. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the active scissor box in the shader window. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.UpdateTexture.html": {
    "href": "api/Bonsai.Shaders.UpdateTexture.html",
    "title": "Class UpdateTexture",
    "keywords": "Class UpdateTexture Represents an operator that updates the pixel store of the specified texture target from a sequence of images. Inheritance Object Combinator < IplImage , IplImage > Sink < IplImage > UpdateTexture Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class UpdateTexture : Sink<IplImage> Properties | Improve this Doc View Source InternalFormat Gets or sets a value specifying the internal storage format of the texture target. Declaration public PixelInternalFormat InternalFormat { get; set; } Property Value Type Description PixelInternalFormat | Improve this Doc View Source TextureName Gets or sets the name of the texture to update. Declaration [TypeConverter(typeof(TextureNameConverter))] public string TextureName { get; set; } Property Value Type Description String | Improve this Doc View Source TextureTarget Gets or sets a value specifying the texture target to update. Declaration public TextureTarget TextureTarget { get; set; } Property Value Type Description TextureTarget Methods | Improve this Doc View Source Process(IObservable<IplImage>) Updates the pixel store of the specified texture target from an observable sequence of images. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images used to update the texture target. Returns Type Description IObservable < IplImage > An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the pixel store of the specified texture target. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Shaders.UpdateUniform.html": {
    "href": "api/Bonsai.Shaders.UpdateUniform.html",
    "title": "Class UpdateUniform",
    "keywords": "Class UpdateUniform Represents an operator that updates the value of a uniform variable on the specified shader. Inheritance Object UpdateUniform Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Sink)] public class UpdateUniform Properties | Improve this Doc View Source ShaderName Gets or sets the name of the shader program. Declaration [TypeConverter(typeof(ShaderNameConverter))] public string ShaderName { get; set; } Property Value Type Description String | Improve this Doc View Source UniformName Gets or sets the name of the uniform variable to update. Declaration public string UniformName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<TextureUnit>) Updates a sampler 2D uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<TextureUnit> Process(IObservable<TextureUnit> source) Parameters Type Name Description IObservable < TextureUnit > source The sequence of values used to update the uniform variable. Returns Type Description IObservable < TextureUnit > An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Matrix2>) Updates a mat2 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Matrix2> Process(IObservable<Matrix2> source) Parameters Type Name Description IObservable < Matrix2 > source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Matrix2 > An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Matrix3>) Updates a mat3 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Matrix3> Process(IObservable<Matrix3> source) Parameters Type Name Description IObservable < Matrix3 > source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Matrix3 > An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Matrix4>) Updates a mat4 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Matrix4> Process(IObservable<Matrix4> source) Parameters Type Name Description IObservable < Matrix4 > source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Matrix4 > An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Quaternion>) Updates a vec4 uniform variable on the specified shader with the quaternion values from an observable sequence. Declaration public IObservable<Quaternion> Process(IObservable<Quaternion> source) Parameters Type Name Description IObservable < Quaternion > source The sequence of quaternion values used to update the uniform variable. Returns Type Description IObservable < Quaternion > An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Vector2>) Updates a vec2 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Vector2> Process(IObservable<Vector2> source) Parameters Type Name Description IObservable < Vector2 > source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Vector2 > An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Vector3>) Updates a vec3 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Vector3> Process(IObservable<Vector3> source) Parameters Type Name Description IObservable < Vector3 > source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Vector3 > An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Vector4>) Updates a vec4 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Vector4> Process(IObservable<Vector4> source) Parameters Type Name Description IObservable < Vector4 > source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Vector4 > An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Double>) Updates a double-precision floating-point uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<double> Process(IObservable<double> source) Parameters Type Name Description IObservable < Double > source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Double > An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Int32>) Updates a 32-bit integer uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<int> Process(IObservable<int> source) Parameters Type Name Description IObservable < Int32 > source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Int32 > An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Single>) Updates a single-precision floating-point uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<float> Process(IObservable<float> source) Parameters Type Name Description IObservable < Single > source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Single > An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Tuple<Double, Double, Double, Double>>) Updates a dvec4 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Tuple<double, double, double, double>> Process(IObservable<Tuple<double, double, double, double>> source) Parameters Type Name Description IObservable < Tuple < Double , Double , Double , Double >> source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Tuple < Double , Double , Double , Double >> An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Tuple<Double, Double, Double>>) Updates a dvec3 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Tuple<double, double, double>> Process(IObservable<Tuple<double, double, double>> source) Parameters Type Name Description IObservable < Tuple < Double , Double , Double >> source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Tuple < Double , Double , Double >> An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Tuple<Double, Double>>) Updates a dvec2 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Tuple<double, double>> Process(IObservable<Tuple<double, double>> source) Parameters Type Name Description IObservable < Tuple < Double , Double >> source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Tuple < Double , Double >> An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Tuple<Int32, Int32, Int32, Int32>>) Updates an ivec4 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Tuple<int, int, int, int>> Process(IObservable<Tuple<int, int, int, int>> source) Parameters Type Name Description IObservable < Tuple < Int32 , Int32 , Int32 , Int32 >> source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Tuple < Int32 , Int32 , Int32 , Int32 >> An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Tuple<Int32, Int32, Int32>>) Updates an ivec3 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Tuple<int, int, int>> Process(IObservable<Tuple<int, int, int>> source) Parameters Type Name Description IObservable < Tuple < Int32 , Int32 , Int32 >> source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Tuple < Int32 , Int32 , Int32 >> An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Tuple<Int32, Int32>>) Updates an ivec2 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Tuple<int, int>> Process(IObservable<Tuple<int, int>> source) Parameters Type Name Description IObservable < Tuple < Int32 , Int32 >> source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Tuple < Int32 , Int32 >> An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Tuple<Single, Single, Single, Single>>) Updates a vec4 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Tuple<float, float, float, float>> Process(IObservable<Tuple<float, float, float, float>> source) Parameters Type Name Description IObservable < Tuple < Single , Single , Single , Single >> source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Tuple < Single , Single , Single , Single >> An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Tuple<Single, Single, Single>>) Updates a vec3 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Tuple<float, float, float>> Process(IObservable<Tuple<float, float, float>> source) Parameters Type Name Description IObservable < Tuple < Single , Single , Single >> source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Tuple < Single , Single , Single >> An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence. | Improve this Doc View Source Process(IObservable<Tuple<Single, Single>>) Updates a vec2 uniform variable on the specified shader with the values from an observable sequence. Declaration public IObservable<Tuple<float, float>> Process(IObservable<Tuple<float, float>> source) Parameters Type Name Description IObservable < Tuple < Single , Single >> source The sequence of values used to update the uniform variable. Returns Type Description IObservable < Tuple < Single , Single >> An observable sequence that is identical to the source sequence but where there is an additional side effect of assigning the uniform variable to the values of the sequence."
  },
  "api/Bonsai.Shaders.UpdateVertexBuffer.html": {
    "href": "api/Bonsai.Shaders.UpdateVertexBuffer.html",
    "title": "Class UpdateVertexBuffer",
    "keywords": "Class UpdateVertexBuffer Represents an operator that updates the vertex buffer data used by the specified mesh geometry. Inheritance Object Combinator < Mat , Mat > Sink < Mat > UpdateVertexBuffer Inherited Members Combinator<Mat, Mat>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class UpdateVertexBuffer : Sink<Mat> Properties | Improve this Doc View Source DrawMode Gets or sets a value specifying the kind of primitives to render with the vertex buffer data. Declaration public PrimitiveType DrawMode { get; set; } Property Value Type Description PrimitiveType | Improve this Doc View Source MeshName Gets or sets the name of the mesh geometry to update. Declaration [TypeConverter(typeof(MeshNameConverter))] public string MeshName { get; set; } Property Value Type Description String | Improve this Doc View Source Usage Gets or sets a value specifying the expected usage pattern of the vertex buffer. Declaration public BufferUsageHint Usage { get; set; } Property Value Type Description BufferUsageHint | Improve this Doc View Source VertexAttributes Gets the collection of vertex attributes specifying how to interpret the vertex array data. Declaration public VertexAttributeMappingCollection VertexAttributes { get; } Property Value Type Description VertexAttributeMappingCollection Methods | Improve this Doc View Source Process(IObservable<Mat>) Updates the specified mesh geometry using each of the matrix data in an observable sequence. Declaration public override IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat objects representing the vertex array data used to update the mesh geometry. Returns Type Description IObservable < Mat > An observable sequence that is identical to the source sequence but where there is an additional side effect of scheduling an update operation where mesh geometry data is updated using each of the matrices in the sequence. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.Mat>.Process(System.IObservable<OpenCV.Net.Mat>) | Improve this Doc View Source Process<TVertex>(IObservable<TVertex[]>) Updates the specified mesh geometry using each of the array data in an observable sequence. Declaration public IObservable<TVertex[]> Process<TVertex>(IObservable<TVertex[]> source) where TVertex : struct Parameters Type Name Description IObservable <TVertex[]> source A sequence of vertex array data used to update the mesh geometry. Returns Type Description IObservable <TVertex[]> An observable sequence that is identical to the source sequence but where there is an additional side effect of scheduling an update operation where mesh geometry data is updated using each of the arrays in the sequence. Type Parameters Name Description TVertex The type of the vertex elements used to render each primitive. | Improve this Doc View Source Process<TVertex>(IObservable<Tuple<TVertex[], Byte[]>>) Updates the specified mesh geometry using vertex and 8-bit index data from an observable sequence. Declaration public IObservable<Tuple<TVertex[], byte[]>> Process<TVertex>(IObservable<Tuple<TVertex[], byte[]>> source) where TVertex : struct Parameters Type Name Description IObservable < Tuple <TVertex[], Byte []>> source The sequence of pairs of vertex and 8-bit index data used to update the mesh geometry. Returns Type Description IObservable < Tuple <TVertex[], Byte []>> An observable sequence that is identical to the source sequence but where there is an additional side effect of scheduling an update operation where mesh geometry data is updated using each of the pairs of vertex and index data in the sequence. Type Parameters Name Description TVertex The type of the vertex elements used to render each primitive. | Improve this Doc View Source Process<TVertex>(IObservable<Tuple<TVertex[], Int16[]>>) Updates the specified mesh geometry using vertex and signed 16-bit index data from an observable sequence. Declaration public IObservable<Tuple<TVertex[], short[]>> Process<TVertex>(IObservable<Tuple<TVertex[], short[]>> source) where TVertex : struct Parameters Type Name Description IObservable < Tuple <TVertex[], Int16 []>> source The sequence of pairs of vertex and signed 16-bit index data used to update the mesh geometry. Returns Type Description IObservable < Tuple <TVertex[], Int16 []>> An observable sequence that is identical to the source sequence but where there is an additional side effect of scheduling an update operation where mesh geometry data is updated using each of the pairs of vertex and index data in the sequence. Type Parameters Name Description TVertex The type of the vertex elements used to render each primitive. | Improve this Doc View Source Process<TVertex>(IObservable<Tuple<TVertex[], Int32[]>>) Updates the specified mesh geometry using vertex and signed 32-bit index data from an observable sequence. Declaration public IObservable<Tuple<TVertex[], int[]>> Process<TVertex>(IObservable<Tuple<TVertex[], int[]>> source) where TVertex : struct Parameters Type Name Description IObservable < Tuple <TVertex[], Int32 []>> source The sequence of pairs of vertex and signed 32-bit index data used to update the mesh geometry. Returns Type Description IObservable < Tuple <TVertex[], Int32 []>> An observable sequence that is identical to the source sequence but where there is an additional side effect of scheduling an update operation where mesh geometry data is updated using each of the pairs of vertex and index data in the sequence. Type Parameters Name Description TVertex The type of the vertex elements used to render each primitive. | Improve this Doc View Source Process<TVertex>(IObservable<Tuple<TVertex[], UInt16[]>>) Updates the specified mesh geometry using vertex and unsigned 16-bit index data from an observable sequence. Declaration public IObservable<Tuple<TVertex[], ushort[]>> Process<TVertex>(IObservable<Tuple<TVertex[], ushort[]>> source) where TVertex : struct Parameters Type Name Description IObservable < Tuple <TVertex[], UInt16 []>> source The sequence of pairs of vertex and unsigned 16-bit index data used to update the mesh geometry. Returns Type Description IObservable < Tuple <TVertex[], UInt16 []>> An observable sequence that is identical to the source sequence but where there is an additional side effect of scheduling an update operation where mesh geometry data is updated using each of the pairs of vertex and index data in the sequence. Type Parameters Name Description TVertex The type of the vertex elements used to render each primitive. | Improve this Doc View Source Process<TVertex>(IObservable<Tuple<TVertex[], UInt32[]>>) Updates the specified mesh geometry using vertex and unsigned 32-bit index data from an observable sequence. Declaration public IObservable<Tuple<TVertex[], uint[]>> Process<TVertex>(IObservable<Tuple<TVertex[], uint[]>> source) where TVertex : struct Parameters Type Name Description IObservable < Tuple <TVertex[], UInt32 []>> source The sequence of pairs of vertex and unsigned 32-bit index data used to update the mesh geometry. Returns Type Description IObservable < Tuple <TVertex[], UInt32 []>> An observable sequence that is identical to the source sequence but where there is an additional side effect of scheduling an update operation where mesh geometry data is updated using each of the pairs of vertex and index data in the sequence. Type Parameters Name Description TVertex The type of the vertex elements used to render each primitive."
  },
  "api/Bonsai.Shaders.UpdateViewportState.html": {
    "href": "api/Bonsai.Shaders.UpdateViewportState.html",
    "title": "Class UpdateViewportState",
    "keywords": "Class UpdateViewportState Represents an operator that updates the active viewport in the shader window. Inheritance Object Combinator Sink UpdateViewportState Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class UpdateViewportState : Sink Properties | Improve this Doc View Source Height Gets or sets the height of the viewport rectangle, in normalized coordinates. Declaration public float Height { get; set; } Property Value Type Description Single | Improve this Doc View Source Width Gets or sets the width of the viewport rectangle, in normalized coordinates. Declaration public float Width { get; set; } Property Value Type Description Single | Improve this Doc View Source X Gets or sets the x-coordinate of the lower left corner of the viewport. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y-coordinate of the lower left corner of the viewport. Declaration public float Y { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Updates the active viewport in the shader window whenever an observable sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence of notifications used to update the active viewport. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the active viewport in the shader window. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Shaders.VertexAttributeMapping.html": {
    "href": "api/Bonsai.Shaders.VertexAttributeMapping.html",
    "title": "Class VertexAttributeMapping",
    "keywords": "Class VertexAttributeMapping Represents the format of a user-defined input value to a vertex shader. Inheritance Object VertexAttributeMapping InstanceAttributeMapping Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class VertexAttributeMapping Properties | Improve this Doc View Source Normalized Gets or sets a value specifying whether fixed-point data values should be normalized or converted directly before they are accessed. Declaration public bool Normalized { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Size Gets or sets a value specifying the number of components in the vertex attribute. Declaration public int Size { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Type Gets or sets a value specifying the data type of each component in the vertex attribute. Declaration public VertexAttribPointerType Type { get; set; } Property Value Type Description VertexAttribPointerType Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Bonsai.Shaders.VertexAttributeMappingCollection.html": {
    "href": "api/Bonsai.Shaders.VertexAttributeMappingCollection.html",
    "title": "Class VertexAttributeMappingCollection",
    "keywords": "Class VertexAttributeMappingCollection Represents a collection of VertexAttributeMapping objects. Inheritance Object Collection < VertexAttributeMapping > VertexAttributeMappingCollection Implements IList < VertexAttributeMapping > ICollection < VertexAttributeMapping > IList ICollection IReadOnlyList < VertexAttributeMapping > IReadOnlyCollection < VertexAttributeMapping > IEnumerable < VertexAttributeMapping > IEnumerable Inherited Members Collection<VertexAttributeMapping>.Add(VertexAttributeMapping) Collection<VertexAttributeMapping>.Clear() Collection<VertexAttributeMapping>.CopyTo(VertexAttributeMapping[], Int32) Collection<VertexAttributeMapping>.Contains(VertexAttributeMapping) Collection<VertexAttributeMapping>.GetEnumerator() Collection<VertexAttributeMapping>.IndexOf(VertexAttributeMapping) Collection<VertexAttributeMapping>.Insert(Int32, VertexAttributeMapping) Collection<VertexAttributeMapping>.Remove(VertexAttributeMapping) Collection<VertexAttributeMapping>.RemoveAt(Int32) Collection<VertexAttributeMapping>.ClearItems() Collection<VertexAttributeMapping>.InsertItem(Int32, VertexAttributeMapping) Collection<VertexAttributeMapping>.RemoveItem(Int32) Collection<VertexAttributeMapping>.SetItem(Int32, VertexAttributeMapping) Collection<VertexAttributeMapping>.IEnumerable.GetEnumerator() Collection<VertexAttributeMapping>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.VertexAttributeMapping>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Shaders.VertexAttributeMapping>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<VertexAttributeMapping>.IList.Add(Object) Collection<VertexAttributeMapping>.IList.Contains(Object) Collection<VertexAttributeMapping>.IList.IndexOf(Object) Collection<VertexAttributeMapping>.IList.Insert(Int32, Object) Collection<VertexAttributeMapping>.IList.Remove(Object) Collection<VertexAttributeMapping>.Count Collection<VertexAttributeMapping>.Items Collection<VertexAttributeMapping>.Item[Int32] Collection<VertexAttributeMapping>.ICollection<VertexAttributeMapping>.IsReadOnly Collection<VertexAttributeMapping>.ICollection.IsSynchronized Collection<VertexAttributeMapping>.ICollection.SyncRoot Collection<VertexAttributeMapping>.IList.Item[Int32] Collection<VertexAttributeMapping>.IList.IsReadOnly Collection<VertexAttributeMapping>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class VertexAttributeMappingCollection : Collection<VertexAttributeMapping>, IList<VertexAttributeMapping>, ICollection<VertexAttributeMapping>, IList, ICollection, IReadOnlyList<VertexAttributeMapping>, IReadOnlyCollection<VertexAttributeMapping>, IEnumerable<VertexAttributeMapping>, IEnumerable Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Shaders.ViewportEffect.html": {
    "href": "api/Bonsai.Shaders.ViewportEffect.html",
    "title": "Class ViewportEffect",
    "keywords": "Class ViewportEffect Provides functionality for rendering a fullscreen effect using a fragment shader pass. Inheritance Object Shader Effect ViewportEffect Implements IDisposable Inherited Members Effect.CreateShader() Shader.Name Shader.Program Shader.Window Shader.Update(Action) Shader.CreateShaderState(IEnumerable<StateConfiguration>, IEnumerable<UniformConfiguration>, IEnumerable<BufferBindingConfiguration>, FramebufferConfiguration) Shader.Dispatch() Shader.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class ViewportEffect : Effect, IDisposable Methods | Improve this Doc View Source Dispose(Boolean) Releases all resources used by the Shader class. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Shader.Dispose(Boolean) | Improve this Doc View Source OnDispatch() Returns any actions that should be executed before running the shader program. Declaration protected override Action OnDispatch() Returns Type Description Action An Action object to be called before running the shader program. If the return value is null , no action will be executed. Overrides Shader.OnDispatch() Implements System.IDisposable"
  },
  "api/Bonsai.Shaders.WarpPerspective.html": {
    "href": "api/Bonsai.Shaders.WarpPerspective.html",
    "title": "Class WarpPerspective",
    "keywords": "Class WarpPerspective Represents an operator that creates a warp perspective transform matrix for planar projection mapping. Inheritance Object WarpPerspective Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class WarpPerspective Properties | Improve this Doc View Source Destination Gets or sets the coordinates of the four quadrangle vertices specifying the perspective transform. Declaration public Point2f[] Destination { get; set; } Property Value Type Description Point2f [] Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Creates a warp perspective transform matrix for planar projection mapping whenever an observable sequence emits a notification. Declaration public IObservable<Matrix4> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence of notifications used to create the perspective transform. Returns Type Description IObservable < Matrix4 > The sequence of created Matrix4 objects representing the perspective transform. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Shaders.WindowClosed.html": {
    "href": "api/Bonsai.Shaders.WindowClosed.html",
    "title": "Class WindowClosed",
    "keywords": "Class WindowClosed Represents an operator that generates a sequence of events produced whenever the shader window is closed. Inheritance Object Source < EventPattern < INativeWindow , EventArgs >> WindowClosed Inherited Members Source<EventPattern<INativeWindow, EventArgs>>.Generate() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Shaders Assembly : Bonsai.Shaders.dll Syntax public class WindowClosed : Source<EventPattern<INativeWindow, EventArgs>> Methods | Improve this Doc View Source Generate() Generates an observable sequence that emits a notification whenever the shader window is closed. Declaration public override IObservable<EventPattern<INativeWindow, EventArgs>> Generate() Returns Type Description IObservable < EventPattern < INativeWindow , EventArgs >> A sequence of event objects produced whenever the shader window is closed. Overrides Bonsai.Source<System.Reactive.EventPattern<OpenTK.INativeWindow, System.EventArgs>>.Generate()"
  },
  "api/Bonsai.Sink.html": {
    "href": "api/Bonsai.Sink.html",
    "title": "Class Sink",
    "keywords": "Class Sink Represents a generic operation which introduces side effects on an observable sequence without modifying its elements. Inheritance Object Combinator Sink UpdateListener UpdateSource UpdateSourceState SerialStringWrite WriteLine DispatchCompute DispatchShaderQueue DrawFramebuffer DrawMeshAggregate RenderCubemapTarget DrawScene UpdateProjectionMatrix UpdateViewMatrix UpdateClearColorState UpdateRenderState UpdateScissorState UpdateViewportState SendKeys Inherited Members Combinator.Process<TSource>(IObservable<TSource>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public abstract class Sink : Combinator"
  },
  "api/Bonsai.Sink-1.html": {
    "href": "api/Bonsai.Sink-1.html",
    "title": "Class Sink<TSource>",
    "keywords": "Class Sink<TSource> Represents an operation which introduces side effects on observable sequences of a specific type without modifying its elements. Inheritance Object Combinator <TSource, TSource> Sink<TSource> AnalogOutput DigitalOutput SendSysex ServoOutput AudioPlayback UpdateBuffer DrawArrays DrawMeshInstanced UpdateTransform UpdateTexture UpdateVertexBuffer SaveExtrinsics SaveImage SaveIntrinsics SetCursorPosition Inherited Members Combinator<TSource, TSource>.Process(IObservable<TSource>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Sink)] public abstract class Sink<TSource> : Combinator<TSource, TSource> Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Source-1.html": {
    "href": "api/Bonsai.Source-1.html",
    "title": "Class Source<TSource>",
    "keywords": "Class Source<TSource> Represents a generator of observable sequences of data elements. Inheritance Object Source<TSource> AnalogInput CreateArduino DigitalInput InputPullUp ReceiveSysex AudioCapture AudioReader CreateAudioContext CreateSource FunctionGenerator MatrixReader Range ScalarBuffer CreateSerialPort EnumerateDirectories EnumerateFiles EnumerateFileSystemEntries GetDirectories GetFiles GetFileSystemEntries ReadLine SerialStringRead StartProcess CreateTransport CurrentThreadScheduler DefaultScheduler EventLoopScheduler ImmediateScheduler NewThreadScheduler Range TaskPoolScheduler ThreadPoolScheduler Timer CreateAxisAngleRotation CreateCubemapCamera CreateLookAt CreateMatrix2 CreateMatrix2x3 CreateMatrix2x4 CreateMatrix3 CreateMatrix3x2 CreateMatrix3x4 CreateMatrix4 CreateMatrix4x2 CreateMatrix4x3 CreateOrthographic CreateOrthographicOffCenter CreatePerspectiveFieldOfView CreatePerspectiveOffCenter CreateQuaternionRotation CreateRotationX CreateRotationY CreateRotationZ CreateScale CreateTransform CreateTranslation CreateVector2 CreateVector3 CreateVector4 CreateWindow GamePad Keyboard KeyDown KeyPress KeyUp Mouse MouseCursor MouseDown MouseEnter MouseLeave MouseMove MouseUp MouseWheel LoadImage LoadImageSequence LoadVideo MeshBounds ReadPixels RenderFrame SceneTransform Timer UpdateFrame WindowClosed CameraCapture CreateExtrinsics CreateIntrinsics CreatePoint CreatePoint2d CreatePoint2f CreatePoint3d CreateCanvas CreateFont FileCapture LoadExtrinsics LoadImage LoadIntrinsics SolidColor KeyDown KeyUp MouseButtonDown MouseButtonUp MouseMove MouseWheel Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Combinator(MethodName = \"Generate\")] [WorkflowElementCategory(ElementCategory.Source)] public abstract class Source<TSource> Type Parameters Name Description TSource The type of the elements emitted by the generator. Methods | Improve this Doc View Source Generate() Generates an observable sequence of data elements. Declaration public abstract IObservable<TSource> Generate() Returns Type Description IObservable <TSource> An observable sequence of data elements of type TSource ."
  },
  "api/Bonsai.Transform-2.html": {
    "href": "api/Bonsai.Transform-2.html",
    "title": "Class Transform<TSource, TResult>",
    "keywords": "Class Transform<TSource, TResult> Represents an operation on observable sequences which transforms every element of the source sequence into an element in the result sequence. Inheritance Object Combinator <TSource, TResult> Transform<TSource, TResult> Butterworth Delay Difference FirFilter FrequencyFilter IirFilter RasterSpikes ReferenceChannels SelectChannels Shift Submatrix Threshold ChangeExtension GetDirectoryName GetExtension GetFileName GetFileNameWithoutExtension GetFullPath GetPathRoot ResourceLoader AspectRatio ExtractRotation ExtractScale ExtractTranslation ExtrinsicsTransform NormalizedDeviceCoordinates Invert MatrixTransform NormalMatrix RetrieveImage Transpose AdaptiveThreshold ApproximatePolygon AverageBinaryRegion BackgroundSubtraction BinaryRegionAnalysis BinaryRegionExtremes CalibrateCameraChessboard Canny Centroid ColorBalance ContourPoints ConvertColor ConvexityDefects Crop CropCenter CropPolygon DecodeImage DistanceTransform DrawConnectedComponents DrawContours CanvasElement CropCanvas DrawCanvas EqualizeHistogram Filter2D FindChessboardCorners FindContours FindCornerSubPix Flip GoodFeaturesToTrack Grayscale HaarCascade HoughCircles HoughLines HsvThreshold ImageHistogram Laplace LargestBinaryRegion Mask MergeBinaryRegions MinimumEnclosingCircle MorphologicalOperator Normalize OpticalFlow PolarTransform RangeThreshold Resize ResizeCanvas RoiActivity RoiActivityDetected Skeletonization Smooth Sobel SortBinaryRegions SparseOpticalFlow TakeBinaryRegions Threshold WarpAffine WarpPerspective Inherited Members Combinator<TSource, TResult>.Process(IObservable<TSource>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [WorkflowElementCategory(ElementCategory.Transform)] public abstract class Transform<TSource, TResult> : Combinator<TSource, TResult> Type Parameters Name Description TSource The type of the elements in the source sequence. TResult The type of the elements in the result sequence."
  },
  "api/Bonsai.TypeVisualizerAttribute.html": {
    "href": "api/Bonsai.TypeVisualizerAttribute.html",
    "title": "Class TypeVisualizerAttribute",
    "keywords": "Class TypeVisualizerAttribute Determines the type of visualizer used to display the target of the attribute. Inheritance Object Attribute TypeVisualizerAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)] public sealed class TypeVisualizerAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source TypeVisualizerAttribute(String) Initializes a new instance of the TypeVisualizerAttribute class with the specified visualizer type name. Declaration public TypeVisualizerAttribute(string visualizerTypeName) Parameters Type Name Description String visualizerTypeName A String specifying the assembly qualified name of a visualizer that can be used to display the type this attribute is bound to. | Improve this Doc View Source TypeVisualizerAttribute(Type) Initializes a new instance of the TypeVisualizerAttribute class with the specified visualizer type. Declaration public TypeVisualizerAttribute(Type visualizer) Parameters Type Name Description Type visualizer The Type of a visualizer that can be used to display the type this attribute is bound to. Properties | Improve this Doc View Source Target Gets or sets the type that is the target of the attribute. Declaration public Type Target { get; set; } Property Value Type Description Type | Improve this Doc View Source TargetTypeName Gets or sets the assembly qualified name of the type that is the target of the attribute. Declaration public string TargetTypeName { get; set; } Property Value Type Description String | Improve this Doc View Source VisualizerTypeName Gets the assembly qualified name of the visualizer class. Declaration public string VisualizerTypeName { get; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.UnidimensionalArrayConverter.html": {
    "href": "api/Bonsai.UnidimensionalArrayConverter.html",
    "title": "Class UnidimensionalArrayConverter",
    "keywords": "Class UnidimensionalArrayConverter Provides a type converter to convert one-dimensional Array objects to and from various other representations. Inheritance Object TypeConverter UnidimensionalArrayConverter Inherited Members TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public class UnidimensionalArrayConverter : TypeConverter Methods | Improve this Doc View Source CanConvertFrom(ITypeDescriptorContext, Type) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context. Declaration public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. Type sourceType A Type that represents the type you want to convert from. Returns Type Description Boolean true if this converter can perform the conversion; otherwise, false . Overrides TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type) | Improve this Doc View Source ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) Converts the given object to the type of this converter, using the specified context and culture information. Declaration public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture The CultureInfo to use as the current culture. Object value The Object to convert. Returns Type Description Object An Object that represents the converted value. Overrides TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) | Improve this Doc View Source ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) Converts the given value object to the specified type, using the specified context and culture information. Declaration public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) Parameters Type Name Description ITypeDescriptorContext context An ITypeDescriptorContext that provides a format context. CultureInfo culture A CultureInfo . If null is passed, the current culture is assumed. Object value The Object to convert. Type destinationType The Type to convert the value parameter to. Returns Type Description Object An Object that represents the converted value. Overrides TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)"
  },
  "api/Bonsai.Vision.AdaptiveThreshold.html": {
    "href": "api/Bonsai.Vision.AdaptiveThreshold.html",
    "title": "Class AdaptiveThreshold",
    "keywords": "Class AdaptiveThreshold Represents an operator that applies an adaptive threshold to every grayscale image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > AdaptiveThreshold Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class AdaptiveThreshold : Transform<IplImage, IplImage> Properties | Improve this Doc View Source AdaptiveMethod Gets or sets a value specifying the adaptive threshold algorithm used to process the image. Declaration public AdaptiveThresholdMethod AdaptiveMethod { get; set; } Property Value Type Description AdaptiveThresholdMethod | Improve this Doc View Source BlockSize Gets or sets the size of the pixel neighborhood used to calculate the threshold for a pixel. Declaration [Precision(0, 2)] [Range(3, 2147483647)] [TypeConverter(typeof(OddKernelSizeConverter))] public int BlockSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MaxValue Gets or sets the value assigned to pixels determined to be above the threshold. Declaration public double MaxValue { get; set; } Property Value Type Description Double | Improve this Doc View Source Parameter Gets or sets an algorithm dependent constant subtracted from the mean or weighted mean. Declaration public double Parameter { get; set; } Property Value Type Description Double | Improve this Doc View Source ThresholdType Gets or sets the a value specifying the type of binary threshold to apply to individual pixels. Declaration public ThresholdTypes ThresholdType { get; set; } Property Value Type Description ThresholdTypes Methods | Improve this Doc View Source Process(IObservable<IplImage>) Applies an adaptive threshold to every grayscale image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to threshold. Returns Type Description IObservable < IplImage > The sequence of thresholded images. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.AffineTransform.html": {
    "href": "api/Bonsai.Vision.AffineTransform.html",
    "title": "Class AffineTransform",
    "keywords": "Class AffineTransform Represents an operator that creates an affine transformation matrix specified by a translation, rotation and scale. Inheritance Object Combinator < Mat > AffineTransform Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax [WorkflowElementCategory(ElementCategory.Source)] public class AffineTransform : Combinator<Mat> Constructors | Improve this Doc View Source AffineTransform() Initializes a new instance of the AffineTransform class. Declaration public AffineTransform() Properties | Improve this Doc View Source Pivot Gets or sets the pivot around which to scale or rotate the image. Declaration public Point2f Pivot { get; set; } Property Value Type Description Point2f | Improve this Doc View Source Rotation Gets or sets the rotation angle around the pivot, in radians. Declaration [Range(-3.1415926535897931, 3.1415926535897931)] public float Rotation { get; set; } Property Value Type Description Single | Improve this Doc View Source Scale Gets or sets the scale factor to apply to individual image dimensions. Declaration public Point2f Scale { get; set; } Property Value Type Description Point2f | Improve this Doc View Source Translation Gets or sets the translation vector to apply to the image. Declaration public Point2f Translation { get; set; } Property Value Type Description Point2f Methods | Improve this Doc View Source Process() Generates an observable sequence that contains an affine transformation matrix specified by a translation, rotation and scale. Declaration public IObservable<Mat> Process() Returns Type Description IObservable < Mat > A sequence containing a single instance of the Mat class representing an affine transformation matrix. | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Generates an observable sequence of affine transformation matrices using the specified translation, rotation and scale, and where each matrix is emitted only when an observable sequence emits a notification. Declaration public override IObservable<Mat> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new affine transformation matrices. Returns Type Description IObservable < Mat > A sequence of Mat objects where each element represents an affine transformation matrix. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator<OpenCV.Net.Mat>.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Vision.ApproximatePolygon.html": {
    "href": "api/Bonsai.Vision.ApproximatePolygon.html",
    "title": "Class ApproximatePolygon",
    "keywords": "Class ApproximatePolygon Represents an operator that approximates each polygonal curve in the sequence with the specified precision. Inheritance Object Combinator < Contours , Contours > Transform < Contours , Contours > ApproximatePolygon Inherited Members Combinator<Contours, Contours>.Process(IObservable<Contours>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class ApproximatePolygon : Transform<Contours, Contours> Properties | Improve this Doc View Source Eps Gets or sets the desired approximation accuracy. Declaration public double Eps { get; set; } Property Value Type Description Double | Improve this Doc View Source Method Gets or sets a value specifying the polygon approximation method. Declaration public PolygonApproximation Method { get; set; } Property Value Type Description PolygonApproximation | Improve this Doc View Source Recursive Gets or sets a value specifying whether approximation should proceed for all hierarchical levels. Declaration public bool Recursive { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Process(IObservable<Contours>) Approximates each polygonal curve in an observable sequence with the specified precision. Declaration public override IObservable<Contours> Process(IObservable<Contours> source) Parameters Type Name Description IObservable < Contours > source A sequence of polygonal curves to approximate. Returns Type Description IObservable < Contours > A sequence of the approximated polygonal curves. Overrides Bonsai.Combinator<Bonsai.Vision.Contours, Bonsai.Vision.Contours>.Process(System.IObservable<Bonsai.Vision.Contours>)"
  },
  "api/Bonsai.Vision.AverageBinaryRegion.html": {
    "href": "api/Bonsai.Vision.AverageBinaryRegion.html",
    "title": "Class AverageBinaryRegion",
    "keywords": "Class AverageBinaryRegion Represents an operator that computes the average binary region from each collection of connected components in the sequence. Inheritance Object Combinator < ConnectedComponentCollection , ConnectedComponent > Transform < ConnectedComponentCollection , ConnectedComponent > AverageBinaryRegion Inherited Members Combinator<ConnectedComponentCollection, ConnectedComponent>.Process(IObservable<ConnectedComponentCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class AverageBinaryRegion : Transform<ConnectedComponentCollection, ConnectedComponent> Methods | Improve this Doc View Source Process(IObservable<ConnectedComponentCollection>) Computes the average binary region from each collection of connected components in an observable sequence. Declaration public override IObservable<ConnectedComponent> Process(IObservable<ConnectedComponentCollection> source) Parameters Type Name Description IObservable < ConnectedComponentCollection > source A sequence of ConnectedComponentCollection objects. Returns Type Description IObservable < ConnectedComponent > A ConnectedComponent representing the average binary region from each collection of connected components in the source sequence. Overrides Bonsai.Combinator<Bonsai.Vision.ConnectedComponentCollection, Bonsai.Vision.ConnectedComponent>.Process(System.IObservable<Bonsai.Vision.ConnectedComponentCollection>)"
  },
  "api/Bonsai.Vision.BackgroundSubtraction.html": {
    "href": "api/Bonsai.Vision.BackgroundSubtraction.html",
    "title": "Class BackgroundSubtraction",
    "keywords": "Class BackgroundSubtraction Represents an operator that performs image segmentation of every frame in the sequence using an online estimation of the background. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > BackgroundSubtraction Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class BackgroundSubtraction : Transform<IplImage, IplImage> Properties | Improve this Doc View Source AdaptationRate Gets or sets a value determining how fast the online estimation of the background is adapted. Declaration [Range(0, 1)] [Precision(2, 0.01)] public double AdaptationRate { get; set; } Property Value Type Description Double | Improve this Doc View Source BackgroundFrames Gets or sets the number of frames to use for initial background estimation. Declaration public int BackgroundFrames { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SubtractionMethod Gets or sets a value specifying the subtraction method used to isolate foreground pixels. Declaration public SubtractionMethod SubtractionMethod { get; set; } Property Value Type Description SubtractionMethod | Improve this Doc View Source ThresholdType Gets or sets a value specifying the type of threshold to apply to individual pixels. Declaration [TypeConverter(typeof(BackgroundSubtraction.ThresholdTypeConverter))] public ThresholdTypes ThresholdType { get; set; } Property Value Type Description ThresholdTypes | Improve this Doc View Source ThresholdValue Gets or sets the threshold value used to test whether individual pixels are foreground or background. Declaration [Range(0, 255)] [Precision(0, 1)] public double ThresholdValue { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Process(IObservable<IplImage>) Performs image segmentation of every frame in an observable sequence using an online estimation of the background. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of frames on which to perform image segmentation. Returns Type Description IObservable < IplImage > The sequence of images which have been segmented into foreground and background pixels. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.BinaryRegionAnalysis.html": {
    "href": "api/Bonsai.Vision.BinaryRegionAnalysis.html",
    "title": "Class BinaryRegionAnalysis",
    "keywords": "Class BinaryRegionAnalysis Represents an operator that computes image moments from polygonal contours or individual frames in the sequence to extract binary region properties. Inheritance Object Combinator < Contours , ConnectedComponentCollection > Transform < Contours , ConnectedComponentCollection > BinaryRegionAnalysis Inherited Members Combinator<Contours, ConnectedComponentCollection>.Process(IObservable<Contours>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class BinaryRegionAnalysis : Transform<Contours, ConnectedComponentCollection> Remarks If the area of any of the extracted connected components is zero, the centroid and orientation angle for that connected component will be set to NaN . Methods | Improve this Doc View Source Process(IObservable<Contours>) Computes image moments from polygonal contours in an observable sequence to extract binary region properties. Declaration public override IObservable<ConnectedComponentCollection> Process(IObservable<Contours> source) Parameters Type Name Description IObservable < Contours > source A sequence of hierarchical polygonal contours for which to compute binary region properties. Returns Type Description IObservable < ConnectedComponentCollection > A sequence of ConnectedComponentCollection objects containing the binary region measurements for all the polygons in the hierarchy of polygonal contours. Overrides Bonsai.Combinator<Bonsai.Vision.Contours, Bonsai.Vision.ConnectedComponentCollection>.Process(System.IObservable<Bonsai.Vision.Contours>) | Improve this Doc View Source Process(IObservable<IplImage>) Computes image moments from individual frames in an observable sequence to extract binary region properties. Declaration public IObservable<ConnectedComponent> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source A sequence of rasterized shapes where every non-zero pixel is treated as having a weight of one. Returns Type Description IObservable < ConnectedComponent > A sequence of ConnectedComponent objects containing the binary region measurements for all the pixels in the image considered as a single object. | Improve this Doc View Source Process(IObservable<Seq>) Computes image moments from individual polygons in an observable sequence to extract binary region properties. Declaration public IObservable<ConnectedComponent> Process(IObservable<Seq> source) Parameters Type Name Description IObservable < Seq > source A sequence of polygons for which to compute binary region properties. Returns Type Description IObservable < ConnectedComponent > A sequence of ConnectedComponent objects containing the binary region measurements for all the polygons in the sequence. | Improve this Doc View Source Process(IObservable<Tuple<Contours, IplImage>>) Computes image moments from polygonal contours in an observable sequence to extract binary region properties, where each binary region will be associated with a corresponding patch of pixels. Declaration public IObservable<ConnectedComponentCollection> Process(IObservable<Tuple<Contours, IplImage>> source) Parameters Type Name Description IObservable < Tuple < Contours , IplImage >> source A sequence of hierarchical polygonal contours for which to compute binary region properties, paired with the image from which they were extracted. Returns Type Description IObservable < ConnectedComponentCollection > A sequence of ConnectedComponentCollection objects containing the binary region measurements for all the polygons in the hierarchy of polygonal contours. Each binary region will be associated with the subregion of the paired image corresponding to the bounding box of the binary region shape."
  },
  "api/Bonsai.Vision.BinaryRegionExtremes.html": {
    "href": "api/Bonsai.Vision.BinaryRegionExtremes.html",
    "title": "Class BinaryRegionExtremes",
    "keywords": "Class BinaryRegionExtremes Represents an operator that computes the extremities, or endpoints, of each connected component in the sequence. Inheritance Object Combinator < ConnectedComponent , Tuple < Point2f , Point2f >> Transform < ConnectedComponent , Tuple < Point2f , Point2f >> BinaryRegionExtremes Inherited Members Combinator<ConnectedComponent, Tuple<Point2f, Point2f>>.Process(IObservable<ConnectedComponent>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax [TypeVisualizer(\"Bonsai.Vision.Design.BinaryRegionExtremesVisualizer, Bonsai.Vision.Design\")] public class BinaryRegionExtremes : Transform<ConnectedComponent, Tuple<Point2f, Point2f>> Properties | Improve this Doc View Source Method Gets or sets a value specifying the method used to compute the extremities of each connected component. Declaration public FindExtremesMethod Method { get; set; } Property Value Type Description FindExtremesMethod Methods | Improve this Doc View Source Process(IObservable<ConnectedComponent>) Computes the extremities, or endpoints, of each connected component in an observable sequence. Declaration public override IObservable<Tuple<Point2f, Point2f>> Process(IObservable<ConnectedComponent> source) Parameters Type Name Description IObservable < ConnectedComponent > source The sequence of connected components for which to compute the extremities. Returns Type Description IObservable < Tuple < Point2f , Point2f >> A pair of vertices specifying the two extremities, or endpoints, of each connected component in the sequence. If the connected component has no vertices, the endpoint coordinates will be set to NaN . Overrides Bonsai.Combinator<Bonsai.Vision.ConnectedComponent, System.Tuple<OpenCV.Net.Point2f, OpenCV.Net.Point2f>>.Process(System.IObservable<Bonsai.Vision.ConnectedComponent>)"
  },
  "api/Bonsai.Vision.CalibrateCameraChessboard.html": {
    "href": "api/Bonsai.Vision.CalibrateCameraChessboard.html",
    "title": "Class CalibrateCameraChessboard",
    "keywords": "Class CalibrateCameraChessboard Represents an operator that finds the camera intrinsic parameters from several views of a chessboard calibration pattern. Inheritance Object Combinator < KeyPointCollection [], CameraCalibration > Transform < KeyPointCollection [], CameraCalibration > CalibrateCameraChessboard Inherited Members Combinator<KeyPointCollection[], CameraCalibration>.Process(IObservable<KeyPointCollection[]>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class CalibrateCameraChessboard : Transform<KeyPointCollection[], CameraCalibration> Properties | Improve this Doc View Source CalibrationFlags Gets or sets a value specifying the operation flags used for calibrating camera intrinsics. Declaration public CameraCalibrationFlags CalibrationFlags { get; set; } Property Value Type Description CameraCalibrationFlags | Improve this Doc View Source PatternSize Gets or sets the number of inner corners per chessboard row and column. Declaration public Size PatternSize { get; set; } Property Value Type Description Size Methods | Improve this Doc View Source Process(IObservable<KeyPointCollection[]>) Finds the camera intrinsic parameters from an observable sequence of batches of views of a chessboard calibration pattern. Declaration public override IObservable<CameraCalibration> Process(IObservable<KeyPointCollection[]> source) Parameters Type Name Description IObservable < KeyPointCollection []> source A sequence of image features extracted from different views of a chessboard calibration pattern. Returns Type Description IObservable < CameraCalibration > A sequence of CameraCalibration objects containing the camera intrinsic parameters and current re-projection error after processing each batch of views of the chessboard pattern. Overrides Bonsai.Combinator<Bonsai.Vision.KeyPointCollection[], Bonsai.Vision.CameraCalibration>.Process(System.IObservable<Bonsai.Vision.KeyPointCollection[]>) | Improve this Doc View Source Process(IObservable<KeyPointCollection>) Finds the camera intrinsic parameters from an observable sequence of views of a chessboard calibration pattern. Declaration public IObservable<CameraCalibration> Process(IObservable<KeyPointCollection> source) Parameters Type Name Description IObservable < KeyPointCollection > source A sequence of image features extracted from different views of a chessboard calibration pattern. Returns Type Description IObservable < CameraCalibration > A sequence of CameraCalibration objects containing the camera intrinsic parameters and current re-projection error after processing each view of the chessboard pattern."
  },
  "api/Bonsai.Vision.CameraCalibration.html": {
    "href": "api/Bonsai.Vision.CameraCalibration.html",
    "title": "Struct CameraCalibration",
    "keywords": "Struct CameraCalibration Represents the result of a camera calibration algorithm, including the camera intrinsic parameters and an estimate of the re-projection error. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public struct CameraCalibration Fields | Improve this Doc View Source Intrinsics The parameters that describe the camera intrinsic properties such as the focal length or lens distortion. Declaration public Intrinsics Intrinsics Field Value Type Description Intrinsics | Improve this Doc View Source ReprojectionError The final re-projection error of the camera calibration. Declaration public double ReprojectionError Field Value Type Description Double Methods | Improve this Doc View Source ToString() Creates a String representation of this CameraCalibration structure. Declaration public override string ToString() Returns Type Description String A String containing all the parameter values of this CameraCalibration structure. Overrides ValueType.ToString()"
  },
  "api/Bonsai.Vision.CameraCapture.html": {
    "href": "api/Bonsai.Vision.CameraCapture.html",
    "title": "Class CameraCapture",
    "keywords": "Class CameraCapture Represents an operator that generates a sequence of images acquired from the specified camera. Inheritance Object Source < IplImage > CameraCapture Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax [WorkflowElementIcon(typeof(ElementCategory), \"ElementIcon.Video\")] public class CameraCapture : Source<IplImage> Constructors | Improve this Doc View Source CameraCapture() Initializes a new instance of the CameraCapture class. Declaration public CameraCapture() Properties | Improve this Doc View Source CaptureProperties Gets the set of capture properties assigned to the camera. Declaration public CapturePropertyCollection CaptureProperties { get; } Property Value Type Description CapturePropertyCollection | Improve this Doc View Source Index Gets or sets the index of the camera from which to acquire images. Declaration public int Index { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Generate() Generates an observable sequence of images acquired from the camera with the specified index. Declaration public override IObservable<IplImage> Generate() Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing each frame acquired from the camera. Overrides Bonsai.Source<OpenCV.Net.IplImage>.Generate()"
  },
  "api/Bonsai.Vision.Canny.html": {
    "href": "api/Bonsai.Vision.Canny.html",
    "title": "Class Canny",
    "keywords": "Class Canny Represents an operator that applies the Canny algorithm for edge detection to each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > Canny Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Canny : Transform<IplImage, IplImage> Properties | Improve this Doc View Source ApertureSize Gets or sets the aperture parameter for the Sobel operator. Declaration [Range(3, 7)] [Precision(0, 2)] [TypeConverter(typeof(OddKernelSizeConverter))] public int ApertureSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Threshold1 Gets or sets the first threshold. The smallest threshold is used for edge linking and the largest to find initial edge segments. Declaration [Range(0, 2147483647)] public double Threshold1 { get; set; } Property Value Type Description Double | Improve this Doc View Source Threshold2 Gets or sets the second threshold. The smallest threshold is used for edge linking and the largest to find initial edge segments. Declaration [Range(0, 2147483647)] public double Threshold2 { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Process(IObservable<IplImage>) Applies the Canny algorithm for edge detection to each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images from which to extract edges. Returns Type Description IObservable < IplImage > A sequence of IplImage objects where each non-zero pixel represents an image element which has been classified as an edge. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.CapturePosition.html": {
    "href": "api/Bonsai.Vision.CapturePosition.html",
    "title": "Enum CapturePosition",
    "keywords": "Enum CapturePosition Specifies the units of the file capture start position. Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public enum CapturePosition Fields Name Description AviRatio A relative position in the file, where zero is the start of the video and one is the end of the video. Frames The zero-based index of a video frame. Milliseconds A value in milliseconds representing time from the start of the video."
  },
  "api/Bonsai.Vision.CapturePropertyAssignment.html": {
    "href": "api/Bonsai.Vision.CapturePropertyAssignment.html",
    "title": "Class CapturePropertyAssignment",
    "keywords": "Class CapturePropertyAssignment Represents a value that will be assigned to the specified camera or video file property upon initialization. Inheritance Object CapturePropertyAssignment Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class CapturePropertyAssignment Properties | Improve this Doc View Source Property Gets or sets the property that the value will be assigned to. Declaration public CaptureProperty Property { get; set; } Property Value Type Description CaptureProperty | Improve this Doc View Source Value Gets or sets the value to be assigned to the property. Declaration public double Value { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source ToString() Creates a String representation of this CapturePropertyAssignment object. Declaration public override string ToString() Returns Type Description String A String containing the name of the property and the value to be assigned by this CapturePropertyAssignment object. Overrides Object.ToString()"
  },
  "api/Bonsai.Vision.CapturePropertyCollection.html": {
    "href": "api/Bonsai.Vision.CapturePropertyCollection.html",
    "title": "Class CapturePropertyCollection",
    "keywords": "Class CapturePropertyCollection Represents a collection of property values that will be assigned to the specified camera or video file upon initialization. Inheritance Object Collection < CapturePropertyAssignment > CapturePropertyCollection Implements IList < CapturePropertyAssignment > ICollection < CapturePropertyAssignment > IList ICollection IReadOnlyList < CapturePropertyAssignment > IReadOnlyCollection < CapturePropertyAssignment > IEnumerable < CapturePropertyAssignment > IEnumerable Inherited Members Collection<CapturePropertyAssignment>.Add(CapturePropertyAssignment) Collection<CapturePropertyAssignment>.Clear() Collection<CapturePropertyAssignment>.CopyTo(CapturePropertyAssignment[], Int32) Collection<CapturePropertyAssignment>.Contains(CapturePropertyAssignment) Collection<CapturePropertyAssignment>.GetEnumerator() Collection<CapturePropertyAssignment>.IndexOf(CapturePropertyAssignment) Collection<CapturePropertyAssignment>.Insert(Int32, CapturePropertyAssignment) Collection<CapturePropertyAssignment>.Remove(CapturePropertyAssignment) Collection<CapturePropertyAssignment>.RemoveAt(Int32) Collection<CapturePropertyAssignment>.ClearItems() Collection<CapturePropertyAssignment>.InsertItem(Int32, CapturePropertyAssignment) Collection<CapturePropertyAssignment>.RemoveItem(Int32) Collection<CapturePropertyAssignment>.SetItem(Int32, CapturePropertyAssignment) Collection<CapturePropertyAssignment>.IEnumerable.GetEnumerator() Collection<CapturePropertyAssignment>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Vision.CapturePropertyAssignment>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Vision.CapturePropertyAssignment>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<CapturePropertyAssignment>.IList.Add(Object) Collection<CapturePropertyAssignment>.IList.Contains(Object) Collection<CapturePropertyAssignment>.IList.IndexOf(Object) Collection<CapturePropertyAssignment>.IList.Insert(Int32, Object) Collection<CapturePropertyAssignment>.IList.Remove(Object) Collection<CapturePropertyAssignment>.Count Collection<CapturePropertyAssignment>.Items Collection<CapturePropertyAssignment>.Item[Int32] Collection<CapturePropertyAssignment>.ICollection<CapturePropertyAssignment>.IsReadOnly Collection<CapturePropertyAssignment>.ICollection.IsSynchronized Collection<CapturePropertyAssignment>.ICollection.SyncRoot Collection<CapturePropertyAssignment>.IList.Item[Int32] Collection<CapturePropertyAssignment>.IList.IsReadOnly Collection<CapturePropertyAssignment>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax [TypeConverter(\"Bonsai.Vision.Design.CapturePropertyCollectionConverter, Bonsai.Vision.Design\")] public class CapturePropertyCollection : Collection<CapturePropertyAssignment>, IList<CapturePropertyAssignment>, ICollection<CapturePropertyAssignment>, IList, ICollection, IReadOnlyList<CapturePropertyAssignment>, IReadOnlyCollection<CapturePropertyAssignment>, IEnumerable<CapturePropertyAssignment>, IEnumerable Properties | Improve this Doc View Source Capture Gets the video capture stream that the properties will be assigned to. Declaration public Capture Capture { get; } Property Value Type Description Capture Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Vision.Centroid.html": {
    "href": "api/Bonsai.Vision.Centroid.html",
    "title": "Class Centroid",
    "keywords": "Class Centroid Represents an operator that computes the centroid of each set of points, image moments, or polygonal contour in the sequence. Inheritance Object Combinator < Point [], Point2f > Transform < Point [], Point2f > Centroid Inherited Members Combinator<Point[], Point2f>.Process(IObservable<Point[]>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Centroid : Transform<Point[], Point2f> Methods | Improve this Doc View Source Process(IObservable<ConnectedComponent>) Extracts the centroid of each connected component in an observable sequence. Declaration public IObservable<Point2f> Process(IObservable<ConnectedComponent> source) Parameters Type Name Description IObservable < ConnectedComponent > source The sequence of ConnectedComponent objects for which to extract the centroid. Returns Type Description IObservable < Point2f > A Point2f value representing the centroid of each connected component in the sequence. | Improve this Doc View Source Process(IObservable<Contour>) Computes the centroid of each polygonal contour in an observable sequence. Declaration public IObservable<Point2f> Process(IObservable<Contour> source) Parameters Type Name Description IObservable < Contour > source The sequence of Contour objects for which to compute the centroid. Returns Type Description IObservable < Point2f > A Point2f value representing the centroid of each polygonal contour in the sequence. | Improve this Doc View Source Process(IObservable<IplImage>) Computes the centroid of each image in an observable sequence. Declaration public IObservable<Point2f> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images for which to compute the centroid, where each pixel is weighed according to its intensity value. Returns Type Description IObservable < Point2f > A Point2f value representing the centroid of each image in the sequence. | Improve this Doc View Source Process(IObservable<Point[]>) Computes the centroid of each array of points in an observable sequence. Declaration public override IObservable<Point2f> Process(IObservable<Point[]> source) Parameters Type Name Description IObservable < Point []> source The sequence of Point arrays for which to compute the centroid. Returns Type Description IObservable < Point2f > A Point2f value representing the centroid of each of the array of points in the sequence. Overrides Bonsai.Combinator<OpenCV.Net.Point[], OpenCV.Net.Point2f>.Process(System.IObservable<OpenCV.Net.Point[]>) | Improve this Doc View Source Process(IObservable<Point2f[]>) Computes the centroid of each array of points in an observable sequence. Declaration public IObservable<Point2f> Process(IObservable<Point2f[]> source) Parameters Type Name Description IObservable < Point2f []> source The sequence of Point2f arrays for which to compute the centroid. Returns Type Description IObservable < Point2f > A Point2f value representing the centroid of each of the array of points in the sequence. | Improve this Doc View Source Process(IObservable<IEnumerable<Point>>) Computes the centroid of each collection of points in an observable sequence. Declaration public IObservable<Point2f> Process(IObservable<IEnumerable<Point>> source) Parameters Type Name Description IObservable < IEnumerable < Point >> source The sequence of Point collections for which to compute the centroid. Returns Type Description IObservable < Point2f > A Point2f value representing the centroid of each collection of points in the sequence. | Improve this Doc View Source Process(IObservable<IEnumerable<Point2f>>) Computes the centroid of each collection of points in an observable sequence. Declaration public IObservable<Point2f> Process(IObservable<IEnumerable<Point2f>> source) Parameters Type Name Description IObservable < IEnumerable < Point2f >> source The sequence of Point2f collections for which to compute the centroid. Returns Type Description IObservable < Point2f > A Point2f value representing the centroid of each collection of points in the sequence."
  },
  "api/Bonsai.Vision.Circle.html": {
    "href": "api/Bonsai.Vision.Circle.html",
    "title": "Struct Circle",
    "keywords": "Struct Circle Represents the parameters of a circle. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public struct Circle Fields | Improve this Doc View Source Center The center of the circle. Declaration public Point2f Center Field Value Type Description Point2f | Improve this Doc View Source Radius The radius of the circle. Declaration public float Radius Field Value Type Description Single Methods | Improve this Doc View Source ToString() Creates a String representation of this Circle structure. Declaration public override string ToString() Returns Type Description String A String containing all the parameter values of this Circle structure. Overrides ValueType.ToString()"
  },
  "api/Bonsai.Vision.ColorBalance.html": {
    "href": "api/Bonsai.Vision.ColorBalance.html",
    "title": "Class ColorBalance",
    "keywords": "Class ColorBalance Represents an operator that applies an independent scale to the color channels of every image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > ColorBalance Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class ColorBalance : Transform<IplImage, IplImage> Properties | Improve this Doc View Source Scale Gets or sets the scale factor applied to every color channel of the image. Declaration [Precision(2, 0.01)] [Range(0, 2147483647)] [TypeConverter(typeof(BgraScalarConverter))] public Scalar Scale { get; set; } Property Value Type Description Scalar Methods | Improve this Doc View Source Process(IObservable<IplImage>) Applies an independent scale to the color channels of every image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source A sequence of multi-channel images. Returns Type Description IObservable < IplImage > A sequence of IplImage objects where every channel has been multiplied by the corresponding scale factor. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.CompressionParameterAssignment.html": {
    "href": "api/Bonsai.Vision.CompressionParameterAssignment.html",
    "title": "Class CompressionParameterAssignment",
    "keywords": "Class CompressionParameterAssignment Provides an abstract base class for configuring various image compression parameters. Inheritance Object CompressionParameterAssignment JpegQuality PngBiLevelCompression PngCompressionLevel PngCompressionStrategy PxmBinaryFormat Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public abstract class CompressionParameterAssignment Methods | Improve this Doc View Source ToString() Creates a String representation of the compression parameter. Declaration public override string ToString() Returns Type Description String A String containing the parameter name and the value to be assigned by this object. Overrides Object.ToString()"
  },
  "api/Bonsai.Vision.CompressionParameterCollection.html": {
    "href": "api/Bonsai.Vision.CompressionParameterCollection.html",
    "title": "Class CompressionParameterCollection",
    "keywords": "Class CompressionParameterCollection Represents a collection of compression parameters used to encode individual images in the EncodeImage operator. Inheritance Object Collection < CompressionParameterAssignment > CompressionParameterCollection Implements IList < CompressionParameterAssignment > ICollection < CompressionParameterAssignment > IList ICollection IReadOnlyList < CompressionParameterAssignment > IReadOnlyCollection < CompressionParameterAssignment > IEnumerable < CompressionParameterAssignment > IEnumerable Inherited Members Collection<CompressionParameterAssignment>.Add(CompressionParameterAssignment) Collection<CompressionParameterAssignment>.Clear() Collection<CompressionParameterAssignment>.CopyTo(CompressionParameterAssignment[], Int32) Collection<CompressionParameterAssignment>.Contains(CompressionParameterAssignment) Collection<CompressionParameterAssignment>.GetEnumerator() Collection<CompressionParameterAssignment>.IndexOf(CompressionParameterAssignment) Collection<CompressionParameterAssignment>.Insert(Int32, CompressionParameterAssignment) Collection<CompressionParameterAssignment>.Remove(CompressionParameterAssignment) Collection<CompressionParameterAssignment>.RemoveAt(Int32) Collection<CompressionParameterAssignment>.ClearItems() Collection<CompressionParameterAssignment>.InsertItem(Int32, CompressionParameterAssignment) Collection<CompressionParameterAssignment>.RemoveItem(Int32) Collection<CompressionParameterAssignment>.SetItem(Int32, CompressionParameterAssignment) Collection<CompressionParameterAssignment>.IEnumerable.GetEnumerator() Collection<CompressionParameterAssignment>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Vision.CompressionParameterAssignment>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Vision.CompressionParameterAssignment>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<CompressionParameterAssignment>.IList.Add(Object) Collection<CompressionParameterAssignment>.IList.Contains(Object) Collection<CompressionParameterAssignment>.IList.IndexOf(Object) Collection<CompressionParameterAssignment>.IList.Insert(Int32, Object) Collection<CompressionParameterAssignment>.IList.Remove(Object) Collection<CompressionParameterAssignment>.Count Collection<CompressionParameterAssignment>.Items Collection<CompressionParameterAssignment>.Item[Int32] Collection<CompressionParameterAssignment>.ICollection<CompressionParameterAssignment>.IsReadOnly Collection<CompressionParameterAssignment>.ICollection.IsSynchronized Collection<CompressionParameterAssignment>.ICollection.SyncRoot Collection<CompressionParameterAssignment>.IList.Item[Int32] Collection<CompressionParameterAssignment>.IList.IsReadOnly Collection<CompressionParameterAssignment>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class CompressionParameterCollection : Collection<CompressionParameterAssignment>, IList<CompressionParameterAssignment>, ICollection<CompressionParameterAssignment>, IList, ICollection, IReadOnlyList<CompressionParameterAssignment>, IReadOnlyCollection<CompressionParameterAssignment>, IEnumerable<CompressionParameterAssignment>, IEnumerable Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Vision.ConnectedComponent.html": {
    "href": "api/Bonsai.Vision.ConnectedComponent.html",
    "title": "Class ConnectedComponent",
    "keywords": "Class ConnectedComponent Represents a collection of measurements extracted from a cluster of connected pixels in an image. Inheritance Object ConnectedComponent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class ConnectedComponent Properties | Improve this Doc View Source Area Gets or sets the number of pixels in the connected component. Declaration public double Area { get; set; } Property Value Type Description Double | Improve this Doc View Source Centroid Gets or sets the center of mass of the connected component. Declaration public Point2f Centroid { get; set; } Property Value Type Description Point2f | Improve this Doc View Source Contour Gets or sets the polygonal contour from which the connected component properties were extracted. This property might be null if the connected component was created from an image. Declaration public Contour Contour { get; set; } Property Value Type Description Contour | Improve this Doc View Source MajorAxisLength Gets or sets the length, in pixels, of the major axis of the ellipse fit to the connected component. Declaration public double MajorAxisLength { get; set; } Property Value Type Description Double | Improve this Doc View Source MinorAxisLength Gets or sets the length, in pixels, of the minor axis of the ellipse fit to the connected component. Declaration public double MinorAxisLength { get; set; } Property Value Type Description Double | Improve this Doc View Source Orientation Gets or sets the angle, in radians, between the x-axis and the major axis of the ellipse fit to the connected component. Declaration public double Orientation { get; set; } Property Value Type Description Double | Improve this Doc View Source Patch Gets or sets the image subregion corresponding to the bounding box of the connected component. This property might be null if the connected component was created from a polygonal contour. Declaration public IplImage Patch { get; set; } Property Value Type Description IplImage Methods | Improve this Doc View Source FromContour(Seq) Returns a ConnectedComponent derived from the spatial moments of the specified polygon. Declaration public static ConnectedComponent FromContour(Seq currentContour) Parameters Type Name Description Seq currentContour The polygon from which to derive the spatial moments used to initialize the ConnectedComponent . Returns Type Description ConnectedComponent A ConnectedComponent object derived from the spatial moments of the polygon. If the area of the connected component is zero, the centroid and orientation angle will be set to NaN . | Improve this Doc View Source FromImage(IplImage, Boolean) Returns a ConnectedComponent derived from the spatial moments of the specified image. Declaration public static ConnectedComponent FromImage(IplImage image, bool binary = false) Parameters Type Name Description IplImage image The image from which to derive the spatial moments used to initialize the ConnectedComponent . Boolean binary Specifies whether all non-zero pixels should be treated as having a weight of one. Returns Type Description ConnectedComponent A ConnectedComponent object derived from the spatial moments of the image. If the area of the connected component is zero, the centroid and orientation angle will be set to NaN . | Improve this Doc View Source FromMoments(Moments) Returns a ConnectedComponent derived from the spatial moments of a polygon or rasterized shape. Declaration public static ConnectedComponent FromMoments(Moments moments) Parameters Type Name Description Moments moments The spatial moments up to third order of a polygon or rasterized shape. Returns Type Description ConnectedComponent A ConnectedComponent object derived from the specified spatial moments. If the area of the connected component is zero, the centroid and orientation angle will be set to NaN ."
  },
  "api/Bonsai.Vision.ConnectedComponentCollection.html": {
    "href": "api/Bonsai.Vision.ConnectedComponentCollection.html",
    "title": "Class ConnectedComponentCollection",
    "keywords": "Class ConnectedComponentCollection Represents a collection of connected components. Inheritance Object Collection < ConnectedComponent > ConnectedComponentCollection Implements IList < ConnectedComponent > ICollection < ConnectedComponent > IList ICollection IReadOnlyList < ConnectedComponent > IReadOnlyCollection < ConnectedComponent > IEnumerable < ConnectedComponent > IEnumerable Inherited Members Collection<ConnectedComponent>.Add(ConnectedComponent) Collection<ConnectedComponent>.Clear() Collection<ConnectedComponent>.CopyTo(ConnectedComponent[], Int32) Collection<ConnectedComponent>.Contains(ConnectedComponent) Collection<ConnectedComponent>.GetEnumerator() Collection<ConnectedComponent>.IndexOf(ConnectedComponent) Collection<ConnectedComponent>.Insert(Int32, ConnectedComponent) Collection<ConnectedComponent>.Remove(ConnectedComponent) Collection<ConnectedComponent>.RemoveAt(Int32) Collection<ConnectedComponent>.ClearItems() Collection<ConnectedComponent>.InsertItem(Int32, ConnectedComponent) Collection<ConnectedComponent>.RemoveItem(Int32) Collection<ConnectedComponent>.SetItem(Int32, ConnectedComponent) Collection<ConnectedComponent>.IEnumerable.GetEnumerator() Collection<ConnectedComponent>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Vision.ConnectedComponent>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Vision.ConnectedComponent>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<ConnectedComponent>.IList.Add(Object) Collection<ConnectedComponent>.IList.Contains(Object) Collection<ConnectedComponent>.IList.IndexOf(Object) Collection<ConnectedComponent>.IList.Insert(Int32, Object) Collection<ConnectedComponent>.IList.Remove(Object) Collection<ConnectedComponent>.Count Collection<ConnectedComponent>.Items Collection<ConnectedComponent>.Item[Int32] Collection<ConnectedComponent>.ICollection<ConnectedComponent>.IsReadOnly Collection<ConnectedComponent>.ICollection.IsSynchronized Collection<ConnectedComponent>.ICollection.SyncRoot Collection<ConnectedComponent>.IList.Item[Int32] Collection<ConnectedComponent>.IList.IsReadOnly Collection<ConnectedComponent>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class ConnectedComponentCollection : Collection<ConnectedComponent>, IList<ConnectedComponent>, ICollection<ConnectedComponent>, IList, ICollection, IReadOnlyList<ConnectedComponent>, IReadOnlyCollection<ConnectedComponent>, IEnumerable<ConnectedComponent>, IEnumerable Constructors | Improve this Doc View Source ConnectedComponentCollection(Size) Initializes a new instance of the ConnectedComponentCollection class using the specified image size. Declaration public ConnectedComponentCollection(Size imageSize) Parameters Type Name Description Size imageSize The size of the image from which the connected components were extracted. | Improve this Doc View Source ConnectedComponentCollection(IList<ConnectedComponent>, Size) Initializes a new instance of the ConnectedComponentCollection class as a wrapper for the specified list of connected components. Declaration public ConnectedComponentCollection(IList<ConnectedComponent> components, Size imageSize) Parameters Type Name Description IList < ConnectedComponent > components The list of connected components that is wrapped by the new collection. Size imageSize The size of the image from which the connected components were extracted. Properties | Improve this Doc View Source ImageSize Gets the pixel-accurate size of the image from which the connected components were extracted. Declaration public Size ImageSize { get; } Property Value Type Description Size Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Vision.ContainsPoint.html": {
    "href": "api/Bonsai.Vision.ContainsPoint.html",
    "title": "Class ContainsPoint",
    "keywords": "Class ContainsPoint Represents an operator that determines whether each point in the sequence is contained inside a rectangle, contour, or other polygonal shape. Inheritance Object ContainsPoint Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class ContainsPoint Methods | Improve this Doc View Source Process(IObservable<Tuple<ConnectedComponent, Point>>) Determines whether each point in an observable sequence is contained inside the polygonal contour of a connected component. Declaration public IObservable<bool> Process(IObservable<Tuple<ConnectedComponent, Point>> source) Parameters Type Name Description IObservable < Tuple < ConnectedComponent , Point >> source A sequence of pairs containing a ConnectedComponent object and a point with integer coordinates to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the polygonal contour of a connected component. | Improve this Doc View Source Process(IObservable<Tuple<ConnectedComponent, Point2f>>) Determines whether each point in an observable sequence is contained inside the polygonal contour of a connected component. Declaration public IObservable<bool> Process(IObservable<Tuple<ConnectedComponent, Point2f>> source) Parameters Type Name Description IObservable < Tuple < ConnectedComponent , Point2f >> source A sequence of pairs containing a ConnectedComponent object and a point with single-precision floating-point coordinates to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the polygonal contour of a connected component. | Improve this Doc View Source Process(IObservable<Tuple<Contour, Point>>) Determines whether each point in an observable sequence is contained inside a polygonal contour. Declaration public IObservable<bool> Process(IObservable<Tuple<Contour, Point>> source) Parameters Type Name Description IObservable < Tuple < Contour , Point >> source A sequence of pairs containing a Contour object and a point with integer coordinates to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the polygonal contour. | Improve this Doc View Source Process(IObservable<Tuple<Contour, Point2f>>) Determines whether each point in an observable sequence is contained inside a polygonal contour. Declaration public IObservable<bool> Process(IObservable<Tuple<Contour, Point2f>> source) Parameters Type Name Description IObservable < Tuple < Contour , Point2f >> source A sequence of pairs containing a Contour object and a point with single-precision floating-point coordinates to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the polygonal contour. | Improve this Doc View Source Process(IObservable<Tuple<Point, ConnectedComponent>>) Determines whether each point in an observable sequence is contained inside the polygonal contour of a connected component. Declaration public IObservable<bool> Process(IObservable<Tuple<Point, ConnectedComponent>> source) Parameters Type Name Description IObservable < Tuple < Point , ConnectedComponent >> source A sequence of pairs containing a point with integer coordinates and a ConnectedComponent object to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the polygonal contour of a connected component. | Improve this Doc View Source Process(IObservable<Tuple<Point, Contour>>) Determines whether each point in an observable sequence is contained inside a polygonal contour. Declaration public IObservable<bool> Process(IObservable<Tuple<Point, Contour>> source) Parameters Type Name Description IObservable < Tuple < Point , Contour >> source A sequence of pairs containing a point with integer coordinates and a Contour object to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the polygonal contour. | Improve this Doc View Source Process(IObservable<Tuple<Point, Point[][]>>) Determines whether each point in an observable sequence is contained inside any of the polygonal contours specified by arrays of vertices. Declaration public IObservable<bool> Process(IObservable<Tuple<Point, Point[][]>> source) Parameters Type Name Description IObservable < Tuple < Point , Point [][]>> source A sequence of pairs containing a point with integer coordinates and a jagged array of Point values specifying the contours to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside any of the polygonal contours specified by arrays of vertices. | Improve this Doc View Source Process(IObservable<Tuple<Point, Point[]>>) Determines whether each point in an observable sequence is contained inside the polygonal contour specified by an array of vertices. Declaration public IObservable<bool> Process(IObservable<Tuple<Point, Point[]>> source) Parameters Type Name Description IObservable < Tuple < Point , Point []>> source A sequence of pairs containing a point with integer coordinates and a Point array specifying the contour to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the polygonal contour specified by an array of vertices. | Improve this Doc View Source Process(IObservable<Tuple<Point, Rect>>) Determines whether each point in an observable sequence is contained inside a rectangle. Declaration public IObservable<bool> Process(IObservable<Tuple<Point, Rect>> source) Parameters Type Name Description IObservable < Tuple < Point , Rect >> source A sequence of pairs containing a point with integer coordinates and a rectangle to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the rectangle. | Improve this Doc View Source Process(IObservable<Tuple<Point[], Point>>) Determines whether each point in an observable sequence is contained inside the polygonal contour specified by an array of vertices. Declaration public IObservable<bool> Process(IObservable<Tuple<Point[], Point>> source) Parameters Type Name Description IObservable < Tuple < Point [], Point >> source A sequence of pairs containing a Point array specifying the contour and a point with integer coordinates to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the polygonal contour specified by an array of vertices. | Improve this Doc View Source Process(IObservable<Tuple<Point[], Point2f>>) Determines whether each point in an observable sequence is contained inside the polygonal contour specified by an array of vertices. Declaration public IObservable<bool> Process(IObservable<Tuple<Point[], Point2f>> source) Parameters Type Name Description IObservable < Tuple < Point [], Point2f >> source A sequence of pairs containing a Point array specifying the contour and a point with single-precision floating-point coordinates to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the polygonal contour specified by an array of vertices. | Improve this Doc View Source Process(IObservable<Tuple<Point[][], Point>>) Determines whether each point in an observable sequence is contained inside any of the polygonal contours specified by arrays of vertices. Declaration public IObservable<bool> Process(IObservable<Tuple<Point[][], Point>> source) Parameters Type Name Description IObservable < Tuple < Point [][], Point >> source A sequence of pairs containing a jagged array of Point values specifying the contours and a point with integer coordinates to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside any of the polygonal contours specified by arrays of vertices. | Improve this Doc View Source Process(IObservable<Tuple<Point[][], Point2f>>) Determines whether each point in an observable sequence is contained inside any of the polygonal contours specified by arrays of vertices. Declaration public IObservable<bool> Process(IObservable<Tuple<Point[][], Point2f>> source) Parameters Type Name Description IObservable < Tuple < Point [][], Point2f >> source A sequence of pairs containing a jagged array of Point values specifying the contours and a point with single-precision floating-point coordinates to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside any of the polygonal contours specified by arrays of vertices. | Improve this Doc View Source Process(IObservable<Tuple<Point2f, ConnectedComponent>>) Determines whether each point in an observable sequence is contained inside the polygonal contour of a connected component. Declaration public IObservable<bool> Process(IObservable<Tuple<Point2f, ConnectedComponent>> source) Parameters Type Name Description IObservable < Tuple < Point2f , ConnectedComponent >> source A sequence of pairs containing a point with single-precision floating-point coordinates and a ConnectedComponent object to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the polygonal contour of a connected component. | Improve this Doc View Source Process(IObservable<Tuple<Point2f, Contour>>) Determines whether each point in an observable sequence is contained inside a polygonal contour. Declaration public IObservable<bool> Process(IObservable<Tuple<Point2f, Contour>> source) Parameters Type Name Description IObservable < Tuple < Point2f , Contour >> source A sequence of pairs containing a point with single-precision floating-point coordinates and a Contour object to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the polygonal contour. | Improve this Doc View Source Process(IObservable<Tuple<Point2f, Point[][]>>) Determines whether each point in an observable sequence is contained inside any of the polygonal contours specified by arrays of vertices. Declaration public IObservable<bool> Process(IObservable<Tuple<Point2f, Point[][]>> source) Parameters Type Name Description IObservable < Tuple < Point2f , Point [][]>> source A sequence of pairs containing a point with single-precision floating-point coordinates and a jagged array of Point values specifying the contours to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside any of the polygonal contours specified by arrays of vertices. | Improve this Doc View Source Process(IObservable<Tuple<Point2f, Point[]>>) Determines whether each point in an observable sequence is contained inside the polygonal contour specified by an array of vertices. Declaration public IObservable<bool> Process(IObservable<Tuple<Point2f, Point[]>> source) Parameters Type Name Description IObservable < Tuple < Point2f , Point []>> source A sequence of pairs containing a point with single-precision floating-point coordinates and a Point array specifying the contour to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the polygonal contour specified by an array of vertices. | Improve this Doc View Source Process(IObservable<Tuple<Point2f, Rect>>) Determines whether each point in an observable sequence is contained inside a rectangle. Declaration public IObservable<bool> Process(IObservable<Tuple<Point2f, Rect>> source) Parameters Type Name Description IObservable < Tuple < Point2f , Rect >> source A sequence of pairs containing a point with single-precision floating-point coordinates and a rectangle to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the rectangle. | Improve this Doc View Source Process(IObservable<Tuple<Rect, Point>>) Determines whether each point in an observable sequence is contained inside a rectangle. Declaration public IObservable<bool> Process(IObservable<Tuple<Rect, Point>> source) Parameters Type Name Description IObservable < Tuple < Rect , Point >> source A sequence of pairs containing a rectangle and a point with integer coordinates to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the rectangle. | Improve this Doc View Source Process(IObservable<Tuple<Rect, Point2f>>) Determines whether each point in an observable sequence is contained inside a rectangle. Declaration public IObservable<bool> Process(IObservable<Tuple<Rect, Point2f>> source) Parameters Type Name Description IObservable < Tuple < Rect , Point2f >> source A sequence of pairs containing a rectangle and a point with single-precision floating-point coordinates to test. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the point is contained inside the rectangle."
  },
  "api/Bonsai.Vision.ContourConvexity.html": {
    "href": "api/Bonsai.Vision.ContourConvexity.html",
    "title": "Class ContourConvexity",
    "keywords": "Class ContourConvexity Provides the result of a convexity analysis of a polygonal contour, representing the deviations between each point in the contour and its convex hull. Inheritance Object ContourConvexity Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class ContourConvexity Constructors | Improve this Doc View Source ContourConvexity(Contour, Seq, Seq) Initializes a new instance of the ContourConvexity class using the specified contour, convex hull and corresponding convexity defects. Declaration public ContourConvexity(Contour contour, Seq convexHull, Seq convexityDefects) Parameters Type Name Description Contour contour The polygonal contour from which the convex hull and convexity defects were calculated. Seq convexHull A sequence containing the points in the convex hull of the polygonal contour. Seq convexityDefects A sequence of ConvexityDefect structures representing the deviations between each point in the polygonal contour and its convex hull. Properties | Improve this Doc View Source Contour Gets the polygonal contour from which the convex hull and convexity defects were calculated. Declaration public Contour Contour { get; } Property Value Type Description Contour | Improve this Doc View Source ConvexHull Gets a sequence containing the points in the convex hull of the polygonal contour. Declaration public Seq ConvexHull { get; } Property Value Type Description Seq | Improve this Doc View Source ConvexityDefects Gets a sequence of ConvexityDefect structures representing the deviations between each point in the polygonal contour and its convex hull. Declaration public Seq ConvexityDefects { get; } Property Value Type Description Seq See Also ConvexityDefects"
  },
  "api/Bonsai.Vision.ContourPoints.html": {
    "href": "api/Bonsai.Vision.ContourPoints.html",
    "title": "Class ContourPoints",
    "keywords": "Class ContourPoints Represents an operator that copies all points of each contour in the sequence to a new array. Inheritance Object Combinator < Contour , Point []> Transform < Contour , Point []> ContourPoints Inherited Members Combinator<Contour, Point[]>.Process(IObservable<Contour>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class ContourPoints : Transform<Contour, Point[]> Methods | Improve this Doc View Source Process(IObservable<ConnectedComponent>) Copies all points of each contour in an observable sequence to a new array. Declaration public IObservable<Point[]> Process(IObservable<ConnectedComponent> source) Parameters Type Name Description IObservable < ConnectedComponent > source The sequence of ConnectedComponent objects from which to extract the points. Returns Type Description IObservable < Point []> A sequence of arrays containing all points of each contour in the source sequence. | Improve this Doc View Source Process(IObservable<Contour>) Copies all points of each contour in an observable sequence to a new array. Declaration public override IObservable<Point[]> Process(IObservable<Contour> source) Parameters Type Name Description IObservable < Contour > source The sequence of contours from which to extract the points. Returns Type Description IObservable < Point []> A sequence of arrays containing all points of each contour in the source sequence. Overrides Bonsai.Combinator<OpenCV.Net.Contour, OpenCV.Net.Point[]>.Process(System.IObservable<OpenCV.Net.Contour>) | Improve this Doc View Source Process(IObservable<Seq>) Copies all points of each contour in an observable sequence to a new array. Declaration public IObservable<Point[]> Process(IObservable<Seq> source) Parameters Type Name Description IObservable < Seq > source The sequence of Seq objects from which to extract the points. Returns Type Description IObservable < Point []> A sequence of arrays containing all points of each contour in the source sequence."
  },
  "api/Bonsai.Vision.Contours.html": {
    "href": "api/Bonsai.Vision.Contours.html",
    "title": "Class Contours",
    "keywords": "Class Contours Provides a reference to a hierarchy of polygonal contours extracted from an image bitmap. Inheritance Object Contours Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Contours Constructors | Improve this Doc View Source Contours(Seq, Size) Initializes a new instance of the Contours class using the specified root node and image size. Declaration public Contours(Seq firstContour, Size imageSize) Parameters Type Name Description Seq firstContour The first node in the hierarchy of extracted polygonal contours. Size imageSize The pixel-accurate size of the image from which the contours were extracted. Properties | Improve this Doc View Source FirstContour Gets the reference to the first polygonal contour in the hierarchy. Declaration public Seq FirstContour { get; } Property Value Type Description Seq | Improve this Doc View Source ImageSize Gets the pixel-accurate size of the image from which the polygonal contours were extracted. Declaration public Size ImageSize { get; } Property Value Type Description Size"
  },
  "api/Bonsai.Vision.ConvertColor.html": {
    "href": "api/Bonsai.Vision.ConvertColor.html",
    "title": "Class ConvertColor",
    "keywords": "Class ConvertColor Represents an operator that converts pixels from one color space to another for all images in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > ConvertColor Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class ConvertColor : Transform<IplImage, IplImage> Properties | Improve this Doc View Source Conversion Gets or sets the color conversion to apply to individual image pixels. Declaration public ColorConversion Conversion { get; set; } Property Value Type Description ColorConversion Methods | Improve this Doc View Source Process(IObservable<IplImage>) Converts pixels from one color space to another for all images in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images in the original color space. Returns Type Description IObservable < IplImage > A sequence of images where every pixel is specified in the new color space. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.ConvertToImage.html": {
    "href": "api/Bonsai.Vision.ConvertToImage.html",
    "title": "Class ConvertToImage",
    "keywords": "Class ConvertToImage Represents an operator that converts each array-like object in the sequence into an image. Inheritance Object ConvertToImage Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class ConvertToImage Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Converts each array-like object in an observable sequence into an image. Declaration public IObservable<IplImage> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source The sequence of array-like objects to be converted. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the image header for the arbitrary array. Type Parameters Name Description TArray The type of the array-like objects in the source sequence."
  },
  "api/Bonsai.Vision.ConvexityDefects.html": {
    "href": "api/Bonsai.Vision.ConvexityDefects.html",
    "title": "Class ConvexityDefects",
    "keywords": "Class ConvexityDefects Represents an operator that finds the convexity defects of each contour in the sequence. Inheritance Object Combinator < Seq , ContourConvexity > Transform < Seq , ContourConvexity > ConvexityDefects Inherited Members Combinator<Seq, ContourConvexity>.Process(IObservable<Seq>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class ConvexityDefects : Transform<Seq, ContourConvexity> Methods | Improve this Doc View Source Process(IObservable<ConnectedComponent>) Finds the convexity defects of each ConnectedComponent in an observable sequence. Declaration public IObservable<ContourConvexity> Process(IObservable<ConnectedComponent> source) Parameters Type Name Description IObservable < ConnectedComponent > source The sequence of ConnectedComponent objects containing the contours for which to find the convexity defects. Returns Type Description IObservable < ContourConvexity > A sequence of ContourConvexity objects representing the deviations between each point in the contour and its convex hull. | Improve this Doc View Source Process(IObservable<Seq>) Finds the convexity defects of each contour in an observable sequence. Declaration public override IObservable<ContourConvexity> Process(IObservable<Seq> source) Parameters Type Name Description IObservable < Seq > source The sequence of contours for which to find the convexity defects. Returns Type Description IObservable < ContourConvexity > A sequence of ContourConvexity objects representing the deviations between each point in the contour and its convex hull. Overrides Bonsai.Combinator<OpenCV.Net.Seq, Bonsai.Vision.ContourConvexity>.Process(System.IObservable<OpenCV.Net.Seq>)"
  },
  "api/Bonsai.Vision.CreateExtrinsics.html": {
    "href": "api/Bonsai.Vision.CreateExtrinsics.html",
    "title": "Class CreateExtrinsics",
    "keywords": "Class CreateExtrinsics Represents an operator that creates a set of parameters specifying the camera extrinsics. Inheritance Object Source < Extrinsics > CreateExtrinsics Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class CreateExtrinsics : Source<Extrinsics> Properties | Improve this Doc View Source Rotation Gets or sets the rotation vector transforming object-space coordinates into camera-space coordinates. Declaration public Point3d Rotation { get; set; } Property Value Type Description Point3d | Improve this Doc View Source Translation Gets or sets the translation vector transforming object-space coordinates into camera-space coordinates. Declaration public Point3d Translation { get; set; } Property Value Type Description Point3d Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains the camera extrinsics using the specified rotation and translation vectors. Declaration public override IObservable<Extrinsics> Generate() Returns Type Description IObservable < Extrinsics > A sequence containing the created Extrinsics structure. Overrides Bonsai.Source<Bonsai.Vision.Extrinsics>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of camera extrinsics objects using the specified rotation and translation vectors, and where each Extrinsics object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Extrinsics> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new camera extrinsics. Returns Type Description IObservable < Extrinsics > The sequence of created Extrinsics objects. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Vision.CreateIntrinsics.html": {
    "href": "api/Bonsai.Vision.CreateIntrinsics.html",
    "title": "Class CreateIntrinsics",
    "keywords": "Class CreateIntrinsics Represents an operator that creates a set of parameters specifying the camera intrinsics. Inheritance Object Source < Intrinsics > CreateIntrinsics Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class CreateIntrinsics : Source<Intrinsics> Properties | Improve this Doc View Source FocalLength Gets or sets the focal length of the camera, in units of pixels. Declaration public Point2d FocalLength { get; set; } Property Value Type Description Point2d | Improve this Doc View Source ImageSize Gets or sets the image size, in pixels, for the camera intrinsics. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Size? ImageSize { get; set; } Property Value Type Description Nullable < Size > | Improve this Doc View Source PrincipalPoint Gets or sets the principal point of the camera, in pixels, usually at the image center. Declaration public Point2d PrincipalPoint { get; set; } Property Value Type Description Point2d | Improve this Doc View Source RadialDistortion Gets or sets the radial distortion coefficients. Declaration public Point3d RadialDistortion { get; set; } Property Value Type Description Point3d | Improve this Doc View Source TangentialDistortion Gets or sets the tangential distortion coefficients. Declaration public Point2d TangentialDistortion { get; set; } Property Value Type Description Point2d Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains the camera intrinsics using the specified focal length and distortion parameters. Declaration public override IObservable<Intrinsics> Generate() Returns Type Description IObservable < Intrinsics > A sequence containing the created Intrinsics structure. Overrides Bonsai.Source<Bonsai.Vision.Intrinsics>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of camera intrinsics using the specified focal length and distortion parameters, and where each Intrinsics object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Intrinsics> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new camera intrinsics. Returns Type Description IObservable < Intrinsics > The sequence of created Intrinsics objects. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Vision.CreatePoint.html": {
    "href": "api/Bonsai.Vision.CreatePoint.html",
    "title": "Class CreatePoint",
    "keywords": "Class CreatePoint Represents an operator that creates a 2D point with integer coordinates. Inheritance Object Source < Point > CreatePoint Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class CreatePoint : Source<Point> Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the point. Declaration public int X { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the point. Declaration public int Y { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single 2D point with integer coordinates. Declaration public override IObservable<Point> Generate() Returns Type Description IObservable < Point > A sequence containing the created Point . Overrides Bonsai.Source<OpenCV.Net.Point>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 2D points using the specified integer coordinates, and where each Point object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Point> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new 2D points. Returns Type Description IObservable < Point > The sequence of created Point objects. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Vision.CreatePoint2d.html": {
    "href": "api/Bonsai.Vision.CreatePoint2d.html",
    "title": "Class CreatePoint2d",
    "keywords": "Class CreatePoint2d Represents an operator that creates a 2D point with double-precision floating-point coordinates. Inheritance Object Source < Point2d > CreatePoint2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class CreatePoint2d : Source<Point2d> Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the point. Declaration public double X { get; set; } Property Value Type Description Double | Improve this Doc View Source Y Gets or sets the y-coordinate of the point. Declaration public double Y { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single 2D point with double-precision floating-point coordinates. Declaration public override IObservable<Point2d> Generate() Returns Type Description IObservable < Point2d > A sequence containing the created Point2d . Overrides Bonsai.Source<OpenCV.Net.Point2d>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 2D points using the specified double-precision floating-point coordinates, and where each Point2d object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Point2d> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new 2D points. Returns Type Description IObservable < Point2d > The sequence of created Point2d objects. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Vision.CreatePoint2f.html": {
    "href": "api/Bonsai.Vision.CreatePoint2f.html",
    "title": "Class CreatePoint2f",
    "keywords": "Class CreatePoint2f Represents an operator that creates a 2D point with single-precision floating-point coordinates. Inheritance Object Source < Point2f > CreatePoint2f Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class CreatePoint2f : Source<Point2f> Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the point. Declaration public float X { get; set; } Property Value Type Description Single | Improve this Doc View Source Y Gets or sets the y-coordinate of the point. Declaration public float Y { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single 2D point with single-precision floating-point coordinates. Declaration public override IObservable<Point2f> Generate() Returns Type Description IObservable < Point2f > A sequence containing the created Point2f . Overrides Bonsai.Source<OpenCV.Net.Point2f>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 2D points using the specified single-precision floating-point coordinates, and where each Point2f object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Point2f> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new 2D points. Returns Type Description IObservable < Point2f > The sequence of created Point2f objects. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Vision.CreatePoint3d.html": {
    "href": "api/Bonsai.Vision.CreatePoint3d.html",
    "title": "Class CreatePoint3d",
    "keywords": "Class CreatePoint3d Represents an operator that creates a 3D point with double-precision floating-point coordinates. Inheritance Object Source < Point3d > CreatePoint3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class CreatePoint3d : Source<Point3d> Properties | Improve this Doc View Source X Gets or sets the x-coordinate of the point. Declaration public double X { get; set; } Property Value Type Description Double | Improve this Doc View Source Y Gets or sets the y-coordinate of the point. Declaration public double Y { get; set; } Property Value Type Description Double | Improve this Doc View Source Z Gets or sets the z-coordinate of the point. Declaration public double Z { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single 3D point with double-precision floating-point coordinates. Declaration public override IObservable<Point3d> Generate() Returns Type Description IObservable < Point3d > A sequence containing the created Point3d . Overrides Bonsai.Source<OpenCV.Net.Point3d>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of 3D points using the specified double-precision floating-point coordinates, and where each Point3d object is emitted only when an observable sequence emits a notification. Declaration public IObservable<Point3d> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new 3D points. Returns Type Description IObservable < Point3d > The sequence of created Point3d objects. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Vision.Crop.html": {
    "href": "api/Bonsai.Vision.Crop.html",
    "title": "Class Crop",
    "keywords": "Class Crop Represents an operator that crops a rectangular subregion of each image in the sequence, without copying. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > Crop Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Crop : Transform<IplImage, IplImage> Properties | Improve this Doc View Source RegionOfInterest Gets or sets a rectangle specifying the region of interest inside the image. Declaration public Rect RegionOfInterest { get; set; } Property Value Type Description Rect Methods | Improve this Doc View Source Process(IObservable<IplImage>) Crops a subregion of each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to crop. Returns Type Description IObservable < IplImage > A sequence of IplImage objects where each new image contains the extracted subregion of the original image. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.CropCenter.html": {
    "href": "api/Bonsai.Vision.CropCenter.html",
    "title": "Class CropCenter",
    "keywords": "Class CropCenter Represents an operator that crops rectangular regions with fixed size around the specified center for each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > CropCenter Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class CropCenter : Transform<IplImage, IplImage> Properties | Improve this Doc View Source FillValue Gets or sets a Scalar specifying the value to which all pixels that fall outside image boundaries will be set to. Declaration public Scalar FillValue { get; set; } Property Value Type Description Scalar | Improve this Doc View Source Size Gets or sets a value specifying the size of the region of interest to crop from the image. Declaration public Size Size { get; set; } Property Value Type Description Size Methods | Improve this Doc View Source Process(IObservable<IplImage>) Crops a rectangular region with fixed size around the center of each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to crop. Returns Type Description IObservable < IplImage > A sequence of images representing the cropped rectangular regions. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>) | Improve this Doc View Source Process(IObservable<Tuple<IplImage, ConnectedComponent>>) Crops a rectangular region with fixed size around the center of the specified connected component for each image in an observable sequence. Declaration public IObservable<IplImage> Process(IObservable<Tuple<IplImage, ConnectedComponent>> source) Parameters Type Name Description IObservable < Tuple < IplImage , ConnectedComponent >> source A sequence of pairs representing the image and the ConnectedComponent around which to crop the rectangular region. Returns Type Description IObservable < IplImage > A sequence of images representing the rectangular region cropped around the centroid of the specified connected component. | Improve this Doc View Source Process(IObservable<Tuple<IplImage, ConnectedComponentCollection>>) Crops a collection of rectangular regions with fixed size around the center of each connected component for each image in an observable sequence. Declaration public IObservable<IplImage[]> Process(IObservable<Tuple<IplImage, ConnectedComponentCollection>> source) Parameters Type Name Description IObservable < Tuple < IplImage , ConnectedComponentCollection >> source A sequence of pairs representing the image and the ConnectedComponentCollection specifying the centroids used to crop the rectangular regions. Returns Type Description IObservable < IplImage []> A sequence of image arrays representing the rectangular regions cropped around each of the connected components. | Improve this Doc View Source Process(IObservable<Tuple<IplImage, Point>>) Crops a rectangular region with fixed size around the specified center for each image in an observable sequence. Declaration public IObservable<IplImage> Process(IObservable<Tuple<IplImage, Point>> source) Parameters Type Name Description IObservable < Tuple < IplImage , Point >> source A sequence of pairs representing the image and a 2D position with integer coordinates around which to crop the rectangular region. Returns Type Description IObservable < IplImage > A sequence of images representing the rectangular region cropped around each of the specified positions. | Improve this Doc View Source Process(IObservable<Tuple<IplImage, Point2f>>) Crops a rectangular region with fixed size around the specified center for each image in an observable sequence. Declaration public IObservable<IplImage> Process(IObservable<Tuple<IplImage, Point2f>> source) Parameters Type Name Description IObservable < Tuple < IplImage , Point2f >> source A sequence of pairs representing the image and a 2D position with single-precision floating-point coordinates around which to crop the rectangular region. Returns Type Description IObservable < IplImage > A sequence of images representing the rectangular region cropped around each of the specified positions."
  },
  "api/Bonsai.Vision.CropPolygon.html": {
    "href": "api/Bonsai.Vision.CropPolygon.html",
    "title": "Class CropPolygon",
    "keywords": "Class CropPolygon Represents an operator that crops a polygonal region of interest for each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > CropPolygon MaskPolygon Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class CropPolygon : Transform<IplImage, IplImage> Constructors | Improve this Doc View Source CropPolygon() Initializes a new instance of the CropPolygon class. Declaration public CropPolygon() Properties | Improve this Doc View Source FillValue Gets or sets a Scalar specifying the value to which all pixels that are not in the selected region will be set to. Declaration public Scalar FillValue { get; set; } Property Value Type Description Scalar | Improve this Doc View Source MaskType Gets or sets a value specifying the type of mask operation to apply on the region of interest. Declaration [TypeConverter(typeof(CropPolygon.ThresholdTypeConverter))] public ThresholdTypes MaskType { get; set; } Property Value Type Description ThresholdTypes | Improve this Doc View Source Regions Gets or sets the array of vertices specifying each polygonal region of interest. Declaration public Point[][] Regions { get; set; } Property Value Type Description Point [][] Methods | Improve this Doc View Source Process(IObservable<IplImage>) Extracts a polygonal region of interest for each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images for which to extract the polygonal region of interest. Returns Type Description IObservable < IplImage > A sequence of IplImage objects where each new image contains the extracted subregion of the original image. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.DecodeImage.html": {
    "href": "api/Bonsai.Vision.DecodeImage.html",
    "title": "Class DecodeImage",
    "keywords": "Class DecodeImage Represents an operator that decodes an image from each byte buffer in the sequence. Inheritance Object Combinator < Mat , IplImage > Transform < Mat , IplImage > DecodeImage Inherited Members Combinator<Mat, IplImage>.Process(IObservable<Mat>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class DecodeImage : Transform<Mat, IplImage> Properties | Improve this Doc View Source Mode Gets or sets a value specifying optional conversions applied to the decoded image. Declaration public LoadImageFlags Mode { get; set; } Property Value Type Description LoadImageFlags Methods | Improve this Doc View Source Process(IObservable<Mat>) Decodes an image from each byte buffer in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source The sequence of array-like objects storing the memory buffers to be decoded. Returns Type Description IObservable < IplImage > The sequence of decoded images. Overrides Bonsai.Combinator<OpenCV.Net.Mat, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.Mat>) | Improve this Doc View Source Process(IObservable<Byte[]>) Decodes an image from each byte array in an observable sequence. Declaration public IObservable<IplImage> Process(IObservable<byte[]> source) Parameters Type Name Description IObservable < Byte []> source The sequence of array objects storing the image data to be decoded. Returns Type Description IObservable < IplImage > The sequence of decoded images."
  },
  "api/Bonsai.Vision.Design.BinaryRegionExtremesOverlay.html": {
    "href": "api/Bonsai.Vision.Design.BinaryRegionExtremesOverlay.html",
    "title": "Class BinaryRegionExtremesOverlay",
    "keywords": "Class BinaryRegionExtremesOverlay Provides a type visualizer that overlays the extremities of a binary connected component over an existing image visualizer. Inheritance Object DialogTypeVisualizer BinaryRegionExtremesOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class BinaryRegionExtremesOverlay : DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.BinaryRegionExtremesVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.BinaryRegionExtremesVisualizer.html",
    "title": "Class BinaryRegionExtremesVisualizer",
    "keywords": "Class BinaryRegionExtremesVisualizer Provides a type visualizer that draws a visual representation of the extremities of a binary connected component. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer BinaryRegionExtremesVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas IplImageVisualizer.ShowMashup(IList<Object>) IplImageVisualizer.RenderFrame() ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class BinaryRegionExtremesVisualizer : IplImageVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides IplImageVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides IplImageVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides IplImageVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.CapturePropertyCollectionConverter.html": {
    "href": "api/Bonsai.Vision.Design.CapturePropertyCollectionConverter.html",
    "title": "Class CapturePropertyCollectionConverter",
    "keywords": "Class CapturePropertyCollectionConverter Provides a type converter that converts collections of video capture properties to and from various other representations, and allows real-time value updates. Inheritance Object TypeConverter CollectionConverter CapturePropertyCollectionConverter Inherited Members CollectionConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(Object) TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.ConvertFromInvariantString(String) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(String) TypeConverter.ConvertFromString(ITypeDescriptorContext, String) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String) TypeConverter.ConvertTo(Object, Type) TypeConverter.ConvertToInvariantString(Object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(Object) TypeConverter.ConvertToString(ITypeDescriptorContext, Object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(Object) TypeConverter.GetConvertToException(Object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(Object) TypeConverter.GetProperties(ITypeDescriptorContext, Object) TypeConverter.GetPropertiesSupported() TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(Object) TypeConverter.IsValid(ITypeDescriptorContext, Object) TypeConverter.SortProperties(PropertyDescriptorCollection, String[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class CapturePropertyCollectionConverter : CollectionConverter Methods | Improve this Doc View Source GetProperties(ITypeDescriptorContext, Object, Attribute[]) Declaration public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes) Parameters Type Name Description ITypeDescriptorContext context Object value Attribute [] attributes Returns Type Description PropertyDescriptorCollection Overrides CollectionConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[]) | Improve this Doc View Source GetPropertiesSupported(ITypeDescriptorContext) Declaration public override bool GetPropertiesSupported(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description Boolean Overrides CollectionConverter.GetPropertiesSupported(ITypeDescriptorContext)"
  },
  "api/Bonsai.Vision.Design.CircleOverlay.html": {
    "href": "api/Bonsai.Vision.Design.CircleOverlay.html",
    "title": "Class CircleOverlay",
    "keywords": "Class CircleOverlay Provides a type visualizer that overlays the visual representation of a circle over an existing image visualizer. Inheritance Object DialogTypeVisualizer CircleOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class CircleOverlay : DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.CircleVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.CircleVisualizer.html",
    "title": "Class CircleVisualizer",
    "keywords": "Class CircleVisualizer Provides a type visualizer for circle parameters. If the input is a sequence of images, the visualizer will overlay each circle on top of the original image. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer CircleVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas IplImageVisualizer.ShowMashup(IList<Object>) IplImageVisualizer.RenderFrame() ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class CircleVisualizer : IplImageVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides IplImageVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides IplImageVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides IplImageVisualizer.Unload() | Improve this Doc View Source Visualize(IObservable<IObservable<Object>>, IServiceProvider) Creates an observable sequence used to visualize all notifications emitted by a workflow operator, using this type visualizer and the specified service provider. Declaration public override IObservable<object> Visualize(IObservable<IObservable<object>> source, IServiceProvider provider) Parameters Type Name Description IObservable < IObservable < Object >> source An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Returns Type Description IObservable < Object > An observable sequence where every notification updates the type visualizer object in the UI thread. Overrides ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider)"
  },
  "api/Bonsai.Vision.Design.CompressionParameterCollectionEditor.html": {
    "href": "api/Bonsai.Vision.Design.CompressionParameterCollectionEditor.html",
    "title": "Class CompressionParameterCollectionEditor",
    "keywords": "Class CompressionParameterCollectionEditor Provides a user interface editor that displays a dialog for editing a collection of image compression parameters. Inheritance Object UITypeEditor CollectionEditor DescriptiveCollectionEditor CompressionParameterCollectionEditor Inherited Members DescriptiveCollectionEditor.CreateCollectionForm() CollectionEditor.CancelChanges() CollectionEditor.CanRemoveInstance(Object) CollectionEditor.CanSelectMultipleInstances() CollectionEditor.CreateInstance(Type) CollectionEditor.GetObjectsFromInstance(Object) CollectionEditor.GetDisplayText(Object) CollectionEditor.CreateCollectionItemType() CollectionEditor.DestroyInstance(Object) CollectionEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) CollectionEditor.GetEditStyle(ITypeDescriptorContext) CollectionEditor.GetItems(Object) CollectionEditor.GetService(Type) CollectionEditor.SetItems(Object, Object[]) CollectionEditor.ShowHelp() CollectionEditor.CollectionItemType CollectionEditor.CollectionType CollectionEditor.Context CollectionEditor.NewItemTypes CollectionEditor.HelpTopic UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class CompressionParameterCollectionEditor : DescriptiveCollectionEditor Constructors | Improve this Doc View Source CompressionParameterCollectionEditor(Type) Initializes a new instance of the CompressionParameterCollectionEditor class using the specified collection type. Declaration public CompressionParameterCollectionEditor(Type type) Parameters Type Name Description Type type The type of the collection for this editor to edit. Methods | Improve this Doc View Source CreateNewItemTypes() Declaration protected override Type[] CreateNewItemTypes() Returns Type Description Type [] Overrides CollectionEditor.CreateNewItemTypes()"
  },
  "api/Bonsai.Vision.Design.ConnectedComponentCollectionOverlay.html": {
    "href": "api/Bonsai.Vision.Design.ConnectedComponentCollectionOverlay.html",
    "title": "Class ConnectedComponentCollectionOverlay",
    "keywords": "Class ConnectedComponentCollectionOverlay Provides a type visualizer that overlays the collection of connected components over an existing image visualizer. Inheritance Object DialogTypeVisualizer ConnectedComponentCollectionOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class ConnectedComponentCollectionOverlay : DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.ConnectedComponentCollectionVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.ConnectedComponentCollectionVisualizer.html",
    "title": "Class ConnectedComponentCollectionVisualizer",
    "keywords": "Class ConnectedComponentCollectionVisualizer Provides a type visualizer that displays the properties of a collection of connected components. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer ConnectedComponentCollectionVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas IplImageVisualizer.ShowMashup(IList<Object>) IplImageVisualizer.RenderFrame() IplImageVisualizer.Load(IServiceProvider) IplImageVisualizer.Unload() ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class ConnectedComponentCollectionVisualizer : IplImageVisualizer Methods | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides IplImageVisualizer.Show(Object)"
  },
  "api/Bonsai.Vision.Design.ConnectedComponentOverlay.html": {
    "href": "api/Bonsai.Vision.Design.ConnectedComponentOverlay.html",
    "title": "Class ConnectedComponentOverlay",
    "keywords": "Class ConnectedComponentOverlay Provides a type visualizer that overlays a cluster of connected pixels over an existing image visualizer. Inheritance Object DialogTypeVisualizer ConnectedComponentOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class ConnectedComponentOverlay : DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.ConnectedComponentVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.ConnectedComponentVisualizer.html",
    "title": "Class ConnectedComponentVisualizer",
    "keywords": "Class ConnectedComponentVisualizer Provides a type visualizer that displays the properties of a cluster of connected pixels. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer ConnectedComponentVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas IplImageVisualizer.ShowMashup(IList<Object>) IplImageVisualizer.RenderFrame() IplImageVisualizer.Load(IServiceProvider) IplImageVisualizer.Unload() ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class ConnectedComponentVisualizer : IplImageVisualizer Methods | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides IplImageVisualizer.Show(Object)"
  },
  "api/Bonsai.Vision.Design.ContourConvexityOverlay.html": {
    "href": "api/Bonsai.Vision.Design.ContourConvexityOverlay.html",
    "title": "Class ContourConvexityOverlay",
    "keywords": "Class ContourConvexityOverlay Provides a type visualizer that overlays the results of contour convexity analysis over an existing image visualizer. Inheritance Object DialogTypeVisualizer ContourConvexityOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class ContourConvexityOverlay : DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.ContourConvexityVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.ContourConvexityVisualizer.html",
    "title": "Class ContourConvexityVisualizer",
    "keywords": "Class ContourConvexityVisualizer Provides a type visualizer that displays the results of convexity analysis of a polygonal contour. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer ContourConvexityVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas IplImageVisualizer.ShowMashup(IList<Object>) IplImageVisualizer.RenderFrame() IplImageVisualizer.Load(IServiceProvider) IplImageVisualizer.Unload() ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class ContourConvexityVisualizer : IplImageVisualizer Methods | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides IplImageVisualizer.Show(Object)"
  },
  "api/Bonsai.Vision.Design.ContoursOverlay.html": {
    "href": "api/Bonsai.Vision.Design.ContoursOverlay.html",
    "title": "Class ContoursOverlay",
    "keywords": "Class ContoursOverlay Provides a type visualizer that overlays a hierarchy of polygonal contours over an existing image visualizer. Inheritance Object DialogTypeVisualizer ContoursOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class ContoursOverlay : DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.ContoursVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.ContoursVisualizer.html",
    "title": "Class ContoursVisualizer",
    "keywords": "Class ContoursVisualizer Provides a type visualizer that displays the outline of all the polygonal contours in a hierarchy. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer ContoursVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas IplImageVisualizer.ShowMashup(IList<Object>) IplImageVisualizer.RenderFrame() IplImageVisualizer.Unload() ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class ContoursVisualizer : IplImageVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides IplImageVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides IplImageVisualizer.Show(Object)"
  },
  "api/Bonsai.Vision.Design.FileCaptureVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.FileCaptureVisualizer.html",
    "title": "Class FileCaptureVisualizer",
    "keywords": "Class FileCaptureVisualizer Provides a type visualizer that displays a seek bar, playback control, and current index for each movie frame. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer FileCaptureVisualizer Inherited Members ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class FileCaptureVisualizer : ImageMashupVisualizer Properties | Improve this Doc View Source VisualizerCanvas Gets the graphics canvas used to render the final visualizer output. Declaration public override VisualizerCanvas VisualizerCanvas { get; } Property Value Type Description VisualizerCanvas Overrides ImageMashupVisualizer.VisualizerCanvas Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides ImageMashupVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides ImageMashupVisualizer.Show(Object) | Improve this Doc View Source ShowMashup(IList<Object>) Combines the specified collection of values into a single image mashup. Declaration protected override void ShowMashup(IList<object> values) Parameters Type Name Description IList < Object > values The collection of values to be displayed by the mashup visualizer. Overrides ImageMashupVisualizer.ShowMashup(IList<Object>) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides ImageMashupVisualizer.Unload() | Improve this Doc View Source UpdateValues(IList<Object>) Updates the type visualizer state in preparation for displaying the specified collection of values. Declaration protected override void UpdateValues(IList<object> values) Parameters Type Name Description IList < Object > values The collection of values to be displayed by the mashup visualizer. Overrides ImageMashupVisualizer.UpdateValues(IList<Object>)"
  },
  "api/Bonsai.Vision.Design.html": {
    "href": "api/Bonsai.Vision.Design.html",
    "title": "Namespace Bonsai.Vision.Design",
    "keywords": "Namespace Bonsai.Vision.Design Classes BinaryRegionExtremesOverlay Provides a type visualizer that overlays the extremities of a binary connected component over an existing image visualizer. BinaryRegionExtremesVisualizer Provides a type visualizer that draws a visual representation of the extremities of a binary connected component. CapturePropertyCollectionConverter Provides a type converter that converts collections of video capture properties to and from various other representations, and allows real-time value updates. CircleOverlay Provides a type visualizer that overlays the visual representation of a circle over an existing image visualizer. CircleVisualizer Provides a type visualizer for circle parameters. If the input is a sequence of images, the visualizer will overlay each circle on top of the original image. CompressionParameterCollectionEditor Provides a user interface editor that displays a dialog for editing a collection of image compression parameters. ConnectedComponentCollectionOverlay Provides a type visualizer that overlays the collection of connected components over an existing image visualizer. ConnectedComponentCollectionVisualizer Provides a type visualizer that displays the properties of a collection of connected components. ConnectedComponentOverlay Provides a type visualizer that overlays a cluster of connected pixels over an existing image visualizer. ConnectedComponentVisualizer Provides a type visualizer that displays the properties of a cluster of connected pixels. ContourConvexityOverlay Provides a type visualizer that overlays the results of contour convexity analysis over an existing image visualizer. ContourConvexityVisualizer Provides a type visualizer that displays the results of convexity analysis of a polygonal contour. ContoursOverlay Provides a type visualizer that overlays a hierarchy of polygonal contours over an existing image visualizer. ContoursVisualizer Provides a type visualizer that displays the outline of all the polygonal contours in a hierarchy. FileCaptureVisualizer Provides a type visualizer that displays a seek bar, playback control, and current index for each movie frame. ImageBox Represents a graphics accelerated control for displaying an image. ImageMashupVisualizer Provides an abstract base class for type visualizers that overlay multiple values into a single image display. IplImageCircleEditor Provides a user interface for visually editing circular regions on top of the input image sequence. IplImageEllipseEditor Provides a user interface for visually editing elliptical regions on top of the input image sequence. IplImageLabeledRoiEditor Provides a user interface for visually editing labeled polygonal regions on top of the input image sequence. IplImageOutputCircleEditor Provides a user interface for visually editing circular regions on top of the output image sequence. IplImageOutputEllipseEditor Provides a user interface for visually editing elliptical regions on top of the output image sequence. IplImageOutputQuadrangleEditor Provides a user interface for visually editing a quadrangular region on top of the output image sequence. IplImageOutputRectangleEditor Provides a user interface for visually editing a rectangular region on top of the output image sequence. IplImageOutputRoiEditor Provides a user interface for visually editing polygonal regions on top of the output image sequence. IplImageOverlay Provides a type visualizer that overlays a grayscale mask over an existing image visualizer. IplImageQuadrangleEditor Provides a user interface for visually editing a quadrangular region on top of the input image sequence. IplImageRectangleEditor Provides a user interface for visually editing a rectangular region on top of the input image sequence. IplImageRoiEditor Provides a user interface for visually editing polygonal regions on top of the input image sequence. IplImageTexture Represents a texture buffer which can be updated with IplImage data and rendered onto the current viewport as a full-screen quad. IplImageVisualizer Provides a type visualizer that displays the images in a sequence as fast as the active display is refreshed. KeyPointCollectionOverlay Provides a type visualizer that overlays a collection of key points over an existing image visualizer. KeyPointCollectionVisualizer Provides a type visualizer that displays the collection of key points, or features, extracted from an image frame. KeyPointOpticalFlowOverlay Provides a type visualizer that overlays the sparse optical flow between key points over an existing image visualizer. KeyPointOpticalFlowVisualizer Provides a type visualizer that displays the sparse optical flow between key points, or features, extracted from an image frame. LineSegmentOverlay Provides a type visualizer that overlays a collection of line segments over an existing image visualizer. LineSegmentVisualizer Provides a type visualizer for a collection of line segments. If the input is a sequence of images, the visualizer will overlay each line segment on top of the original image. PointOverlay Provides a type visualizer that overlays a sequence of points over an existing image visualizer. PointVisualizer Provides a type visualizer for 2D points. PolygonOverlay Provides a type visualizer that overlays a collection of polygonal regions over an existing image visualizer. PolygonVisualizer Provides a type visualizer for a collection of polygonal regions. If the input is a sequence of images, the visualizer will overlay each rectangle on top of the original image. RectOverlay Provides a type visualizer that overlays the visual representation of a rectangle over an existing image visualizer. RectVisualizer Provides a type visualizer for rectangle parameters. If the input is a sequence of images, the visualizer will overlay each rectangle on top of the original image. RegionActivityCollectionVisualizer Provides a type visualizer that displays a collection of polygonal regions of interest and their activity measurements. ScalarHistogramVisualizer Provides a type visualizer for per-channel color histograms. ScalarVisualizer Provides a type visualizer that displays a sequence of Scalar values as a time series. SeekEventArgs Provides data for the Seek event. TimeIntervalIplImageVisualizer Provides a type visualizer that displays images in a sequence and adds the interval between each image in the sequence to the status bar. TimestampedIplImageVisualizer Provides a type visualizer that displays images in a sequence and adds the timestamp for each image to the status bar. VideoPlayer Represents a graphics accelerated video player control. VisualizerCanvas Provides a control with a graphics context and a simple render loop for scheduling accelerated rendering operations. Enums TrackingMode Specifies the tracking mode used to overlay a point sequence over an existing image visualizer."
  },
  "api/Bonsai.Vision.Design.ImageBox.html": {
    "href": "api/Bonsai.Vision.Design.ImageBox.html",
    "title": "Class ImageBox",
    "keywords": "Class ImageBox Represents a graphics accelerated control for displaying an image. Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl VisualizerCanvas ImageBox Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members VisualizerCanvas.RenderFrame VisualizerCanvas.SwapBuffers VisualizerCanvas.Canvas VisualizerCanvas.MakeCurrent() UserControl.ValidateChildren() UserControl.ValidateChildren(ValidationConstraints) UserControl.OnCreateControl() UserControl.OnResize(EventArgs) UserControl.OnMouseDown(MouseEventArgs) UserControl.WndProc(Message) UserControl.AutoSize UserControl.AutoSizeMode UserControl.AutoValidate UserControl.BorderStyle UserControl.CreateParams UserControl.DefaultSize UserControl.AutoSizeChanged UserControl.AutoValidateChanged UserControl.Load ContainerControl.IContainerControl.ActivateControl(Control) ContainerControl.AdjustFormScrollbars(Boolean) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnFontChanged(EventArgs) ContainerControl.OnLayout(LayoutEventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.ProcessDialogChar(Char) ContainerControl.ProcessDialogKey(Keys) ContainerControl.ProcessCmdKey(Message, Keys) ContainerControl.ProcessMnemonic(Char) ContainerControl.ProcessTabKey(Boolean) ContainerControl.Select(Boolean, Boolean) ContainerControl.UpdateDefaultButton() ContainerControl.Validate() ContainerControl.Validate(Boolean) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(Int32) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.OnVisibleChanged(EventArgs) ScrollableControl.ScaleControl(SizeF, BoundsSpecified) ScrollableControl.SetDisplayRectLocation(Int32, Int32) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(Int32, Int32) ScrollableControl.SetScrollState(Int32, Boolean) ScrollableControl.AutoScroll ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(Int32) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateControlsInstance() Control.CreateGraphics() Control.CreateHandle() Control.CreateControl() Control.DefWndProc(Message) Control.DestroyHandle() Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Control.GetNextControl(Control, Boolean) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsMnemonic(Char, String) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBackgroundImageChanged(EventArgs) Control.OnBackgroundImageLayoutChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnEnabledChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnTextChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnHandleCreated(EventArgs) Control.OnLocationChanged(EventArgs) Control.OnHandleDestroyed(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.OnEnter(EventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnPaint(PaintEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnStyleChanged(EventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(Message) Control.PreProcessControlMessage(Message) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.ProcessKeyPreview(Message) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetClientSizeCore(Int32, Int32) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.SetVisibleCore(Boolean) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateZOrder() Control.UpdateStyles() Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragDrop(DragEventArgs) Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackColor Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.ClientSize Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Location Control.Margin Control.MaximumSize Control.MinimumSize Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.Size Control.TabIndex Control.TabStop Control.Tag Control.Text Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.DefaultImeMode Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.ToString() Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class ImageBox : VisualizerCanvas, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Properties | Improve this Doc View Source Image Gets or sets the image to display. Declaration public IplImage Image { get; set; } Property Value Type Description IplImage | Improve this Doc View Source ImageScale Gets or sets the brightness scale factor applied when rendering the image. Declaration public double ImageScale { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides VisualizerCanvas.Dispose(Boolean) | Improve this Doc View Source OnLoad(EventArgs) Declaration protected override void OnLoad(EventArgs e) Parameters Type Name Description EventArgs e Overrides UserControl.OnLoad(EventArgs) | Improve this Doc View Source OnRenderFrame(EventArgs) Raises the RenderFrame event. Declaration protected override void OnRenderFrame(EventArgs e) Parameters Type Name Description EventArgs e A EventArgs that contains the event data. Overrides VisualizerCanvas.OnRenderFrame(EventArgs) | Improve this Doc View Source OnSwapBuffers(EventArgs) Raises the SwapBuffers event. Declaration protected override void OnSwapBuffers(EventArgs e) Parameters Type Name Description EventArgs e A EventArgs that contains the event data. Overrides VisualizerCanvas.OnSwapBuffers(EventArgs) | Improve this Doc View Source SetImage(IplImage) Updates the image to display in the control. Declaration protected virtual void SetImage(IplImage image) Parameters Type Name Description IplImage image The image to display. Implements System.Windows.Forms.IDropTarget System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IWin32Window System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.IDisposable System.Windows.Forms.IContainerControl"
  },
  "api/Bonsai.Vision.Design.ImageMashupVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.ImageMashupVisualizer.html",
    "title": "Class ImageMashupVisualizer",
    "keywords": "Class ImageMashupVisualizer Provides an abstract base class for type visualizers that overlay multiple values into a single image display. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer FileCaptureVisualizer IplImageVisualizer Inherited Members MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public abstract class ImageMashupVisualizer : DialogMashupVisualizer Properties | Improve this Doc View Source VisualizerCanvas When overridden in a derived class, gets the graphics canvas used to render the final visualizer output. Declaration public abstract VisualizerCanvas VisualizerCanvas { get; } Property Value Type Description VisualizerCanvas | Improve this Doc View Source VisualizerImage Gets the image buffer used to construct the displayed visualizer background. Declaration public IplImage VisualizerImage { get; } Property Value Type Description IplImage Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides MashupVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source ShowMashup(IList<Object>) Combines the specified collection of values into a single image mashup. Declaration protected virtual void ShowMashup(IList<object> values) Parameters Type Name Description IList < Object > values The collection of values to be displayed by the mashup visualizer. | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides MashupVisualizer.Unload() | Improve this Doc View Source UpdateValues(IList<Object>) Updates the type visualizer state in preparation for displaying the specified collection of values. Declaration protected virtual void UpdateValues(IList<object> values) Parameters Type Name Description IList < Object > values The collection of values to be displayed by the mashup visualizer. | Improve this Doc View Source Visualize(IObservable<IObservable<Object>>, IServiceProvider) Creates an observable sequence used to visualize all notifications emitted by a workflow operator, using this type visualizer and the specified service provider. Declaration public override IObservable<object> Visualize(IObservable<IObservable<object>> source, IServiceProvider provider) Parameters Type Name Description IObservable < IObservable < Object >> source An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Returns Type Description IObservable < Object > An observable sequence where every notification updates the type visualizer object in the UI thread. Overrides DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider)"
  },
  "api/Bonsai.Vision.Design.IplImageCircleEditor.html": {
    "href": "api/Bonsai.Vision.Design.IplImageCircleEditor.html",
    "title": "Class IplImageCircleEditor",
    "keywords": "Class IplImageCircleEditor Provides a user interface for visually editing circular regions on top of the input image sequence. Inheritance Object UITypeEditor DataSourceTypeEditor IplImageCircleEditor IplImageOutputCircleEditor Inherited Members DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class IplImageCircleEditor : DataSourceTypeEditor Constructors | Improve this Doc View Source IplImageCircleEditor() Initializes a new instance of the IplImageCircleEditor class using the input image data source. Declaration public IplImageCircleEditor() | Improve this Doc View Source IplImageCircleEditor(DataSourceTypeEditor.DataSource) Initializes a new instance of the IplImageCircleEditor class using the specified image data source. Declaration protected IplImageCircleEditor(DataSourceTypeEditor.DataSource source) Parameters Type Name Description DataSourceTypeEditor.DataSource source Specifies the source of image notifications to the property editor. Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext) | Improve this Doc View Source GetImageSource(IObservable<IObservable<Object>>) Gets the sequence of images arriving to or from the operator. Declaration protected virtual IObservable<IplImage> GetImageSource(IObservable<IObservable<object>> source) Parameters Type Name Description IObservable < IObservable < Object >> source An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. Returns Type Description IObservable < IplImage >"
  },
  "api/Bonsai.Vision.Design.IplImageEllipseEditor.html": {
    "href": "api/Bonsai.Vision.Design.IplImageEllipseEditor.html",
    "title": "Class IplImageEllipseEditor",
    "keywords": "Class IplImageEllipseEditor Provides a user interface for visually editing elliptical regions on top of the input image sequence. Inheritance Object UITypeEditor DataSourceTypeEditor IplImageEllipseEditor IplImageOutputEllipseEditor Inherited Members DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class IplImageEllipseEditor : DataSourceTypeEditor Constructors | Improve this Doc View Source IplImageEllipseEditor() Initializes a new instance of the IplImageEllipseEditor class using the input image data source. Declaration public IplImageEllipseEditor() | Improve this Doc View Source IplImageEllipseEditor(DataSourceTypeEditor.DataSource) Initializes a new instance of the IplImageEllipseEditor class using the specified image data source. Declaration protected IplImageEllipseEditor(DataSourceTypeEditor.DataSource source) Parameters Type Name Description DataSourceTypeEditor.DataSource source Specifies the source of image notifications to the property editor. Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext) | Improve this Doc View Source GetImageSource(IObservable<IObservable<Object>>) Gets the sequence of images arriving to or from the operator. Declaration protected virtual IObservable<IplImage> GetImageSource(IObservable<IObservable<object>> source) Parameters Type Name Description IObservable < IObservable < Object >> source An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. Returns Type Description IObservable < IplImage >"
  },
  "api/Bonsai.Vision.Design.IplImageLabeledRoiEditor.html": {
    "href": "api/Bonsai.Vision.Design.IplImageLabeledRoiEditor.html",
    "title": "Class IplImageLabeledRoiEditor",
    "keywords": "Class IplImageLabeledRoiEditor Provides a user interface for visually editing labeled polygonal regions on top of the input image sequence. Inheritance Object UITypeEditor DataSourceTypeEditor IplImageRoiEditor IplImageLabeledRoiEditor Inherited Members IplImageRoiEditor.GetImageSource(IObservable<IObservable<Object>>) IplImageRoiEditor.GetEditStyle(ITypeDescriptorContext) IplImageRoiEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class IplImageLabeledRoiEditor : IplImageRoiEditor Constructors | Improve this Doc View Source IplImageLabeledRoiEditor() Initializes a new instance of the IplImageLabeledRoiEditor class. Declaration public IplImageLabeledRoiEditor()"
  },
  "api/Bonsai.Vision.Design.IplImageOutputCircleEditor.html": {
    "href": "api/Bonsai.Vision.Design.IplImageOutputCircleEditor.html",
    "title": "Class IplImageOutputCircleEditor",
    "keywords": "Class IplImageOutputCircleEditor Provides a user interface for visually editing circular regions on top of the output image sequence. Inheritance Object UITypeEditor DataSourceTypeEditor IplImageCircleEditor IplImageOutputCircleEditor Inherited Members IplImageCircleEditor.GetImageSource(IObservable<IObservable<Object>>) IplImageCircleEditor.GetEditStyle(ITypeDescriptorContext) IplImageCircleEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class IplImageOutputCircleEditor : IplImageCircleEditor Constructors | Improve this Doc View Source IplImageOutputCircleEditor() Initializes a new instance of the IplImageOutputCircleEditor class. Declaration public IplImageOutputCircleEditor()"
  },
  "api/Bonsai.Vision.Design.IplImageOutputEllipseEditor.html": {
    "href": "api/Bonsai.Vision.Design.IplImageOutputEllipseEditor.html",
    "title": "Class IplImageOutputEllipseEditor",
    "keywords": "Class IplImageOutputEllipseEditor Provides a user interface for visually editing elliptical regions on top of the output image sequence. Inheritance Object UITypeEditor DataSourceTypeEditor IplImageEllipseEditor IplImageOutputEllipseEditor Inherited Members IplImageEllipseEditor.GetImageSource(IObservable<IObservable<Object>>) IplImageEllipseEditor.GetEditStyle(ITypeDescriptorContext) IplImageEllipseEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class IplImageOutputEllipseEditor : IplImageEllipseEditor Constructors | Improve this Doc View Source IplImageOutputEllipseEditor() Initializes a new instance of the IplImageOutputEllipseEditor class. Declaration public IplImageOutputEllipseEditor()"
  },
  "api/Bonsai.Vision.Design.IplImageOutputQuadrangleEditor.html": {
    "href": "api/Bonsai.Vision.Design.IplImageOutputQuadrangleEditor.html",
    "title": "Class IplImageOutputQuadrangleEditor",
    "keywords": "Class IplImageOutputQuadrangleEditor Provides a user interface for visually editing a quadrangular region on top of the output image sequence. Inheritance Object UITypeEditor DataSourceTypeEditor IplImageQuadrangleEditor IplImageOutputQuadrangleEditor Inherited Members IplImageQuadrangleEditor.GetImageSource(IObservable<IObservable<Object>>) IplImageQuadrangleEditor.GetEditStyle(ITypeDescriptorContext) IplImageQuadrangleEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class IplImageOutputQuadrangleEditor : IplImageQuadrangleEditor Constructors | Improve this Doc View Source IplImageOutputQuadrangleEditor() Initializes a new instance of the IplImageOutputQuadrangleEditor class. Declaration public IplImageOutputQuadrangleEditor()"
  },
  "api/Bonsai.Vision.Design.IplImageOutputRectangleEditor.html": {
    "href": "api/Bonsai.Vision.Design.IplImageOutputRectangleEditor.html",
    "title": "Class IplImageOutputRectangleEditor",
    "keywords": "Class IplImageOutputRectangleEditor Provides a user interface for visually editing a rectangular region on top of the output image sequence. Inheritance Object UITypeEditor DataSourceTypeEditor IplImageRectangleEditor IplImageOutputRectangleEditor Inherited Members IplImageRectangleEditor.GetImageSource(IObservable<IObservable<Object>>) IplImageRectangleEditor.GetEditStyle(ITypeDescriptorContext) IplImageRectangleEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class IplImageOutputRectangleEditor : IplImageRectangleEditor Constructors | Improve this Doc View Source IplImageOutputRectangleEditor() Initializes a new instance of the IplImageOutputRectangleEditor class. Declaration public IplImageOutputRectangleEditor()"
  },
  "api/Bonsai.Vision.Design.IplImageOutputRoiEditor.html": {
    "href": "api/Bonsai.Vision.Design.IplImageOutputRoiEditor.html",
    "title": "Class IplImageOutputRoiEditor",
    "keywords": "Class IplImageOutputRoiEditor Provides a user interface for visually editing polygonal regions on top of the output image sequence. Inheritance Object UITypeEditor DataSourceTypeEditor IplImageRoiEditor IplImageOutputRoiEditor Inherited Members IplImageRoiEditor.GetImageSource(IObservable<IObservable<Object>>) IplImageRoiEditor.GetEditStyle(ITypeDescriptorContext) IplImageRoiEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class IplImageOutputRoiEditor : IplImageRoiEditor Constructors | Improve this Doc View Source IplImageOutputRoiEditor() Initializes a new instance of the IplImageOutputRoiEditor class. Declaration public IplImageOutputRoiEditor()"
  },
  "api/Bonsai.Vision.Design.IplImageOverlay.html": {
    "href": "api/Bonsai.Vision.Design.IplImageOverlay.html",
    "title": "Class IplImageOverlay",
    "keywords": "Class IplImageOverlay Provides a type visualizer that overlays a grayscale mask over an existing image visualizer. Inheritance Object DialogTypeVisualizer IplImageOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class IplImageOverlay : DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.IplImageQuadrangleEditor.html": {
    "href": "api/Bonsai.Vision.Design.IplImageQuadrangleEditor.html",
    "title": "Class IplImageQuadrangleEditor",
    "keywords": "Class IplImageQuadrangleEditor Provides a user interface for visually editing a quadrangular region on top of the input image sequence. Inheritance Object UITypeEditor DataSourceTypeEditor IplImageQuadrangleEditor IplImageOutputQuadrangleEditor Inherited Members DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class IplImageQuadrangleEditor : DataSourceTypeEditor Constructors | Improve this Doc View Source IplImageQuadrangleEditor() Initializes a new instance of the IplImageQuadrangleEditor class. Declaration public IplImageQuadrangleEditor() | Improve this Doc View Source IplImageQuadrangleEditor(DataSourceTypeEditor.DataSource) Initializes a new instance of the IplImageQuadrangleEditor class using the specified image data source. Declaration protected IplImageQuadrangleEditor(DataSourceTypeEditor.DataSource source) Parameters Type Name Description DataSourceTypeEditor.DataSource source Specifies the source of image notifications to the property editor. Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext) | Improve this Doc View Source GetImageSource(IObservable<IObservable<Object>>) Gets the sequence of images arriving to or from the operator. Declaration protected virtual IObservable<IplImage> GetImageSource(IObservable<IObservable<object>> source) Parameters Type Name Description IObservable < IObservable < Object >> source An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. Returns Type Description IObservable < IplImage >"
  },
  "api/Bonsai.Vision.Design.IplImageRectangleEditor.html": {
    "href": "api/Bonsai.Vision.Design.IplImageRectangleEditor.html",
    "title": "Class IplImageRectangleEditor",
    "keywords": "Class IplImageRectangleEditor Provides a user interface for visually editing a rectangular region on top of the input image sequence. Inheritance Object UITypeEditor DataSourceTypeEditor IplImageRectangleEditor IplImageOutputRectangleEditor Inherited Members DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class IplImageRectangleEditor : DataSourceTypeEditor Constructors | Improve this Doc View Source IplImageRectangleEditor() Initializes a new instance of the IplImageRectangleEditor class. Declaration public IplImageRectangleEditor() | Improve this Doc View Source IplImageRectangleEditor(DataSourceTypeEditor.DataSource) Initializes a new instance of the IplImageRectangleEditor class using the specified image data source. Declaration protected IplImageRectangleEditor(DataSourceTypeEditor.DataSource source) Parameters Type Name Description DataSourceTypeEditor.DataSource source Specifies the source of image notifications to the property editor. Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext) | Improve this Doc View Source GetImageSource(IObservable<IObservable<Object>>) Gets the sequence of images arriving to or from the operator. Declaration protected virtual IObservable<IplImage> GetImageSource(IObservable<IObservable<object>> source) Parameters Type Name Description IObservable < IObservable < Object >> source An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. Returns Type Description IObservable < IplImage >"
  },
  "api/Bonsai.Vision.Design.IplImageRoiEditor.html": {
    "href": "api/Bonsai.Vision.Design.IplImageRoiEditor.html",
    "title": "Class IplImageRoiEditor",
    "keywords": "Class IplImageRoiEditor Provides a user interface for visually editing polygonal regions on top of the input image sequence. Inheritance Object UITypeEditor DataSourceTypeEditor IplImageRoiEditor IplImageLabeledRoiEditor IplImageOutputRoiEditor Inherited Members DataSourceTypeEditor.GetDataSource(ITypeDescriptorContext, IServiceProvider) UITypeEditor.EditValue(IServiceProvider, Object) UITypeEditor.GetEditStyle() UITypeEditor.GetPaintValueSupported() UITypeEditor.GetPaintValueSupported(ITypeDescriptorContext) UITypeEditor.PaintValue(Object, Graphics, Rectangle) UITypeEditor.PaintValue(PaintValueEventArgs) UITypeEditor.IsDropDownResizable Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class IplImageRoiEditor : DataSourceTypeEditor Constructors | Improve this Doc View Source IplImageRoiEditor() Initializes a new instance of the IplImageRoiEditor class. Declaration public IplImageRoiEditor() | Improve this Doc View Source IplImageRoiEditor(DataSourceTypeEditor.DataSource) Initializes a new instance of the IplImageRoiEditor class using the specified image data source. Declaration protected IplImageRoiEditor(DataSourceTypeEditor.DataSource source) Parameters Type Name Description DataSourceTypeEditor.DataSource source Specifies the source of image notifications to the property editor. Methods | Improve this Doc View Source EditValue(ITypeDescriptorContext, IServiceProvider, Object) Declaration public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value) Parameters Type Name Description ITypeDescriptorContext context IServiceProvider provider Object value Returns Type Description Object Overrides UITypeEditor.EditValue(ITypeDescriptorContext, IServiceProvider, Object) | Improve this Doc View Source GetEditStyle(ITypeDescriptorContext) Declaration public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) Parameters Type Name Description ITypeDescriptorContext context Returns Type Description UITypeEditorEditStyle Overrides UITypeEditor.GetEditStyle(ITypeDescriptorContext) | Improve this Doc View Source GetImageSource(IObservable<IObservable<Object>>) Gets the sequence of images arriving to or from the operator. Declaration protected virtual IObservable<IplImage> GetImageSource(IObservable<IObservable<object>> source) Parameters Type Name Description IObservable < IObservable < Object >> source An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. Returns Type Description IObservable < IplImage >"
  },
  "api/Bonsai.Vision.Design.IplImageTexture.html": {
    "href": "api/Bonsai.Vision.Design.IplImageTexture.html",
    "title": "Class IplImageTexture",
    "keywords": "Class IplImageTexture Represents a texture buffer which can be updated with IplImage data and rendered onto the current viewport as a full-screen quad. Inheritance Object IplImageTexture Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class IplImageTexture : IDisposable Constructors | Improve this Doc View Source IplImageTexture() Initializes a new instance of the IplImageTexture class. Declaration public IplImageTexture() Methods | Improve this Doc View Source Dispose() Releases all resources used by the IplImageTexture class. Declaration public void Dispose() | Improve this Doc View Source Draw() Binds and draws the texture buffer object as a full-screen quad. Declaration public void Draw() | Improve this Doc View Source Update(IplImage) Updates the texture buffer with the specified image data. Declaration public void Update(IplImage image) Parameters Type Name Description IplImage image An IplImage object containing the pixel data to copy into the texture buffer. Implements System.IDisposable"
  },
  "api/Bonsai.Vision.Design.IplImageVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.IplImageVisualizer.html",
    "title": "Class IplImageVisualizer",
    "keywords": "Class IplImageVisualizer Provides a type visualizer that displays the images in a sequence as fast as the active display is refreshed. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer BinaryRegionExtremesVisualizer CircleVisualizer ConnectedComponentCollectionVisualizer ConnectedComponentVisualizer ContourConvexityVisualizer ContoursVisualizer KeyPointCollectionVisualizer KeyPointOpticalFlowVisualizer LineSegmentVisualizer PolygonVisualizer RectVisualizer RegionActivityCollectionVisualizer TimeIntervalIplImageVisualizer TimestampedIplImageVisualizer Inherited Members ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class IplImageVisualizer : ImageMashupVisualizer Properties | Improve this Doc View Source StatusStrip Gets the status bar control used to display additional information for the image visualizer. Declaration protected StatusStrip StatusStrip { get; } Property Value Type Description StatusStrip | Improve this Doc View Source StatusStripEnabled Gets or sets a value indicating whether the status bar should be shown when right-clicking the image visualizer. Declaration protected bool StatusStripEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source VisualizerCanvas Gets the graphics canvas used to render the final visualizer output. Declaration public override VisualizerCanvas VisualizerCanvas { get; } Property Value Type Description VisualizerCanvas Overrides ImageMashupVisualizer.VisualizerCanvas Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides ImageMashupVisualizer.Load(IServiceProvider) | Improve this Doc View Source RenderFrame() Renders all graphics to the visualizer canvas. Override this method to overlay additional graphics elements on top of the image texture. Declaration protected virtual void RenderFrame() | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides ImageMashupVisualizer.Show(Object) | Improve this Doc View Source ShowMashup(IList<Object>) Combines the specified collection of values into a single image mashup. Declaration protected override void ShowMashup(IList<object> values) Parameters Type Name Description IList < Object > values The collection of values to be displayed by the mashup visualizer. Overrides ImageMashupVisualizer.ShowMashup(IList<Object>) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides ImageMashupVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.KeyPointCollectionOverlay.html": {
    "href": "api/Bonsai.Vision.Design.KeyPointCollectionOverlay.html",
    "title": "Class KeyPointCollectionOverlay",
    "keywords": "Class KeyPointCollectionOverlay Provides a type visualizer that overlays a collection of key points over an existing image visualizer. Inheritance Object DialogTypeVisualizer KeyPointCollectionOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class KeyPointCollectionOverlay : DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.KeyPointCollectionVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.KeyPointCollectionVisualizer.html",
    "title": "Class KeyPointCollectionVisualizer",
    "keywords": "Class KeyPointCollectionVisualizer Provides a type visualizer that displays the collection of key points, or features, extracted from an image frame. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer KeyPointCollectionVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas IplImageVisualizer.ShowMashup(IList<Object>) IplImageVisualizer.RenderFrame() IplImageVisualizer.Load(IServiceProvider) IplImageVisualizer.Unload() ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class KeyPointCollectionVisualizer : IplImageVisualizer Methods | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides IplImageVisualizer.Show(Object)"
  },
  "api/Bonsai.Vision.Design.KeyPointOpticalFlowOverlay.html": {
    "href": "api/Bonsai.Vision.Design.KeyPointOpticalFlowOverlay.html",
    "title": "Class KeyPointOpticalFlowOverlay",
    "keywords": "Class KeyPointOpticalFlowOverlay Provides a type visualizer that overlays the sparse optical flow between key points over an existing image visualizer. Inheritance Object DialogTypeVisualizer KeyPointOpticalFlowOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class KeyPointOpticalFlowOverlay : DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.KeyPointOpticalFlowVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.KeyPointOpticalFlowVisualizer.html",
    "title": "Class KeyPointOpticalFlowVisualizer",
    "keywords": "Class KeyPointOpticalFlowVisualizer Provides a type visualizer that displays the sparse optical flow between key points, or features, extracted from an image frame. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer KeyPointOpticalFlowVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas IplImageVisualizer.ShowMashup(IList<Object>) IplImageVisualizer.RenderFrame() IplImageVisualizer.Load(IServiceProvider) IplImageVisualizer.Unload() ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class KeyPointOpticalFlowVisualizer : IplImageVisualizer Methods | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides IplImageVisualizer.Show(Object)"
  },
  "api/Bonsai.Vision.Design.LineSegmentOverlay.html": {
    "href": "api/Bonsai.Vision.Design.LineSegmentOverlay.html",
    "title": "Class LineSegmentOverlay",
    "keywords": "Class LineSegmentOverlay Provides a type visualizer that overlays a collection of line segments over an existing image visualizer. Inheritance Object DialogTypeVisualizer LineSegmentOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class LineSegmentOverlay : DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.LineSegmentVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.LineSegmentVisualizer.html",
    "title": "Class LineSegmentVisualizer",
    "keywords": "Class LineSegmentVisualizer Provides a type visualizer for a collection of line segments. If the input is a sequence of images, the visualizer will overlay each line segment on top of the original image. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer LineSegmentVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas IplImageVisualizer.ShowMashup(IList<Object>) IplImageVisualizer.RenderFrame() ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class LineSegmentVisualizer : IplImageVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides IplImageVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides IplImageVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides IplImageVisualizer.Unload() | Improve this Doc View Source Visualize(IObservable<IObservable<Object>>, IServiceProvider) Creates an observable sequence used to visualize all notifications emitted by a workflow operator, using this type visualizer and the specified service provider. Declaration public override IObservable<object> Visualize(IObservable<IObservable<object>> source, IServiceProvider provider) Parameters Type Name Description IObservable < IObservable < Object >> source An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Returns Type Description IObservable < Object > An observable sequence where every notification updates the type visualizer object in the UI thread. Overrides ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider)"
  },
  "api/Bonsai.Vision.Design.PointOverlay.html": {
    "href": "api/Bonsai.Vision.Design.PointOverlay.html",
    "title": "Class PointOverlay",
    "keywords": "Class PointOverlay Provides a type visualizer that overlays a sequence of points over an existing image visualizer. Inheritance Object DialogTypeVisualizer PointOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class PointOverlay : DialogTypeVisualizer Properties | Improve this Doc View Source Capacity Gets or sets a value specifying how many previous points to include in the point sequence. Declaration public int Capacity { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Tracking Gets or sets a value specifying the tracking mode used to overlay the point sequence on the image visualizer. Declaration public TrackingMode Tracking { get; set; } Property Value Type Description TrackingMode Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.PointVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.PointVisualizer.html",
    "title": "Class PointVisualizer",
    "keywords": "Class PointVisualizer Provides a type visualizer for 2D points. Inheritance Object DialogTypeVisualizer ObjectTextVisualizer PointVisualizer Inherited Members ObjectTextVisualizer.Show(Object) ObjectTextVisualizer.Load(IServiceProvider) ObjectTextVisualizer.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class PointVisualizer : ObjectTextVisualizer"
  },
  "api/Bonsai.Vision.Design.PolygonOverlay.html": {
    "href": "api/Bonsai.Vision.Design.PolygonOverlay.html",
    "title": "Class PolygonOverlay",
    "keywords": "Class PolygonOverlay Provides a type visualizer that overlays a collection of polygonal regions over an existing image visualizer. Inheritance Object DialogTypeVisualizer PolygonOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class PolygonOverlay : DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.PolygonVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.PolygonVisualizer.html",
    "title": "Class PolygonVisualizer",
    "keywords": "Class PolygonVisualizer Provides a type visualizer for a collection of polygonal regions. If the input is a sequence of images, the visualizer will overlay each rectangle on top of the original image. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer PolygonVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas IplImageVisualizer.ShowMashup(IList<Object>) IplImageVisualizer.RenderFrame() ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class PolygonVisualizer : IplImageVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides IplImageVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides IplImageVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides IplImageVisualizer.Unload() | Improve this Doc View Source Visualize(IObservable<IObservable<Object>>, IServiceProvider) Creates an observable sequence used to visualize all notifications emitted by a workflow operator, using this type visualizer and the specified service provider. Declaration public override IObservable<object> Visualize(IObservable<IObservable<object>> source, IServiceProvider provider) Parameters Type Name Description IObservable < IObservable < Object >> source An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Returns Type Description IObservable < Object > An observable sequence where every notification updates the type visualizer object in the UI thread. Overrides ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider)"
  },
  "api/Bonsai.Vision.Design.RectOverlay.html": {
    "href": "api/Bonsai.Vision.Design.RectOverlay.html",
    "title": "Class RectOverlay",
    "keywords": "Class RectOverlay Provides a type visualizer that overlays the visual representation of a rectangle over an existing image visualizer. Inheritance Object DialogTypeVisualizer RectOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class RectOverlay : DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.RectVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.RectVisualizer.html",
    "title": "Class RectVisualizer",
    "keywords": "Class RectVisualizer Provides a type visualizer for rectangle parameters. If the input is a sequence of images, the visualizer will overlay each rectangle on top of the original image. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer RectVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas IplImageVisualizer.ShowMashup(IList<Object>) IplImageVisualizer.RenderFrame() ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class RectVisualizer : IplImageVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides IplImageVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides IplImageVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides IplImageVisualizer.Unload() | Improve this Doc View Source Visualize(IObservable<IObservable<Object>>, IServiceProvider) Creates an observable sequence used to visualize all notifications emitted by a workflow operator, using this type visualizer and the specified service provider. Declaration public override IObservable<object> Visualize(IObservable<IObservable<object>> source, IServiceProvider provider) Parameters Type Name Description IObservable < IObservable < Object >> source An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Returns Type Description IObservable < Object > An observable sequence where every notification updates the type visualizer object in the UI thread. Overrides ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider)"
  },
  "api/Bonsai.Vision.Design.RegionActivityCollectionVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.RegionActivityCollectionVisualizer.html",
    "title": "Class RegionActivityCollectionVisualizer",
    "keywords": "Class RegionActivityCollectionVisualizer Provides a type visualizer that displays a collection of polygonal regions of interest and their activity measurements. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer RegionActivityCollectionVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas IplImageVisualizer.ShowMashup(IList<Object>) ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class RegionActivityCollectionVisualizer : IplImageVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides IplImageVisualizer.Load(IServiceProvider) | Improve this Doc View Source RenderFrame() Renders all graphics to the visualizer canvas. Override this method to overlay additional graphics elements on top of the image texture. Declaration protected override void RenderFrame() Overrides IplImageVisualizer.RenderFrame() | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides IplImageVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides IplImageVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.ScalarHistogramVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.ScalarHistogramVisualizer.html",
    "title": "Class ScalarHistogramVisualizer",
    "keywords": "Class ScalarHistogramVisualizer Provides a type visualizer for per-channel color histograms. Inheritance Object DialogTypeVisualizer ScalarHistogramVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class ScalarHistogramVisualizer : DialogTypeVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides DialogTypeVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides DialogTypeVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides DialogTypeVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.ScalarVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.ScalarVisualizer.html",
    "title": "Class ScalarVisualizer",
    "keywords": "Class ScalarVisualizer Provides a type visualizer that displays a sequence of Scalar values as a time series. Inheritance Object DialogTypeVisualizer TimeSeriesVisualizerBase TimeSeriesVisualizer ScalarVisualizer Inherited Members TimeSeriesVisualizer.Capacity TimeSeriesVisualizer.Min TimeSeriesVisualizer.Max TimeSeriesVisualizer.AutoScale TimeSeriesVisualizerBase.AddValue(DateTime, Double[]) TimeSeriesVisualizerBase.Load(IServiceProvider) TimeSeriesVisualizerBase.Unload() DialogTypeVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class ScalarVisualizer : TimeSeriesVisualizer Constructors | Improve this Doc View Source ScalarVisualizer() Initializes a new instance of the ScalarVisualizer class. Declaration public ScalarVisualizer() Methods | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides TimeSeriesVisualizer.Show(Object)"
  },
  "api/Bonsai.Vision.Design.SeekEventArgs.html": {
    "href": "api/Bonsai.Vision.Design.SeekEventArgs.html",
    "title": "Class SeekEventArgs",
    "keywords": "Class SeekEventArgs Provides data for the Seek event. Inheritance Object EventArgs SeekEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class SeekEventArgs : EventArgs Constructors | Improve this Doc View Source SeekEventArgs(Int32) Initializes a new instance of the SeekEventArgs class using the specified frame number. Declaration public SeekEventArgs(int frameNumber) Parameters Type Name Description Int32 frameNumber The zero-based index of the frame the player should move to. Properties | Improve this Doc View Source FrameNumber Gets the zero-based index of the frame the player should move to. Declaration public int FrameNumber { get; } Property Value Type Description Int32"
  },
  "api/Bonsai.Vision.Design.TimeIntervalIplImageVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.TimeIntervalIplImageVisualizer.html",
    "title": "Class TimeIntervalIplImageVisualizer",
    "keywords": "Class TimeIntervalIplImageVisualizer Provides a type visualizer that displays images in a sequence and adds the interval between each image in the sequence to the status bar. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer TimeIntervalIplImageVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas IplImageVisualizer.ShowMashup(IList<Object>) IplImageVisualizer.RenderFrame() ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class TimeIntervalIplImageVisualizer : IplImageVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides IplImageVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides IplImageVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides IplImageVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.TimestampedIplImageVisualizer.html": {
    "href": "api/Bonsai.Vision.Design.TimestampedIplImageVisualizer.html",
    "title": "Class TimestampedIplImageVisualizer",
    "keywords": "Class TimestampedIplImageVisualizer Provides a type visualizer that displays images in a sequence and adds the timestamp for each image to the status bar. Inheritance Object DialogTypeVisualizer MashupVisualizer Bonsai.Design.DialogMashupVisualizer ImageMashupVisualizer IplImageVisualizer TimestampedIplImageVisualizer Inherited Members IplImageVisualizer.StatusStripEnabled IplImageVisualizer.StatusStrip IplImageVisualizer.VisualizerCanvas IplImageVisualizer.ShowMashup(IList<Object>) IplImageVisualizer.RenderFrame() ImageMashupVisualizer.VisualizerImage ImageMashupVisualizer.UpdateValues(IList<Object>) ImageMashupVisualizer.Visualize(IObservable<IObservable<Object>>, IServiceProvider) MashupVisualizer.MashupSources MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(Int32, Int32) DialogTypeVisualizer.SequenceCompleted() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class TimestampedIplImageVisualizer : IplImageVisualizer Methods | Improve this Doc View Source Load(IServiceProvider) Loads type visualizer resources using the specified service provider. Declaration public override void Load(IServiceProvider provider) Parameters Type Name Description IServiceProvider provider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Overrides IplImageVisualizer.Load(IServiceProvider) | Improve this Doc View Source Show(Object) Updates the type visualizer to display the specified value object. Declaration public override void Show(object value) Parameters Type Name Description Object value The value to visualize. Overrides IplImageVisualizer.Show(Object) | Improve this Doc View Source Unload() Unloads all type visualizer resources. Declaration public override void Unload() Overrides IplImageVisualizer.Unload()"
  },
  "api/Bonsai.Vision.Design.TrackingMode.html": {
    "href": "api/Bonsai.Vision.Design.TrackingMode.html",
    "title": "Enum TrackingMode",
    "keywords": "Enum TrackingMode Specifies the tracking mode used to overlay a point sequence over an existing image visualizer. Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public enum TrackingMode Fields Name Description Infinite Specifies that all recorded points should be overlaid as an infinite trace on the image. None Specifies that only the current point should be overlaid on the image. Rolling Specifies that a fixed rolling number of the latest points should be overlaid on the image."
  },
  "api/Bonsai.Vision.Design.VideoPlayer.html": {
    "href": "api/Bonsai.Vision.Design.VideoPlayer.html",
    "title": "Class VideoPlayer",
    "keywords": "Class VideoPlayer Represents a graphics accelerated video player control. Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl VideoPlayer Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members UserControl.ValidateChildren() UserControl.ValidateChildren(ValidationConstraints) UserControl.OnCreateControl() UserControl.OnResize(EventArgs) UserControl.OnMouseDown(MouseEventArgs) UserControl.WndProc(Message) UserControl.AutoSize UserControl.AutoSizeMode UserControl.AutoValidate UserControl.BorderStyle UserControl.CreateParams UserControl.DefaultSize UserControl.AutoSizeChanged UserControl.AutoValidateChanged UserControl.Load ContainerControl.IContainerControl.ActivateControl(Control) ContainerControl.AdjustFormScrollbars(Boolean) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnFontChanged(EventArgs) ContainerControl.OnLayout(LayoutEventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.ProcessDialogChar(Char) ContainerControl.ProcessDialogKey(Keys) ContainerControl.ProcessMnemonic(Char) ContainerControl.ProcessTabKey(Boolean) ContainerControl.Select(Boolean, Boolean) ContainerControl.UpdateDefaultButton() ContainerControl.Validate() ContainerControl.Validate(Boolean) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(Int32) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.OnVisibleChanged(EventArgs) ScrollableControl.ScaleControl(SizeF, BoundsSpecified) ScrollableControl.SetDisplayRectLocation(Int32, Int32) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(Int32, Int32) ScrollableControl.SetScrollState(Int32, Boolean) ScrollableControl.AutoScroll ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(Int32) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateControlsInstance() Control.CreateGraphics() Control.CreateHandle() Control.CreateControl() Control.DefWndProc(Message) Control.DestroyHandle() Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Control.GetNextControl(Control, Boolean) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsMnemonic(Char, String) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBackgroundImageChanged(EventArgs) Control.OnBackgroundImageLayoutChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnEnabledChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnTextChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnHandleCreated(EventArgs) Control.OnLocationChanged(EventArgs) Control.OnHandleDestroyed(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.OnEnter(EventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnPaint(PaintEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnStyleChanged(EventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(Message) Control.PreProcessControlMessage(Message) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.ProcessKeyPreview(Message) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetClientSizeCore(Int32, Int32) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.SetVisibleCore(Boolean) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateZOrder() Control.UpdateStyles() Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragDrop(DragEventArgs) Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackColor Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.ClientSize Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Location Control.Margin Control.MaximumSize Control.MinimumSize Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.Size Control.TabIndex Control.TabStop Control.Tag Control.Text Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.DefaultImeMode Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.ToString() Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class VideoPlayer : UserControl, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Constructors | Improve this Doc View Source VideoPlayer() Initializes a new instance of the VideoPlayer class. Declaration public VideoPlayer() Properties | Improve this Doc View Source Canvas Gets the graphics canvas used to render video frames. Declaration public VisualizerCanvas Canvas { get; } Property Value Type Description VisualizerCanvas | Improve this Doc View Source FrameCount Gets or sets the number of frames in the video. Declaration public int FrameCount { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Loop Gets or sets a value indicating whether the video should loop when the end of the file is reached. Declaration public bool Loop { get; set; } Property Value Type Description Boolean | Improve this Doc View Source PlaybackRate Gets or sets the speed, in frames per second, at which to play images from the video. Declaration public double PlaybackRate { get; set; } Property Value Type Description Double | Improve this Doc View Source Playing Gets or sets a value specifying whether the video is playing. Declaration public bool Playing { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Dispose(Boolean) Clean up any resources being used. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if managed resources should be disposed; otherwise, false. Overrides ContainerControl.Dispose(Boolean) | Improve this Doc View Source OnLoad(EventArgs) Declaration protected override void OnLoad(EventArgs e) Parameters Type Name Description EventArgs e Overrides UserControl.OnLoad(EventArgs) | Improve this Doc View Source OnPlaybackRateChanged(EventArgs) Raises the PlaybackRateChanged event. Declaration protected virtual void OnPlaybackRateChanged(EventArgs e) Parameters Type Name Description EventArgs e A EventArgs that contains the event data. | Improve this Doc View Source OnPlayingChanged(EventArgs) Raises the PlayingChanged event. Declaration protected virtual void OnPlayingChanged(EventArgs e) Parameters Type Name Description EventArgs e A EventArgs that contains the event data. | Improve this Doc View Source OnSeek(SeekEventArgs) Raises the Seek event. Declaration protected virtual void OnSeek(SeekEventArgs e) Parameters Type Name Description SeekEventArgs e A SeekEventArgs that contains the event data. | Improve this Doc View Source ProcessCmdKey(ref Message, Keys) Declaration protected override bool ProcessCmdKey(ref Message msg, Keys keyData) Parameters Type Name Description Message msg Keys keyData Returns Type Description Boolean Overrides ContainerControl.ProcessCmdKey(Message, Keys) | Improve this Doc View Source Update(IplImage, Int32) Updates the video player control with the specified frame. Declaration public void Update(IplImage frame, int frameNumber) Parameters Type Name Description IplImage frame An IplImage object containing the pixel data of the current video frame. Int32 frameNumber The zero-based index of the current video frame. Events | Improve this Doc View Source LoopChanged Occurs when the Loop property value changes. Declaration public event EventHandler LoopChanged Event Type Type Description EventHandler | Improve this Doc View Source PlaybackRateChanged Occurs when the PlaybackRate property value changes. Declaration public event EventHandler PlaybackRateChanged Event Type Type Description EventHandler | Improve this Doc View Source PlayingChanged Occurs when the Playing property value changes. Declaration public event EventHandler PlayingChanged Event Type Type Description EventHandler | Improve this Doc View Source Seek Occurs when the user moves the video seek bar. Declaration public event EventHandler<SeekEventArgs> Seek Event Type Type Description EventHandler < SeekEventArgs > Implements System.Windows.Forms.IDropTarget System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IWin32Window System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.IDisposable System.Windows.Forms.IContainerControl"
  },
  "api/Bonsai.Vision.Design.VisualizerCanvas.html": {
    "href": "api/Bonsai.Vision.Design.VisualizerCanvas.html",
    "title": "Class VisualizerCanvas",
    "keywords": "Class VisualizerCanvas Provides a control with a graphics context and a simple render loop for scheduling accelerated rendering operations. Inheritance Object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl VisualizerCanvas ImageBox Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members UserControl.ValidateChildren() UserControl.ValidateChildren(ValidationConstraints) UserControl.OnCreateControl() UserControl.OnLoad(EventArgs) UserControl.OnResize(EventArgs) UserControl.OnMouseDown(MouseEventArgs) UserControl.WndProc(Message) UserControl.AutoSize UserControl.AutoSizeMode UserControl.AutoValidate UserControl.BorderStyle UserControl.CreateParams UserControl.DefaultSize UserControl.AutoSizeChanged UserControl.AutoValidateChanged UserControl.Load ContainerControl.IContainerControl.ActivateControl(Control) ContainerControl.AdjustFormScrollbars(Boolean) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnFontChanged(EventArgs) ContainerControl.OnLayout(LayoutEventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.ProcessDialogChar(Char) ContainerControl.ProcessDialogKey(Keys) ContainerControl.ProcessCmdKey(Message, Keys) ContainerControl.ProcessMnemonic(Char) ContainerControl.ProcessTabKey(Boolean) ContainerControl.Select(Boolean, Boolean) ContainerControl.UpdateDefaultButton() ContainerControl.Validate() ContainerControl.Validate(Boolean) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(Int32) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.OnVisibleChanged(EventArgs) ScrollableControl.ScaleControl(SizeF, BoundsSpecified) ScrollableControl.SetDisplayRectLocation(Int32, Int32) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(Int32, Int32) ScrollableControl.SetScrollState(Int32, Boolean) ScrollableControl.AutoScroll ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(Int32) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, Int32) Control.AccessibilityNotifyClients(AccessibleEvents, Int32, Int32) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, Object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateControlsInstance() Control.CreateGraphics() Control.CreateHandle() Control.CreateControl() Control.DefWndProc(Message) Control.DestroyHandle() Control.DoDragDrop(Object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(Object, KeyEventArgs) Control.RaiseMouseEvent(Object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Control.GetNextControl(Control, Boolean) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, Boolean) Control.Invalidate() Control.Invalidate(Boolean) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, Boolean) Control.Invoke(Delegate) Control.Invoke(Delegate, Object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(Char) Control.IsInputKey(Keys) Control.IsMnemonic(Char, String) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBackgroundImageChanged(EventArgs) Control.OnBackgroundImageLayoutChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnEnabledChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnTextChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnHandleCreated(EventArgs) Control.OnLocationChanged(EventArgs) Control.OnHandleDestroyed(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.OnEnter(EventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnPaint(PaintEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnStyleChanged(EventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, String) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(Message) Control.PreProcessControlMessage(Message) Control.ProcessKeyEventArgs(Message) Control.ProcessKeyMessage(Message) Control.ProcessKeyPreview(Message) Control.RaiseDragEvent(Object, DragEventArgs) Control.RaisePaintEvent(Object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(Boolean) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, Boolean, Boolean, Boolean, Boolean) Control.SendToBack() Control.SetBounds(Int32, Int32, Int32, Int32) Control.SetBounds(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetBoundsCore(Int32, Int32, Int32, Int32, BoundsSpecified) Control.SetClientSizeCore(Int32, Int32) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, Boolean) Control.SetTopLevel(Boolean) Control.SetVisibleCore(Boolean) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(Int32, Int32, Int32, Int32) Control.UpdateBounds(Int32, Int32, Int32, Int32, Int32, Int32) Control.UpdateZOrder() Control.UpdateStyles() Control.IDropTarget.OnDragEnter(DragEventArgs) Control.IDropTarget.OnDragOver(DragEventArgs) Control.IDropTarget.OnDragLeave(EventArgs) Control.IDropTarget.OnDragDrop(DragEventArgs) Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackColor Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.ClientSize Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Location Control.Margin Control.MaximumSize Control.MinimumSize Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.Size Control.TabIndex Control.TabStop Control.Tag Control.Text Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.DefaultImeMode Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.ToString() Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Design Assembly : Bonsai.Vision.Design.dll Syntax public class VisualizerCanvas : UserControl, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Constructors | Improve this Doc View Source VisualizerCanvas() Initializes a new instance of the VisualizerCanvas class. Declaration public VisualizerCanvas() Properties | Improve this Doc View Source Canvas Gets the control containing the graphics context on which to call render operations. Declaration public GLControl Canvas { get; } Property Value Type Description GLControl Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides ContainerControl.Dispose(Boolean) | Improve this Doc View Source MakeCurrent() Makes the canvas context current in the calling thread. Declaration public void MakeCurrent() | Improve this Doc View Source OnRenderFrame(EventArgs) Raises the RenderFrame event. Declaration protected virtual void OnRenderFrame(EventArgs e) Parameters Type Name Description EventArgs e A EventArgs that contains the event data. | Improve this Doc View Source OnSwapBuffers(EventArgs) Raises the SwapBuffers event. Declaration protected virtual void OnSwapBuffers(EventArgs e) Parameters Type Name Description EventArgs e A EventArgs that contains the event data. Events | Improve this Doc View Source RenderFrame Occurs when it is time to render a frame. Declaration public event EventHandler RenderFrame Event Type Type Description EventHandler | Improve this Doc View Source SwapBuffers Occurs immediately after the front and back buffers are swapped, and the rendered scene is presented to the screen. Declaration public event EventHandler SwapBuffers Event Type Type Description EventHandler Implements System.Windows.Forms.IDropTarget System.ComponentModel.ISynchronizeInvoke System.Windows.Forms.IWin32Window System.Windows.Forms.IBindableComponent System.ComponentModel.IComponent System.IDisposable System.Windows.Forms.IContainerControl"
  },
  "api/Bonsai.Vision.DistanceTransform.html": {
    "href": "api/Bonsai.Vision.DistanceTransform.html",
    "title": "Class DistanceTransform",
    "keywords": "Class DistanceTransform Represents an operator that calculates the distance to the closest zero pixel for all non-zero pixels of each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > DistanceTransform Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class DistanceTransform : Transform<IplImage, IplImage> Properties | Improve this Doc View Source DistanceType Gets or sets a value specifying the type of distance function to use. Declaration [TypeConverter(typeof(DistanceTypeConverter))] public DistanceType DistanceType { get; set; } Property Value Type Description DistanceType Methods | Improve this Doc View Source Process(IObservable<IplImage>) Calculates the distance to the closest zero pixel for all non-zero pixels of each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images for which to compute the distance transform. Returns Type Description IObservable < IplImage > A sequence of IplImage objects where each pixel contains the calculated distance from the original image element to the closest zero pixel. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.DrawConnectedComponents.html": {
    "href": "api/Bonsai.Vision.DrawConnectedComponents.html",
    "title": "Class DrawConnectedComponents",
    "keywords": "Class DrawConnectedComponents Represents an operator that renders each set of connected components in the sequence as an image. Inheritance Object Combinator < ConnectedComponentCollection , IplImage > Transform < ConnectedComponentCollection , IplImage > DrawConnectedComponents Inherited Members Combinator<ConnectedComponentCollection, IplImage>.Process(IObservable<ConnectedComponentCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class DrawConnectedComponents : Transform<ConnectedComponentCollection, IplImage> Methods | Improve this Doc View Source Process(IObservable<ConnectedComponentCollection>) Renders each set of connected components in an observable sequence as a new image. Declaration public override IObservable<IplImage> Process(IObservable<ConnectedComponentCollection> source) Parameters Type Name Description IObservable < ConnectedComponentCollection > source The sequence of ConnectedComponentCollection objects to draw. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the result of rendering each set of connected components as an image. Overrides Bonsai.Combinator<Bonsai.Vision.ConnectedComponentCollection, OpenCV.Net.IplImage>.Process(System.IObservable<Bonsai.Vision.ConnectedComponentCollection>)"
  },
  "api/Bonsai.Vision.DrawContours.html": {
    "href": "api/Bonsai.Vision.DrawContours.html",
    "title": "Class DrawContours",
    "keywords": "Class DrawContours Represents an operator that renders each set of contours in the sequence as an image. Inheritance Object Combinator < Contours , IplImage > Transform < Contours , IplImage > DrawContours Inherited Members Combinator<Contours, IplImage>.Process(IObservable<Contours>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class DrawContours : Transform<Contours, IplImage> Properties | Improve this Doc View Source MaxLevel Gets or sets the maximum level of the contour hierarchy to draw. Declaration public int MaxLevel { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Thickness Gets or sets the thickness of the lines with which the contours are drawn. If negative, the contour interiors are drawn. Declaration public int Thickness { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<Contours>) Renders each set of contours in an observable sequence as a new image. Declaration public override IObservable<IplImage> Process(IObservable<Contours> source) Parameters Type Name Description IObservable < Contours > source The sequence of Contours objects to draw. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the result of rendering each set of contours as an image. Overrides Bonsai.Combinator<Bonsai.Vision.Contours, OpenCV.Net.IplImage>.Process(System.IObservable<Bonsai.Vision.Contours>) | Improve this Doc View Source Process(IObservable<Contour>) Renders each contour in an observable sequence as a new image. Declaration public IObservable<IplImage> Process(IObservable<Contour> source) Parameters Type Name Description IObservable < Contour > source The sequence of contour objects to draw. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the result of rendering each contour as an image."
  },
  "api/Bonsai.Vision.Drawing.AddImage.html": {
    "href": "api/Bonsai.Vision.Drawing.AddImage.html",
    "title": "Class AddImage",
    "keywords": "Class AddImage Represents an operator that specifies drawing the specified image to the canvas. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CanvasElement AddImage Inherited Members CanvasElement.Process(IObservable<Canvas>) Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class AddImage : CanvasElement Properties | Improve this Doc View Source Destination Gets or sets the optional region in which to draw the image. Declaration public Rect Destination { get; set; } Property Value Type Description Rect | Improve this Doc View Source Image Gets or sets the image to draw. Declaration public IplImage Image { get; set; } Property Value Type Description IplImage | Improve this Doc View Source Interpolation Gets or sets the interpolation method used to resize the input image, if required. Declaration public SubPixelInterpolation Interpolation { get; set; } Property Value Type Description SubPixelInterpolation Methods | Improve this Doc View Source GetRenderer() Returns the image drawing operation. Declaration protected override Action<IplImage> GetRenderer() Returns Type Description Action < IplImage > The Action<T> object that will be invoked to apply the drawing operation to the canvas bitmap during rendering. Overrides CanvasElement.GetRenderer()"
  },
  "api/Bonsai.Vision.Drawing.AddText.html": {
    "href": "api/Bonsai.Vision.Drawing.AddText.html",
    "title": "Class AddText",
    "keywords": "Class AddText Represents an operator that specifies rendering text strokes with the specified font and color at a given location. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CanvasElement AddTextBase AddText Inherited Members AddTextBase.Text AddTextBase.Font AddTextBase.Alignment AddTextBase.LineAlignment AddTextBase.TextRenderingHint AddTextBase.Color AddTextBase.FontXml CanvasElement.Process(IObservable<Canvas>) Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class AddText : AddTextBase Properties | Improve this Doc View Source Origin Gets or sets the coordinates of the upper-left corner of the drawn text. Declaration public Point Origin { get; set; } Property Value Type Description Point Methods | Improve this Doc View Source GetRenderer() Returns the text rendering operation. Declaration protected override Action<IplImage> GetRenderer() Returns Type Description Action < IplImage > The Action<T> object that will be invoked to apply the drawing operation to the canvas bitmap during rendering. Overrides CanvasElement.GetRenderer()"
  },
  "api/Bonsai.Vision.Drawing.AddTextBase.html": {
    "href": "api/Bonsai.Vision.Drawing.AddTextBase.html",
    "title": "Class AddTextBase",
    "keywords": "Class AddTextBase Provides an abstract base class for operators that specify drawing text strokes with a specified font and color. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CanvasElement AddTextBase AddText AddTextBox Inherited Members CanvasElement.GetRenderer() CanvasElement.Process(IObservable<Canvas>) Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public abstract class AddTextBase : CanvasElement Properties | Improve this Doc View Source Alignment Gets or sets the horizontal alignment of the text. Declaration public StringAlignment Alignment { get; set; } Property Value Type Description StringAlignment | Improve this Doc View Source Color Gets or sets the color of the text. Declaration [Range(0, 255)] [Precision(0, 1)] [TypeConverter(typeof(BgraScalarConverter))] public Scalar Color { get; set; } Property Value Type Description Scalar | Improve this Doc View Source Font Gets or sets the font style used to render the text strokes. Declaration public Font Font { get; set; } Property Value Type Description Font | Improve this Doc View Source FontXml Gets or sets an XML representation of the font for serialization. Declaration [Browsable(false)] public string FontXml { get; set; } Property Value Type Description String | Improve this Doc View Source LineAlignment Gets or sets the vertical alignment of the text. Declaration public StringAlignment LineAlignment { get; set; } Property Value Type Description StringAlignment | Improve this Doc View Source Text Gets or sets the text to draw. Declaration public string Text { get; set; } Property Value Type Description String | Improve this Doc View Source TextRenderingHint Gets or sets the rendering mode used for the text strokes. Declaration public TextRenderingHint TextRenderingHint { get; set; } Property Value Type Description TextRenderingHint"
  },
  "api/Bonsai.Vision.Drawing.AddTextBox.html": {
    "href": "api/Bonsai.Vision.Drawing.AddTextBox.html",
    "title": "Class AddTextBox",
    "keywords": "Class AddTextBox Represents an operator that specifies rendering text strokes with the specified font and color inside the specified layout rectangle. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CanvasElement AddTextBase AddTextBox Inherited Members AddTextBase.Text AddTextBase.Font AddTextBase.Alignment AddTextBase.LineAlignment AddTextBase.TextRenderingHint AddTextBase.Color AddTextBase.FontXml CanvasElement.Process(IObservable<Canvas>) Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class AddTextBox : AddTextBase Properties | Improve this Doc View Source Destination Gets or sets the optional region in which to draw the text. By default the box will fill the entire image. Declaration public Rect Destination { get; set; } Property Value Type Description Rect Methods | Improve this Doc View Source GetRenderer() Returns the text rendering operation. Declaration protected override Action<IplImage> GetRenderer() Returns Type Description Action < IplImage > The Action<T> object that will be invoked to apply the drawing operation to the canvas bitmap during rendering. Overrides CanvasElement.GetRenderer()"
  },
  "api/Bonsai.Vision.Drawing.Canvas.html": {
    "href": "api/Bonsai.Vision.Drawing.Canvas.html",
    "title": "Class Canvas",
    "keywords": "Class Canvas Provides support for lazy initialization and rendering of dynamic bitmaps. Inheritance Object Canvas Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class Canvas Remarks Each canvas stores a generator function, used to allocate the bitmap memory, and an immutable sequence of drawing operations to be applied to the bitmap in order to produce the final image. Methods | Improve this Doc View Source Draw() Allocates the bitmap memory and applies the sequence of operations to create a new drawing. Declaration public IplImage Draw() Returns Type Description IplImage An IplImage object representing the result of the cumulative application of all the drawing operations to the canvas bitmap. | Improve this Doc View Source Merge(Canvas, Canvas) Combines the drawing operations of two specified canvas. Declaration public static Canvas Merge(Canvas source, Canvas other) Parameters Type Name Description Canvas source The first canvas object to merge. Canvas other The second canvas object to merge. The bitmap allocators for both canvas objects must be identical for drawing operations to be composable. Returns Type Description Canvas A new Canvas object representing the application of the operations of the source canvas, followed by the operations of the other canvas. Exceptions Type Condition ArgumentNullException source or other is null. ArgumentException The bitmap allocator of the other canvas is not the same as the allocator for the source canvas. Operators | Improve this Doc View Source Addition(Canvas, Canvas) Concatenates the drawing operations of two specified canvas. Declaration public static Canvas operator +(Canvas left, Canvas right) Parameters Type Name Description Canvas left The first canvas to concatenate. Canvas right The second canvas to concatenate. Returns Type Description Canvas A new Canvas object representing the application of the operations of the left canvas, followed by the operations of the right canvas."
  },
  "api/Bonsai.Vision.Drawing.CanvasElement.html": {
    "href": "api/Bonsai.Vision.Drawing.CanvasElement.html",
    "title": "Class CanvasElement",
    "keywords": "Class CanvasElement Provides an abstract base class for operators that specify a new drawing operation to be applied to every canvas in the sequence. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CanvasElement AddImage AddTextBase Circle DrawContours Ellipse FillPolygon Line LineChart Path PolyLine Rectangle Inherited Members Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax [WorkflowElementCategory(ElementCategory.Transform)] public abstract class CanvasElement : Transform<Canvas, Canvas> Methods | Improve this Doc View Source GetRenderer() When overridden in a derived class, returns the drawing operation to be applied to the canvas bitmap during rendering. Declaration protected abstract Action<IplImage> GetRenderer() Returns Type Description Action < IplImage > The Action<T> object that will be invoked to apply the drawing operation to the canvas bitmap during rendering. | Improve this Doc View Source Process(IObservable<Canvas>) Specifies a new drawing operation to be applied to every canvas in an observable sequence. Declaration public override IObservable<Canvas> Process(IObservable<Canvas> source) Parameters Type Name Description IObservable < Canvas > source A sequence of canvas objects. Returns Type Description IObservable < Canvas > A sequence of Canvas objects, where each instance represents the result of layering the new drawing operation on top of all the operations in the canvas. Overrides Bonsai.Combinator<Bonsai.Vision.Drawing.Canvas, Bonsai.Vision.Drawing.Canvas>.Process(System.IObservable<Bonsai.Vision.Drawing.Canvas>)"
  },
  "api/Bonsai.Vision.Drawing.Circle.html": {
    "href": "api/Bonsai.Vision.Drawing.Circle.html",
    "title": "Class Circle",
    "keywords": "Class Circle Represents an operator that specifies drawing a circle with the specified center and radius. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CanvasElement Circle Inherited Members CanvasElement.Process(IObservable<Canvas>) Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class Circle : CanvasElement Properties | Improve this Doc View Source Center Gets or sets the center of the circle. Declaration public Point Center { get; set; } Property Value Type Description Point | Improve this Doc View Source Color Gets or sets the color of the circle. Declaration [Range(0, 255)] [Precision(0, 1)] [TypeConverter(typeof(BgraScalarConverter))] public Scalar Color { get; set; } Property Value Type Description Scalar | Improve this Doc View Source LineType Gets or sets a value specifying the line drawing algorithm used to draw the circle boundary. Declaration public LineFlags LineType { get; set; } Property Value Type Description LineFlags | Improve this Doc View Source Radius Gets or sets the radius of the circle. Declaration public int Radius { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Shift Gets or sets the number of fractional bits in the center coordinates and radius value. Declaration public int Shift { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Thickness Gets or sets the thickness of the circle boundary, if positive. Otherwise, indicates that the circle should be filled. Declaration public int Thickness { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetRenderer() Returns the circle drawing operation. Declaration protected override Action<IplImage> GetRenderer() Returns Type Description Action < IplImage > The Action<T> object that will be invoked to apply the drawing operation to the canvas bitmap during rendering. Overrides CanvasElement.GetRenderer()"
  },
  "api/Bonsai.Vision.Drawing.CreateCanvas.html": {
    "href": "api/Bonsai.Vision.Drawing.CreateCanvas.html",
    "title": "Class CreateCanvas",
    "keywords": "Class CreateCanvas Represents an operator that creates an empty canvas using the specified size and pixel format. Inheritance Object Source < Canvas > CreateCanvas Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class CreateCanvas : Source<Canvas> Properties | Improve this Doc View Source Channels Gets or sets the number of channels in the canvas. Declaration public int Channels { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Color Gets or sets the background color used to initialize all pixels in the canvas. If not specified, the bitmap memory will be allocated when rendering the canvas, but will not be initialized. Declaration [Range(0, 255)] [Precision(0, 1)] [TypeConverter(typeof(BgraScalarConverter))] public Scalar? Color { get; set; } Property Value Type Description Nullable < Scalar > | Improve this Doc View Source Depth Gets or sets the bit depth of individual pixels in the canvas. Declaration public IplDepth Depth { get; set; } Property Value Type Description IplDepth | Improve this Doc View Source Size Gets or sets the size of the canvas. Declaration public Size Size { get; set; } Property Value Type Description Size Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains a single empty canvas with the specified size and pixel format. Declaration public override IObservable<Canvas> Generate() Returns Type Description IObservable < Canvas > A sequence containing a single instance of the Canvas class representing an empty canvas with no drawing operators. Overrides Bonsai.Source<Bonsai.Vision.Drawing.Canvas>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of canvas objects using the specified size and pixel format, and where each canvas is emitted only when an observable sequence emits a notification. Declaration public IObservable<Canvas> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new canvas objects. Returns Type Description IObservable < Canvas > A sequence of Canvas objects where each element represents an empty canvas with no drawing operators. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Vision.Drawing.CreateFont.html": {
    "href": "api/Bonsai.Vision.Drawing.CreateFont.html",
    "title": "Class CreateFont",
    "keywords": "Class CreateFont Represents an operator that creates a font which can be passed to text rendering functions. Inheritance Object Source < Font > CreateFont Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class CreateFont : Source<Font> Constructors | Improve this Doc View Source CreateFont() Initializes a new instance of the CreateFont class. Declaration public CreateFont() Properties | Improve this Doc View Source Font Gets or sets the font style used to render the text strokes. Declaration public Font Font { get; set; } Property Value Type Description Font | Improve this Doc View Source FontXml Gets or sets an XML representation of the font for serialization. Declaration [Browsable(false)] public string FontXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains an object representing a particular format for text, including font face and size. Declaration public override IObservable<Font> Generate() Returns Type Description IObservable < Font > A sequence containing a single instance of the Font class representing a particular format for text. Overrides Bonsai.Source<System.Drawing.Font>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of font objects representing a particular format for text, including font face and size, and where each font is emitted only when an observable sequence emits a notification. Declaration public IObservable<Font> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new font objects. Returns Type Description IObservable < Font > A sequence of Font objects where each element represents a particular format for text. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Vision.Drawing.CropCanvas.html": {
    "href": "api/Bonsai.Vision.Drawing.CropCanvas.html",
    "title": "Class CropCanvas",
    "keywords": "Class CropCanvas Represents an operator that crops the active drawing subregion of each canvas in the sequence. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CropCanvas Inherited Members Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class CropCanvas : Transform<Canvas, Canvas> Properties | Improve this Doc View Source RegionOfInterest Gets or sets a rectangle specifying the region of interest inside the canvas. Declaration public Rect RegionOfInterest { get; set; } Property Value Type Description Rect Methods | Improve this Doc View Source Process(IObservable<Canvas>) Crops the active drawing subregion of each canvas in an observable sequence. Declaration public override IObservable<Canvas> Process(IObservable<Canvas> source) Parameters Type Name Description IObservable < Canvas > source A sequence of canvas objects. Returns Type Description IObservable < Canvas > A sequence of Canvas objects where each new canvas will use the specified subregion of the original image for all its drawing operations. Overrides Bonsai.Combinator<Bonsai.Vision.Drawing.Canvas, Bonsai.Vision.Drawing.Canvas>.Process(System.IObservable<Bonsai.Vision.Drawing.Canvas>)"
  },
  "api/Bonsai.Vision.Drawing.DrawCanvas.html": {
    "href": "api/Bonsai.Vision.Drawing.DrawCanvas.html",
    "title": "Class DrawCanvas",
    "keywords": "Class DrawCanvas Represents an operator that renders the sequence of operations in each canvas of the sequence to create a new image. Inheritance Object Combinator < Canvas , IplImage > Transform < Canvas , IplImage > DrawCanvas Inherited Members Combinator<Canvas, IplImage>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class DrawCanvas : Transform<Canvas, IplImage> Methods | Improve this Doc View Source Process(IObservable<Canvas>) Renders the sequence of operations in each canvas of an observable sequence to create a new image. Declaration public override IObservable<IplImage> Process(IObservable<Canvas> source) Parameters Type Name Description IObservable < Canvas > source A sequence of canvas objects. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the result of the cumulative application of all the drawing operations. Overrides Bonsai.Combinator<Bonsai.Vision.Drawing.Canvas, OpenCV.Net.IplImage>.Process(System.IObservable<Bonsai.Vision.Drawing.Canvas>)"
  },
  "api/Bonsai.Vision.Drawing.DrawContours.html": {
    "href": "api/Bonsai.Vision.Drawing.DrawContours.html",
    "title": "Class DrawContours",
    "keywords": "Class DrawContours Represents an operator that specifies drawing contour outlines or filled interiors in an image. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CanvasElement DrawContours Inherited Members CanvasElement.Process(IObservable<Canvas>) Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class DrawContours : CanvasElement Properties | Improve this Doc View Source Contour Gets or sets the first contour to draw. Declaration public Seq Contour { get; set; } Property Value Type Description Seq | Improve this Doc View Source ExternalColor Gets or sets the color of the external contours. Declaration [Range(0, 255)] [Precision(0, 1)] [TypeConverter(typeof(BgraScalarConverter))] public Scalar ExternalColor { get; set; } Property Value Type Description Scalar | Improve this Doc View Source HoleColor Gets or sets the color of the internal holes. Declaration [Range(0, 255)] [Precision(0, 1)] [TypeConverter(typeof(BgraScalarConverter))] public Scalar HoleColor { get; set; } Property Value Type Description Scalar | Improve this Doc View Source LineType Gets or sets a value specifying the line drawing algorithm used to draw the contour boundaries. Declaration public LineFlags LineType { get; set; } Property Value Type Description LineFlags | Improve this Doc View Source MaxLevel Gets or sets the maximum level of the contour hierarchy to draw. Declaration public int MaxLevel { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Thickness Gets or sets the thickness of the contour lines, if positive. Otherwise, the contour interiors will be drawn. Declaration public int Thickness { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetRenderer() Returns the contour drawing operation. Declaration protected override Action<IplImage> GetRenderer() Returns Type Description Action < IplImage > The Action<T> object that will be invoked to apply the drawing operation to the canvas bitmap during rendering. Overrides CanvasElement.GetRenderer()"
  },
  "api/Bonsai.Vision.Drawing.Ellipse.html": {
    "href": "api/Bonsai.Vision.Drawing.Ellipse.html",
    "title": "Class Ellipse",
    "keywords": "Class Ellipse Represents an operator that specifies drawing an ellipse outline, filled ellipse, elliptic arc, or filled elliptic sector. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CanvasElement Ellipse Inherited Members CanvasElement.Process(IObservable<Canvas>) Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class Ellipse : CanvasElement Properties | Improve this Doc View Source Angle Gets or sets the rotation angle of the ellipse, in degrees. Declaration [Range(0, 360)] public double Angle { get; set; } Property Value Type Description Double | Improve this Doc View Source Axes Gets or sets the length of the ellipse axes. Declaration public Size Axes { get; set; } Property Value Type Description Size | Improve this Doc View Source Center Gets or sets the center of the ellipse. Declaration public Point Center { get; set; } Property Value Type Description Point | Improve this Doc View Source Color Gets or sets the color of the ellipse. Declaration [Range(0, 255)] [Precision(0, 1)] [TypeConverter(typeof(BgraScalarConverter))] public Scalar Color { get; set; } Property Value Type Description Scalar | Improve this Doc View Source EndAngle Gets or sets the ending angle of the elliptic arc, in degrees. Declaration [Range(0, 360)] public double EndAngle { get; set; } Property Value Type Description Double | Improve this Doc View Source LineType Gets or sets a value specifying the line drawing algorithm used to draw the ellipse boundary. Declaration public LineFlags LineType { get; set; } Property Value Type Description LineFlags | Improve this Doc View Source Shift Gets or sets the number of fractional bits in the center coordinates and axes' values. Declaration public int Shift { get; set; } Property Value Type Description Int32 | Improve this Doc View Source StartAngle Gets or sets the starting angle of the elliptic arc, in degrees. Declaration [Range(0, 360)] public double StartAngle { get; set; } Property Value Type Description Double | Improve this Doc View Source Thickness Gets or sets the thickness of the ellipse boundary, if positive. Otherwise, indicates that the ellipse should be filled. Declaration public int Thickness { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetRenderer() Returns the ellipse drawing operation. Declaration protected override Action<IplImage> GetRenderer() Returns Type Description Action < IplImage > The Action<T> object that will be invoked to apply the drawing operation to the canvas bitmap during rendering. Overrides CanvasElement.GetRenderer()"
  },
  "api/Bonsai.Vision.Drawing.FillPolygon.html": {
    "href": "api/Bonsai.Vision.Drawing.FillPolygon.html",
    "title": "Class FillPolygon",
    "keywords": "Class FillPolygon Represents an operator that specifies filling an area bounded by several polygonal contours. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CanvasElement FillPolygon Inherited Members CanvasElement.Process(IObservable<Canvas>) Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class FillPolygon : CanvasElement Properties | Improve this Doc View Source Color Gets or sets the color of the filled area. Declaration [Range(0, 255)] [Precision(0, 1)] [TypeConverter(typeof(BgraScalarConverter))] public Scalar Color { get; set; } Property Value Type Description Scalar | Improve this Doc View Source LineType Gets or sets a value specifying the line drawing algorithm used to draw the polygon boundaries. Declaration public LineFlags LineType { get; set; } Property Value Type Description LineFlags | Improve this Doc View Source Points Gets or sets the array of vertices specifying each polygon boundary. Declaration public Point[][] Points { get; set; } Property Value Type Description Point [][] | Improve this Doc View Source Shift Gets or sets the number of fractional bits in the vertex coordinates. Declaration public int Shift { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetRenderer() Returns the polygon filling operation. Declaration protected override Action<IplImage> GetRenderer() Returns Type Description Action < IplImage > The Action<T> object that will be invoked to apply the drawing operation to the canvas bitmap during rendering. Overrides CanvasElement.GetRenderer()"
  },
  "api/Bonsai.Vision.Drawing.html": {
    "href": "api/Bonsai.Vision.Drawing.html",
    "title": "Namespace Bonsai.Vision.Drawing",
    "keywords": "Namespace Bonsai.Vision.Drawing Classes AddImage Represents an operator that specifies drawing the specified image to the canvas. AddText Represents an operator that specifies rendering text strokes with the specified font and color at a given location. AddTextBase Provides an abstract base class for operators that specify drawing text strokes with a specified font and color. AddTextBox Represents an operator that specifies rendering text strokes with the specified font and color inside the specified layout rectangle. Canvas Provides support for lazy initialization and rendering of dynamic bitmaps. CanvasElement Provides an abstract base class for operators that specify a new drawing operation to be applied to every canvas in the sequence. Circle Represents an operator that specifies drawing a circle with the specified center and radius. CreateCanvas Represents an operator that creates an empty canvas using the specified size and pixel format. CreateFont Represents an operator that creates a font which can be passed to text rendering functions. CropCanvas Represents an operator that crops the active drawing subregion of each canvas in the sequence. DrawCanvas Represents an operator that renders the sequence of operations in each canvas of the sequence to create a new image. DrawContours Represents an operator that specifies drawing contour outlines or filled interiors in an image. Ellipse Represents an operator that specifies drawing an ellipse outline, filled ellipse, elliptic arc, or filled elliptic sector. FillPolygon Represents an operator that specifies filling an area bounded by several polygonal contours. Line Represents an operator that specifies drawing a line segment connecting two points. LineChart Represents an operator that specifies drawing a line chart by plotting each row of a matrix as a polyline element. Path Represents an operator that specifies drawing a path from an array of vertices. PolyLine Represents an operator that specifies drawing one or more polygonal curves. Rectangle Represents an operator that specifies drawing a simple, thick, or filled rectangle with the specified origin and size."
  },
  "api/Bonsai.Vision.Drawing.Line.html": {
    "href": "api/Bonsai.Vision.Drawing.Line.html",
    "title": "Class Line",
    "keywords": "Class Line Represents an operator that specifies drawing a line segment connecting two points. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CanvasElement Line Inherited Members CanvasElement.Process(IObservable<Canvas>) Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class Line : CanvasElement Properties | Improve this Doc View Source Color Gets or sets the color of the line. Declaration [Range(0, 255)] [Precision(0, 1)] [TypeConverter(typeof(BgraScalarConverter))] public Scalar Color { get; set; } Property Value Type Description Scalar | Improve this Doc View Source End Gets or sets the second point of the line segment. Declaration public Point End { get; set; } Property Value Type Description Point | Improve this Doc View Source LineType Gets or sets a value specifying the line drawing algorithm used to draw the line. Declaration public LineFlags LineType { get; set; } Property Value Type Description LineFlags | Improve this Doc View Source Shift Gets or sets the number of fractional bits in the point coordinates. Declaration public int Shift { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Start Gets or sets the first point of the line segment. Declaration public Point Start { get; set; } Property Value Type Description Point | Improve this Doc View Source Thickness Gets or sets the thickness of the line. Declaration public int Thickness { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetRenderer() Returns the line drawing operation. Declaration protected override Action<IplImage> GetRenderer() Returns Type Description Action < IplImage > The Action<T> object that will be invoked to apply the drawing operation to the canvas bitmap during rendering. Overrides CanvasElement.GetRenderer()"
  },
  "api/Bonsai.Vision.Drawing.LineChart.html": {
    "href": "api/Bonsai.Vision.Drawing.LineChart.html",
    "title": "Class LineChart",
    "keywords": "Class LineChart Represents an operator that specifies drawing a line chart by plotting each row of a matrix as a polyline element. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CanvasElement LineChart Inherited Members CanvasElement.Process(IObservable<Canvas>) Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class LineChart : CanvasElement Properties | Improve this Doc View Source Color Gets or sets the color of the chart lines. Declaration [Range(0, 255)] [Precision(0, 1)] [TypeConverter(typeof(BgraScalarConverter))] public Scalar Color { get; set; } Property Value Type Description Scalar | Improve this Doc View Source Data Gets or sets the matrix specifying the data content of the line chart. Declaration public Mat Data { get; set; } Property Value Type Description Mat | Improve this Doc View Source Destination Gets or sets the optional region in which to draw the chart. By default the chart will cover the entire image. Declaration public Rect Destination { get; set; } Property Value Type Description Rect | Improve this Doc View Source LineType Gets or sets a value specifying the line drawing algorithm used to draw the chart lines. Declaration public LineFlags LineType { get; set; } Property Value Type Description LineFlags | Improve this Doc View Source Max Gets or sets the upper bound of the data range. Declaration public double Max { get; set; } Property Value Type Description Double | Improve this Doc View Source Min Gets or sets the lower bound of the data range. Declaration public double Min { get; set; } Property Value Type Description Double | Improve this Doc View Source Thickness Gets or sets the thickness of the chart lines. Declaration public int Thickness { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetRenderer() Returns the line chart drawing operation. Declaration protected override Action<IplImage> GetRenderer() Returns Type Description Action < IplImage > The Action<T> object that will be invoked to apply the drawing operation to the canvas bitmap during rendering. Overrides CanvasElement.GetRenderer()"
  },
  "api/Bonsai.Vision.Drawing.Path.html": {
    "href": "api/Bonsai.Vision.Drawing.Path.html",
    "title": "Class Path",
    "keywords": "Class Path Represents an operator that specifies drawing a path from an array of vertices. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CanvasElement Path Inherited Members CanvasElement.Process(IObservable<Canvas>) Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class Path : CanvasElement Properties | Improve this Doc View Source Color Gets or sets the color of the polylines connecting the path. Declaration [Range(0, 255)] [Precision(0, 1)] [TypeConverter(typeof(BgraScalarConverter))] public Scalar Color { get; set; } Property Value Type Description Scalar | Improve this Doc View Source LineType Gets or sets a value specifying the line drawing algorithm used to draw the polylines. Declaration public LineFlags LineType { get; set; } Property Value Type Description LineFlags | Improve this Doc View Source Points Gets or sets the array of vertices specifying the path. NaN values will not be connected or drawn. Declaration public Point2f[] Points { get; set; } Property Value Type Description Point2f [] | Improve this Doc View Source Shift Gets or sets the number of fractional bits in the vertex coordinates. Declaration public int Shift { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Thickness Gets or sets the thickness of the polyline edges. Declaration public int Thickness { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetRenderer() Returns the path drawing operation. Declaration protected override Action<IplImage> GetRenderer() Returns Type Description Action < IplImage > The Action<T> object that will be invoked to apply the drawing operation to the canvas bitmap during rendering. Overrides CanvasElement.GetRenderer()"
  },
  "api/Bonsai.Vision.Drawing.PolyLine.html": {
    "href": "api/Bonsai.Vision.Drawing.PolyLine.html",
    "title": "Class PolyLine",
    "keywords": "Class PolyLine Represents an operator that specifies drawing one or more polygonal curves. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CanvasElement PolyLine Inherited Members CanvasElement.Process(IObservable<Canvas>) Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class PolyLine : CanvasElement Properties | Improve this Doc View Source Closed Gets or sets a value indicating whether the polylines should be closed. If closed, a line is drawn between the first and last vertex of every contour. Declaration public bool Closed { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Color Gets or sets the color of the polylines. Declaration [Range(0, 255)] [Precision(0, 1)] [TypeConverter(typeof(BgraScalarConverter))] public Scalar Color { get; set; } Property Value Type Description Scalar | Improve this Doc View Source LineType Gets or sets a value specifying the line drawing algorithm used to draw the polylines. Declaration public LineFlags LineType { get; set; } Property Value Type Description LineFlags | Improve this Doc View Source Points Gets or sets the array of vertices specifying each polyline. Declaration public Point[][] Points { get; set; } Property Value Type Description Point [][] | Improve this Doc View Source Shift Gets or sets the number of fractional bits in the vertex coordinates. Declaration public int Shift { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Thickness Gets or sets the thickness of the polyline edges. Declaration public int Thickness { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetRenderer() Returns the polyline drawing operation. Declaration protected override Action<IplImage> GetRenderer() Returns Type Description Action < IplImage > The Action<T> object that will be invoked to apply the drawing operation to the canvas bitmap during rendering. Overrides CanvasElement.GetRenderer()"
  },
  "api/Bonsai.Vision.Drawing.Rectangle.html": {
    "href": "api/Bonsai.Vision.Drawing.Rectangle.html",
    "title": "Class Rectangle",
    "keywords": "Class Rectangle Represents an operator that specifies drawing a simple, thick, or filled rectangle with the specified origin and size. Inheritance Object Combinator < Canvas , Canvas > Transform < Canvas , Canvas > CanvasElement Rectangle Inherited Members CanvasElement.Process(IObservable<Canvas>) Combinator<Canvas, Canvas>.Process(IObservable<Canvas>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision.Drawing Assembly : Bonsai.Vision.dll Syntax public class Rectangle : CanvasElement Properties | Improve this Doc View Source Color Gets or sets the color of the rectangle. Declaration [Range(0, 255)] [Precision(0, 1)] [TypeConverter(typeof(BgraScalarConverter))] public Scalar Color { get; set; } Property Value Type Description Scalar | Improve this Doc View Source LineType Gets or sets a value specifying the line drawing algorithm used to draw the rectangle outline. Declaration public LineFlags LineType { get; set; } Property Value Type Description LineFlags | Improve this Doc View Source Origin Gets or sets the coordinates of the top-left corner of the rectangle. Declaration public Point Origin { get; set; } Property Value Type Description Point | Improve this Doc View Source Shift Gets or sets the number of fractional bits in the rectangle coordinates. Declaration public int Shift { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Size Gets or sets the size of the rectangle. Declaration public Size Size { get; set; } Property Value Type Description Size | Improve this Doc View Source Thickness Gets or sets the thickness of the rectangle outline, if positive. Otherwise, indicates that the rectangle should be filled. Declaration public int Thickness { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetRenderer() Returns the rectangle drawing operation. Declaration protected override Action<IplImage> GetRenderer() Returns Type Description Action < IplImage > The Action<T> object that will be invoked to apply the drawing operation to the canvas bitmap during rendering. Overrides CanvasElement.GetRenderer()"
  },
  "api/Bonsai.Vision.EncodeImage.html": {
    "href": "api/Bonsai.Vision.EncodeImage.html",
    "title": "Class EncodeImage",
    "keywords": "Class EncodeImage Represents an operator that encodes each image in the sequence into a byte buffer in memory using the specified format. Inheritance Object EncodeImage Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class EncodeImage Properties | Improve this Doc View Source CompressionParameters Gets the collection of optional image compression parameters. Declaration [TypeConverter(typeof(EncodeImage.CompressionParameterCollectionConverter))] public CompressionParameterCollection CompressionParameters { get; } Property Value Type Description CompressionParameterCollection | Improve this Doc View Source Extension Gets or sets the file extension that defines the encoding format. Declaration [TypeConverter(typeof(EncodeImage.ExtensionConverter))] public string Extension { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TArray>(IObservable<TArray>) Encodes each image in an observable sequence into a byte buffer in memory using the specified format. Declaration public IObservable<Mat> Process<TArray>(IObservable<TArray> source) where TArray : Arr Parameters Type Name Description IObservable <TArray> source The sequence of array-like objects to be encoded. Returns Type Description IObservable < Mat > The sequence of encoded memory buffers. Type Parameters Name Description TArray The type of the array-like objects in the source sequence."
  },
  "api/Bonsai.Vision.EnumerateContours.html": {
    "href": "api/Bonsai.Vision.EnumerateContours.html",
    "title": "Class EnumerateContours",
    "keywords": "Class EnumerateContours Represents an operator that generates a sequence of all the contours at the same level of the hierarchy, for each contour in the input sequence. Inheritance Object Combinator < Contour , Contour > EnumerateContours Inherited Members Combinator<Contour, Contour>.Process(IObservable<Contour>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class EnumerateContours : Combinator<Contour, Contour> Methods | Improve this Doc View Source Process(IObservable<Contours>) Generates a sequence of all the contours at the top level of the hierarchy, for each hierarchy of contours in an observable sequence. Declaration public IObservable<Contour> Process(IObservable<Contours> source) Parameters Type Name Description IObservable < Contours > source A sequence of Contours objects representing the hierarchy of contours to enumerate. Returns Type Description IObservable < Contour > A sequence of Contour objects representing all the polygonal contours at the top level of the hierarchy. | Improve this Doc View Source Process(IObservable<Contour>) Generates a sequence of all the contours at the same level of the hierarchy, for each contour in an observable sequence. Declaration public override IObservable<Contour> Process(IObservable<Contour> source) Parameters Type Name Description IObservable < Contour > source A sequence of Contour objects representing the first contour of the hierarchy to enumerate. Returns Type Description IObservable < Contour > A sequence of Contour objects representing all the polygonal contours at the same level of the hierarchy, including each of the contours in the source sequence. Overrides Bonsai.Combinator<OpenCV.Net.Contour, OpenCV.Net.Contour>.Process(System.IObservable<OpenCV.Net.Contour>) | Improve this Doc View Source Process(IObservable<Seq>) Generates a sequence of all the contours at the same level of the hierarchy, for each contour in an observable sequence. Declaration public IObservable<Contour> Process(IObservable<Seq> source) Parameters Type Name Description IObservable < Seq > source A sequence of Seq objects representing the first contour of the hierarchy to enumerate. Returns Type Description IObservable < Contour > A sequence of Contour objects representing all the polygonal contours at the same level of the hierarchy, including each of the contours in the source sequence."
  },
  "api/Bonsai.Vision.EqualizeHistogram.html": {
    "href": "api/Bonsai.Vision.EqualizeHistogram.html",
    "title": "Class EqualizeHistogram",
    "keywords": "Class EqualizeHistogram Represents an operator that equalizes the histogram of every grayscale image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > EqualizeHistogram Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class EqualizeHistogram : Transform<IplImage, IplImage> Methods | Improve this Doc View Source Process(IObservable<IplImage>) Equalizes the histogram of every grayscale image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of grayscale images for which to equalize the histogram. Returns Type Description IObservable < IplImage > A sequence of images representing the original image with an equalized pixel brightness histogram. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.Extrinsics.html": {
    "href": "api/Bonsai.Vision.Extrinsics.html",
    "title": "Struct Extrinsics",
    "keywords": "Struct Extrinsics Represents parameters that describe the camera extrinsic properties such as rotation and translation. Implements IEquatable < Extrinsics > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public struct Extrinsics : IEquatable<Extrinsics> Fields | Improve this Doc View Source Rotation The camera extrinsic rotations about the x-, y-, and z- axes of the reference coordinate system. Declaration public Point3d Rotation Field Value Type Description Point3d | Improve this Doc View Source Translation The translation of the camera from the origin of the reference coordinate system. Declaration public Point3d Translation Field Value Type Description Point3d Methods | Improve this Doc View Source Equals(Extrinsics) Returns a value indicating whether this instance is equal to the specified Extrinsics structure. Declaration public bool Equals(Extrinsics other) Parameters Type Name Description Extrinsics other The Extrinsics object to compare with this instance. Returns Type Description Boolean true if other represents the same parameter values as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether the specified object is an Extrinsics structure with the same parameter values as this Extrinsics structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is an Extrinsics structure and has the same parameter values as this structure; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this Extrinsics structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this Extrinsics structure. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Creates a String representation of this Extrinsics structure. Declaration public override string ToString() Returns Type Description String A String containing all the parameter values of this Extrinsics structure. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(Extrinsics, Extrinsics) Indicates whether two Extrinsics structures are equal. Declaration public static bool operator ==(Extrinsics left, Extrinsics right) Parameters Type Name Description Extrinsics left The Extrinsics structure on the left-hand side of the equality operator. Extrinsics right The Extrinsics structure on the right-hand side of the equality operator. Returns Type Description Boolean true if left and right have equal parameter values; otherwise, false . | Improve this Doc View Source Inequality(Extrinsics, Extrinsics) Indicates whether two Extrinsics structures are different. Declaration public static bool operator !=(Extrinsics left, Extrinsics right) Parameters Type Name Description Extrinsics left The Extrinsics structure on the left-hand side of the inequality operator. Extrinsics right The Extrinsics structure on the right-hand side of the inequality operator. Returns Type Description Boolean true if left and right differ in any of their parameter values; false if left and right are equal. Implements System.IEquatable<T>"
  },
  "api/Bonsai.Vision.FileCapture.html": {
    "href": "api/Bonsai.Vision.FileCapture.html",
    "title": "Class FileCapture",
    "keywords": "Class FileCapture Represents an operator that generates a sequence of images from the specified movie file. Inheritance Object Source < IplImage > FileCapture Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax [WorkflowElementIcon(typeof(ElementCategory), \"ElementIcon.Video\")] public class FileCapture : Source<IplImage> Properties | Improve this Doc View Source Capture Gets the last active video capture stream. This property is reserved to be used only by the file capture visualizer. Declaration [Browsable(false)] public Capture Capture { get; } Property Value Type Description Capture | Improve this Doc View Source FileName Gets or sets the name of the movie file. Declaration public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source Loop Gets or sets a value indicating whether the video sequence should loop when the end of the file is reached. Declaration public bool Loop { get; set; } Property Value Type Description Boolean | Improve this Doc View Source PlaybackRate Gets or sets the rate at which to read images from the file. A value of zero means the recorded video frame rate will be used. Declaration [Range(0, 2147483647)] public double PlaybackRate { get; set; } Property Value Type Description Double | Improve this Doc View Source Playing Gets or sets a value specifying whether the video sequence is playing. If the video is paused, the current frame will be repeated at the specified playback rate. Declaration public bool Playing { get; set; } Property Value Type Description Boolean | Improve this Doc View Source PositionUnits Gets or sets a value specifying the units of the start position. Declaration public CapturePosition PositionUnits { get; set; } Property Value Type Description CapturePosition | Improve this Doc View Source StartPosition Gets or sets the position at which to start playback of the file. Declaration public double StartPosition { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Generate() Generates an observable sequence of images from the specified movie file. Declaration public override IObservable<IplImage> Generate() Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing each of the frames in the specified movie file. Overrides Bonsai.Source<OpenCV.Net.IplImage>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates a sequence of images from the specified movie file, where each new image is emitted only when an observable sequence emits a notification. Declaration public IObservable<IplImage> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for reading new images from the movie file. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing each of the frames in the specified movie file. Type Parameters Name Description TSource The type of the elements in the source sequence. | Improve this Doc View Source Seek(Int32) Moves the current video player to the specified frame. This method is reserved to be called by the file capture visualizer. Declaration public void Seek(int frameNumber) Parameters Type Name Description Int32 frameNumber The zero-based index of the frame the player should move to."
  },
  "api/Bonsai.Vision.Filter2D.html": {
    "href": "api/Bonsai.Vision.Filter2D.html",
    "title": "Class Filter2D",
    "keywords": "Class Filter2D Represents an operator that convolves each image in the sequence with the specified kernel. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > Filter2D Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Filter2D : Transform<IplImage, IplImage> Properties | Improve this Doc View Source Anchor Gets or sets the anchor of the kernel that indicates the relative position of filtered points. Declaration public Point Anchor { get; set; } Property Value Type Description Point | Improve this Doc View Source Kernel Gets or sets a 2D array specifying the image convolution kernel. Declaration [TypeConverter(typeof(MultidimensionalArrayConverter))] public float[, ] Kernel { get; set; } Property Value Type Description Single [,] | Improve this Doc View Source KernelXml Gets or sets an XML representation of the image convolution kernel. Declaration [Browsable(false)] public string KernelXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<IplImage>) Convolves each image in an observable sequence with the specified kernel. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to convolve with the specified kernel. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the result of filtering each image with the specified convolution kernel. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>) | Improve this Doc View Source Process(IObservable<Tuple<IplImage, IplImage>>) Convolves each image in an observable sequence with its paired convolution kernel. Declaration public IObservable<IplImage> Process(IObservable<Tuple<IplImage, IplImage>> source) Parameters Type Name Description IObservable < Tuple < IplImage , IplImage >> source A sequence of pairs containing the image and the convolution kernel, respectively, where the kernel is specified as an IplImage object. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the result of filtering each image with the corresponding convolution kernel. | Improve this Doc View Source Process(IObservable<Tuple<IplImage, Mat>>) Convolves each image in an observable sequence with its paired convolution kernel. Declaration public IObservable<IplImage> Process(IObservable<Tuple<IplImage, Mat>> source) Parameters Type Name Description IObservable < Tuple < IplImage , Mat >> source A sequence of pairs containing the image and the convolution kernel, respectively, where the kernel is specified as a Mat object. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the result of filtering each image with the corresponding convolution kernel."
  },
  "api/Bonsai.Vision.FindChessboardCorners.html": {
    "href": "api/Bonsai.Vision.FindChessboardCorners.html",
    "title": "Class FindChessboardCorners",
    "keywords": "Class FindChessboardCorners Represents an operator that finds the positions of internal corners for each chessboard image in the sequence. Inheritance Object Combinator < IplImage , KeyPointCollection > Transform < IplImage , KeyPointCollection > FindChessboardCorners Inherited Members Combinator<IplImage, KeyPointCollection>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class FindChessboardCorners : Transform<IplImage, KeyPointCollection> Constructors | Improve this Doc View Source FindChessboardCorners() Initializes a new instance of the FindChessboardCorners class. Declaration public FindChessboardCorners() Properties | Improve this Doc View Source CalibrationFlags Gets or sets a value specifying the available operation flags for finding chessboard corners. Declaration public ChessboardCalibrationFlags CalibrationFlags { get; set; } Property Value Type Description ChessboardCalibrationFlags | Improve this Doc View Source PatternSize Gets or sets the number of inner corners per chessboard row and column. Declaration public Size PatternSize { get; set; } Property Value Type Description Size Methods | Improve this Doc View Source Process(IObservable<IplImage>) Finds the positions of internal corners for each chessboard image in an observable sequence. Declaration public override IObservable<KeyPointCollection> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of chessboard images for which to find the internal corner positions. Returns Type Description IObservable < KeyPointCollection > A sequence of KeyPointCollection objects representing the positions of internal corners detected in each chessboard image. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, Bonsai.Vision.KeyPointCollection>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.FindContours.html": {
    "href": "api/Bonsai.Vision.FindContours.html",
    "title": "Class FindContours",
    "keywords": "Class FindContours Represents an operator that finds the contours of connected components for each binary image in the sequence. Inheritance Object Combinator < IplImage , Contours > Transform < IplImage , Contours > FindContours Inherited Members Combinator<IplImage, Contours>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class FindContours : Transform<IplImage, Contours> Properties | Improve this Doc View Source MaxArea Gets or sets the maximum area for individual contours to be accepted. Declaration public double? MaxArea { get; set; } Property Value Type Description Nullable < Double > | Improve this Doc View Source Method Gets or sets a value specifying the approximation method used to refine the contours. Declaration public ContourApproximation Method { get; set; } Property Value Type Description ContourApproximation | Improve this Doc View Source MinArea Gets or sets the minimum area for individual contours to be accepted. Declaration public double? MinArea { get; set; } Property Value Type Description Nullable < Double > | Improve this Doc View Source Mode Gets or sets a value specifying the contour retrieval strategy. Declaration public ContourRetrieval Mode { get; set; } Property Value Type Description ContourRetrieval | Improve this Doc View Source Offset Gets or sets the optional offset to apply to individual contour points. Declaration public Point Offset { get; set; } Property Value Type Description Point Methods | Improve this Doc View Source Process(IObservable<IplImage>) Finds the contours of connected components for each binary image in an observable sequence. Declaration public override IObservable<Contours> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of binary images for which to find the connected component contours. Returns Type Description IObservable < Contours > A sequence of Contours objects representing the hierarchy of polygonal contours extracted from each binary image. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, Bonsai.Vision.Contours>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.FindCornerSubPix.html": {
    "href": "api/Bonsai.Vision.FindCornerSubPix.html",
    "title": "Class FindCornerSubPix",
    "keywords": "Class FindCornerSubPix Represents an operator that finds the sub-pixel accurate locations of each corner or radial saddle point in the sequence. Inheritance Object Combinator < KeyPointCollection , KeyPointCollection > Transform < KeyPointCollection , KeyPointCollection > FindCornerSubPix Inherited Members Combinator<KeyPointCollection, KeyPointCollection>.Process(IObservable<KeyPointCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class FindCornerSubPix : Transform<KeyPointCollection, KeyPointCollection> Properties | Improve this Doc View Source Epsilon Gets or sets the minimum required accuracy for convergence. Declaration public double Epsilon { get; set; } Property Value Type Description Double | Improve this Doc View Source MaxIterations Gets or sets the maximum number of iterations. Declaration public int MaxIterations { get; set; } Property Value Type Description Int32 | Improve this Doc View Source WindowSize Gets or sets the half-length of the side of the corner search window. Declaration public Size WindowSize { get; set; } Property Value Type Description Size | Improve this Doc View Source ZeroZone Gets or sets the half-length of the side of the middle search window that will be ignored during refinement. Declaration public Size ZeroZone { get; set; } Property Value Type Description Size Methods | Improve this Doc View Source Process(IObservable<KeyPointCollection>) Finds the sub-pixel accurate locations of each corner or radial saddle point in an observable sequence. Declaration public override IObservable<KeyPointCollection> Process(IObservable<KeyPointCollection> source) Parameters Type Name Description IObservable < KeyPointCollection > source The sequence of corner positions to refine. Returns Type Description IObservable < KeyPointCollection > The sequence of refined corner positions. Overrides Bonsai.Combinator<Bonsai.Vision.KeyPointCollection, Bonsai.Vision.KeyPointCollection>.Process(System.IObservable<Bonsai.Vision.KeyPointCollection>)"
  },
  "api/Bonsai.Vision.FindExtremesMethod.html": {
    "href": "api/Bonsai.Vision.FindExtremesMethod.html",
    "title": "Enum FindExtremesMethod",
    "keywords": "Enum FindExtremesMethod Specifies the method used to compute extremities of connected components. Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public enum FindExtremesMethod Fields Name Description Horizontal The first extremity will be the vertex furthest to the right, and the second extremity the vertex furthest to the left, in image coordinates. MajorAxis The first extremity will be the vertex furthest along the major axis of the ellipse fit to the connected component, moving clockwise, and the second extremity will be the vertex furthest along the major axis of the ellipse, moving anti-clockwise. MajorAxisVertex The first extremity will be the first clockwise vertex of the ellipse fit to the connected component and the second extremity the first anti-clockwise vertex of the ellipse. Radial The first extremity will be the vertex furthest away from the centroid of the connected component, and the second extremity will be the vertex furthest away from the first extremity. Vertical The first extremity will be the vertex nearest to the bottom of the image, and the second extremity the vertex nearest to the top of the image."
  },
  "api/Bonsai.Vision.Flip.html": {
    "href": "api/Bonsai.Vision.Flip.html",
    "title": "Class Flip",
    "keywords": "Class Flip Represents an operator that flips each image in the sequence around the vertical, horizontal or both axes. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > Flip Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Flip : Transform<IplImage, IplImage> Properties | Improve this Doc View Source Mode Gets or sets a value specifying how to flip the image. Declaration public FlipMode Mode { get; set; } Property Value Type Description FlipMode Methods | Improve this Doc View Source Process(IObservable<IplImage>) Flips each image in an observable sequence around the vertical, horizontal or both axes. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to flip. Returns Type Description IObservable < IplImage > The sequence of flipped images. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.GoodFeaturesToTrack.html": {
    "href": "api/Bonsai.Vision.GoodFeaturesToTrack.html",
    "title": "Class GoodFeaturesToTrack",
    "keywords": "Class GoodFeaturesToTrack Represents an operator that finds strong corner features for each image in the sequence. Inheritance Object Combinator < IplImage , KeyPointCollection > Transform < IplImage , KeyPointCollection > GoodFeaturesToTrack Inherited Members Combinator<IplImage, KeyPointCollection>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class GoodFeaturesToTrack : Transform<IplImage, KeyPointCollection> Properties | Improve this Doc View Source MaxFeatures Gets or sets the maximum number of corners to find. Declaration public int MaxFeatures { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MinDistance Gets or sets the minimum accepted distance between detected corners. Declaration public double MinDistance { get; set; } Property Value Type Description Double | Improve this Doc View Source QualityLevel Gets or sets the minimal accepted quality for image corners. Declaration public double QualityLevel { get; set; } Property Value Type Description Double | Improve this Doc View Source RegionOfInterest Gets or sets the region of interest used to find image corners. If the rectangle is empty, the whole image is used. Declaration public Rect RegionOfInterest { get; set; } Property Value Type Description Rect Methods | Improve this Doc View Source Process(IObservable<IplImage>) Finds strong corner features for each image in an observable sequence. Declaration public override IObservable<KeyPointCollection> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images for which to find strong corner features. Returns Type Description IObservable < KeyPointCollection > A sequence of KeyPointCollection objects representing the set of strong corner features extracted from each image in the source sequence. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, Bonsai.Vision.KeyPointCollection>.Process(System.IObservable<OpenCV.Net.IplImage>) | Improve this Doc View Source Process(IObservable<Tuple<IplImage, IplImage>>) Finds strong corner features for each image in an observable sequence, where each image is paired with a mask where zero pixels are used to indicate areas in the original image from which features should be rejected. Declaration public IObservable<KeyPointCollection> Process(IObservable<Tuple<IplImage, IplImage>> source) Parameters Type Name Description IObservable < Tuple < IplImage , IplImage >> source A sequence of image pairs, where the first image is used to find corner features, and the second image specifies the operation mask, where zero pixels represent pixels from the original image that should be ignored. Returns Type Description IObservable < KeyPointCollection > A sequence of KeyPointCollection objects representing the set of strong corner features extracted from each image in the source sequence."
  },
  "api/Bonsai.Vision.Grayscale.html": {
    "href": "api/Bonsai.Vision.Grayscale.html",
    "title": "Class Grayscale",
    "keywords": "Class Grayscale Represents an operator that converts each BGR color image in the sequence to grayscale. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > Grayscale Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Grayscale : Transform<IplImage, IplImage> Methods | Improve this Doc View Source Process(IObservable<IplImage>) Converts each BGR color image in an observable sequence to grayscale. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source A sequence of color images in the blue-green-red (BGR) color space. Returns Type Description IObservable < IplImage > A sequence of grayscale single-channel images. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.HaarCascade.html": {
    "href": "api/Bonsai.Vision.HaarCascade.html",
    "title": "Class HaarCascade",
    "keywords": "Class HaarCascade Represents an operator that detects objects on each image in the sequence using a pre-trained cascade of boosted Haar classifiers. Inheritance Object Combinator < IplImage , Rect []> Transform < IplImage , Rect []> HaarCascade Inherited Members Combinator<IplImage, Rect[]>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class HaarCascade : Transform<IplImage, Rect[]> Properties | Improve this Doc View Source FileName Gets or sets the name of the file describing a trained Haar cascade classifier. Declaration [FileNameFilter(\"XML Files|*.xml|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source Flags Gets or sets a value specifying the optional operation flags for the Haar cascade classifier. Declaration public HaarDetectObjectFlags Flags { get; set; } Property Value Type Description HaarDetectObjectFlags | Improve this Doc View Source MaxSize Gets or sets the optional maximum window size. By default, it is set to the total image size. Declaration public Size MaxSize { get; set; } Property Value Type Description Size | Improve this Doc View Source MinNeighbors Gets or sets the minimum number (minus 1) of neighbor rectangles that make up an object. All groups with smaller number of rectangles are rejected. Declaration public int MinNeighbors { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MinSize Gets or sets the optional minimum window size. By default, it is set to the size specified in the cascade classifier file. Declaration public Size MinSize { get; set; } Property Value Type Description Size | Improve this Doc View Source Offset Gets or sets the optional offset to apply to individual object rectangles. Declaration public Point Offset { get; set; } Property Value Type Description Point | Improve this Doc View Source ScaleFactor Gets or sets the factor by which the search window is scaled between subsequent scans. Declaration public double ScaleFactor { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Process(IObservable<IplImage>) Detects objects on each image in an observable sequence using a pre-trained cascade of boosted Haar classifiers. Declaration public override IObservable<Rect[]> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images on which to detect objects using the boosted Haar classifier cascade. Returns Type Description IObservable < Rect []> A sequence of Rect arrays representing the objects which were detected on each image of the source sequence. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.Rect[]>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.HoughCircles.html": {
    "href": "api/Bonsai.Vision.HoughCircles.html",
    "title": "Class HoughCircles",
    "keywords": "Class HoughCircles Represents an operator that finds circles on each grayscale image in the sequence using a Hough transform. Inheritance Object Combinator < IplImage , Circle []> Transform < IplImage , Circle []> HoughCircles Inherited Members Combinator<IplImage, Circle[]>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class HoughCircles : Transform<IplImage, Circle[]> Properties | Improve this Doc View Source AccumulatorFactor Gets or sets the inverse ratio of the accumulator resolution to image resolution. Declaration [Precision(0, 1)] [Range(1, 2147483647)] public double AccumulatorFactor { get; set; } Property Value Type Description Double | Improve this Doc View Source MaxRadius Gets or sets a value specifying the maximum circle radius. Declaration [Precision(0, 1)] [Range(0, 2147483647)] public int MaxRadius { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MinDistance Gets or sets the minimum distance between the centers of detected circles. Declaration [Precision(0, 1)] [Range(1, 2147483647)] public double MinDistance { get; set; } Property Value Type Description Double | Improve this Doc View Source MinRadius Gets or sets a value specifying the minimum circle radius. Declaration [Precision(0, 1)] [Range(0, 2147483647)] public int MinRadius { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Param1 Gets or sets the higher threshold of the canny edge detector. Declaration [Precision(0, 1)] [Range(1, 2147483647)] public double Param1 { get; set; } Property Value Type Description Double | Improve this Doc View Source Param2 Gets or sets the accumulator threshold at the center detection stage. Declaration [Precision(0, 1)] [Range(1, 2147483647)] public double Param2 { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Process(IObservable<IplImage>) Finds circles on each grayscale image in an observable sequence using a Hough transform. Declaration public override IObservable<Circle[]> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images on which to find Hough circles. Returns Type Description IObservable < Circle []> A sequence of Circle arrays representing the circles extracted from each image in the source sequence. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, Bonsai.Vision.Circle[]>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.HoughLines.html": {
    "href": "api/Bonsai.Vision.HoughLines.html",
    "title": "Class HoughLines",
    "keywords": "Class HoughLines Represents an operator that finds lines on each binary image in the sequence using a probabilistic Hough transform. Inheritance Object Combinator < IplImage , LineSegment []> Transform < IplImage , LineSegment []> HoughLines Inherited Members Combinator<IplImage, LineSegment[]>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class HoughLines : Transform<IplImage, LineSegment[]> Properties | Improve this Doc View Source MaxLineGap Gets or sets the maximum gap between line segments lying on the same line in order to consider them as a single line segment. Declaration public double MaxLineGap { get; set; } Property Value Type Description Double | Improve this Doc View Source MinLineLength Gets or sets the minimum line length. Declaration public double MinLineLength { get; set; } Property Value Type Description Double | Improve this Doc View Source Rho Gets or sets the distance resolution, in units of pixels. Declaration [Precision(2, 0.01)] [Range(0.1, 2147483647)] public double Rho { get; set; } Property Value Type Description Double | Improve this Doc View Source Theta Gets or sets the angle resolution, in radians. Declaration [Range(0.01, 3.1415926535897931)] public double Theta { get; set; } Property Value Type Description Double | Improve this Doc View Source Threshold Gets or sets the accumulator threshold. A line is returned when the corresponding accumulator is greater than this value. Declaration [Range(1, 2147483647)] public int Threshold { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<IplImage>) Finds lines on each binary image in an observable sequence using a probabilistic Hough transform. Declaration public override IObservable<LineSegment[]> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images on which to find Hough lines. Returns Type Description IObservable < LineSegment []> A sequence of LineSegment arrays representing the lines extracted from each image in the source sequence. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, Bonsai.Vision.LineSegment[]>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.HsvThreshold.html": {
    "href": "api/Bonsai.Vision.HsvThreshold.html",
    "title": "Class HsvThreshold",
    "keywords": "Class HsvThreshold Represents an operator that segments each HSV image in the sequence using the specified color range. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > HsvThreshold Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class HsvThreshold : Transform<IplImage, IplImage> Properties | Improve this Doc View Source Lower Gets or sets the lower bound of the HSV color range. Declaration [TypeConverter(typeof(HsvScalarConverter))] public Scalar Lower { get; set; } Property Value Type Description Scalar | Improve this Doc View Source Upper Gets or sets the upper bound of the HSV color range. If the upper value for Hue is smaller than its lower value, the range will wrap around zero. Declaration [TypeConverter(typeof(HsvScalarConverter))] public Scalar Upper { get; set; } Property Value Type Description Scalar Methods | Improve this Doc View Source Process(IObservable<IplImage>) Segments each HSV image in an observable sequence using the specified color range. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source A sequence of color images in the hue-saturation-value (HSV) color space. Returns Type Description IObservable < IplImage > A sequence of binary images where each pixel is non-zero only if the corresponding HSV pixel in the color image lies between the specified lower and upper bounds of the range. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.html": {
    "href": "api/Bonsai.Vision.html",
    "title": "Namespace Bonsai.Vision",
    "keywords": "Namespace Bonsai.Vision Classes AdaptiveThreshold Represents an operator that applies an adaptive threshold to every grayscale image in the sequence. AffineTransform Represents an operator that creates an affine transformation matrix specified by a translation, rotation and scale. ApproximatePolygon Represents an operator that approximates each polygonal curve in the sequence with the specified precision. AverageBinaryRegion Represents an operator that computes the average binary region from each collection of connected components in the sequence. BackgroundSubtraction Represents an operator that performs image segmentation of every frame in the sequence using an online estimation of the background. BinaryRegionAnalysis Represents an operator that computes image moments from polygonal contours or individual frames in the sequence to extract binary region properties. BinaryRegionExtremes Represents an operator that computes the extremities, or endpoints, of each connected component in the sequence. CalibrateCameraChessboard Represents an operator that finds the camera intrinsic parameters from several views of a chessboard calibration pattern. CameraCapture Represents an operator that generates a sequence of images acquired from the specified camera. Canny Represents an operator that applies the Canny algorithm for edge detection to each image in the sequence. CapturePropertyAssignment Represents a value that will be assigned to the specified camera or video file property upon initialization. CapturePropertyCollection Represents a collection of property values that will be assigned to the specified camera or video file upon initialization. Centroid Represents an operator that computes the centroid of each set of points, image moments, or polygonal contour in the sequence. ColorBalance Represents an operator that applies an independent scale to the color channels of every image in the sequence. CompressionParameterAssignment Provides an abstract base class for configuring various image compression parameters. CompressionParameterCollection Represents a collection of compression parameters used to encode individual images in the EncodeImage operator. ConnectedComponent Represents a collection of measurements extracted from a cluster of connected pixels in an image. ConnectedComponentCollection Represents a collection of connected components. ContainsPoint Represents an operator that determines whether each point in the sequence is contained inside a rectangle, contour, or other polygonal shape. ContourConvexity Provides the result of a convexity analysis of a polygonal contour, representing the deviations between each point in the contour and its convex hull. ContourPoints Represents an operator that copies all points of each contour in the sequence to a new array. Contours Provides a reference to a hierarchy of polygonal contours extracted from an image bitmap. ConvertColor Represents an operator that converts pixels from one color space to another for all images in the sequence. ConvertToImage Represents an operator that converts each array-like object in the sequence into an image. ConvexityDefects Represents an operator that finds the convexity defects of each contour in the sequence. CreateExtrinsics Represents an operator that creates a set of parameters specifying the camera extrinsics. CreateIntrinsics Represents an operator that creates a set of parameters specifying the camera intrinsics. CreatePoint Represents an operator that creates a 2D point with integer coordinates. CreatePoint2d Represents an operator that creates a 2D point with double-precision floating-point coordinates. CreatePoint2f Represents an operator that creates a 2D point with single-precision floating-point coordinates. CreatePoint3d Represents an operator that creates a 3D point with double-precision floating-point coordinates. Crop Represents an operator that crops a rectangular subregion of each image in the sequence, without copying. CropCenter Represents an operator that crops rectangular regions with fixed size around the specified center for each image in the sequence. CropPolygon Represents an operator that crops a polygonal region of interest for each image in the sequence. DecodeImage Represents an operator that decodes an image from each byte buffer in the sequence. DistanceTransform Represents an operator that calculates the distance to the closest zero pixel for all non-zero pixels of each image in the sequence. DrawConnectedComponents Represents an operator that renders each set of connected components in the sequence as an image. DrawContours Represents an operator that renders each set of contours in the sequence as an image. EncodeImage Represents an operator that encodes each image in the sequence into a byte buffer in memory using the specified format. EnumerateContours Represents an operator that generates a sequence of all the contours at the same level of the hierarchy, for each contour in the input sequence. EqualizeHistogram Represents an operator that equalizes the histogram of every grayscale image in the sequence. FileCapture Represents an operator that generates a sequence of images from the specified movie file. Filter2D Represents an operator that convolves each image in the sequence with the specified kernel. FindChessboardCorners Represents an operator that finds the positions of internal corners for each chessboard image in the sequence. FindContours Represents an operator that finds the contours of connected components for each binary image in the sequence. FindCornerSubPix Represents an operator that finds the sub-pixel accurate locations of each corner or radial saddle point in the sequence. Flip Represents an operator that flips each image in the sequence around the vertical, horizontal or both axes. GoodFeaturesToTrack Represents an operator that finds strong corner features for each image in the sequence. Grayscale Represents an operator that converts each BGR color image in the sequence to grayscale. HaarCascade Represents an operator that detects objects on each image in the sequence using a pre-trained cascade of boosted Haar classifiers. HoughCircles Represents an operator that finds circles on each grayscale image in the sequence using a Hough transform. HoughLines Represents an operator that finds lines on each binary image in the sequence using a probabilistic Hough transform. HsvThreshold Represents an operator that segments each HSV image in the sequence using the specified color range. ImageHistogram Represents an operator that computes the per-channel color histograms for each image in the sequence. ImageWriter Represents an operator that writes each image in the sequence to the specified stream. IntrinsicsTransform Provides an abstract base class for all operators requiring a specified set of camera intrinsics and distortion parameters. IplImageHelper Provides helper functions to create and manipulate the format of cached image buffers. JpegQuality Provides a class for specifying the quality of image JPEG compression. KeyPointCollection Represents a collection of key points, or features, extracted from a single image frame. KeyPointOpticalFlow Represents a set of sparse correspondences between features detected in a reference image, and matching features detected in the current image. Laplace Represents an operator that calculates the Laplace transform of each image in the sequence. LargestBinaryRegion Represents an operator that finds the largest binary region from each collection of connected components in the sequence. LinearPolar Represents an operator that applies a forward or inverse linear-polar transform to each image in the sequence. LoadExtrinsics Represents an operator that loads a set of camera extrinsics from a YML file. LoadImage Represents an operator that loads an image from the specified file. LoadIntrinsics Represents an operator that loads a set of camera intrinsics from a YML file. LogPolar Represents an operator that applies a forward or inverse log-polar transform to each image in the sequence. Lut Represents an operator that performs a look-up table transformation on all pixels of each image in the sequence. Mask Represents an operator that sets all pixels which are not in the operation mask to a fixed value, for each image in the sequence. MaskPolygon Represents an operator that applies a polygonal mask to each image in the sequence. MergeBinaryRegions Represents an operator that merges connected component collections in the sequence into a single collection. MinimumEnclosingCircle Represents an operator that finds the parameters of the circle with minimal area enclosing each set of 2D points in the sequence. MorphologicalOperator Represents an operator that applies a morphological transformation kernel to each image in the sequence. Normalize Represents an operator that normalizes the range of values for each image in the sequence to be between zero and one. OpticalFlow Represents an operator that computes dense optical flow using Gunnar Farneback’s algorithm across all images in the sequence. PngBiLevelCompression Provides a class for specifying whether PNG bi-level compression. PngCompressionLevel Provides a class for specifying the PNG compression level. PngCompressionStrategy Provides a class for specifying the PNG compression strategy. PolarTransform Provides an abstract base class for operators that apply a polar transform to each image in the sequence. PxmBinaryFormat Provides a class for specifying a binary format flag for PPM, PGM or PBM. RangeThreshold Represents an operator that tests which pixels lie within the specified range for each image in the sequence. RegionActivity Represents information about activity detected inside a specified polygonal region of interest. RegionActivityCollection Represents a collection of activity measurements corresponding to specific polygonal regions of interest. Resize Represents an operator that resizes each image in the sequence to the specified size. ResizeCanvas Represents an operator that resizes the border around each image in the sequence without stretching the image. RoiActivity Represents an operator that calculates activation intensity inside specified regions of interest for each image in the sequence. RoiActivityDetected Represents an operator that tests whether the activation intensity is above a given threshold for each specified region in the sequence. SaveExtrinsics Represents an operator that writes a sequence of camera extrinsics to a YML file. SaveImage Represents an operator that writes each image in the sequence to a file. SaveIntrinsics Represents an operator that writes a sequence of camera intrinsics to a YML file. ScalarHistogram Represents the per-channel histograms for all channels in a multi-channel array. Skeletonization Represents an operator that extracts the topological skeleton of each image in the sequence. Smooth Represents an operator that applies a smoothing operator to each image in the sequence. Sobel Represents an operator that calculates the first, second, third or mixed image derivatives from the sequence using an extended Sobel operator. SolidColor Represents an operator that generates a sequence with a single image where all pixels are set to the same color value. SolvePnP Represents an operator that computes a sequence of camera extrinsics from sets of 3D-2D point correspondences and the specified camera intrinsics. SortBinaryRegions Represents an operator that sorts each collection of binary regions in the sequence by descending order of area. SparseOpticalFlow Represents an operator that calculates the optical flow for each sparse feature set in the sequence, using the iterative Lucas-Kanade method. TakeBinaryRegions Represents an operator that takes the specified number of binary regions from each collection in the sequence. Threshold Represents an operator that applies a fixed threshold to each image in the sequence. Undistort Represents an operator that undistorts each image in the sequence using the specified camera intrinsics. UndistortPoints Represents an operator that undistorts each point coordinate in the sequence using the specified camera intrinsics. VideoWriter Represents an operator that writes a sequence of images into a compressed AVI file. VideoWriterDisposable Represents a disposable reference to a video writer resource. WarpAffine Represents an operator that applies an affine transformation to each image in the sequence. WarpPerspective Represents an operator that applies a perspective transformation to each image in the sequence. Structs CameraCalibration Represents the result of a camera calibration algorithm, including the camera intrinsic parameters and an estimate of the re-projection error. Circle Represents the parameters of a circle. Extrinsics Represents parameters that describe the camera extrinsic properties such as rotation and translation. Intrinsics Represents parameters that describe the camera intrinsic properties such as the focal length or lens distortion. LineSegment Represents the two endpoints of a line segment in pixel-accurate coordinates. Enums CapturePosition Specifies the units of the file capture start position. FindExtremesMethod Specifies the method used to compute extremities of connected components. PngCompression Specifies the available PNG compression strategies. SubtractionMethod Specifies the subtraction method used to isolate foreground pixels."
  },
  "api/Bonsai.Vision.ImageHistogram.html": {
    "href": "api/Bonsai.Vision.ImageHistogram.html",
    "title": "Class ImageHistogram",
    "keywords": "Class ImageHistogram Represents an operator that computes the per-channel color histograms for each image in the sequence. Inheritance Object Combinator < IplImage , ScalarHistogram > Transform < IplImage , ScalarHistogram > ImageHistogram Inherited Members Combinator<IplImage, ScalarHistogram>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class ImageHistogram : Transform<IplImage, ScalarHistogram> Methods | Improve this Doc View Source Process(IObservable<IplImage>) Computes the per-channel color histograms for each image in an observable sequence. Declaration public override IObservable<ScalarHistogram> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images for which to compute the per-channel color histograms. Returns Type Description IObservable < ScalarHistogram > A sequence of ScalarHistogram objects representing the per-channel color histograms for each image. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, Bonsai.Vision.ScalarHistogram>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.ImageWriter.html": {
    "href": "api/Bonsai.Vision.ImageWriter.html",
    "title": "Class ImageWriter",
    "keywords": "Class ImageWriter Represents an operator that writes each image in the sequence to the specified stream. Inheritance Object StreamSink StreamSink < IplImage , BinaryWriter > ImageWriter Inherited Members StreamSink<IplImage, BinaryWriter>.CreateWriter(Stream) StreamSink<IplImage, BinaryWriter>.Write(BinaryWriter, IplImage) StreamSink<IplImage, BinaryWriter>.Process<TElement>(IObservable<TElement>, Func<TElement, IplImage>) StreamSink<IplImage, BinaryWriter>.Process(IObservable<IplImage>) StreamSink.Path StreamSink.Suffix StreamSink.Overwrite Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class ImageWriter : StreamSink<IplImage, BinaryWriter> Methods | Improve this Doc View Source CreateWriter(Stream) Creates the BinaryWriter object that will be responsible for writing the image data to the specified Stream . Declaration protected override BinaryWriter CreateWriter(Stream stream) Parameters Type Name Description Stream stream The stream on which the image data should be written. Returns Type Description BinaryWriter The BinaryWriter object that will be used to write image data into the stream. Overrides Bonsai.IO.StreamSink<OpenCV.Net.IplImage, System.IO.BinaryWriter>.CreateWriter(System.IO.Stream) | Improve this Doc View Source Write(BinaryWriter, IplImage) Writes a new image to the binary output stream. Declaration protected override void Write(BinaryWriter writer, IplImage input) Parameters Type Name Description BinaryWriter writer A BinaryWriter object used to write raw image data to the output stream. IplImage input The image frame containing the raw binary data to write into the output stream. Overrides Bonsai.IO.StreamSink<OpenCV.Net.IplImage, System.IO.BinaryWriter>.Write(System.IO.BinaryWriter, OpenCV.Net.IplImage)"
  },
  "api/Bonsai.Vision.Intrinsics.html": {
    "href": "api/Bonsai.Vision.Intrinsics.html",
    "title": "Struct Intrinsics",
    "keywords": "Struct Intrinsics Represents parameters that describe the camera intrinsic properties such as the focal length or lens distortion. Implements IEquatable < Intrinsics > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public struct Intrinsics : IEquatable<Intrinsics> Fields | Improve this Doc View Source FocalLength The focal length of the camera. Declaration public Point2d FocalLength Field Value Type Description Point2d | Improve this Doc View Source ImageSize The image size of the camera, in pixels. Declaration public Size? ImageSize Field Value Type Description Nullable < Size > | Improve this Doc View Source PrincipalPoint The principal point of the camera. Declaration public Point2d PrincipalPoint Field Value Type Description Point2d | Improve this Doc View Source RadialDistortion The radial distortion coefficients of the camera. Declaration public Point3d RadialDistortion Field Value Type Description Point3d | Improve this Doc View Source TangentialDistortion The tangential distortion coefficients of the camera. Declaration public Point2d TangentialDistortion Field Value Type Description Point2d Properties | Improve this Doc View Source FovY Gets the vertical field of view of the camera. Declaration public readonly double? FovY { get; } Property Value Type Description Nullable < Double > Methods | Improve this Doc View Source Equals(Intrinsics) Returns a value indicating whether this instance is equal to the specified Intrinsics structure. Declaration public bool Equals(Intrinsics other) Parameters Type Name Description Intrinsics other The Intrinsics object to compare with this instance. Returns Type Description Boolean true if other represents the same parameter values as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether the specified object is an Intrinsics structure with the same parameter values as this Intrinsics structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is an Intrinsics structure and has the same parameter values as this structure; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromCameraMatrix(Mat, Mat, Nullable<Size>) Returns an Intrinsics structure representing the camera intrinsic parameters extracted from a camera matrix, lens distortion and optional image size. Declaration public static Intrinsics FromCameraMatrix(Mat cameraMatrix, Mat distortionCoefficients, Size? imageSize) Parameters Type Name Description Mat cameraMatrix A 2x3 matrix specifying the focal lengths and principal point offset. Mat distortionCoefficients A 1x5 or 5x1 vector specifying the coefficients for the lens distortion model. Nullable < Size > imageSize The image size of the camera, in pixels. Returns Type Description Intrinsics An Intrinsics object representing the extracted camera intrinsic parameters. | Improve this Doc View Source FromCameraMatrix(Mat, Mat, Nullable<Size>, out Intrinsics) Initializes an Intrinsics structure representing the camera intrinsic parameters extracted from a camera matrix, lens distortion and optional image size. Declaration public static void FromCameraMatrix(Mat cameraMatrix, Mat distortionCoefficients, Size? imageSize, out Intrinsics intrinsics) Parameters Type Name Description Mat cameraMatrix A 2x3 matrix specifying the focal lengths and principal point offset. Mat distortionCoefficients A 1x5 or 5x1 vector specifying the coefficients for the lens distortion model. Nullable < Size > imageSize The image size of the camera, in pixels. Intrinsics intrinsics When this method returns, contains an Intrinsics object representing the extracted camera intrinsic parameters. | Improve this Doc View Source GetHashCode() Returns a hash code for this Intrinsics structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this Intrinsics structure. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Creates a String representation of this Intrinsics structure. Declaration public override string ToString() Returns Type Description String A String containing all the parameter values of this Intrinsics structure. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(Intrinsics, Intrinsics) Indicates whether two Intrinsics structures are equal. Declaration public static bool operator ==(Intrinsics left, Intrinsics right) Parameters Type Name Description Intrinsics left The Intrinsics structure on the left-hand side of the equality operator. Intrinsics right The Intrinsics structure on the right-hand side of the equality operator. Returns Type Description Boolean true if left and right have equal parameter values; otherwise, false . | Improve this Doc View Source Inequality(Intrinsics, Intrinsics) Indicates whether two Intrinsics structures are different. Declaration public static bool operator !=(Intrinsics left, Intrinsics right) Parameters Type Name Description Intrinsics left The Intrinsics structure on the left-hand side of the inequality operator. Intrinsics right The Intrinsics structure on the right-hand side of the inequality operator. Returns Type Description Boolean true if left and right differ in any of their parameter values; false if left and right are equal. Implements System.IEquatable<T>"
  },
  "api/Bonsai.Vision.IntrinsicsTransform.html": {
    "href": "api/Bonsai.Vision.IntrinsicsTransform.html",
    "title": "Class IntrinsicsTransform",
    "keywords": "Class IntrinsicsTransform Provides an abstract base class for all operators requiring a specified set of camera intrinsics and distortion parameters. Inheritance Object IntrinsicsTransform SolvePnP Undistort UndistortPoints Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public abstract class IntrinsicsTransform Properties | Improve this Doc View Source Alpha Gets or sets the free scaling parameter used when computing the optimal camera matrix. Declaration [Range(0, 1)] public double Alpha { get; set; } Property Value Type Description Double | Improve this Doc View Source Distortion Gets the matrix of camera distortion coefficients. Declaration protected Mat Distortion { get; } Property Value Type Description Mat | Improve this Doc View Source FocalLength Gets or sets the focal length of the camera, expressed in pixel units. Declaration public Point2d FocalLength { get; set; } Property Value Type Description Point2d | Improve this Doc View Source ImageSize Gets or sets the image size used when computing the optimal camera matrix. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Size? ImageSize { get; set; } Property Value Type Description Nullable < Size > Remarks If the image size is specified, the optimal camera matrix is estimated and used to scale the camera intrinsics in such a way as to avoid losing pixels which would be lost when undistorting the original frames. | Improve this Doc View Source Intrinsics Gets the full camera intrinsics matrix. Declaration protected Mat Intrinsics { get; } Property Value Type Description Mat | Improve this Doc View Source PrincipalPoint Gets or sets the principal point of the camera, usually at the image center. Declaration public Point2d PrincipalPoint { get; set; } Property Value Type Description Point2d | Improve this Doc View Source RadialDistortion Gets or sets the radial distortion coefficients. Declaration public Point3d RadialDistortion { get; set; } Property Value Type Description Point3d | Improve this Doc View Source TangentialDistortion Gets or sets the tangential distortion coefficients. Declaration public Point2d TangentialDistortion { get; set; } Property Value Type Description Point2d"
  },
  "api/Bonsai.Vision.IplImageHelper.html": {
    "href": "api/Bonsai.Vision.IplImageHelper.html",
    "title": "Class IplImageHelper",
    "keywords": "Class IplImageHelper Provides helper functions to create and manipulate the format of cached image buffers. Inheritance Object IplImageHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public static class IplImageHelper Methods | Improve this Doc View Source EnsureColorCopy(IplImage, IplImage) Copies the original image pixels into a cached image buffer, with optional color conversion in the case where the original image is grayscale. Declaration public static IplImage EnsureColorCopy(IplImage output, IplImage image) Parameters Type Name Description IplImage output The current cached image buffer. If the value is null , or if the cached image parameters do not match the size of the source image, a new image buffer will be allocated. IplImage image The image storing the original pixel values. Returns Type Description IplImage An IplImage object matching the size and bit depth of image pixels, and where the number of channels is always three. Pixel values from image will be either copied or converted from grayscale to BGR, depending on the number of channels. | Improve this Doc View Source EnsureImageFormat(IplImage, Size, IplDepth, Int32) Ensures the cached image buffer is allocated and has the specified size and format parameters. Declaration public static IplImage EnsureImageFormat(IplImage output, Size size, IplDepth depth, int channels) Parameters Type Name Description IplImage output The current cached image buffer. If the value is null , or if the cached image parameters do not match the specified size and format, a new image buffer will be allocated. Size size The pixel-accurate size of the image. IplDepth depth The bit depth format for each pixel in the image. Int32 channels The number of channels in the image. Returns Type Description IplImage An IplImage object matching the specified size and format parameters. If output matches all the parameters, the same reference is returned without modification."
  },
  "api/Bonsai.Vision.JpegQuality.html": {
    "href": "api/Bonsai.Vision.JpegQuality.html",
    "title": "Class JpegQuality",
    "keywords": "Class JpegQuality Provides a class for specifying the quality of image JPEG compression. Inheritance Object CompressionParameterAssignment JpegQuality Inherited Members CompressionParameterAssignment.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class JpegQuality : CompressionParameterAssignment Properties | Improve this Doc View Source Value Gets or sets a value specifying the quality of image JPEG compression from 0 to 100 (the higher the better). Default value is 95. Declaration [Range(0, 100)] public int Value { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.Vision.KeyPointCollection.html": {
    "href": "api/Bonsai.Vision.KeyPointCollection.html",
    "title": "Class KeyPointCollection",
    "keywords": "Class KeyPointCollection Represents a collection of key points, or features, extracted from a single image frame. Inheritance Object Collection < Point2f > KeyPointCollection Implements IList < Point2f > ICollection < Point2f > IList ICollection IReadOnlyList < Point2f > IReadOnlyCollection < Point2f > IEnumerable < Point2f > IEnumerable Inherited Members Collection<Point2f>.Add(Point2f) Collection<Point2f>.Clear() Collection<Point2f>.CopyTo(Point2f[], Int32) Collection<Point2f>.Contains(Point2f) Collection<Point2f>.GetEnumerator() Collection<Point2f>.IndexOf(Point2f) Collection<Point2f>.Insert(Int32, Point2f) Collection<Point2f>.Remove(Point2f) Collection<Point2f>.RemoveAt(Int32) Collection<Point2f>.ClearItems() Collection<Point2f>.InsertItem(Int32, Point2f) Collection<Point2f>.RemoveItem(Int32) Collection<Point2f>.SetItem(Int32, Point2f) Collection<Point2f>.IEnumerable.GetEnumerator() Collection<Point2f>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<OpenCV.Net.Point2f>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<OpenCV.Net.Point2f>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<Point2f>.IList.Add(Object) Collection<Point2f>.IList.Contains(Object) Collection<Point2f>.IList.IndexOf(Object) Collection<Point2f>.IList.Insert(Int32, Object) Collection<Point2f>.IList.Remove(Object) Collection<Point2f>.Count Collection<Point2f>.Items Collection<Point2f>.Item[Int32] Collection<Point2f>.ICollection<Point2f>.IsReadOnly Collection<Point2f>.ICollection.IsSynchronized Collection<Point2f>.ICollection.SyncRoot Collection<Point2f>.IList.Item[Int32] Collection<Point2f>.IList.IsReadOnly Collection<Point2f>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class KeyPointCollection : Collection<Point2f>, IList<Point2f>, ICollection<Point2f>, IList, ICollection, IReadOnlyList<Point2f>, IReadOnlyCollection<Point2f>, IEnumerable<Point2f>, IEnumerable Constructors | Improve this Doc View Source KeyPointCollection(IplImage) Initializes a new instance of the KeyPointCollection class with the specified image. Declaration public KeyPointCollection(IplImage image) Parameters Type Name Description IplImage image The image from which the key points in the collection were extracted. Properties | Improve this Doc View Source Image Gets the image from which the key points were extracted. Declaration public IplImage Image { get; } Property Value Type Description IplImage Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Vision.KeyPointOpticalFlow.html": {
    "href": "api/Bonsai.Vision.KeyPointOpticalFlow.html",
    "title": "Class KeyPointOpticalFlow",
    "keywords": "Class KeyPointOpticalFlow Represents a set of sparse correspondences between features detected in a reference image, and matching features detected in the current image. Inheritance Object KeyPointOpticalFlow Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class KeyPointOpticalFlow Constructors | Improve this Doc View Source KeyPointOpticalFlow(KeyPointCollection, KeyPointCollection) Initializes a new instance of the KeyPointOpticalFlow class using the set of sparse feature correspondences detected in the reference and current images. Declaration public KeyPointOpticalFlow(KeyPointCollection previousKeyPoints, KeyPointCollection currentKeyPoints) Parameters Type Name Description KeyPointCollection previousKeyPoints The set of features detected in the reference image. KeyPointCollection currentKeyPoints The set of matching features detected in the current image. Properties | Improve this Doc View Source CurrentKeyPoints Gets the set of matching features detected in the current image. Declaration public KeyPointCollection CurrentKeyPoints { get; } Property Value Type Description KeyPointCollection | Improve this Doc View Source PreviousKeyPoints Gets the set of features detected in the reference image. Declaration public KeyPointCollection PreviousKeyPoints { get; } Property Value Type Description KeyPointCollection"
  },
  "api/Bonsai.Vision.Laplace.html": {
    "href": "api/Bonsai.Vision.Laplace.html",
    "title": "Class Laplace",
    "keywords": "Class Laplace Represents an operator that calculates the Laplace transform of each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > Laplace Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Laplace : Transform<IplImage, IplImage> Properties | Improve this Doc View Source ApertureSize Gets or sets the size of the extended Sobel kernel used to compute derivatives. Declaration [Range(1, 7)] [Precision(0, 2)] [TypeConverter(typeof(OddKernelSizeConverter))] public int ApertureSize { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<IplImage>) Calculates the Laplace transform of each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images for which to compute the transform. Returns Type Description IObservable < IplImage > A sequence of IplImage objects containing the Laplace transform of each image in the source sequence. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.LargestBinaryRegion.html": {
    "href": "api/Bonsai.Vision.LargestBinaryRegion.html",
    "title": "Class LargestBinaryRegion",
    "keywords": "Class LargestBinaryRegion Represents an operator that finds the largest binary region from each collection of connected components in the sequence. Inheritance Object Combinator < ConnectedComponentCollection , ConnectedComponent > Transform < ConnectedComponentCollection , ConnectedComponent > LargestBinaryRegion Inherited Members Combinator<ConnectedComponentCollection, ConnectedComponent>.Process(IObservable<ConnectedComponentCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class LargestBinaryRegion : Transform<ConnectedComponentCollection, ConnectedComponent> Methods | Improve this Doc View Source Process(IObservable<ConnectedComponentCollection>) Finds the largest binary region from each collection of connected components in an observable sequence. Declaration public override IObservable<ConnectedComponent> Process(IObservable<ConnectedComponentCollection> source) Parameters Type Name Description IObservable < ConnectedComponentCollection > source A sequence of ConnectedComponentCollection objects. Returns Type Description IObservable < ConnectedComponent > A ConnectedComponent representing the largest binary region from each collection of connected components in the source sequence, or the empty region if the collection has no elements. Overrides Bonsai.Combinator<Bonsai.Vision.ConnectedComponentCollection, Bonsai.Vision.ConnectedComponent>.Process(System.IObservable<Bonsai.Vision.ConnectedComponentCollection>)"
  },
  "api/Bonsai.Vision.LinearPolar.html": {
    "href": "api/Bonsai.Vision.LinearPolar.html",
    "title": "Class LinearPolar",
    "keywords": "Class LinearPolar Represents an operator that applies a forward or inverse linear-polar transform to each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > PolarTransform LinearPolar Inherited Members PolarTransform.Center PolarTransform.Magnitude PolarTransform.Flags Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class LinearPolar : PolarTransform Remarks The transform emulates human foveal image processing. Methods | Improve this Doc View Source Process(IObservable<IplImage>) Applies a forward or inverse linear-polar transform to each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images for which to apply the linear-polar transform. Returns Type Description IObservable < IplImage > The sequence of polar transformed images. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.LineSegment.html": {
    "href": "api/Bonsai.Vision.LineSegment.html",
    "title": "Struct LineSegment",
    "keywords": "Struct LineSegment Represents the two endpoints of a line segment in pixel-accurate coordinates. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public struct LineSegment Fields | Improve this Doc View Source End The second endpoint of the line segment. Declaration public Point End Field Value Type Description Point | Improve this Doc View Source Start The first endpoint of the line segment. Declaration public Point Start Field Value Type Description Point Methods | Improve this Doc View Source ToString() Creates a String representation of this LineSegment structure. Declaration public override string ToString() Returns Type Description String A String containing all the parameter values of this LineSegment structure. Overrides ValueType.ToString()"
  },
  "api/Bonsai.Vision.LoadExtrinsics.html": {
    "href": "api/Bonsai.Vision.LoadExtrinsics.html",
    "title": "Class LoadExtrinsics",
    "keywords": "Class LoadExtrinsics Represents an operator that loads a set of camera extrinsics from a YML file. Inheritance Object Source < Extrinsics > LoadExtrinsics Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class LoadExtrinsics : Source<Extrinsics> Properties | Improve this Doc View Source FileName Gets or sets the name of the camera extrinsics file. Declaration [FileNameFilter(\"YML Files (*.yml)|*.yml|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains the camera extrinsics loaded from the specified YML file. Declaration public override IObservable<Extrinsics> Generate() Returns Type Description IObservable < Extrinsics > A sequence containing a single Extrinsics object representing the camera extrinsics loaded from the specified YML file. Overrides Bonsai.Source<Bonsai.Vision.Extrinsics>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of camera extrinsics loaded from the specified YML file, and where each Extrinsics object is loaded only when an observable sequence emits a notification. Declaration public IObservable<Extrinsics> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for loading new camera extrinsics. Returns Type Description IObservable < Extrinsics > The sequence of Extrinsics objects loaded from the specified YML file. The most current file name is used to load the parameters after each notification in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Vision.LoadImage.html": {
    "href": "api/Bonsai.Vision.LoadImage.html",
    "title": "Class LoadImage",
    "keywords": "Class LoadImage Represents an operator that loads an image from the specified file. Inheritance Object Source < IplImage > LoadImage Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class LoadImage : Source<IplImage> Properties | Improve this Doc View Source FileName Gets or sets the name of the image file. Declaration [FileNameFilter(\"Image Files|*.png;*.bmp;*.jpg;*.jpeg;*.tif;*.tiff;*.exr|PNG Files|*.png|BMP Files|*.bmp|JPEG Files|*.jpg;*.jpeg|TIFF Files|*.tif;*.tiff|EXR Files|*.exr|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source Mode Gets or sets a value specifying optional conversions applied to the loaded image. Declaration public LoadImageFlags Mode { get; set; } Property Value Type Description LoadImageFlags Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains the image loaded from the specified file. Declaration public override IObservable<IplImage> Generate() Returns Type Description IObservable < IplImage > A sequence containing a single IplImage object representing the image loaded from the specified file. Overrides Bonsai.Source<OpenCV.Net.IplImage>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of images loaded from the specified file, and where each image is loaded only when an observable sequence raises a notification. Declaration public IObservable<IplImage> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for loading new images. Returns Type Description IObservable < IplImage > The sequence of IplImage objects loaded from the specified file. The most current file name is used to load the image after each notification in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Vision.LoadIntrinsics.html": {
    "href": "api/Bonsai.Vision.LoadIntrinsics.html",
    "title": "Class LoadIntrinsics",
    "keywords": "Class LoadIntrinsics Represents an operator that loads a set of camera intrinsics from a YML file. Inheritance Object Source < Intrinsics > LoadIntrinsics Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class LoadIntrinsics : Source<Intrinsics> Properties | Improve this Doc View Source FileName Gets or sets the name of the camera intrinsics file. Declaration [FileNameFilter(\"YML Files (*.yml)|*.yml|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Generate() Generates an observable sequence that contains the camera intrinsics loaded from the specified YML file. Declaration public override IObservable<Intrinsics> Generate() Returns Type Description IObservable < Intrinsics > A sequence containing a single Intrinsics object representing the camera intrinsics loaded from the specified YML file. Overrides Bonsai.Source<Bonsai.Vision.Intrinsics>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of camera intrinsics loaded from the specified YML file, and where each Intrinsics object is loaded only when an observable sequence emits a notification. Declaration public IObservable<Intrinsics> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for loading new camera intrinsics. Returns Type Description IObservable < Intrinsics > The sequence of Intrinsics objects loaded from the specified YML file. The most current file name is used to load the parameters after each notification in the source sequence. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Vision.LogPolar.html": {
    "href": "api/Bonsai.Vision.LogPolar.html",
    "title": "Class LogPolar",
    "keywords": "Class LogPolar Represents an operator that applies a forward or inverse log-polar transform to each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > PolarTransform LogPolar Inherited Members PolarTransform.Center PolarTransform.Magnitude PolarTransform.Flags Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class LogPolar : PolarTransform Remarks The transform emulates human foveal image processing. Methods | Improve this Doc View Source Process(IObservable<IplImage>) Applies a forward or inverse log-polar transform to each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images for which to apply the log-polar transform. Returns Type Description IObservable < IplImage > The sequence of polar transformed images. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.Lut.html": {
    "href": "api/Bonsai.Vision.Lut.html",
    "title": "Class Lut",
    "keywords": "Class Lut Represents an operator that performs a look-up table transformation on all pixels of each image in the sequence. Inheritance Object Lut Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Lut Methods | Improve this Doc View Source Process<TArray>(IObservable<Tuple<IplImage, TArray>>) Performs a look-up table transformation on all pixels of each image in an observable sequence, where each image is paired with a look-up table array. Declaration public IObservable<IplImage> Process<TArray>(IObservable<Tuple<IplImage, TArray>> source) where TArray : Arr Parameters Type Name Description IObservable < Tuple < IplImage , TArray>> source A sequence of pairs where the first value contains the images to be transformed, and the second value contains the look-up table array. The values of each image pixel are used as indices into the look-up table array to retrieve the result of the transformation. Returns Type Description IObservable < IplImage > A sequence of IplImage objects storing transformed image pixels. Type Parameters Name Description TArray The type of the array-like objects used as a look-up table."
  },
  "api/Bonsai.Vision.Mask.html": {
    "href": "api/Bonsai.Vision.Mask.html",
    "title": "Class Mask",
    "keywords": "Class Mask Represents an operator that sets all pixels which are not in the operation mask to a fixed value, for each image in the sequence. Inheritance Object Combinator < Tuple < IplImage , IplImage >, IplImage > Transform < Tuple < IplImage , IplImage >, IplImage > Mask Inherited Members Combinator<Tuple<IplImage, IplImage>, IplImage>.Process(IObservable<Tuple<IplImage, IplImage>>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Mask : Transform<Tuple<IplImage, IplImage>, IplImage> Properties | Improve this Doc View Source FillValue Gets or sets the value to which all pixels that are not in the operation mask will be set to. Declaration public Scalar FillValue { get; set; } Property Value Type Description Scalar Methods | Improve this Doc View Source Process(IObservable<Tuple<IplImage, IplImage, IplImage>>) Sets all pixels which are not in the operation mask to the background image, for each foreground image in the observable sequence. Declaration public IObservable<IplImage> Process(IObservable<Tuple<IplImage, IplImage, IplImage>> source) Parameters Type Name Description IObservable < Tuple < IplImage , IplImage , IplImage >> source A sequence of triples where the first value contains the image to be masked, the second value contains the operation mask, and the third value contains the background image. The zero values of the mask indicate which pixels in the image should be set to the corresponding pixel values in the background. Returns Type Description IObservable < IplImage > A sequence of IplImage objects where all zero pixels in the mask have been replaced by the pixels in the background image. | Improve this Doc View Source Process(IObservable<Tuple<IplImage, IplImage>>) Sets all pixels which are not in the operation mask to a fixed value, for each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<Tuple<IplImage, IplImage>> source) Parameters Type Name Description IObservable < Tuple < IplImage , IplImage >> source A sequence of pairs where the first value contains the images to be masked, and the second value contains the operation mask. The zero values of the mask indicate which pixels in the image should be set to the specified fill value. Returns Type Description IObservable < IplImage > A sequence of IplImage objects where all zero pixels in the mask have been set to the specified fill value. Overrides Bonsai.Combinator<System.Tuple<OpenCV.Net.IplImage, OpenCV.Net.IplImage>, OpenCV.Net.IplImage>.Process(System.IObservable<System.Tuple<OpenCV.Net.IplImage, OpenCV.Net.IplImage>>)"
  },
  "api/Bonsai.Vision.MaskPolygon.html": {
    "href": "api/Bonsai.Vision.MaskPolygon.html",
    "title": "Class MaskPolygon",
    "keywords": "Class MaskPolygon Represents an operator that applies a polygonal mask to each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > CropPolygon MaskPolygon Inherited Members CropPolygon.Regions CropPolygon.MaskType CropPolygon.FillValue CropPolygon.Process(IObservable<IplImage>) Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class MaskPolygon : CropPolygon Constructors | Improve this Doc View Source MaskPolygon() Initializes a new instance of the MaskPolygon class. Declaration public MaskPolygon()"
  },
  "api/Bonsai.Vision.MergeBinaryRegions.html": {
    "href": "api/Bonsai.Vision.MergeBinaryRegions.html",
    "title": "Class MergeBinaryRegions",
    "keywords": "Class MergeBinaryRegions Represents an operator that merges connected component collections in the sequence into a single collection. Inheritance Object Combinator < Tuple < ConnectedComponentCollection , ConnectedComponentCollection >, ConnectedComponentCollection > Transform < Tuple < ConnectedComponentCollection , ConnectedComponentCollection >, ConnectedComponentCollection > MergeBinaryRegions Inherited Members Combinator<Tuple<ConnectedComponentCollection, ConnectedComponentCollection>, ConnectedComponentCollection>.Process(IObservable<Tuple<ConnectedComponentCollection, ConnectedComponentCollection>>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class MergeBinaryRegions : Transform<Tuple<ConnectedComponentCollection, ConnectedComponentCollection>, ConnectedComponentCollection> Methods | Improve this Doc View Source Process(IObservable<Tuple<ConnectedComponentCollection, ConnectedComponentCollection>>) Merges connected component collections in an observable sequence into a single collection. Declaration public override IObservable<ConnectedComponentCollection> Process(IObservable<Tuple<ConnectedComponentCollection, ConnectedComponentCollection>> source) Parameters Type Name Description IObservable < Tuple < ConnectedComponentCollection , ConnectedComponentCollection >> source A sequence of the connected component collection pairs to merge. Returns Type Description IObservable < ConnectedComponentCollection > A sequence of ConnectedComponentCollection objects representing the merged collections. Overrides Bonsai.Combinator<System.Tuple<Bonsai.Vision.ConnectedComponentCollection, Bonsai.Vision.ConnectedComponentCollection>, Bonsai.Vision.ConnectedComponentCollection>.Process(System.IObservable<System.Tuple<Bonsai.Vision.ConnectedComponentCollection, Bonsai.Vision.ConnectedComponentCollection>>)"
  },
  "api/Bonsai.Vision.MinimumEnclosingCircle.html": {
    "href": "api/Bonsai.Vision.MinimumEnclosingCircle.html",
    "title": "Class MinimumEnclosingCircle",
    "keywords": "Class MinimumEnclosingCircle Represents an operator that finds the parameters of the circle with minimal area enclosing each set of 2D points in the sequence. Inheritance Object Combinator < Contour , Circle > Transform < Contour , Circle > MinimumEnclosingCircle Inherited Members Combinator<Contour, Circle>.Process(IObservable<Contour>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class MinimumEnclosingCircle : Transform<Contour, Circle> Methods | Improve this Doc View Source Process(IObservable<ConnectedComponentCollection>) Finds all the circles with minimal area enclosing each of the connected components in an observable sequence. Declaration public IObservable<Circle[]> Process(IObservable<ConnectedComponentCollection> source) Parameters Type Name Description IObservable < ConnectedComponentCollection > source The sequence of ConnectedComponentCollection objects representing the contours for which to find the minimum enclosing circle. Returns Type Description IObservable < Circle []> A sequence of Circle arrays representing the parameters of the circles with minimal area enclosing each connected component. | Improve this Doc View Source Process(IObservable<Contour>) Finds the parameters of the circle with minimal area enclosing the array of points for each polygonal contour in an observable sequence. Declaration public override IObservable<Circle> Process(IObservable<Contour> source) Parameters Type Name Description IObservable < Contour > source The sequence of Contour objects for which to find the minimum enclosing circle. Returns Type Description IObservable < Circle > A sequence of Circle objects representing the parameters of the circle with minimal area enclosing each polygonal contour. Overrides Bonsai.Combinator<OpenCV.Net.Contour, Bonsai.Vision.Circle>.Process(System.IObservable<OpenCV.Net.Contour>) | Improve this Doc View Source Process(IObservable<Mat>) Finds the parameters of the circle with minimal area enclosing each array of points in an observable sequence. Declaration public IObservable<Circle> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source The sequence of Mat objects specifying the array of points for which to find the minimum enclosing circle. Returns Type Description IObservable < Circle > A sequence of Circle objects representing the parameters of the circle with minimal area enclosing each array of points. | Improve this Doc View Source Process(IObservable<Point2f[]>) Finds the parameters of the circle with minimal area enclosing each array of points in an observable sequence. Declaration public IObservable<Circle> Process(IObservable<Point2f[]> source) Parameters Type Name Description IObservable < Point2f []> source The sequence of Point2f arrays for which to find the minimum enclosing circle. Returns Type Description IObservable < Circle > A sequence of Circle objects representing the parameters of the circle with minimal area enclosing each array of points."
  },
  "api/Bonsai.Vision.MorphologicalOperator.html": {
    "href": "api/Bonsai.Vision.MorphologicalOperator.html",
    "title": "Class MorphologicalOperator",
    "keywords": "Class MorphologicalOperator Represents an operator that applies a morphological transformation kernel to each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > MorphologicalOperator Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class MorphologicalOperator : Transform<IplImage, IplImage> Constructors | Improve this Doc View Source MorphologicalOperator() Initializes a new instance of the MorphologicalOperator class. Declaration public MorphologicalOperator() Properties | Improve this Doc View Source Anchor Gets or sets the anchor of the structuring element. Declaration public Point Anchor { get; set; } Property Value Type Description Point | Improve this Doc View Source Iterations Gets or sets the number of times to apply the morphological operator. Declaration [Range(0, 2147483647)] public int Iterations { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Operation Gets or sets a value specifying the type of morphological operation to be applied. Declaration public MorphologicalOperation Operation { get; set; } Property Value Type Description MorphologicalOperation | Improve this Doc View Source Shape Gets or sets the shape of the structuring element. Declaration [TypeConverter(typeof(MorphologicalOperator.ShapeConverter))] public StructuringElementShape Shape { get; set; } Property Value Type Description StructuringElementShape | Improve this Doc View Source Size Gets or sets the size of the structuring element. Declaration public Size Size { get; set; } Property Value Type Description Size Methods | Improve this Doc View Source Process(IObservable<IplImage>) Applies a morphological transformation kernel to each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images for which to apply the morphological operator. Returns Type Description IObservable < IplImage > The sequence of transformed images. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.Normalize.html": {
    "href": "api/Bonsai.Vision.Normalize.html",
    "title": "Class Normalize",
    "keywords": "Class Normalize Represents an operator that normalizes the range of values for each image in the sequence to be between zero and one. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > Normalize Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Normalize : Transform<IplImage, IplImage> Methods | Improve this Doc View Source Process(IObservable<IplImage>) Normalizes the range of values for each image in an observable sequence to be between zero and one. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to normalize. Returns Type Description IObservable < IplImage > The sequence of normalized images. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.OpticalFlow.html": {
    "href": "api/Bonsai.Vision.OpticalFlow.html",
    "title": "Class OpticalFlow",
    "keywords": "Class OpticalFlow Represents an operator that computes dense optical flow using Gunnar Farneback’s algorithm across all images in the sequence. Inheritance Object Combinator < Tuple < IplImage , IplImage >, IplImage > Transform < Tuple < IplImage , IplImage >, IplImage > OpticalFlow Inherited Members Combinator<Tuple<IplImage, IplImage>, IplImage>.Process(IObservable<Tuple<IplImage, IplImage>>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class OpticalFlow : Transform<Tuple<IplImage, IplImage>, IplImage> Properties | Improve this Doc View Source Flags Gets or sets a value specifying the operation flags for the optical flow algorithm. Declaration public FarnebackFlowFlags Flags { get; set; } Property Value Type Description FarnebackFlowFlags | Improve this Doc View Source Iterations Gets or sets the number of iterations of the algorithm at each pyramid level. Declaration [Range(0, 2147483647)] public int Iterations { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Levels Gets or sets the number of pyramid layers, including the initial image. Declaration [Range(1, 2147483647)] public int Levels { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PolyN Gets or sets the size of the pixel neighborhood used to find polynomial expansion in each pixel. Declaration [Range(0, 2147483647)] public int PolyN { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PolySigma Gets or sets the standard deviation of the Gaussian used to smooth the derivatives used as a basis for the polynomial expansion. Declaration [Precision(2, 0.01)] public double PolySigma { get; set; } Property Value Type Description Double | Improve this Doc View Source PyramidScale Gets or sets a value specifying the image scale (less than 1) used to build the pyramids for each image. Declaration [Range(0, 1)] public double PyramidScale { get; set; } Property Value Type Description Double | Improve this Doc View Source WindowSize Gets or sets the averaging window size. Larger values increase robustness to noise and fast motion, but yield a blurred motion field. Declaration [Range(0, 2147483647)] public int WindowSize { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<IplImage>) Computes dense optical flow using Gunnar Farneback’s algorithm across all images in an observable sequence. Declaration public IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images across which to compute dense optical flow. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the flow field between the current and the previous image in the source sequence. | Improve this Doc View Source Process(IObservable<Tuple<IplImage, IplImage>>) Computes dense optical flow using Gunnar Farneback’s algorithm across all image pairs in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<Tuple<IplImage, IplImage>> source) Parameters Type Name Description IObservable < Tuple < IplImage , IplImage >> source The sequence of image pairs across which to compute the dense optical flow. The optical flow is computed from the first to the second image in the pair. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the flow field between the first and the second image of each pair in the source sequence. Overrides Bonsai.Combinator<System.Tuple<OpenCV.Net.IplImage, OpenCV.Net.IplImage>, OpenCV.Net.IplImage>.Process(System.IObservable<System.Tuple<OpenCV.Net.IplImage, OpenCV.Net.IplImage>>)"
  },
  "api/Bonsai.Vision.PngBiLevelCompression.html": {
    "href": "api/Bonsai.Vision.PngBiLevelCompression.html",
    "title": "Class PngBiLevelCompression",
    "keywords": "Class PngBiLevelCompression Provides a class for specifying whether PNG bi-level compression. Inheritance Object CompressionParameterAssignment PngBiLevelCompression Inherited Members CompressionParameterAssignment.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class PngBiLevelCompression : CompressionParameterAssignment Properties | Improve this Doc View Source Value Gets or sets a value indicating whether PNG compression should use bi-level (binary) images. Declaration public bool Value { get; set; } Property Value Type Description Boolean"
  },
  "api/Bonsai.Vision.PngCompression.html": {
    "href": "api/Bonsai.Vision.PngCompression.html",
    "title": "Enum PngCompression",
    "keywords": "Enum PngCompression Specifies the available PNG compression strategies. Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public enum PngCompression Fields Name Description Default Specifies the default PNG compression strategy. Filtered Specifies a filtered PNG compression strategy. Fixed Specifies a fixed PNG compression strategy. HuffmanOnly Specifies a huffman code based PNG compression strategy. RunLengthEncoding Specifies a run-length encoding PNG compression strategy."
  },
  "api/Bonsai.Vision.PngCompressionLevel.html": {
    "href": "api/Bonsai.Vision.PngCompressionLevel.html",
    "title": "Class PngCompressionLevel",
    "keywords": "Class PngCompressionLevel Provides a class for specifying the PNG compression level. Inheritance Object CompressionParameterAssignment PngCompressionLevel Inherited Members CompressionParameterAssignment.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class PngCompressionLevel : CompressionParameterAssignment Properties | Improve this Doc View Source Value Gets or sets a value specifying the PNG compression level from 0 to 9. A higher value means a smaller size and longer compression time. Default value is 3. Declaration [Range(0, 9)] public int Value { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.Vision.PngCompressionStrategy.html": {
    "href": "api/Bonsai.Vision.PngCompressionStrategy.html",
    "title": "Class PngCompressionStrategy",
    "keywords": "Class PngCompressionStrategy Provides a class for specifying the PNG compression strategy. Inheritance Object CompressionParameterAssignment PngCompressionStrategy Inherited Members CompressionParameterAssignment.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class PngCompressionStrategy : CompressionParameterAssignment Properties | Improve this Doc View Source Value Gets or sets a value specifying the PNG compression strategy. Declaration public PngCompression Value { get; set; } Property Value Type Description PngCompression"
  },
  "api/Bonsai.Vision.PolarTransform.html": {
    "href": "api/Bonsai.Vision.PolarTransform.html",
    "title": "Class PolarTransform",
    "keywords": "Class PolarTransform Provides an abstract base class for operators that apply a polar transform to each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > PolarTransform LinearPolar LogPolar Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public abstract class PolarTransform : Transform<IplImage, IplImage> Properties | Improve this Doc View Source Center Gets or sets the transformation center where the output precision is maximal. Declaration public Point2f Center { get; set; } Property Value Type Description Point2f | Improve this Doc View Source Flags Gets or sets a value specifying the interpolation and operation flags for the image warp. Declaration public WarpFlags Flags { get; set; } Property Value Type Description WarpFlags | Improve this Doc View Source Magnitude Gets or sets the magnitude scale parameter for the polar transformation. Declaration public double Magnitude { get; set; } Property Value Type Description Double"
  },
  "api/Bonsai.Vision.PxmBinaryFormat.html": {
    "href": "api/Bonsai.Vision.PxmBinaryFormat.html",
    "title": "Class PxmBinaryFormat",
    "keywords": "Class PxmBinaryFormat Provides a class for specifying a binary format flag for PPM, PGM or PBM. Inheritance Object CompressionParameterAssignment PxmBinaryFormat Inherited Members CompressionParameterAssignment.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class PxmBinaryFormat : CompressionParameterAssignment Properties | Improve this Doc View Source Value Gets or sets a value specifying a binary format flag for PPM, PGM or PBM. Default value is 1. Declaration public int Value { get; set; } Property Value Type Description Int32"
  },
  "api/Bonsai.Vision.RangeThreshold.html": {
    "href": "api/Bonsai.Vision.RangeThreshold.html",
    "title": "Class RangeThreshold",
    "keywords": "Class RangeThreshold Represents an operator that tests which pixels lie within the specified range for each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > RangeThreshold Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class RangeThreshold : Transform<IplImage, IplImage> Properties | Improve this Doc View Source Lower Gets or sets the inclusive lower boundary of the range. Declaration [TypeConverter(typeof(RangeScalarConverter))] public Scalar Lower { get; set; } Property Value Type Description Scalar | Improve this Doc View Source Upper Gets or sets the exclusive upper boundary of the range. Declaration [TypeConverter(typeof(RangeScalarConverter))] public Scalar Upper { get; set; } Property Value Type Description Scalar Methods | Improve this Doc View Source Process(IObservable<IplImage>) Tests which pixels lie within the specified range for each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to threshold. Each channel in a color image is tested independently according to the specified scalar range. Returns Type Description IObservable < IplImage > A sequence of binary images where each pixel is non-zero if the corresponding value in the original image is within the allowable range. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.RegionActivity.html": {
    "href": "api/Bonsai.Vision.RegionActivity.html",
    "title": "Class RegionActivity",
    "keywords": "Class RegionActivity Represents information about activity detected inside a specified polygonal region of interest. Inheritance Object RegionActivity Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class RegionActivity Properties | Improve this Doc View Source Activity Gets or sets the total per-channel activity of pixels in the region of interest. Declaration public Scalar Activity { get; set; } Property Value Type Description Scalar | Improve this Doc View Source Rect Gets or sets the bounding rectangle of the region of interest. Declaration public Rect Rect { get; set; } Property Value Type Description Rect | Improve this Doc View Source Roi Gets or sets the array of vertices specifying the polygonal region of interest. Declaration public Point[] Roi { get; set; } Property Value Type Description Point []"
  },
  "api/Bonsai.Vision.RegionActivityCollection.html": {
    "href": "api/Bonsai.Vision.RegionActivityCollection.html",
    "title": "Class RegionActivityCollection",
    "keywords": "Class RegionActivityCollection Represents a collection of activity measurements corresponding to specific polygonal regions of interest. Inheritance Object Collection < RegionActivity > RegionActivityCollection Implements IList < RegionActivity > ICollection < RegionActivity > IList ICollection IReadOnlyList < RegionActivity > IReadOnlyCollection < RegionActivity > IEnumerable < RegionActivity > IEnumerable Inherited Members Collection<RegionActivity>.Add(RegionActivity) Collection<RegionActivity>.Clear() Collection<RegionActivity>.CopyTo(RegionActivity[], Int32) Collection<RegionActivity>.Contains(RegionActivity) Collection<RegionActivity>.GetEnumerator() Collection<RegionActivity>.IndexOf(RegionActivity) Collection<RegionActivity>.Insert(Int32, RegionActivity) Collection<RegionActivity>.Remove(RegionActivity) Collection<RegionActivity>.RemoveAt(Int32) Collection<RegionActivity>.ClearItems() Collection<RegionActivity>.InsertItem(Int32, RegionActivity) Collection<RegionActivity>.RemoveItem(Int32) Collection<RegionActivity>.SetItem(Int32, RegionActivity) Collection<RegionActivity>.IEnumerable.GetEnumerator() Collection<RegionActivity>.ICollection.CopyTo(Array, Int32) System.Collections.ObjectModel.Collection<Bonsai.Vision.RegionActivity>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<Bonsai.Vision.RegionActivity>.System.Collections.IList.set_Item(System.Int32, System.Object) Collection<RegionActivity>.IList.Add(Object) Collection<RegionActivity>.IList.Contains(Object) Collection<RegionActivity>.IList.IndexOf(Object) Collection<RegionActivity>.IList.Insert(Int32, Object) Collection<RegionActivity>.IList.Remove(Object) Collection<RegionActivity>.Count Collection<RegionActivity>.Items Collection<RegionActivity>.Item[Int32] Collection<RegionActivity>.ICollection<RegionActivity>.IsReadOnly Collection<RegionActivity>.ICollection.IsSynchronized Collection<RegionActivity>.ICollection.SyncRoot Collection<RegionActivity>.IList.Item[Int32] Collection<RegionActivity>.IList.IsReadOnly Collection<RegionActivity>.IList.IsFixedSize Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class RegionActivityCollection : Collection<RegionActivity>, IList<RegionActivity>, ICollection<RegionActivity>, IList, ICollection, IReadOnlyList<RegionActivity>, IReadOnlyCollection<RegionActivity>, IEnumerable<RegionActivity>, IEnumerable Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Bonsai.Vision.Resize.html": {
    "href": "api/Bonsai.Vision.Resize.html",
    "title": "Class Resize",
    "keywords": "Class Resize Represents an operator that resizes each image in the sequence to the specified size. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > Resize Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Resize : Transform<IplImage, IplImage> Properties | Improve this Doc View Source Interpolation Gets or sets a value specifying the interpolation method used to transform individual image pixels. Declaration public SubPixelInterpolation Interpolation { get; set; } Property Value Type Description SubPixelInterpolation | Improve this Doc View Source Size Gets or sets the size of the output images. Declaration public Size Size { get; set; } Property Value Type Description Size Methods | Improve this Doc View Source Process(IObservable<IplImage>) Resizes each image in an observable sequence to the specified size. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to resize. Returns Type Description IObservable < IplImage > The sequence of resized images. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.ResizeCanvas.html": {
    "href": "api/Bonsai.Vision.ResizeCanvas.html",
    "title": "Class ResizeCanvas",
    "keywords": "Class ResizeCanvas Represents an operator that resizes the border around each image in the sequence without stretching the image. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > ResizeCanvas Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class ResizeCanvas : Transform<IplImage, IplImage> Properties | Improve this Doc View Source BorderType Gets or sets a value specifying the type of border to create around the output image. Declaration public IplBorder BorderType { get; set; } Property Value Type Description IplBorder | Improve this Doc View Source FillValue Gets or sets the value to which constant border pixels will be set to. Declaration public Scalar FillValue { get; set; } Property Value Type Description Scalar | Improve this Doc View Source Offset Gets or sets the optional top-left coordinates where the source image will be placed. Declaration [TypeConverter(typeof(NumericRecordConverter))] public Point? Offset { get; set; } Property Value Type Description Nullable < Point > | Improve this Doc View Source Size Gets or sets the size of the output image. Declaration public Size Size { get; set; } Property Value Type Description Size Methods | Improve this Doc View Source Process(IObservable<IplImage>) Resizes the border around each image in an observable sequence without stretching the image. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images for which to resize the border. Returns Type Description IObservable < IplImage > A sequence of images with the specified border size. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.RoiActivity.html": {
    "href": "api/Bonsai.Vision.RoiActivity.html",
    "title": "Class RoiActivity",
    "keywords": "Class RoiActivity Represents an operator that calculates activation intensity inside specified regions of interest for each image in the sequence. Inheritance Object Combinator < IplImage , RegionActivityCollection > Transform < IplImage , RegionActivityCollection > RoiActivity Inherited Members Combinator<IplImage, RegionActivityCollection>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class RoiActivity : Transform<IplImage, RegionActivityCollection> Properties | Improve this Doc View Source Operation Gets or sets a value specifying the reduction operation used to calculate activation intensity. Declaration public ReduceOperation Operation { get; set; } Property Value Type Description ReduceOperation | Improve this Doc View Source Regions Gets or sets the polygonal regions of interest for which to calculate activation intensity. Declaration public Point[][] Regions { get; set; } Property Value Type Description Point [][] Methods | Improve this Doc View Source Process(IObservable<IplImage>) Calculates activation intensity inside specified regions of interest for each image in an observable sequence. Declaration public override IObservable<RegionActivityCollection> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images for which to calculate region of interest activation. Returns Type Description IObservable < RegionActivityCollection > A sequence of RegionActivityCollection containing the activation intensity inside the specified regions of interest for each image in the source sequence. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, Bonsai.Vision.RegionActivityCollection>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.RoiActivityDetected.html": {
    "href": "api/Bonsai.Vision.RoiActivityDetected.html",
    "title": "Class RoiActivityDetected",
    "keywords": "Class RoiActivityDetected Represents an operator that tests whether the activation intensity is above a given threshold for each specified region in the sequence. Inheritance Object Combinator < RegionActivityCollection , Boolean > Transform < RegionActivityCollection , Boolean > RoiActivityDetected Inherited Members Combinator<RegionActivityCollection, Boolean>.Process(IObservable<RegionActivityCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class RoiActivityDetected : Transform<RegionActivityCollection, bool> Properties | Improve this Doc View Source Index Gets or sets the index of the region of interest to test. Declaration public int? Index { get; set; } Property Value Type Description Nullable < Int32 > Remarks If no index is specified, the activity inside any specified region of interest will be considered. | Improve this Doc View Source Threshold Gets or sets the activity detection threshold. Declaration public double Threshold { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Process(IObservable<RegionActivityCollection>) Tests whether the activation intensity is above a given threshold for each specified region in an observable sequence. Declaration public override IObservable<bool> Process(IObservable<RegionActivityCollection> source) Parameters Type Name Description IObservable < RegionActivityCollection > source A sequence of RegionActivityCollection containing the regions of interest for which activation intensity was extracted. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the activation intensity of the specified region of interest exceeded the activation threshold. Overrides Bonsai.Combinator<Bonsai.Vision.RegionActivityCollection, System.Boolean>.Process(System.IObservable<Bonsai.Vision.RegionActivityCollection>)"
  },
  "api/Bonsai.Vision.SaveExtrinsics.html": {
    "href": "api/Bonsai.Vision.SaveExtrinsics.html",
    "title": "Class SaveExtrinsics",
    "keywords": "Class SaveExtrinsics Represents an operator that writes a sequence of camera extrinsics to a YML file. Inheritance Object Combinator < Extrinsics , Extrinsics > Sink < Extrinsics > SaveExtrinsics Inherited Members Combinator<Extrinsics, Extrinsics>.Process(IObservable<Extrinsics>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class SaveExtrinsics : Sink<Extrinsics> Properties | Improve this Doc View Source FileName Gets or sets the name of the file on which to write the camera extrinsics. Declaration [FileNameFilter(\"YML Files (*.yml)|*.yml|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source Suffix Gets or sets the optional suffix used to generate file names. Declaration public PathSuffix Suffix { get; set; } Property Value Type Description PathSuffix Methods | Improve this Doc View Source Process(IObservable<Extrinsics>) Writes an observable sequence of camera extrinsic properties to the specified YML file. Declaration public override IObservable<Extrinsics> Process(IObservable<Extrinsics> source) Parameters Type Name Description IObservable < Extrinsics > source The sequence of camera extrinsic properties to write. Returns Type Description IObservable < Extrinsics > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the camera extrinsics to the specified YML file. Overrides Bonsai.Combinator<Bonsai.Vision.Extrinsics, Bonsai.Vision.Extrinsics>.Process(System.IObservable<Bonsai.Vision.Extrinsics>)"
  },
  "api/Bonsai.Vision.SaveImage.html": {
    "href": "api/Bonsai.Vision.SaveImage.html",
    "title": "Class SaveImage",
    "keywords": "Class SaveImage Represents an operator that writes each image in the sequence to a file. Inheritance Object Combinator < IplImage , IplImage > Sink < IplImage > SaveImage Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class SaveImage : Sink<IplImage> Properties | Improve this Doc View Source FileName Gets or sets the name of the file on which to write the images. Declaration [FileNameFilter(\"PNG Files (*.png)|*.png|BMP Files (*.bmp)|*.bmp|JPEG Files (*.jpg;*.jpeg)|*.jpg;*.jpeg|TIFF Files (*.tif)|*.tif\")] public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source Suffix Gets or sets the optional suffix used to generate file names. Declaration public PathSuffix Suffix { get; set; } Property Value Type Description PathSuffix Methods | Improve this Doc View Source Process(IObservable<IplImage>) Writes each image in an observable sequence to a file. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to write. Returns Type Description IObservable < IplImage > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the images to the specified file. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.SaveIntrinsics.html": {
    "href": "api/Bonsai.Vision.SaveIntrinsics.html",
    "title": "Class SaveIntrinsics",
    "keywords": "Class SaveIntrinsics Represents an operator that writes a sequence of camera intrinsics to a YML file. Inheritance Object Combinator < Intrinsics , Intrinsics > Sink < Intrinsics > SaveIntrinsics Inherited Members Combinator<Intrinsics, Intrinsics>.Process(IObservable<Intrinsics>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class SaveIntrinsics : Sink<Intrinsics> Properties | Improve this Doc View Source FileName Gets or sets the name of the file on which to write the camera intrinsics. Declaration [FileNameFilter(\"YML Files (*.yml)|*.yml|All Files|*.*\")] public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source Suffix Gets or sets the optional suffix used to generate file names. Declaration public PathSuffix Suffix { get; set; } Property Value Type Description PathSuffix Methods | Improve this Doc View Source Process(IObservable<CameraCalibration>) Writes an observable sequence of camera intrinsic properties extracted from a camera calibration procedure to the specified YML file. Declaration public IObservable<CameraCalibration> Process(IObservable<CameraCalibration> source) Parameters Type Name Description IObservable < CameraCalibration > source A sequence of CameraCalibration objects containing the camera intrinsic properties to write. Returns Type Description IObservable < CameraCalibration > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the calibrated camera intrinsics to the specified YML file. | Improve this Doc View Source Process(IObservable<Intrinsics>) Writes an observable sequence of camera intrinsic properties to the specified YML file. Declaration public override IObservable<Intrinsics> Process(IObservable<Intrinsics> source) Parameters Type Name Description IObservable < Intrinsics > source The sequence of camera intrinsic properties to write. Returns Type Description IObservable < Intrinsics > An observable sequence that is identical to the source sequence but where there is an additional side effect of writing the camera intrinsics to the specified YML file. Overrides Bonsai.Combinator<Bonsai.Vision.Intrinsics, Bonsai.Vision.Intrinsics>.Process(System.IObservable<Bonsai.Vision.Intrinsics>)"
  },
  "api/Bonsai.Vision.ScalarHistogram.html": {
    "href": "api/Bonsai.Vision.ScalarHistogram.html",
    "title": "Class ScalarHistogram",
    "keywords": "Class ScalarHistogram Represents the per-channel histograms for all channels in a multi-channel array. Inheritance Object ScalarHistogram Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class ScalarHistogram Constructors | Improve this Doc View Source ScalarHistogram(Histogram, Histogram, Histogram, Histogram) Initializes a new instance of the ScalarHistogram class using the specified per-channel histograms. Declaration public ScalarHistogram(Histogram val0, Histogram val1, Histogram val2, Histogram val3) Parameters Type Name Description Histogram val0 The histogram for the first channel in the array. Histogram val1 The histogram for the second channel in the array. Histogram val2 The histogram for the third channel in the array. Histogram val3 The histogram for the fourth channel in the array. Properties | Improve this Doc View Source Val0 Gets the histogram for the first channel in the array. Declaration public Histogram Val0 { get; } Property Value Type Description Histogram | Improve this Doc View Source Val1 Gets the histogram for the second channel in the array. Declaration public Histogram Val1 { get; } Property Value Type Description Histogram | Improve this Doc View Source Val2 Gets the histogram for the third channel in the array. Declaration public Histogram Val2 { get; } Property Value Type Description Histogram | Improve this Doc View Source Val3 Gets the histogram for the fourth channel in the array. Declaration public Histogram Val3 { get; } Property Value Type Description Histogram"
  },
  "api/Bonsai.Vision.Skeletonization.html": {
    "href": "api/Bonsai.Vision.Skeletonization.html",
    "title": "Class Skeletonization",
    "keywords": "Class Skeletonization Represents an operator that extracts the topological skeleton of each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > Skeletonization Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Skeletonization : Transform<IplImage, IplImage> Properties | Improve this Doc View Source DistanceType Gets or sets the function used to compute the distance transform for each pixel. Declaration [TypeConverter(typeof(DistanceTypeConverter))] public DistanceType DistanceType { get; set; } Property Value Type Description DistanceType | Improve this Doc View Source LaplacianAperture Gets or sets the size of the extended Sobel kernel used to compute derivatives. Declaration [Range(1, 31)] [Precision(0, 2)] public int LaplacianAperture { get; set; } Property Value Type Description Int32 | Improve this Doc View Source RidgeThreshold Gets or sets the second-derivative cutoff used to isolate skeleton lines. Declaration [Precision(2, 0.1)] [Range(-2147483648, 0)] public double RidgeThreshold { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Process(IObservable<IplImage>) Extracts the topological skeleton of each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images for which to extract the topological skeleton. Returns Type Description IObservable < IplImage > A sequence of IplImage objects where each non-zero pixel belongs to the extracted topological skeleton of the original image. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.Smooth.html": {
    "href": "api/Bonsai.Vision.Smooth.html",
    "title": "Class Smooth",
    "keywords": "Class Smooth Represents an operator that applies a smoothing operator to each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > Smooth Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Smooth : Transform<IplImage, IplImage> Properties | Improve this Doc View Source Sigma1 Gets or sets the standard deviation for the first dimension in the case of Gaussian smoothing. Declaration [Precision(2, 0.1)] [Range(0, 2147483647)] public double Sigma1 { get; set; } Property Value Type Description Double | Improve this Doc View Source Sigma2 Gets or sets the standard deviation for the second dimension in the case of Gaussian smoothing. Declaration [Precision(2, 0.1)] [Range(0, 2147483647)] public double Sigma2 { get; set; } Property Value Type Description Double | Improve this Doc View Source Size1 Gets or sets the aperture width of the smoothing kernel. Declaration [Precision(0, 2)] [Range(1, 2147483647)] [TypeConverter(typeof(Smooth.SmoothKernelSizeConverter))] public int Size1 { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Size2 Gets or sets the aperture height of the smoothing kernel. Declaration [Precision(0, 2)] [Range(1, 2147483647)] [TypeConverter(typeof(Smooth.SmoothKernelSizeConverter))] public int Size2 { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SmoothType Gets or sets a value specifying the smoothing method to be applied. Declaration public SmoothMethod SmoothType { get; set; } Property Value Type Description SmoothMethod Methods | Improve this Doc View Source Process(IObservable<IplImage>) Applies a smoothing operator to each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to smooth. Returns Type Description IObservable < IplImage > The sequence of smoothed images. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.Sobel.html": {
    "href": "api/Bonsai.Vision.Sobel.html",
    "title": "Class Sobel",
    "keywords": "Class Sobel Represents an operator that calculates the first, second, third or mixed image derivatives from the sequence using an extended Sobel operator. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > Sobel Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Sobel : Transform<IplImage, IplImage> Properties | Improve this Doc View Source ApertureSize Gets or sets the size of the extended Sobel kernel. Declaration [Range(1, 7)] [Precision(0, 2)] [TypeConverter(typeof(OddKernelSizeConverter))] public int ApertureSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source XOrder Gets or sets the order of the horizontal derivative. Declaration [Range(0, 6)] public int XOrder { get; set; } Property Value Type Description Int32 | Improve this Doc View Source YOrder Gets or sets the order of the vertical derivative. Declaration [Range(0, 6)] public int YOrder { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<IplImage>) Calculates the first, second, third or mixed image derivatives from an observable sequence using an extended Sobel operator. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images for which to calculate the image derivatives. Returns Type Description IObservable < IplImage > A sequence of IplImage objects representing the image derivatives of the original elements in the source sequence. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.SolidColor.html": {
    "href": "api/Bonsai.Vision.SolidColor.html",
    "title": "Class SolidColor",
    "keywords": "Class SolidColor Represents an operator that generates a sequence with a single image where all pixels are set to the same color value. Inheritance Object Source < IplImage > SolidColor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class SolidColor : Source<IplImage> Properties | Improve this Doc View Source Channels Gets or sets the number of channels in the output image. Declaration public int Channels { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Color Gets or sets the color value to which all pixels in the output image will be set to. Declaration [Range(0, 255)] [Precision(0, 1)] [TypeConverter(typeof(BgraScalarConverter))] public Scalar Color { get; set; } Property Value Type Description Scalar | Improve this Doc View Source Depth Gets or sets the target bit depth of individual image pixels. Declaration public IplDepth Depth { get; set; } Property Value Type Description IplDepth | Improve this Doc View Source Size Gets or sets the size of the output image. Declaration public Size Size { get; set; } Property Value Type Description Size Methods | Improve this Doc View Source Generate() Generates an observable sequence with a single image where all pixels are set to the same color value. Declaration public override IObservable<IplImage> Generate() Returns Type Description IObservable < IplImage > A sequence with a single IplImage object with the specified pixel format and where all pixels are set to the same color value. Overrides Bonsai.Source<OpenCV.Net.IplImage>.Generate() | Improve this Doc View Source Generate<TSource>(IObservable<TSource>) Generates an observable sequence of images where all pixels are set to the same color value, and where each new image is emitted only when an observable sequence emits a notification. Declaration public IObservable<IplImage> Generate<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications used for emitting new images. Returns Type Description IObservable < IplImage > A sequence of IplImage objects with the specified pixel format and where all pixels are set to the same color value. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Vision.SolvePnP.html": {
    "href": "api/Bonsai.Vision.SolvePnP.html",
    "title": "Class SolvePnP",
    "keywords": "Class SolvePnP Represents an operator that computes a sequence of camera extrinsics from sets of 3D-2D point correspondences and the specified camera intrinsics. Inheritance Object IntrinsicsTransform SolvePnP Inherited Members IntrinsicsTransform.ImageSize IntrinsicsTransform.Alpha IntrinsicsTransform.FocalLength IntrinsicsTransform.PrincipalPoint IntrinsicsTransform.RadialDistortion IntrinsicsTransform.TangentialDistortion IntrinsicsTransform.Intrinsics IntrinsicsTransform.Distortion Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class SolvePnP : IntrinsicsTransform Methods | Improve this Doc View Source Process(IObservable<Tuple<Point3d[], Point2d[], Extrinsics>>) Computes an observable sequence of camera extrinsics from sets of 3D-2D point correspondences, the specified camera intrinsics and an initial estimate of the camera extrinsics. Declaration public IObservable<Extrinsics> Process(IObservable<Tuple<Point3d[], Point2d[], Extrinsics>> source) Parameters Type Name Description IObservable < Tuple < Point3d [], Point2d [], Extrinsics >> source A sequence of triplets containing the 3D-2D point correspondences and a prior estimate used to compute the camera extrinsics. For each 3D point in the first array, the corresponding 2D point in the second array represents the matching projection of that 3D point in the camera image. Returns Type Description IObservable < Extrinsics > A sequence of Extrinsics objects representing the camera extrinsics, such as position and rotation, computed from each set of 3D-2D point correspondences and an initial estimate of the extrinsics. | Improve this Doc View Source Process(IObservable<Tuple<Point3d[], Point2d[]>>) Computes an observable sequence of camera extrinsics from sets of 3D-2D point correspondences and the specified camera intrinsics. Declaration public IObservable<Extrinsics> Process(IObservable<Tuple<Point3d[], Point2d[]>> source) Parameters Type Name Description IObservable < Tuple < Point3d [], Point2d []>> source A sequence of 3D-2D point correspondences used to compute the camera extrinsics. For each 3D point in the first array, the corresponding 2D point in the second array represents the matching projection of that 3D point in the camera image. Returns Type Description IObservable < Extrinsics > A sequence of Extrinsics objects representing the camera extrinsics, such as position and rotation, computed from each set of 3D-2D point correspondences."
  },
  "api/Bonsai.Vision.SortBinaryRegions.html": {
    "href": "api/Bonsai.Vision.SortBinaryRegions.html",
    "title": "Class SortBinaryRegions",
    "keywords": "Class SortBinaryRegions Represents an operator that sorts each collection of binary regions in the sequence by descending order of area. Inheritance Object Combinator < ConnectedComponentCollection , ConnectedComponentCollection > Transform < ConnectedComponentCollection , ConnectedComponentCollection > SortBinaryRegions Inherited Members Combinator<ConnectedComponentCollection, ConnectedComponentCollection>.Process(IObservable<ConnectedComponentCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class SortBinaryRegions : Transform<ConnectedComponentCollection, ConnectedComponentCollection> Methods | Improve this Doc View Source Process(IObservable<ConnectedComponentCollection>) Sorts each collection of binary regions in an observable sequence by descending order of area. Declaration public override IObservable<ConnectedComponentCollection> Process(IObservable<ConnectedComponentCollection> source) Parameters Type Name Description IObservable < ConnectedComponentCollection > source A sequence of ConnectedComponentCollection objects to sort. Returns Type Description IObservable < ConnectedComponentCollection > A sequence containing the sorted ConnectedComponentCollection objects, where the sequence of connected components is ordered by descending order of the area of each component. Overrides Bonsai.Combinator<Bonsai.Vision.ConnectedComponentCollection, Bonsai.Vision.ConnectedComponentCollection>.Process(System.IObservable<Bonsai.Vision.ConnectedComponentCollection>)"
  },
  "api/Bonsai.Vision.SparseOpticalFlow.html": {
    "href": "api/Bonsai.Vision.SparseOpticalFlow.html",
    "title": "Class SparseOpticalFlow",
    "keywords": "Class SparseOpticalFlow Represents an operator that calculates the optical flow for each sparse feature set in the sequence, using the iterative Lucas-Kanade method. Inheritance Object Combinator < Tuple < KeyPointCollection , IplImage >, KeyPointOpticalFlow > Transform < Tuple < KeyPointCollection , IplImage >, KeyPointOpticalFlow > SparseOpticalFlow Inherited Members Combinator<Tuple<KeyPointCollection, IplImage>, KeyPointOpticalFlow>.Process(IObservable<Tuple<KeyPointCollection, IplImage>>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class SparseOpticalFlow : Transform<Tuple<KeyPointCollection, IplImage>, KeyPointOpticalFlow> Properties | Improve this Doc View Source Epsilon Gets or sets the minimum required accuracy for convergence. Declaration public double Epsilon { get; set; } Property Value Type Description Double | Improve this Doc View Source Level Gets or sets the maximum pyramid level to use. If it is zero, pyramids are not used. Declaration public int Level { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MaxError Gets or sets the optional maximum allowed tracking error for each feature. Declaration public float? MaxError { get; set; } Property Value Type Description Nullable < Single > | Improve this Doc View Source MaxIterations Gets or sets the maximum number of iterations. Declaration public int MaxIterations { get; set; } Property Value Type Description Int32 | Improve this Doc View Source WindowSize Gets or sets the size of the search window at each pyramid level. Declaration public Size WindowSize { get; set; } Property Value Type Description Size Methods | Improve this Doc View Source Process(IObservable<KeyPointCollection>) Calculates the optical flow for each sparse feature set in an observable sequence, using the iterative Lucas-Kanade method. Declaration public IObservable<KeyPointOpticalFlow> Process(IObservable<KeyPointCollection> source) Parameters Type Name Description IObservable < KeyPointCollection > source A sequence of KeyPointCollection objects representing the sparse feature set over which to compute the optical flow. Each element of the sequence is compared with the previous element. Returns Type Description IObservable < KeyPointOpticalFlow > A sequence of KeyPointOpticalFlow objects representing the sparse correspondences between subsequent sets of features in the original sequence. | Improve this Doc View Source Process(IObservable<Tuple<KeyPointCollection, IplImage>>) Calculates the optical flow for each sparse feature set in an observable sequence, using the iterative Lucas-Kanade method, where each feature in the set is searched in the new image. Declaration public override IObservable<KeyPointOpticalFlow> Process(IObservable<Tuple<KeyPointCollection, IplImage>> source) Parameters Type Name Description IObservable < Tuple < KeyPointCollection , IplImage >> source A sequence of pairs where the first item is a KeyPointCollection object representing the set of features to find, and the second item is a target image on which the algorithm will try to find the features. Returns Type Description IObservable < KeyPointOpticalFlow > A sequence of KeyPointOpticalFlow objects representing the sparse correspondences between each set of features in the sequence and a target image. Overrides Bonsai.Combinator<System.Tuple<Bonsai.Vision.KeyPointCollection, OpenCV.Net.IplImage>, Bonsai.Vision.KeyPointOpticalFlow>.Process(System.IObservable<System.Tuple<Bonsai.Vision.KeyPointCollection, OpenCV.Net.IplImage>>)"
  },
  "api/Bonsai.Vision.SubtractionMethod.html": {
    "href": "api/Bonsai.Vision.SubtractionMethod.html",
    "title": "Enum SubtractionMethod",
    "keywords": "Enum SubtractionMethod Specifies the subtraction method used to isolate foreground pixels. Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public enum SubtractionMethod Fields Name Description Absolute Take the absolute difference between the online estimation of the background and the current frame so that any pixels which are different from the the background can be considered foreground. Bright Subtract the online estimation of the background from the current image so that only pixels which are brighter than the background can be classified as foreground. Dark Subtract the current image from the online estimation of the background so that only pixels which are darker than the background can be classified as foreground."
  },
  "api/Bonsai.Vision.TakeBinaryRegions.html": {
    "href": "api/Bonsai.Vision.TakeBinaryRegions.html",
    "title": "Class TakeBinaryRegions",
    "keywords": "Class TakeBinaryRegions Represents an operator that takes the specified number of binary regions from each collection in the sequence. Inheritance Object Combinator < ConnectedComponentCollection , ConnectedComponentCollection > Transform < ConnectedComponentCollection , ConnectedComponentCollection > TakeBinaryRegions Inherited Members Combinator<ConnectedComponentCollection, ConnectedComponentCollection>.Process(IObservable<ConnectedComponentCollection>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class TakeBinaryRegions : Transform<ConnectedComponentCollection, ConnectedComponentCollection> Properties | Improve this Doc View Source Count Gets or sets the number of binary regions to take. Declaration public int Count { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Process(IObservable<ConnectedComponentCollection>) Takes the specified number of binary regions from each collection in an observable sequence. Declaration public override IObservable<ConnectedComponentCollection> Process(IObservable<ConnectedComponentCollection> source) Parameters Type Name Description IObservable < ConnectedComponentCollection > source A sequence of ConnectedComponentCollection objects from which to take the specified number of binary regions. Returns Type Description IObservable < ConnectedComponentCollection > A sequence of ConnectedComponentCollection objects, where each collection always contains the specified number of binary regions. If the corresponding collection in the original sequence does not have enough regions, the missing elements are set to the empty region. Overrides Bonsai.Combinator<Bonsai.Vision.ConnectedComponentCollection, Bonsai.Vision.ConnectedComponentCollection>.Process(System.IObservable<Bonsai.Vision.ConnectedComponentCollection>) | Improve this Doc View Source Process(IObservable<IEnumerable<ConnectedComponent>>) Takes the specified number of binary regions from each collection in an observable sequence. Declaration public IObservable<ConnectedComponentCollection> Process(IObservable<IEnumerable<ConnectedComponent>> source) Parameters Type Name Description IObservable < IEnumerable < ConnectedComponent >> source A sequence of ConnectedComponent collection objects from which to take the specified number of binary regions. Returns Type Description IObservable < ConnectedComponentCollection > A sequence of ConnectedComponentCollection objects, where each collection always contains the specified number of binary regions. If the corresponding collection in the original sequence does not have enough regions, the missing elements are set to the empty region."
  },
  "api/Bonsai.Vision.Threshold.html": {
    "href": "api/Bonsai.Vision.Threshold.html",
    "title": "Class Threshold",
    "keywords": "Class Threshold Represents an operator that applies a fixed threshold to each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > Threshold Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Threshold : Transform<IplImage, IplImage> Properties | Improve this Doc View Source MaxValue Gets or sets the value assigned to pixels determined to be above the threshold. Declaration public double MaxValue { get; set; } Property Value Type Description Double | Improve this Doc View Source ThresholdType Gets or sets the type of threshold to apply to individual pixels. Declaration public ThresholdTypes ThresholdType { get; set; } Property Value Type Description ThresholdTypes | Improve this Doc View Source ThresholdValue Gets or sets the threshold value used to test individual pixels. Declaration [Range(0, 255)] [Precision(0, 1)] public double ThresholdValue { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Process(IObservable<IplImage>) Applies a fixed threshold to each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to threshold. Returns Type Description IObservable < IplImage > A sequence of IplImage objects where each non-zero pixel represents a value in the original image that was accepted by the threshold criteria. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.Undistort.html": {
    "href": "api/Bonsai.Vision.Undistort.html",
    "title": "Class Undistort",
    "keywords": "Class Undistort Represents an operator that undistorts each image in the sequence using the specified camera intrinsics. Inheritance Object IntrinsicsTransform Undistort Inherited Members IntrinsicsTransform.ImageSize IntrinsicsTransform.Alpha IntrinsicsTransform.FocalLength IntrinsicsTransform.PrincipalPoint IntrinsicsTransform.RadialDistortion IntrinsicsTransform.TangentialDistortion IntrinsicsTransform.Intrinsics IntrinsicsTransform.Distortion Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class Undistort : IntrinsicsTransform Methods | Improve this Doc View Source Process(IObservable<IplImage>) Undistorts each image in an observable sequence using the specified camera intrinsics. Declaration public IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to undistort. Returns Type Description IObservable < IplImage > The sequence of undistorted images."
  },
  "api/Bonsai.Vision.UndistortPoints.html": {
    "href": "api/Bonsai.Vision.UndistortPoints.html",
    "title": "Class UndistortPoints",
    "keywords": "Class UndistortPoints Represents an operator that undistorts each point coordinate in the sequence using the specified camera intrinsics. Inheritance Object IntrinsicsTransform UndistortPoints Inherited Members IntrinsicsTransform.ImageSize IntrinsicsTransform.Alpha IntrinsicsTransform.FocalLength IntrinsicsTransform.PrincipalPoint IntrinsicsTransform.RadialDistortion IntrinsicsTransform.TangentialDistortion IntrinsicsTransform.Intrinsics IntrinsicsTransform.Distortion Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class UndistortPoints : IntrinsicsTransform Methods | Improve this Doc View Source Process(IObservable<Mat>) Undistorts each matrix of points in an observable sequence using the specified camera intrinsics. Declaration public IObservable<Mat> Process(IObservable<Mat> source) Parameters Type Name Description IObservable < Mat > source A sequence of Mat values representing a row or column vector of points to undistort using the camera intrinsics. Returns Type Description IObservable < Mat > A sequence of Mat objects where each value represents a row or column vector of points which correspond to the original matrix, if each point was projected in the undistorted image obtained by the specified camera intrinsics. | Improve this Doc View Source Process(IObservable<Point2f[]>) Undistorts each array of points in an observable sequence using the specified camera intrinsics. Declaration public IObservable<Point2f[]> Process(IObservable<Point2f[]> source) Parameters Type Name Description IObservable < Point2f []> source The sequence of arrays of points to undistort using the camera intrinsics. Returns Type Description IObservable < Point2f []> A sequence of arrays of points where each value represents the point corresponding in the original array, if it were projected in the undistorted image obtained by the specified camera intrinsics. | Improve this Doc View Source Process(IObservable<Point2f>) Undistorts each point coordinate in an observable sequence using the specified camera intrinsics. Declaration public IObservable<Point2f> Process(IObservable<Point2f> source) Parameters Type Name Description IObservable < Point2f > source The sequence of points to undistort using the camera intrinsics. Returns Type Description IObservable < Point2f > A sequence of points where each value represents the point corresponding to the original sequence, if it were projected in the undistorted image obtained by the specified camera intrinsics."
  },
  "api/Bonsai.Vision.VideoWriter.html": {
    "href": "api/Bonsai.Vision.VideoWriter.html",
    "title": "Class VideoWriter",
    "keywords": "Class VideoWriter Represents an operator that writes a sequence of images into a compressed AVI file. Inheritance Object FileSink FileSink < IplImage , VideoWriterDisposable > VideoWriter Inherited Members FileSink<IplImage, VideoWriterDisposable>.CreateWriter(String, IplImage) FileSink<IplImage, VideoWriterDisposable>.Write(VideoWriterDisposable, IplImage) FileSink<IplImage, VideoWriterDisposable>.Process<TElement>(IObservable<TElement>, Func<TElement, IplImage>) FileSink<IplImage, VideoWriterDisposable>.Process(IObservable<IplImage>) FileSink.FileName FileSink.Suffix FileSink.Buffered FileSink.Overwrite Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax [WorkflowElementIcon(typeof(ElementCategory), \"ElementIcon.Video\")] public class VideoWriter : FileSink<IplImage, VideoWriterDisposable> Properties | Improve this Doc View Source FourCC Gets or sets a value specifying the four-character code of the codec used to compress video frames. Declaration public string FourCC { get; set; } Property Value Type Description String | Improve this Doc View Source FrameRate Gets or sets a value specifying the playback frame rate of the image sequence. Declaration public double FrameRate { get; set; } Property Value Type Description Double | Improve this Doc View Source FrameSize Gets or sets the optional size of video frames. Declaration public Size FrameSize { get; set; } Property Value Type Description Size | Improve this Doc View Source ResizeInterpolation Gets or sets a value specifying the optional interpolation method used to resize video frames. Declaration public SubPixelInterpolation ResizeInterpolation { get; set; } Property Value Type Description SubPixelInterpolation Methods | Improve this Doc View Source CreateWriter(String, IplImage) When overridden in a derived class, creates the writer over the specified fileName that will be responsible for handling the input elements. Declaration protected override VideoWriterDisposable CreateWriter(string fileName, IplImage input) Parameters Type Name Description String fileName The name of the file on which the elements should be written. IplImage input Returns Type Description VideoWriterDisposable The writer that will be used to push elements into the file. Overrides Bonsai.IO.FileSink<OpenCV.Net.IplImage, Bonsai.Vision.VideoWriterDisposable>.CreateWriter(System.String, OpenCV.Net.IplImage) | Improve this Doc View Source Write(VideoWriterDisposable, IplImage) Writes an image into the compressed AVI file. Declaration protected override void Write(VideoWriterDisposable writer, IplImage input) Parameters Type Name Description VideoWriterDisposable writer The VideoWriterDisposable object used to write data into the AVI file. IplImage input An IplImage object containing the video data to write into the file. Overrides Bonsai.IO.FileSink<OpenCV.Net.IplImage, Bonsai.Vision.VideoWriterDisposable>.Write(Bonsai.Vision.VideoWriterDisposable, OpenCV.Net.IplImage)"
  },
  "api/Bonsai.Vision.VideoWriterDisposable.html": {
    "href": "api/Bonsai.Vision.VideoWriterDisposable.html",
    "title": "Class VideoWriterDisposable",
    "keywords": "Class VideoWriterDisposable Represents a disposable reference to a video writer resource. Inheritance Object VideoWriterDisposable Implements ICancelable IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public sealed class VideoWriterDisposable : ICancelable, IDisposable Properties | Improve this Doc View Source IsDisposed Gets a value indicating whether the video writer has been disposed. Declaration public bool IsDisposed { get; } Property Value Type Description Boolean | Improve this Doc View Source Writer Gets the reference to the disposable video writer instance. Declaration public VideoWriter Writer { get; } Property Value Type Description VideoWriter Methods | Improve this Doc View Source Dispose() Closes the video writer resource, which will flush all remaining data to disk and prevent further writes. Declaration public void Dispose() Implements ICancelable System.IDisposable"
  },
  "api/Bonsai.Vision.WarpAffine.html": {
    "href": "api/Bonsai.Vision.WarpAffine.html",
    "title": "Class WarpAffine",
    "keywords": "Class WarpAffine Represents an operator that applies an affine transformation to each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > WarpAffine Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class WarpAffine : Transform<IplImage, IplImage> Properties | Improve this Doc View Source FillValue Gets or sets the value to which all outlier pixels will be set to. Declaration public Scalar FillValue { get; set; } Property Value Type Description Scalar | Improve this Doc View Source Flags Gets or sets a value specifying the interpolation and operation flags for the image warp. Declaration public WarpFlags Flags { get; set; } Property Value Type Description WarpFlags | Improve this Doc View Source Transform Gets or sets the 2x3 affine transformation matrix. Declaration [TypeConverter(\"Bonsai.Dsp.MatConverter, Bonsai.Dsp\")] public Mat Transform { get; set; } Property Value Type Description Mat | Improve this Doc View Source TransformXml Gets or sets an XML representation of the affine transformation matrix for serialization. Declaration [Browsable(false)] public string TransformXml { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process(IObservable<IplImage>) Applies an affine transformation to each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to warp. Returns Type Description IObservable < IplImage > The sequence of warped images. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.Vision.WarpPerspective.html": {
    "href": "api/Bonsai.Vision.WarpPerspective.html",
    "title": "Class WarpPerspective",
    "keywords": "Class WarpPerspective Represents an operator that applies a perspective transformation to each image in the sequence. Inheritance Object Combinator < IplImage , IplImage > Transform < IplImage , IplImage > WarpPerspective Inherited Members Combinator<IplImage, IplImage>.Process(IObservable<IplImage>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Vision Assembly : Bonsai.Vision.dll Syntax public class WarpPerspective : Transform<IplImage, IplImage> Properties | Improve this Doc View Source Destination Gets or sets the coordinates of the four corresponding quadrangle vertices in the output image. Declaration public Point2f[] Destination { get; set; } Property Value Type Description Point2f [] | Improve this Doc View Source FillValue Gets or sets the value to which all outlier pixels will be set to. Declaration public Scalar FillValue { get; set; } Property Value Type Description Scalar | Improve this Doc View Source Flags Gets or sets a value specifying the interpolation and operation flags for the image warp. Declaration public WarpFlags Flags { get; set; } Property Value Type Description WarpFlags | Improve this Doc View Source Source Gets or sets the coordinates of the four source quadrangle vertices in the input image. Declaration public Point2f[] Source { get; set; } Property Value Type Description Point2f [] Methods | Improve this Doc View Source Process(IObservable<IplImage>) Applies a perspective transformation to each image in an observable sequence. Declaration public override IObservable<IplImage> Process(IObservable<IplImage> source) Parameters Type Name Description IObservable < IplImage > source The sequence of images to warp. Returns Type Description IObservable < IplImage > The sequence of warped images. Overrides Bonsai.Combinator<OpenCV.Net.IplImage, OpenCV.Net.IplImage>.Process(System.IObservable<OpenCV.Net.IplImage>)"
  },
  "api/Bonsai.WindowCombinator.html": {
    "href": "api/Bonsai.WindowCombinator.html",
    "title": "Class WindowCombinator",
    "keywords": "Class WindowCombinator Represents a generic operation which projects each element of an observable sequence into a sequence of windows. Inheritance Object WindowCombinator WindowCount WindowTime Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Combinator] public abstract class WindowCombinator Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Projects each element of the source sequence into a sequence of windows. Declaration public abstract IObservable<IObservable<TSource>> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The source sequence to produce windows over. Returns Type Description IObservable < IObservable <TSource>> The sequence of windows. Type Parameters Name Description TSource The type of the elements in the source sequence."
  },
  "api/Bonsai.Windows.Input.html": {
    "href": "api/Bonsai.Windows.Input.html",
    "title": "Namespace Bonsai.Windows.Input",
    "keywords": "Namespace Bonsai.Windows.Input Classes KeyDown Represents an operator that produces a value whenever a keyboard key is pressed. KeyState Represents an operator that determines whether a key is up or down at the time of notification. KeyUp Represents an operator that produces a value whenever a keyboard key is released. MouseButtonDown Represents an operator that produces a value whenever a mouse button is pressed. MouseButtonUp Represents an operator that produces a value whenever a mouse button is released. MouseMove Represents an operator that generates a sequence of cursor positions whenever the mouse moves. MouseWheel Represents an operator that produces a sequence of values whenever the mouse wheel moves. SendKeys Represents an operator that sends one or more keystrokes to the active window as if typed at the keyboard. SetCursorPosition Represents an operator that sets the current position of the mouse cursor."
  },
  "api/Bonsai.Windows.Input.KeyDown.html": {
    "href": "api/Bonsai.Windows.Input.KeyDown.html",
    "title": "Class KeyDown",
    "keywords": "Class KeyDown Represents an operator that produces a value whenever a keyboard key is pressed. Inheritance Object Source < Keys > KeyDown Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Windows.Input Assembly : Bonsai.Windows.Input.dll Syntax public class KeyDown : Source<Keys> Properties | Improve this Doc View Source Filter Gets or sets the target keys to be observed. Declaration public Keys Filter { get; set; } Property Value Type Description Keys | Improve this Doc View Source SuppressRepetitions Gets or sets a value indicating whether to ignore character repetitions when a key is held down. Declaration public bool SuppressRepetitions { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Generate() Returns an observable sequence that produces a value whenever a keyboard key is pressed. Declaration public override IObservable<Keys> Generate() Returns Type Description IObservable < Keys > A sequence of Keys values produced whenever a keyboard key is pressed. Overrides Bonsai.Source<System.Windows.Forms.Keys>.Generate()"
  },
  "api/Bonsai.Windows.Input.KeyState.html": {
    "href": "api/Bonsai.Windows.Input.KeyState.html",
    "title": "Class KeyState",
    "keywords": "Class KeyState Represents an operator that determines whether a key is up or down at the time of notification. Inheritance Object Combinator < Boolean > KeyState Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Windows.Input Assembly : Bonsai.Windows.Input.dll Syntax [WorkflowElementCategory(ElementCategory.Transform)] public class KeyState : Combinator<bool> Properties | Improve this Doc View Source Filter Gets or sets the target key to be observed. Declaration public Keys Filter { get; set; } Property Value Type Description Keys Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Generates a sequence of values indicating whether the target key is up or down each time the source sequence emits a notification. Declaration public override IObservable<bool> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications indicating when to check whether the key is up or down. Returns Type Description IObservable < Boolean > A sequence of Boolean values indicating whether the key is up or down at the time the source sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator<System.Boolean>.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Windows.Input.KeyUp.html": {
    "href": "api/Bonsai.Windows.Input.KeyUp.html",
    "title": "Class KeyUp",
    "keywords": "Class KeyUp Represents an operator that produces a value whenever a keyboard key is released. Inheritance Object Source < Keys > KeyUp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Windows.Input Assembly : Bonsai.Windows.Input.dll Syntax public class KeyUp : Source<Keys> Properties | Improve this Doc View Source Filter Gets or sets the target keys to be observed. Declaration public Keys Filter { get; set; } Property Value Type Description Keys Methods | Improve this Doc View Source Generate() Returns an observable sequence that produces a value whenever a keyboard key is released. Declaration public override IObservable<Keys> Generate() Returns Type Description IObservable < Keys > A sequence of Keys values produced whenever a keyboard key is released. Overrides Bonsai.Source<System.Windows.Forms.Keys>.Generate()"
  },
  "api/Bonsai.Windows.Input.MouseButtonDown.html": {
    "href": "api/Bonsai.Windows.Input.MouseButtonDown.html",
    "title": "Class MouseButtonDown",
    "keywords": "Class MouseButtonDown Represents an operator that produces a value whenever a mouse button is pressed. Inheritance Object Source < MouseButtons > MouseButtonDown Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Windows.Input Assembly : Bonsai.Windows.Input.dll Syntax public class MouseButtonDown : Source<MouseButtons> Properties | Improve this Doc View Source Filter Gets or sets the target buttons to be observed. Declaration public MouseButtons Filter { get; set; } Property Value Type Description MouseButtons Methods | Improve this Doc View Source Generate() Returns an observable sequence that produces a value whenever a mouse button is pressed. Declaration public override IObservable<MouseButtons> Generate() Returns Type Description IObservable < MouseButtons > A sequence of MouseButtons values produced whenever a mouse button is pressed. Overrides Bonsai.Source<System.Windows.Forms.MouseButtons>.Generate()"
  },
  "api/Bonsai.Windows.Input.MouseButtonUp.html": {
    "href": "api/Bonsai.Windows.Input.MouseButtonUp.html",
    "title": "Class MouseButtonUp",
    "keywords": "Class MouseButtonUp Represents an operator that produces a value whenever a mouse button is released. Inheritance Object Source < MouseButtons > MouseButtonUp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Windows.Input Assembly : Bonsai.Windows.Input.dll Syntax public class MouseButtonUp : Source<MouseButtons> Properties | Improve this Doc View Source Filter Gets or sets the target buttons to be observed. Declaration public MouseButtons Filter { get; set; } Property Value Type Description MouseButtons Methods | Improve this Doc View Source Generate() Returns an observable sequence that produces a value whenever a mouse button is released. Declaration public override IObservable<MouseButtons> Generate() Returns Type Description IObservable < MouseButtons > A sequence of MouseButtons values produced whenever a mouse button is released. Overrides Bonsai.Source<System.Windows.Forms.MouseButtons>.Generate()"
  },
  "api/Bonsai.Windows.Input.MouseMove.html": {
    "href": "api/Bonsai.Windows.Input.MouseMove.html",
    "title": "Class MouseMove",
    "keywords": "Class MouseMove Represents an operator that generates a sequence of cursor positions whenever the mouse moves. Inheritance Object Source < Point > MouseMove Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Windows.Input Assembly : Bonsai.Windows.Input.dll Syntax public class MouseMove : Source<Point> Methods | Improve this Doc View Source Generate() Generates an observable sequence of cursor positions whenever the mouse moves. Declaration public override IObservable<Point> Generate() Returns Type Description IObservable < Point > A sequence of Point values representing the current cursor position whenever the mouse moves. Overrides Bonsai.Source<System.Drawing.Point>.Generate()"
  },
  "api/Bonsai.Windows.Input.MouseWheel.html": {
    "href": "api/Bonsai.Windows.Input.MouseWheel.html",
    "title": "Class MouseWheel",
    "keywords": "Class MouseWheel Represents an operator that produces a sequence of values whenever the mouse wheel moves. Inheritance Object Source < Int32 > MouseWheel Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Windows.Input Assembly : Bonsai.Windows.Input.dll Syntax public class MouseWheel : Source<int> Methods | Improve this Doc View Source Generate() Generates an observable sequence of values whenever the mouse wheel moves. Declaration public override IObservable<int> Generate() Returns Type Description IObservable < Int32 > A sequence of Int32 values representing the current scroll position whenever the mouse wheel moves. Overrides Bonsai.Source<System.Int32>.Generate()"
  },
  "api/Bonsai.Windows.Input.SendKeys.html": {
    "href": "api/Bonsai.Windows.Input.SendKeys.html",
    "title": "Class SendKeys",
    "keywords": "Class SendKeys Represents an operator that sends one or more keystrokes to the active window as if typed at the keyboard. Inheritance Object Combinator Sink SendKeys Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Windows.Input Assembly : Bonsai.Windows.Input.dll Syntax public class SendKeys : Sink Properties | Improve this Doc View Source Keys Gets or sets the string expression specifying which keystrokes to send. For more details on expression format, see the remarks section of the SendKeys class. Declaration public string Keys { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Process<TSource>(IObservable<TSource>) Sends one or more keystrokes to the active window, as if typed at the keyboard, when an observable sequence emits a notification. Declaration public override IObservable<TSource> Process<TSource>(IObservable<TSource> source) Parameters Type Name Description IObservable <TSource> source The sequence containing the notifications indicating when to send the keystrokes to the active window. Returns Type Description IObservable <TSource> An observable sequence that is identical to the source sequence but where there is an additional side effect of sending the specified keystrokes to the active window whenever the sequence emits a notification. Type Parameters Name Description TSource The type of the elements in the source sequence. Overrides Bonsai.Combinator.Process<TSource>(System.IObservable<TSource>)"
  },
  "api/Bonsai.Windows.Input.SetCursorPosition.html": {
    "href": "api/Bonsai.Windows.Input.SetCursorPosition.html",
    "title": "Class SetCursorPosition",
    "keywords": "Class SetCursorPosition Represents an operator that sets the current position of the mouse cursor. Inheritance Object Combinator < Point , Point > Sink < Point > SetCursorPosition Inherited Members Combinator<Point, Point>.Process(IObservable<Point>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai.Windows.Input Assembly : Bonsai.Windows.Input.dll Syntax public class SetCursorPosition : Sink<Point> Methods | Improve this Doc View Source Process(IObservable<Point>) Sets the current position of the mouse cursor using an observable sequence of point values. Declaration public override IObservable<Point> Process(IObservable<Point> source) Parameters Type Name Description IObservable < Point > source A sequence of Point values representing the position to set the cursor to. Returns Type Description IObservable < Point > An observable sequence that is identical to the source sequence but where there is an additional side effect of updating the cursor position. Overrides Bonsai.Combinator<System.Drawing.Point, System.Drawing.Point>.Process(System.IObservable<System.Drawing.Point>)"
  },
  "api/Bonsai.WorkflowBuilder.html": {
    "href": "api/Bonsai.WorkflowBuilder.html",
    "title": "Class WorkflowBuilder",
    "keywords": "Class WorkflowBuilder Represents an XML serializable expression builder workflow container. Inheritance Object WorkflowBuilder Implements IXmlSerializable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public class WorkflowBuilder : IXmlSerializable Constructors | Improve this Doc View Source WorkflowBuilder() Initializes a new instance of the WorkflowBuilder class. Declaration public WorkflowBuilder() | Improve this Doc View Source WorkflowBuilder(ExpressionBuilderGraph) Initializes a new instance of the WorkflowBuilder class with the specified workflow instance. Declaration public WorkflowBuilder(ExpressionBuilderGraph workflow) Parameters Type Name Description ExpressionBuilderGraph workflow The ExpressionBuilderGraph that will be used by this builder. Properties | Improve this Doc View Source Description Gets or sets a description for the serializable workflow. Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source Serializer Gets a XmlSerializer instance that can be used to serialize or deserialize a WorkflowBuilder . Declaration public static XmlSerializer Serializer { get; } Property Value Type Description XmlSerializer | Improve this Doc View Source Workflow Gets the ExpressionBuilderGraph instance used by this builder. Declaration public ExpressionBuilderGraph Workflow { get; } Property Value Type Description ExpressionBuilderGraph Methods | Improve this Doc View Source ReadMetadata(String) Reads workflow metadata from the serializable XML workflow representation at the specified URI. Declaration public static WorkflowMetadata ReadMetadata(string inputUri) Parameters Type Name Description String inputUri The URI for the file containing the XML data. Returns Type Description WorkflowMetadata A WorkflowMetadata instance containing the retrieved metadata. | Improve this Doc View Source ReadMetadata(XmlReader) Reads workflow metadata from the serializable XML workflow representation. Declaration public static WorkflowMetadata ReadMetadata(XmlReader reader) Parameters Type Name Description XmlReader reader The XmlReader stream from which the metadata is retrieved. Returns Type Description WorkflowMetadata A WorkflowMetadata instance containing the retrieved metadata. Explicit Interface Implementations | Improve this Doc View Source IXmlSerializable.GetSchema() Declaration XmlSchema IXmlSerializable.GetSchema() Returns Type Description XmlSchema | Improve this Doc View Source IXmlSerializable.ReadXml(XmlReader) Declaration void IXmlSerializable.ReadXml(XmlReader reader) Parameters Type Name Description XmlReader reader | Improve this Doc View Source IXmlSerializable.WriteXml(XmlWriter) Declaration void IXmlSerializable.WriteXml(XmlWriter writer) Parameters Type Name Description XmlWriter writer Implements System.Xml.Serialization.IXmlSerializable"
  },
  "api/Bonsai.WorkflowBuildException.html": {
    "href": "api/Bonsai.WorkflowBuildException.html",
    "title": "Class WorkflowBuildException",
    "keywords": "Class WorkflowBuildException Represents errors that occur during the build phase of an expression builder workflow. Inheritance Object Exception WorkflowException WorkflowBuildException Implements ISerializable _Exception Inherited Members WorkflowException.Builder Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Serializable] public class WorkflowBuildException : WorkflowException, ISerializable, _Exception Constructors | Improve this Doc View Source WorkflowBuildException() Initializes a new instance of the WorkflowBuildException class. Declaration public WorkflowBuildException() | Improve this Doc View Source WorkflowBuildException(SerializationInfo, StreamingContext) Initializes a new instance of the WorkflowBuildException class with serialized data. Declaration protected WorkflowBuildException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source WorkflowBuildException(String) Initializes a new instance of the WorkflowBuildException class with a specified error message. Declaration public WorkflowBuildException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source WorkflowBuildException(String, ExpressionBuilder) Initializes a new instance of the WorkflowBuildException class with a specified error message and a reference to the ExpressionBuilder that is the cause of this exception. Declaration public WorkflowBuildException(string message, ExpressionBuilder builder) Parameters Type Name Description String message The error message that explains the reason for the exception. ExpressionBuilder builder The ExpressionBuilder that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no builder is specified. | Improve this Doc View Source WorkflowBuildException(String, ExpressionBuilder, Exception) Initializes a new instance of the WorkflowBuildException class with a specified error message and a reference to both the ExpressionBuilder and the inner exception that caused this exception. Declaration public WorkflowBuildException(string message, ExpressionBuilder builder, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. ExpressionBuilder builder The ExpressionBuilder that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no builder is specified. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. | Improve this Doc View Source WorkflowBuildException(String, Exception) Initializes a new instance of the WorkflowBuildException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public WorkflowBuildException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Bonsai.WorkflowElementCategoryAttribute.html": {
    "href": "api/Bonsai.WorkflowElementCategoryAttribute.html",
    "title": "Class WorkflowElementCategoryAttribute",
    "keywords": "Class WorkflowElementCategoryAttribute Determines the category of the workflow element this attribute is bound to. Inheritance Object Attribute WorkflowElementCategoryAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public sealed class WorkflowElementCategoryAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source WorkflowElementCategoryAttribute(ElementCategory) Initializes a new instance of the WorkflowElementCategoryAttribute class with the specified category. Declaration public WorkflowElementCategoryAttribute(ElementCategory category) Parameters Type Name Description ElementCategory category The category of the workflow element this attribute is bound to. Fields | Improve this Doc View Source Default Specifies the default value for the WorkflowElementCategoryAttribute . This field is read-only. Declaration public static readonly WorkflowElementCategoryAttribute Default Field Value Type Description WorkflowElementCategoryAttribute Properties | Improve this Doc View Source Category Gets the category of the workflow element this attribute is bound to. Declaration public ElementCategory Category { get; } Property Value Type Description ElementCategory Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.WorkflowElementIconAttribute.html": {
    "href": "api/Bonsai.WorkflowElementIconAttribute.html",
    "title": "Class WorkflowElementIconAttribute",
    "keywords": "Class WorkflowElementIconAttribute Specifies the icon that should represent the element this attribute is bound to when drawing the workflow. Inheritance Object Attribute WorkflowElementIconAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class WorkflowElementIconAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source WorkflowElementIconAttribute(String) Initializes a new instance of the WorkflowElementIconAttribute class with the name of the icon resource that should represent the workflow element. Declaration public WorkflowElementIconAttribute(string name) Parameters Type Name Description String name The name of the icon resource that should represent the workflow element this attribute is bound to. | Improve this Doc View Source WorkflowElementIconAttribute(String, String) Initializes a new instance of the WorkflowElementIconAttribute class with the name of the icon resource that should represent the workflow element, scoped by the namespace of the specified type. Declaration public WorkflowElementIconAttribute(string typeName, string name) Parameters Type Name Description String typeName The fully qualified name of the type that will be used to scope the name of the icon resource. String name The name of the icon resource that should represent the workflow element this attribute is bound to. | Improve this Doc View Source WorkflowElementIconAttribute(Type, String) Initializes a new instance of the WorkflowElementIconAttribute class with the name of the icon resource that should represent the workflow element, scoped by the namespace of the specified type. Declaration public WorkflowElementIconAttribute(Type type, string name) Parameters Type Name Description Type type The type that will be used to scope the name of the icon resource. String name The name of the icon resource that should represent the workflow element this attribute is bound to. Fields | Improve this Doc View Source Default Specifies the default value for the WorkflowElementIconAttribute . This field is read-only. Declaration public static readonly WorkflowElementIconAttribute Default Field Value Type Description WorkflowElementIconAttribute Properties | Improve this Doc View Source Name Gets the name of the icon resource that should represent the workflow element this attribute is bound to. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source TypeName Gets the optional qualified type name that will be used to scope the name of the icon resource. Declaration public string TypeName { get; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.WorkflowException.html": {
    "href": "api/Bonsai.WorkflowException.html",
    "title": "Class WorkflowException",
    "keywords": "Class WorkflowException Represents errors that occur in expression builder workflows. Inheritance Object Exception WorkflowException WorkflowBuildException WorkflowRuntimeException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Serializable] public class WorkflowException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source WorkflowException() Initializes a new instance of the WorkflowException class. Declaration public WorkflowException() | Improve this Doc View Source WorkflowException(SerializationInfo, StreamingContext) Initializes a new instance of the WorkflowException class with serialized data. Declaration protected WorkflowException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source WorkflowException(String) Initializes a new instance of the WorkflowException class with a specified error message. Declaration public WorkflowException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source WorkflowException(String, ExpressionBuilder) Initializes a new instance of the WorkflowException class with a specified error message and a reference to the ExpressionBuilder that is the cause of this exception. Declaration public WorkflowException(string message, ExpressionBuilder builder) Parameters Type Name Description String message The error message that explains the reason for the exception. ExpressionBuilder builder The ExpressionBuilder that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no builder is specified. | Improve this Doc View Source WorkflowException(String, ExpressionBuilder, Exception) Initializes a new instance of the WorkflowException class with a specified error message and a reference to both the ExpressionBuilder and the inner exception that caused this exception. Declaration public WorkflowException(string message, ExpressionBuilder builder, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. ExpressionBuilder builder The ExpressionBuilder that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no builder is specified. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. | Improve this Doc View Source WorkflowException(String, Exception) Initializes a new instance of the WorkflowException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public WorkflowException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Properties | Improve this Doc View Source Builder Gets the ExpressionBuilder instance that was the cause for the exception. Declaration public ExpressionBuilder Builder { get; } Property Value Type Description ExpressionBuilder Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Bonsai.WorkflowMetadata.html": {
    "href": "api/Bonsai.WorkflowMetadata.html",
    "title": "Class WorkflowMetadata",
    "keywords": "Class WorkflowMetadata Represents metadata retrieved from a serializable XML workflow. Inheritance Object WorkflowMetadata Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax public class WorkflowMetadata Properties | Improve this Doc View Source Description Gets the description of the workflow. Declaration public string Description { get; } Property Value Type Description String | Improve this Doc View Source WorkflowMarkup Gets the raw XML markup of the workflow. Declaration public string WorkflowMarkup { get; } Property Value Type Description String Methods | Improve this Doc View Source GetExtensionTypes() Gets the extension types required to deserialize the XML markup. Declaration public Type[] GetExtensionTypes() Returns Type Description Type [] An array that contains all the types that are required to deserialize the XML markup."
  },
  "api/Bonsai.WorkflowNamespaceIconAttribute.html": {
    "href": "api/Bonsai.WorkflowNamespaceIconAttribute.html",
    "title": "Class WorkflowNamespaceIconAttribute",
    "keywords": "Class WorkflowNamespaceIconAttribute Specifies the icon that should represent a given namespace in the assembly this attribute is bound to when drawing the workflow. Inheritance Object Attribute WorkflowNamespaceIconAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public sealed class WorkflowNamespaceIconAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source WorkflowNamespaceIconAttribute(String) Initializes a new instance of the WorkflowNamespaceIconAttribute class with the name of the default icon resource used to represent namespaces in the assembly this attribute is bound to. Declaration public WorkflowNamespaceIconAttribute(string name) Parameters Type Name Description String name The name of the default icon resource used to represent namespaces in the assembly this attribute is bound to. | Improve this Doc View Source WorkflowNamespaceIconAttribute(String, String) Initializes a new instance of the WorkflowNamespaceIconAttribute class with a specific namespace that will be matched against workflow element types in the assembly this attribute is bound to, and the name of the icon resource used to represent the namespace in case of a successful match. Declaration public WorkflowNamespaceIconAttribute(string ns, string name) Parameters Type Name Description String ns The specific namespace that will be matched against workflow element types in the assembly this attribute is bound to. If this value is null or empty, the match will be successful against any namespace. String name The name of the icon resource used to represent the namespace in the assembly this attribute is bound to. Properties | Improve this Doc View Source Namespace Gets the optional namespace that will be matched against a workflow element type. If this value is null or empty, the match will be successful against any namespace in the assembly this attribute is bound to. Declaration public string Namespace { get; } Property Value Type Description String | Improve this Doc View Source ResourceName Gets the name of the icon resource used to represent a namespace in the assembly this attribute is bound to. Declaration public string ResourceName { get; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/Bonsai.WorkflowRuntimeException.html": {
    "href": "api/Bonsai.WorkflowRuntimeException.html",
    "title": "Class WorkflowRuntimeException",
    "keywords": "Class WorkflowRuntimeException Represents errors that occur during the execution of an expression builder workflow. Inheritance Object Exception WorkflowException WorkflowRuntimeException Implements ISerializable _Exception Inherited Members WorkflowException.Builder Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [Serializable] public class WorkflowRuntimeException : WorkflowException, ISerializable, _Exception Constructors | Improve this Doc View Source WorkflowRuntimeException() Initializes a new instance of the WorkflowRuntimeException class. Declaration public WorkflowRuntimeException() | Improve this Doc View Source WorkflowRuntimeException(SerializationInfo, StreamingContext) Initializes a new instance of the WorkflowRuntimeException class with serialized data. Declaration protected WorkflowRuntimeException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source WorkflowRuntimeException(String) Initializes a new instance of the WorkflowRuntimeException class with a specified error message. Declaration public WorkflowRuntimeException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source WorkflowRuntimeException(String, ExpressionBuilder) Initializes a new instance of the WorkflowRuntimeException class with a specified error message and a reference to the ExpressionBuilder that is the cause of this exception. Declaration public WorkflowRuntimeException(string message, ExpressionBuilder builder) Parameters Type Name Description String message The error message that explains the reason for the exception. ExpressionBuilder builder The ExpressionBuilder that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no builder is specified. | Improve this Doc View Source WorkflowRuntimeException(String, ExpressionBuilder, Exception) Initializes a new instance of the WorkflowRuntimeException class with a specified error message and a reference to both the ExpressionBuilder and the inner exception that caused this exception. Declaration public WorkflowRuntimeException(string message, ExpressionBuilder builder, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. ExpressionBuilder builder The ExpressionBuilder that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no builder is specified. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. | Improve this Doc View Source WorkflowRuntimeException(String, Exception) Initializes a new instance of the WorkflowRuntimeException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public WorkflowRuntimeException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Bonsai.XmlNamespacePrefixAttribute.html": {
    "href": "api/Bonsai.XmlNamespacePrefixAttribute.html",
    "title": "Class XmlNamespacePrefixAttribute",
    "keywords": "Class XmlNamespacePrefixAttribute Specifies a recommended prefix to associate with a XML namespace identifier when serializing a workflow file. Inheritance Object Attribute XmlNamespacePrefixAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bonsai Assembly : Bonsai.Core.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public sealed class XmlNamespacePrefixAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source XmlNamespacePrefixAttribute(String, String) Initializes a new instance of the XmlNamespacePrefixAttribute class with the specified namespace and prefix. Declaration public XmlNamespacePrefixAttribute(string xmlNamespace, string prefix) Parameters Type Name Description String xmlNamespace The XML namespace identifier. String prefix The recommended prefix for the namespace. Properties | Improve this Doc View Source Prefix Gets or sets the recommended prefix for the namespace. Declaration public string Prefix { get; set; } Property Value Type Description String | Improve this Doc View Source XmlNamespace Gets or sets the XML namespace identifier. Declaration public string XmlNamespace { get; set; } Property Value Type Description String Implements System.Runtime.InteropServices._Attribute"
  },
  "articles/cli.html": {
    "href": "articles/cli.html",
    "title": "Command Line Interface",
    "keywords": "Command Line Interface (CLI) The Bonsai command-line interface makes it possible to interface with Bonsai directly from the operating system terminal. Using the CLI you can open files, set workflow properties, change the editor scale, run a workflow in application mode, or even export a workflow as a bitmap or vector graphics file. Quick Start Open a command prompt or system terminal, navigate to the location where Bonsai is installed (usually at %LOCALAPPDATA%\\Bonsai ), and run Bonsai: cd <bonsai installation directory> bonsai If you add the Bonsai folder to your system PATH you can simply type: bonsai This command will launch Bonsai in editor mode. Opening a Workflow To open an existing workflow simply type the name of the workflow file (e.g., workflow.bonsai ): bonsai workflow.bonsai bonsai \"C:\\Users\\User\\Desktop\\Example\\workflow.bonsai\" Starting a Workflow Additional flags can change the output behavior of the Bonsai CLI. For instance, to start a workflow from the command line we add the --start flag to the previous command. bonsai workflow.bonsai --start Starting a Workflow in Application Mode You can also start a workflow as an application, without editor support: bonsai workflow.bonsai --no-editor This will start the workflow and block until the workflow terminates. Any active visualizers specified in the .layout file will also be displayed immediately. A Bonsai icon will be added to the system tray, which can be right-clicked to stop the workflow or open other visualizers. Warning Only visualizers which have been explicitly assigned in the workflow will be visible in the system tray icon. Application mode is useful for batch processing, interop with other languages and scripting tools, or for deploying self-contained user interfaces for running experiments. Tip You can pipe the standard output of a workflow running in application mode to other processes, or to a file: bonsai workflow.bonsai --no-editor > output.txt Values can be written to the standard output using the WriteLine operator. Passing parameter values to workflows One of the most useful features of the CLI is the ability to set property values of operators in the workflow before running. Only externalized properties can be set in this way from the command line. bonsai workflow.bonsai -p <propertyName>=<string> You can also set properties in nested workflows by using the . (dot) notation: bonsai workflow.bonsai -p <NestedNodeName.propertyName>=<string> Tip The same workflow file can be started in parallel with different parameters, allowing easy creation of configurable batch-processing pipelines. Set a single property bonsai workflow.bonsai --start -p intProperty=100 Set two distinct properties bonsai workflow.bonsai --start -p intProperty=100 -p doubleProperty=4.2 Set properties in application mode bonsai workflow.bonsai --no-editor -p intProperty=100 -p doubleProperty=4.2 Set a property of a nested workflow node bonsai workflow.bonsai --no-editor -p intProperty=100 -p NestedNode.FlipMode=\"Horizontal\" Warning The text representing property values needs to be convertible to the type of value stored in the property. As a rule of thumb, if you can write the property as a string in the editor, you can write that same string to set the same value in the CLI. Specifying layout files in Application Mode You can specify the layout file with which to start the workflow in Application Mode. This is especially useful when the same workflow is meant to be run several times in parallel, e.g. multiple identical behavior rigs where each rig visualizer should be in its own position. bonsai workflow.bonsai --no-editor --visualizer-layout layout1.bonsai.layout Tip To generate multiple layouts for a given workflow: Start the workflow in editor mode. Arrange the visualizers in the desired layout. Save the workflow. A .bonsai.layout file with the same name as the workflow will be created. Rename the layout file so it is not overwritten by future save operations and pass the renamed file to the --visualizer-layout option. Advanced CLI options There are several additional CLI options that can be used to configure different settings in the editor or automate existing functions. Argument Description --lib <dir> Add folder to the list of directories to be scanned for extensions. --editor-scale <scale> Sets the scale of the editor UI. Default value is 1. --start-no-debug Start the workflow without debugging. --debug-scripts Compile local extensions with debug symbols. --no-boot Launches Bonsai without the bootstrapper process. --package-manager Opens the Bonsai package manager. --gallery Opens the Bonsai workflow gallery. --export-package Start the export dialog for the specified workflow. --export-image <file> Export the specified workflow as a raster or vector image file."
  },
  "articles/create-package.html": {
    "href": "articles/create-package.html",
    "title": "Creating a Package",
    "keywords": "Creating a Package The Bonsai language can be extended with custom packages, which are installed and shared using NuGet . Packages are typically written in the C# programming language, using the Visual Studio development environment. The Bonsai installer includes project templates that make it easier to create your own package project. Once you have developed and refined your custom extensions you can package the code for installing in the Bonsai editor, or sharing with the community. Pre-requisites Visual Studio . You can install the Community edition for free. Bonsai VS Extensions. From the Windows Start Menu, search for the \" Install Bonsai VS Extensions \" shortcut and run it. Creating a package project Start Visual Studio . Select the Create a new project option. In the Create a new project dialog, type bonsai in the search toolbox. The project template for creating a Bonsai package should now be displayed. Give the project a name and a location, and press the Create button. After the project is created, you should see that a file \" Source1.cs \" has been added to the solution explorer. This file contains an example implementation of a custom source. Every Bonsai operator specifies an observable sequence using the IObservable<T> interface. The System.Reactive package provides a comprehensive library of methods used to generate and manipulate observable sequences in C#. The simplest way to implement a source is by using the methods in the Observable class. As an example, the expression below will generate a simple periodic sinewave by applying the projection operator Select to the incremental counter sequence generated by a Timer . [Description(\"\")] [Combinator(MethodName = nameof(Generate))] [WorkflowElementCategory(ElementCategory.Source)] public class Source1 { public IObservable<double> Generate() { return Observable .Timer( dueTime: TimeSpan.Zero, period: TimeSpan.FromSeconds(0.5)) .Select(counter => Math.Sin(counter)); } } We can test our operator by starting the project with F5 . This will automatically launch the Bonsai editor with our package preloaded in the Toolbox . Add the new Source1 node and run the workflow. If we need to parameterize our operator, we can add new public properties to the class. Custom editors can be used to provide interactive widgets for editing the property values. Several common widgets are provided in the DesignTypes class. For example, to make the period customizable with a slider over a specified range, we can modify our source operator: [Description(\"\")] [Combinator(MethodName = nameof(Generate))] [WorkflowElementCategory(ElementCategory.Source)] public class Source1 { [Range(0.1, 2)] [Editor(DesignTypes.SliderEditor, DesignTypes.UITypeEditor)] public double PeriodSeconds { get; set; } = 0.5; public IObservable<double> Generate() { return Observable .Timer( dueTime: TimeSpan.Zero, period: TimeSpan.FromSeconds(PeriodSeconds)) .Select(counter => Math.Sin(counter)); } } It is also possible to debug our code while it is running by setting breakpoints, either by clicking on the left of the line we want to debug or by hitting F9 over the target code. After this, you can run the code step by step and inspect the runtime value of variables. Finally, we can add new operators by right-clicking the project name in the solution explorer and selecting Add > New Item . Templates for creating the most common operator types are available under the Bonsai category. For example, we can create a simple transform that tests whether each of the values emitted by the sinewave generator is positive: [Combinator] [Description(\"\")] [WorkflowElementCategory(ElementCategory.Transform)] public class Transform1 { public IObservable<bool> Process(IObservable<double> source) { return source.Select(input => input > 0); } } Publishing a package project Double-click the name of the project in the Visual Studio Solution Explorer to open up the package metadata. Fill in or edit all the relevant metadata fields. These are critical to correctly communicate the provenance of your project to other users. Please pay special attention to Title , Description , Authors , Copyright , PackageProjectUrl , PackageLicenseExpression , PackageIcon and PackageTags to make sure that they correctly describe your project. Make sure that Version is correctly assigned in every new release to avoid problems during package updates. Tip Use version suffixes for sharing prerelease versions for testing, e.g. 0.1.0-alpha . If a package version has a prerelease suffix, it will only be listed by the package manager if the checkbox \"Include prerelease\" is checked. Build the project in Release mode. If all metadata is correctly specified, the build process should generate a .nupkg file as part of the output. By default, it will be placed in the same bin\\Release folder where the project assembly (.dll) is generated. To install the package in the editor, configure a new package source pointing to a folder containing your generated .nupkg file, or simply copy the .nupkg file to the Gallery folder of your local Bonsai installation. The package should then be listed in the package manager (make sure to select the package source where the package is located if you cannot find it in the list). Warning If you have your custom package installed in the same editor used to debug the source code, Bonsai will prefer the installed package over the compiled source code library. In this case, either uninstall the package, or use a local Bonsai installation. Note If you would like to share the package with the broader Bonsai community, consider publishing your package in the Bonsai Community feed . Click the Connect to Feed button for more details on how to push packages to the feed."
  },
  "articles/design-guidelines.html": {
    "href": "articles/design-guidelines.html",
    "title": "Design Guidelines",
    "keywords": "Design Guidelines This section provides guidelines for designing workflows and packages that extend or interface with Bonsai. The goal is to help avoid common pitfalls, share best practices, and promote consistency when working with the visual language and reactive programming in general. The guidelines are organized as a series of recommendations prefixed with the terms DO , CONSIDER , AVOID , and DO NOT . These recommendations are intended to help understand the trade-offs between different approaches to solving problems in Bonsai. There might be situations where the best solution to a problem requires you to violate these design guidelines. In this case, you should still use the design guidelines as a way to understand and reason about your decision."
  },
  "articles/editor.html": {
    "href": "articles/editor.html",
    "title": "Workflow Editor",
    "keywords": "Workflow Editor When Bonsai starts you will be taken directly to the workflow editor. This is where you can create, configure, and run Bonsai workflows. The editor is composed of three main panels: the Toolbox , the Workflow , and Properties . These are described in more detail below. Toolbox The Toolbox allows you to search for available operators to place in the workflow. The listing is organized into six main categories: Category Description generate event streams from devices or files convert or process individual data items save data or trigger external outputs manage control flow or synchronize parallel inputs reusable workflow fragments stored in .bonsai files access named event streams defined in the workflow Operators inside each major category are further organized by namespaces linked to the packages you have installed. The name of each namespace can give you a hint about what kind of operations or devices can be accessed inside (e.g. the Audio namespace provides access to audio capture devices or WAV file readers). Once you have found which operator you want to insert, you can place it by double-clicking, dragging it to the workflow or alternatively right-clicking and selecting a specific placement option. See the Commands and Shortcuts section for more information. Search Operators Another way to quickly find operators is to use the Search textbox. Any text inserted here is matched against available operators, subjects, or namespaces for a match in any order. This means you can search not only for a specific operator name but also by category names to locate all the operators in a namespace (e.g. try typing Arduino ). Tip You can directly type and search for operator names when the Workflow panel has the input focus. This allows you to simply start typing an operator name and directly select which operator you want with the up/down arrow keys. Once you have the right operator, press the Enter key to place it. You can repeat the process multiple times to very quickly chain a sequence of operators. Another useful function of the Search textbox is to find existing instances of the selected toolbox operator in the workflow. Once you select an operator in the toolbox, you can use the Find Next or Find Previous commands to jump into the next instance of the operator, subject, or workflow extension, starting from the current cursor position. Tip You can browse through the reference documentation to learn more about each operator in the Toolbox by pressing F1 or selecting View Help from the context menu. Workflow The Workflow panel is where you combine different operators together to create data processing pipelines. Each operator is represented by a circular node. Nodes can be connected together, forming a directed feedforward graph from left to right. Connections going into a node indicate which operators that node subscribes to (see the Language Guide for an extended discussion). The most useful action to learn your way around the Workflow panel is right-clicking. This will bring up the context menu for the specific node you selected, or a list of possible actions you can do with the current selection. If only one node is selected, the Output menu item will display the type of the elements emitted by that operator sequence. Tip If the output of an operator is a complex type, you can inspect its public data members. Clicking on any of the sub-items will automatically place a new MemberSelector operator to pick the specified data member from the output of the node. The context menu also allows you to externalize public properties of the operator as explicit nodes in the workflow using the Externalize Property drop-down menu. Once a property is externalized, you can connect other nodes in the workflow to it so you can change the value of the property dynamically (see the Property Mapping section for more information). Finally, it is possible to group nodes, both for organizing large workflows, and to define higher-order operators . The most basic grouping is the GroupWorkflow which allows you to encapsulate a workflow fragment inside a single node. Any group can be assigned a Name for ease of reference and a Description for documentation. Any named properties which are externalized from nodes inside the group will be shown as properties of the group node itself on the top-level workflow. Note You can use GroupWorkflow nodes to document your workflow by adding names and descriptions inline with operator chains. These can help readability of a workflow and no additional processing cost is incurred by the use of GroupWorkflow nodes. Type Visualizers Type visualizers allow you to inspect online the data that is generated from a specific node during the execution of the workflow. They are useful to visualize the result of specific operations or to debug the behaviour of the workflow itself. Assigning visualizers Types can have more than one visualizer. You can choose the active type visualizer for a specific operator by right-clicking on the corresponding node and selecting from the available options in the Show Visualizer menu. For example, image streams can be displayed on the screen using the default image visualizer, but you can also select the text visualizer to inspect image parameters such as size, or pixel bit depth. New visualizers can be added by installing new packages. Visualizer layout settings If you leave one or more visualizers open when you stop the workflow, the editor will memorize the position and size of each active window. When you run the workflow again, the same visualizer windows will be opened following the memorized layout. These settings are stored in a .layout file which is saved side by side with the workflow so they will persist between editor sessions. Tip Many visualizers allow you to access more detailed information or advanced configuration parameters by right-clicking on the visualizer window. Workflow Extensions You can create and save workflow extensions by selecting one or more nodes and clicking the Save Workflow As... button in the context menu. Workflow extensions are a powerful way to reuse common workflow patterns across a large project. When you save a new extension it will immediately show up in the Toolbox panel for placement. Placing a workflow extension will create a new IncludeWorkflow operator pointing to the saved workflow. You can place an extension multiple times in the same workflow. Tip Like other groups, any named properties which are externalized from nodes inside the IncludeWorkflow will be shown as properties of the include node itself. These properties can have different values across different instances of the same workflow extension, and will be saved as part of the top-level workflow. All included workflow extensions are read-only, meaning that you cannot change the internal structure of the extension once it is loaded into the workflow, only its properties. If you want to change the implementation of the extension you need to first Ungroup the IncludeWorkflow operator. This will make a copy of the included workflow and place it inside a GroupWorkflow . From there you will be able to modify the internal implementation at will. After you have changed the structure, you can save the extension again using Save Workflow As... . Warning When you change the structure of an included workflow and save it over the original file, all references to that workflow extension will be automatically reloaded and updated. This ensures that all references to the same extension remain consistent throughout. Properties Each operator exposes a set of configuration properties that parameterize the operator's behaviour (e.g., the Timer operator exposes the period between generated values, whereas an image Threshold exposes the brightness cutoff value applied to individual pixels). The Properties panel will display all the configuration properties which are available for the currently selected operator. A summary description of the currently selected property can be found in the textbox at the bottom of the panel. Similarly, a description of the behaviour of the currently selected operator itself is shown at the top of the panel. Most properties can be configured simply by changing the text value in the corresponding row of the property grid. Some properties have further specialized editors which can be accessed by clicking the drop-down or dialog button which will be displayed to the right of the property text. Note Some operators have even more specialized editor windows such as camera configuration dialogs or media player controls. If such property pages exist for the currently selected operator, the small Property Pages button ( ) above the property grid will become active. Commands and Shortcuts Below is a summary of the most used commands and shortcuts in the workflow editor: Running the workflow Click the arrow Start button Press F5 Stopping the workflow Click the square Stop button Press Shift + F5 Insert an operator after the selected node Right-click the operator name and select the Insert After option Drag-and-drop the operator from the toolbox to the worflow Double-click the operator name in the toolbox Press the Enter key while the operator is selected in the toolbox Copy another node ( Ctrl + C ) and paste in the toolbox ( Ctrl + V ) Insert an operator before the selected node Right-click the operator name and select the Insert Before option Hold the Shift key together with any of the above commands (e.g., Shift + Enter ) Insert an operator as a new branch of the selected node Right-click the operator name and select the Create Branch option Hold the Alt key together with any of the above commands (e.g., Ctrl + Alt + V ) Create a connection between two operators Right-click the source node, select the Create Connection option and left-click on the target node Drag the source node and drop it on the target node Remove a connection between two operators Right-click the source node, select the Remove Connection option and left-click on the target node While holding the Shift key, drag the source node and drop it on the target node Selecting multiple nodes Click an empty space in the workflow panel and drag a box around the nodes to be selected While holding the Shift key, press the arrow keys to select a string of nodes around the currently selected node Hold the Ctrl key and click on a node to add/remove it from the current selection Note Many operations can be performed on multi-node selections (e.g., delete, create connections, create a node group, etc.). Open the type visualizer for an operator Double-click on the target node while the workflow is running Right-click on the target node and select a visualizer from the Show Visualizer dropdown Press Enter while the target node is selected Grouping operators into a node group Select all the nodes to group and press Ctrl + G to create a nested workflow Right-click on a multi-node selection and select a group type from the Group dropdown context menu Note You can change the type of an existing group simply by right-clicking on the group node and selecting a different type from the Group dropdown. Open a node group or the default editor for an operator Double-click on the target node while the workflow is not running If the workflow is running, hold the Ctrl key while double-clicking on the target node Press Ctrl + Enter while the target node is selected Ungrouping a node group Right-click on the group node and select the Ungroup option from the context menu Press Ctrl + Shift + G Open context menu Right-click any node, multi-node selection or empty space in the workflow panel Press Shift + F10 Note Depending on what is currently selected, the context menu may show different available actions."
  },
  "articles/environments.html": {
    "href": "articles/environments.html",
    "title": "Environments",
    "keywords": "Bonsai Environments By default, Bonsai is installed system-wide and can be used to run any workflow. However, as projects grow, it is common to have to install new packages to access specific functionality, or update the version of existing packages to get the latest bug fixes and patches. If you have many projects, you might notice that older projects require specific obsolete package versions which are not compatible with newer projects, resulting in setups that break when the system-wide installation gets updated since only one version of the package can be installed at any one time. Bonsai addresses these problems by supporting the creation of reproducible package environments. An environment is a self-contained, portable, installation of Bonsai that records a snapshot of all the packages required to run the workflows in your project. This makes it much easier to share a project with other people, or keep track of multiple separate projects in our local machine, and be assured you always have everything you need in the right place. Creating an environment The key to creating and updating environments is the Bonsai.config file, which keeps a record of all currently installed dependencies for a specific Bonsai setup. You can find this file in the same location of the Bonsai executable ( Bonsai.exe ). Anytime you install or update a package, Bonsai will automatically modify the config file. The contents of the Bonsai.config file are compared with the current state of the Packages folder when Bonsai starts. If there are any missing packages the Bonsai bootstrapper will download them automatically to recover the expected state of the installation folder. The easiest way to create a self-contained Bonsai environment is then to download the portable version of Bonsai and install the packages which are necessary for a specific project. For example, to share a project that depends on the Vision package: Start by downloading the latest Bonsai portable release . After extracting all the files from the Bonsai.zip file, your folder will look like this: Run Bonsai.exe . During this first run, Bonsai will bootstrap the core dependencies and create an initial Bonsai.config file. Install the Bonsai - Vision package using the Package Manager . The Bonsai.config file will be modified to specify this package as a new dependency. Any additional dependencies which might be needed for the package to run will also be added. Close Bonsai. Deploying your environment Now that you have a Bonsai.config file with all the dependencies needed to run your project, how can you reproduce this installation elsewhere? As we saw in the previous step, when we run Bonsai.exe for the first time, the bootstrapper will attempt to download and resolve all core dependencies. However, if a Bonsai.config file is found inside the executable folder, the bootstrapper will also resolve those dependencies at startup time. We can test this by doing the following: Create a new folder and repeat steps 1. and 2. from the previous section. This time, before running Bonsai.exe , copy your Bonsai.config into the folder: Run Bonsai.exe . Add a node that depends on the Vision package (e.g. CameraCapture ) to verify that the package has been successfully installed. The new folder is now a copy of your previous environment. Adding local dependencies There is a second configuration file located next to the Bonsai.config file called NuGet.config . This file stores a list of all the remote, and local, NuGet package sources where the Package Manager should look for new packages. The NuGet.config file can be modified to specify new package sources. For example, you may want to install local NuGet packages as dependencies (e.g. when testing your own packages ). To do this we just need to add new entries in the NuGet.config file. For example, to add a new package source named LocalPackages pointing to the Desktop folder: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <add key=\"Gallery\" value=\"Gallery\" /> <add key=\"Bonsai Packages\" value=\"https://www.myget.org/F/bonsai/api/v3/index.json\" /> <add key=\"Community Packages\" value=\"https://www.myget.org/F/bonsai-community/api/v3/index.json\" /> <add key=\"LocalPackages\" value=\"C:\\Users\\BonsaiUser\\Desktop\"/> </packageSources> </configuration> You can also use relative paths if you want to keep package sources relative to the local environment. For instance: <add key=\"LocalPackages\" value=\".\\LocalPackages\"/> Note NuGet.config files can be deployed hierarchically. You can have other NuGet.config files located higher in the file system to specify package sources that should be shared across multiple projects or specific for the local machine. For more information on this and other settings see the Common NuGet configurations documentation page. Version control and \"one-click\" Bonsai deployment Now that we know how to create and reuse Bonsai environments, we will show you one way to streamline this whole process. Create the Bonsai.config and, if necessary, modify your NuGet.config files. Create a new folder and add these two files to it. Add the following PowerShell script to the folder (e.g.: open a new text file and copy-paste the code) and name it Setup.ps1 : if (!(Test-Path \"./Bonsai.exe\")) { Invoke-WebRequest \"https://github.com/bonsai-rx/bonsai/releases/download/2.7/Bonsai.zip\" -OutFile \"temp.zip\" Move-Item -Path \"NuGet.config\" \"temp.config\" Expand-Archive \"temp.zip\" -DestinationPath \".\" -Force Move-Item -Path \"temp.config\" \"NuGet.config\" -Force Remove-Item -Path \"temp.zip\" Remove-Item -Path \"Bonsai32.exe\" } & .\\Bonsai.exe --no-editor When executed, this small script will attempt to download a portable version of a Bonsai release, unzip it, and delete all the unnecessary files. Add a second batch command file Setup.cmd that targets and runs Setup.ps1 . It will look this: powershell -ExecutionPolicy Bypass -File .\\setup.ps1 Your folder should now contain only four files: Setup.ps1 Setup.cmd . NuGet.config Bonsai.config You can now simply share this folder with another person who will be able to easily install your current Bonsai dependencies by running the Setup.cmd or Setup.ps1 file. As a final bonus, since all these files are encoded as text, they are easily version controlled using a distributed version control system such as git . Because of this, we often keep this folder inside our project repository and keep updating it with new dependencies as the project evolves. To prevent installed packages and other binary files from being tracked, you can add the following lines to the .gitignore file for convenience: Packages *.exe *.exe.settings"
  },
  "articles/expressions-binaryoperator.html": {
    "href": "articles/expressions-binaryoperator.html",
    "title": "",
    "keywords": "Binary operators are applied over sequences of pairs of values, as long as the corresponding arithmetic and logic operator exists for the specific combination of input types. Note Binary arithmetic and logic operators can also be applied to sequences of single values. In this case, a workflow property will be inferred based on the type of the elements in the source sequence and exposed in the property grid. The value of this property will be used as the right-hand side when applying the binary operator to the elements in the source sequence."
  },
  "articles/expressions-binaryoperator-argument.html": {
    "href": "articles/expressions-binaryoperator-argument.html",
    "title": "",
    "keywords": "Note If the operator is applied to a sequence of single values, a workflow property will be inferred based on compatible operator overloads and exposed in the property grid. The value of this property will be used as the argument when applying the operator to the elements in the source sequence. If the operator is applied to a sequence of pairs of values, the second element in the pair is considered to be the argument to the operator."
  },
  "articles/expressions-disable.html": {
    "href": "articles/expressions-disable.html",
    "title": "Disable",
    "keywords": "The Disable decorator is used to remove expressions from the workflow build process without actually removing the expressions themselves from the workflow. It is most frequently used for rapid-prototyping of alternative solutions, or during debugging to quickly activate or deactivate branches for testing."
  },
  "articles/expressions-externalizedmapping.html": {
    "href": "articles/expressions-externalizedmapping.html",
    "title": "ExternalizedMapping",
    "keywords": "Warning In any one workflow, it is not possible to have more than one externalized property with the same name. When externalizing multiple conflicting properties, you can use the DisplayName property of the externalized mapping to provide distinct unique names for each property. It is also possible to specify different category or description strings to the externalized property for documentation purposes. When externalized properties are nested inside an operator group, for example inside a GroupWorkflow , they will be exposed as member properties of the node group itself. This means that when the group node is selected, all named externalized properties will show up in the Properties panel."
  },
  "articles/expressions-format.html": {
    "href": "articles/expressions-format.html",
    "title": "Format",
    "keywords": "The Format operator is a Transform that can be applied on sequences of any type. Each of the elements in the sequence will be converted to a String value using the specified Format . The format string follows the same syntax of the String.Format method. The Selector property can be used to specify the order of the values that will be converted to strings and inserted at a specified place in the format string. If no format string is specified, the default ToString method is used to convert each value in the sequence. Examples Note Below you can find various applications of the Format operator. For more formatting examples and a comprehensive list of supported format strings for different data types, see the extended discussion section of the String.Format method. Insert a string You can use the Format operator to insert the value of a sequence into another string. For example, the following workflow and format string visualizes the value and timestamp of each tick of a timer: Received value {0} at time {1}. Both {0} and {1} are format items. The index 0 refers to the first member specified in the Selector property of the Format node (in this case Value ). Index 1 refers to the second member (in this case Timestamp ). The output will be similar to: Received value 9 at time 12/25/2022 22:15:06 +00:00. We can specify a format string for the second member to remove the date part of the timestamp: Received value {0} at time {1:T}. Which will then produce the following output: Received value 9 at time 22:15:06. Format a file name You can format the names of data files dynamically using the Format operator. This is useful to generate file names relative to a common base path which can be easily changed in only one place:"
  },
  "articles/expressions-groupworkflow.html": {
    "href": "articles/expressions-groupworkflow.html",
    "title": "GroupWorkflow",
    "keywords": "The workflow nested inside GroupWorkflow specifies the entire behavior of this operator. Group nodes are used to organize larger workflows into modular building blocks. For most purposes, moving operations into a group workflow will not have any effects on the performance or function of the program. All observable sequences passed as arguments to the outer GroupWorkflow will be routed to the inner WorkflowInput nodes. Conversely, all notifications emitted by the sequence connected to the single WorkflowOutput node will be passed to any observers of the group node. It is possible to subscribe multiple times to the same group, in which case the nested workflow will run potentially in parallel and is considered to be reentrant. Tip Use ExternalizedMapping operators to expose configurable properties when selecting the nested workflow node. Externalized properties in a nested workflow work the same way as regular properties in other operators. They can be further externalized as part of other nested operators or dynamically assigned using PropertyMapping or InputMapping operators. Warning If the nested workflow is reentrant, properties of inner nodes are shared by all asynchronous operations which are running simultaneously. If the shared state never changes across reentrant operations (i.e. the state is immutable), this is not a problem. If shared state is changing dynamically, you should consider using synchronization primitives to make sure that state updates are coordinated across the different asynchronous operations."
  },
  "articles/expressions-includeworkflow.html": {
    "href": "articles/expressions-includeworkflow.html",
    "title": "IncludeWorkflow",
    "keywords": "The IncludeWorkflow operator works in exactly the same way as GroupWorkflow , with the difference that the nested workflow definition is stored externally in a file, rather than locally in the node itself. Include nodes are used to organize larger workflows into modular building blocks. They allow reusing functionality across different parts of a workflow, or even across different projects. Changing the definition of an included workflow will be automatically reflected in all places where that workflow is reused. All observable sequences passed as arguments to the outer IncludeWorkflow will be routed to the inner WorkflowInput nodes. Conversely, all notifications emitted by the sequence connected to the single WorkflowOutput node will be passed to any observers of the include workflow node. It is possible to subscribe multiple times to the same include workflow, in which case the nested workflow will run potentially in parallel and is considered to be reentrant. Note Externalized properties contained inside the included workflow will be exposed when selecting the IncludeWorkflow node. Any changes to the values of these properties can be recovered, even if the included workflow is reused multiple times in different parts of the program. They can also be further externalized as part of other nested operators or dynamically assigned using PropertyMapping or InputMapping operators. Warning If the nested workflow is reentrant, properties of inner nodes are shared by all asynchronous operations which are running simultaneously. If the shared state never changes across reentrant operations (i.e. the state is immutable), this is not a problem. If shared state is changing dynamically, you should consider using synchronization primitives to make sure that state updates are coordinated across the different asynchronous operations."
  },
  "articles/expressions-inputmapping.html": {
    "href": "articles/expressions-inputmapping.html",
    "title": "InputMapping",
    "keywords": "Fundamentally, the InputMapping operator works exactly the same way as PropertyMapping , but now the connection from the mapping operator to its target node is done through the upstream sources. In this case, only values from the source sequence can be used to map properties in the target node. However, it is possible to specify which specific member of the original data source will be selected as input to the target node by setting the Selector property. Whenever the original input sequence sends out a new data item, all the specified property mappings will be updated at the same time before this item is finally allowed to go through and notify the target. In this way, you can be sure that no property changes are performed between upstream notifications."
  },
  "articles/expressions-memberselector.html": {
    "href": "articles/expressions-memberselector.html",
    "title": "MemberSelector",
    "keywords": "The MemberSelector operator is used to quickly extract member fields and properties out of the elements of the source sequence. Multiple members can be specified using a comma-separated list in the Selector property, in which case the output type will be a tuple of all selected member types. The TypeMapping property can be used to specify which type conversion to use when chaining the selected members into downstream operators."
  },
  "articles/expressions-parse.html": {
    "href": "articles/expressions-parse.html",
    "title": "Parse",
    "keywords": "The Parse operator is a Transform on sequences of String values. Each of the strings in the sequence will be matched against the specified Pattern using the .NET regular expression engine ( Regex ). If a Separator is specified, every input string will first be split using the delimiter, and each substring will then be matched against the regular expression. The output type is automatically inferred from the structure of the parse pattern. If a separator is used, the output will be an array containing the results of matching each delimited substring against the parse pattern. If any of the values in the input sequence fails to match, an error will be raised and the sequence will be terminated. Note Multi-character strings can be used to specify both the pattern and the separator. This can sometimes help to parse text formats with more complex tokens. For more flexible or conditional parsing, it is also possible to chain multiple Parse operators in a sequence, by matching against the placeholder %s at the end of the sequence. This will match and capture any remaining text for downstream processing. Warning For convenience, both Pattern and Separator properties will accept the use of character escapes to represent specific white space or unicode characters. See the list of supported character escapes in .NET for more information. Examples The following examples illustrate using different combinations of the Pattern and Separator properties to match different kinds of formatted text data. Pattern Separator Type Description Example %f float Match a floating-point number. 5.0 %f;%i Tuple < float , int > Match a floating-point number and an integer separated by a semicolon. 5.1;5 %f , float [] Match each comma-delimited substring with a floating-point number. 3.2, 5.6, 8.9 \\(%f,%f\\) ; Tuple < float , float >[] Match each semicolon-delimited substring with a pair of floating-point numbers surrounded by parentheses. (1, 2); (3.14, 4.5) %s,msg:%b \\t Tuple < string , bool >[] Match each tab-delimited substring with a pattern containing a string and boolean. tag1,msg:true tag2,msg:false"
  },
  "articles/expressions-propertymapping.html": {
    "href": "articles/expressions-propertymapping.html",
    "title": "PropertyMapping",
    "keywords": "The connection between the property mapping and its target node only affects the state of properties. The behaviour of the operator will otherwise remain unaffected, since the subscription to the mapping is not considered as a proper upstream source. This is indicated in the editor by the dashed line linking the property mapping operator to its target. Warning Because property values are updated independently, this means that values can change even while the target operator is reacting to notifications from other nodes. Care must be taken to ensure that changing the property state in this way does not break the behaviour of the workflow. Specifically, some operators respond to changes in their parameters only at specific moments. For example, the parameters of the Timer operator must be set before the observable sequence is initialized. In this case, the input to the externalized property needs to be emitted immediately during the subscription phase for the mapping to work."
  },
  "articles/expressions-propertymapping-multiple.html": {
    "href": "articles/expressions-propertymapping-multiple.html",
    "title": "PropertyMappingMultiple",
    "keywords": "Multiple properties can be mapped simultaneously from the same source sequence when using PropertyMapping . You can select which properties to map by using the editors available in the property grid. For each mapped property you must specify a source selector, i.e. an expression specifying which members of the input data type are used to assign values to the mapped property. Note If the type of the selected member does not match the type of the property, a conversion is attempted. If no compatible conversion is available, the compiler checks whether it is possible to construct the corresponding data type from the selected members. For example, it would be possible to map to a Point type by selecting two numeric values from the source sequence. In this case, the values would be used to construct a new point instance by assigning them to the X and Y parameters of the type constructor. In each property mapping operator, all mapped properties are updated at the same time every time the source sequence sends out a new value. It is also possible to connect property mapping operators to multiple target nodes."
  },
  "articles/expressions-propertysource.html": {
    "href": "articles/expressions-propertysource.html",
    "title": "",
    "keywords": "Property sources expose a value which can be set from the property grid and also generate an observable sequence that emits a notification whenever the property value changes, starting with the initial property value. Tip Property sources are commonly used to create new configuration parameters with custom names for nested workflows. To expose and rename a property source, use Property Mapping to externalize the property value and set its DisplayName ."
  },
  "articles/expressions-sharedstate.html": {
    "href": "articles/expressions-sharedstate.html",
    "title": "",
    "keywords": "Warning If the nested workflow is reentrant, properties of inner nodes are shared by all asynchronous operations which are running simultaneously. If the shared state never changes across reentrant operations (i.e. the state is immutable), this is not a problem. If shared state is changing dynamically, you should consider using synchronization primitives to make sure that state updates are coordinated across the different asynchronous operations."
  },
  "articles/expressions-unit.html": {
    "href": "articles/expressions-unit.html",
    "title": "Unit",
    "keywords": "The Unit operator generates a sequence returning the singleton unit object, if no input sequence is provided. Otherwise, it will convert all elements in the source sequence to the Unit type. Tip Unit is most commonly used for converting separate branches with different types into a common type signature, so they can be combined using control flow operators such as Merge or Concat ."
  },
  "articles/expressions-unknowntype.html": {
    "href": "articles/expressions-unknowntype.html",
    "title": "UnknownType",
    "keywords": "Important Unknown types are created when the compiler is unable to resolve a type reference specified in the workflow. This is usually caused by a missing package that needs to be installed, but sometimes it might also indicate missing native dependencies required by the package. Please refer to the specific package documentation for guidance when debugging unknown types."
  },
  "articles/expressions-visualizermapping.html": {
    "href": "articles/expressions-visualizermapping.html",
    "title": "VisualizerMapping",
    "keywords": "The VisualizerMapping operator specifies that the visualizer of the current node should be combined with the target node. The behaviour of the target operator will otherwise remain unaffected, since the subscription to the mapping is not considered as a proper upstream source. This is indicated in the editor by the dashed line linking the property mapping operator to its target. Note If multiple visualizer mappings are specified for the target node, the order of visualizer combination follows the connection order, from top to bottom. Warning The visualizer of the target node must be a type derived from MashupVisualizer . Furthermore, the target mashup must also support the specified visualizer type as a mashup source. Otherwise, the visualizer mapping will have no effect."
  },
  "articles/expressions-workflowinput.html": {
    "href": "articles/expressions-workflowinput.html",
    "title": "WorkflowInput",
    "keywords": "The WorkflowInput operator is used inside nested workflows to route input arguments from the outside. The type of the input sequence and its behavior is dependent on the exact operator in which they are nested. Each WorkflowInput is uniquely numbered starting from Source1 . Warning The numbering of the WorkfklowInput nodes usually reflects the order of arguments in the outer operator, but this is not always required. In fact, how many input arguments are available in the nested workflow is entirely dependent on the nesting operator."
  },
  "articles/expressions-workflowoutput.html": {
    "href": "articles/expressions-workflowoutput.html",
    "title": "WorkflowOutput",
    "keywords": "The WorkflowOutput operator is used inside nested workflows to specify the sequence of notifications providing the result of the nested function. In each workflow there can only be at most one WorkflowOutput node. How this result sequence is converted into the sequence of notifications of the outer nesting node is dependent on the exact operator in which the output is nested. If no WorkflowOutput is specified, the result sequence of any nested workflow (including the top-level workflow) will be of type Unit and will not emit any notifications except for successful termination if all inner sequences terminate successfully, or exceptional termination if any of the inner sequences raises an error. Note If the sequence connected to WorkflowOutput terminates successfully, all other nested operators will be immediately cancelled. This is also true for the top-level workflow, in which case the entire program execution is terminated."
  },
  "articles/gallery.html": {
    "href": "articles/gallery.html",
    "title": "Bonsai Gallery",
    "keywords": "Bonsai Gallery A good way to get started with Bonsai is to look at some examples. The editor includes a built-in gallery of example workflows for running common tasks you might want to do with Bonsai. You can access the gallery via the Tools menu of the workflow editor. Workflows in the Bonsai gallery are also distributed using the built-in package manager. When you install a workflow, all the dependencies required to run that example will be automatically installed and all the files contained in the example will be copied to the specified folder. Finally, the editor will open the example workflow and you should then be able to run the example directly or modify it as you like. Every time you open the example you will generate a new clean copy of the workflow. Note You can create your own example workflows for the Bonsai Gallery. Start by placing the workflow you want to save as an example, along with any files you might need to run it, in a folder with the same name as the workflow. You can then export everything into a gallery package using the File > Export menu of the workflow editor."
  },
  "articles/higher-order.html": {
    "href": "articles/higher-order.html",
    "title": "Higher-Order Operators",
    "keywords": "Higher-Order Operators When building simple reactive programs, it is usually enough to place a source for every device or every file you are accessing, and explicitly replicate the chain of transforms, sinks and combinators representing all the operations you need to perform on the data. However, sometimes you may need to build systems that deal with an unknown number of sources. For example, imagine you wanted to create a workflow to merge together several video files. If you knew beforehand how many files you will need to combine and where they are exactly located, you might use the Concat operator to design a workflow like the following: But what if you did not know beforehand how many video files you will need to combine, and you wanted to merge all these videos without having to manually place a source node for every file? Suppose all you had to get started was the EnumerateFiles source. This operator creates an observable sequence that will emit all the file names in a folder, one after the other. In order to merge all the frames from these files in a single sequence you would need to create a different FileCapture source for every file name emitted by this sequence, and pass all these sources to the Concat operator to generate a single sequence of frames. In other words, you want to create a sequence of frames for every file name in the folder, and then combine all these sequences into a single video file. Whenever an operator receives or emits a sequence of sequences, we call it a higher-order operator. These operators play a particularly powerful role in the Bonsai programming language so it is useful to describe them in some detail. Higher-Order Workflows Higher-order operators are represented in the workflow as nodes, just like any other operator. However, some higher-order operators allow you to specify their behaviour by using node groups. This allows you to program how the created sequences behave by reusing existing sources, transforms and other nodes. For example, the video concatenation workflow can be implemented in Bonsai as follows: The behaviour of the CreateObservable operator is specified by the floating node group. Each time a new file name is emitted by the EnumerateFiles source, the CreateObservable operator creates a new observable sequence controlled by the operators inside the group. The input to the node group -- represented by the Source1 operator -- is a sequence containing the individual items received by CreateObservable . In this case, it is a sequence with a single item that returns the file name emitted by the EnumerateFiles source. We use an externalized property to assign this value to the FileName property of the FileCapture node, so that the correct video is accessed. Finally, the output of the node group determines the type and timing of the items emitted by the created sequence. Note The CreateObservable operator creates new sequences for every input notification. However, it does not automatically subscribe to them -- they are latent. No data actually flows through the operators in the node group until some other higher-order operator -- in this case Concat -- actually takes these sequences and subscribes to them. Marble diagrams for higher-order operators Marble diagrams can also be extended to describe the behaviour of higher-order operators. Emitted sequences are represented by diagonal timelines branching off the main operator timeline. The start of the branching sequence represents the time at which that sequence was emitted. For example, the CreateObservable operator used to convert file names into sequences of video frames is described below: This marble diagram makes clear that the operator reacts to each file name notification by creating a new observable sequence. In this case, each created sequence will emit all the frames in the specified video. In general, however, this operator can produce all kinds of sequences, determined by the particular combination of operators inside the node group. Finally, operators can combine sequences of sequences into a single sequence by collecting all the items from each sequence. There are multiple ways to perform this combination. For example, the Concat operator subscribes to each emitted sequence one at a time, advancing to the next sequence only when the previous one terminated successfully. This behaviour is described by the following marble diagram:"
  },
  "articles/installation.html": {
    "href": "articles/installation.html",
    "title": "Installing Bonsai",
    "keywords": "Installing Bonsai The Bonsai editor is currently designed to work with the .NET framework on Windows desktop operating systems, version 7 or later. The easiest way to get started with Bonsai is by downloading the latest installer. The latest stable release is: 2.7.2 (2.7.2.4007) Download Installer (.exe) Download Portable (.zip) The installer will make sure that .NET and any other required system dependencies for running Bonsai are correctly setup in your computer."
  },
  "articles/observables.html": {
    "href": "articles/observables.html",
    "title": "Observables",
    "keywords": "Observables Observable sequences were first introduced in the ReactiveX library and are a central concept in the Bonsai programming language. This section discusses what is an observable sequence and how they are manipulated using Bonsai reactive operators. Introduction An observable is a sequence of elements ordered in time, and can be represented visually using a marble diagram. Each marble is called an OnNext notification, and represents a unique element emitted by the sequence. The color of each notification is typically used to represent the order of elements in the sequence, and shape indicates the type or value of each element. Marble diagrams allow you to describe when elements are emitted by a sequence. Notifications can occur regularly or irregularly and do not need to conform to any underlying clock -- observable sequences are asynchronous. Sequences can be finite or infinite, depending on whether they emit a termination message. There are two types of termination message: OnCompleted (represented by a vertical bar) indicates successful termination of the sequence, and OnError (represented by an X) indicates an abnormal termination of the sequence due to a failure. Reactive Programming In reactive programming, we compose operations on sequences (generation, filtering, combining, etc.) in order to define new sequences. The behaviour of each operator can also be analysed using a marble diagram. Below is an example for an operator manipulating a single sequence. Arrows entering the box indicate that the operator is receiving notifications from the observable sequence that it is subscribed to. Arrows leaving the box show items that are emitted by the operator itself. If no subscribe arrow is explicitly indicated in the diagram, it is assumed to be placed at the start of the source sequence. In this case we can see from the diagram that the Condition operator is filtering the input notifications from the source sequence: only notifications with a specific shape are sent out in the result sequence. Bonsai Workflows The Bonsai language uses a graphical representation called a workflow to describe complex combinations of operations on observable sequences. In a workflow, each node represents an operator defining an observable sequence. Nodes can be connected to other nodes, from left to right. Each connection indicates that the downstream operator on the right subscribes, or \"listens\", to the notifications of the upstream operator on the left. By chaining networks of observable sequences in this way, it becomes possible to express complex interactive systems using a very compact visual representation. For example, the workflow diagram above describes a system that saves a grayscale snapshot from a camera into a file whenever there is a key press. Warning Do not confuse a workflow with the marble diagrams described above. A marble diagram describes the dynamic behaviour over time of an observable sequence or reactive operator, whereas a Bonsai workflow describes only which different operators subscribe to each other. We often combine marble diagrams with the workflow representation to better understand the behaviour of a Bonsai program. In the example above, we can see from the workflow that the Sample operator subscribes to the sequences generated by two other operators: Grayscale and KeyDown . Grayscale sends out images periodically, following the camera. However, KeyDown sends out a notification only when there is a key press, which can happen at any moment, even in between camera images. What exactly will be the result sequence coming out of Sample in this case? Below is the marble diagram for the Sample operator, where the first sequence is the \"source\" sequence ( Grayscale ), and the second sequence is the \"sampler\" ( KeyDown ). From the marble diagram the behaviour of Sample is clear: it sends out the latest image that was received from Grayscale whenever there was a new key press. Marble diagrams can be an extremely useful tool to convey graphically the intuition of what a reactive operator is doing and are used extensively throughout the documentation. Hot versus cold observable sequences One of the most important aspects for understanding the behaviour of observable sequences is to clarify the side-effects of subscription. For example, when an image processing operator like Grayscale subscribes to a sequence of images from a camera for the first time, the camera is turned on and an acquisition loop starts streaming live frames. If instead we have the Grayscale operator subscribe to a sequence of images from a pre-recorded video, the movie file is opened and frames begin to be decoded from disk into memory. Starting the camera or opening a movie file are examples of subscription side effects which are necessary in order to generate the data emitted from a sequence. The effects of subscription can have critical implications in the behaviour of our reactive programs, and to understand them we often need to determine what we call the temperature of the underlying observable sequence. Consider again the difference between starting a camera and opening a video file when we have multiple observers. A video camera streams a live feed of images. When an operator subscribes to the feed at time t 0 it will receive frames from time t > t 0 . If another operator subscribes to the camera at a later time t 1 , it will receive all frames from time t > t 1 but not earlier: the camera shares the same subscription with all observers and never re-emits frames from the past! When observable sequences share the same subscription across all downstream observers, they are said to be hot . A video file also generates a sequence of images, but in contrast to the camera, these images are generated on-demand. They are permanently stored on disk, and whenever an operator subscribes to the file, all the images can be played back from the beginning. Every operator will receive all the frames from the file, no matter when they subscribe to the sequence. When observable sequences have this on-demand behaviour, they are said to be cold . Understanding the temperature of an observable sequence is particularly important when that sequence is shared between multiple operators. It can help to understand whether those operators will see the same data items, and what the effect of subscribing to the shared sequence at different times is going to be. It is also possible to change the temperature of observable sequences using reactive operators. The Replay operator can be used to subscribe to the camera and start recording all incoming images. Every time a downstream observer subscribes to the result sequence, it will then replay all images on-demand, even if they subscribe late. The originally hot sequence has been turned into a cold observable by the replay behaviour. Conversely, the Publish operator can be used to share a single subscription to a video file when sending images to downstream observers. In this case, instead of requesting a new subscription to the video for each new observer, the publish behaviour will always share only the images coming from the original subscription, no matter at what point the video is in. The original sequence has been turned from cold to hot . In the Bonsai visual language, whenever two operators receive data from the same source, i.e. whenever there are branches in the workflow, subscriptions use the Publish behaviour. This means that the default sharing behaviour of Bonsai sequences is hot . It is possible to change this by using specialized sharing operators, called Subjects ."
  },
  "articles/operators.html": {
    "href": "articles/operators.html",
    "title": "Operators",
    "keywords": "Operators When building a Bonsai program, you chain together reactive operators to create new observable sequences. There are many different operators, which can create all kinds of observable sequences. These operators can be roughly grouped into different categories, depending on their shared characteristics. Category Description generate event streams from devices or files convert or process individual data items filter data items matching some specific condition save data or trigger external outputs manage control flow or synchronize parallel inputs Source Sources create sequences that generate notifications spontaneously. This means that you can place these nodes without connecting them to any input. Every Bonsai program will contain at least one source. Usually sources represent streams of data which are acquired from devices or files, such as cameras, microphones, accelerometers, WAV files, network sockets, touchpads, etc. Note Even though all sources can be placed independently, sometimes you can still connect an input to them. For example, if you place a FileCapture source by itself, it will playback all frames of the movie at the specified frame rate. However, if you connect it to an input, the next frame will be decoded only when a new notification arrives, allowing you to precisely control video playback. Transform Transforms apply an operation to individual data items in a sequence. They always take exactly one input sequence, and generate another sequence which has the same number of elements as the input, but where each item has been modified according to the function specified by the transform. In other words, all transforms have a similar style of marble diagram: Every transform will always produce exactly one item for every notification generated by the input sequence. Each item that is produced will be the result of applying the transform function on the elements of the input sequence, and is sent out immediately whenever a new notification is received. When the input sequence terminates successfully (or exceptionally), the transformed sequence also terminates. The only distinction between different transforms will be in the exact function that is applied to each element (e.g., Grayscale will convert a sequence of color images to a sequence of grayscale images, while FindContours will convert a sequence of binary images into a sequence of contours). Condition Condition operators apply a filter on individual data items in a sequence. Similar to transforms, they always take exactly one input sequence, and generate another sequence where the only emitted elements are items from the original sequence that match the condition criteria. The condition function is applied to individual items immediately whenever a new notification is received from the input sequence, and valid items are sent out as soon as they are found to match the criteria. When the input sequence terminates successfully (or exceptionally), the filtered sequence also terminates. Note The Condition operator allows you to specify arbitrary matching criteria using a node group. The input to the nested node group is the unfiltered sequence, and the output must be a sequence of elements of type bool , i.e. logical values indicating true or false depending on whether the current item is considered to match the criteria. Sink Whenever you need to save data into a file, trigger an external output, move a motor, or otherwise generate some kind of side effect with the data processed in Bonsai, you probably need to use a sink operator. Similar to transforms and conditions, sinks also apply a function to every individual element of an observable sequence. However, the application of the function will not modify or filter the input items in any way, which means the output sequence generated by a sink is identical to the input sequence. For this reason, all sinks also share a very similar style of marble diagram: Because the output sequence of a sink is exactly the same as the input sequence, sinks can always be placed at any point of the workflow without breaking existing behaviour. Note You can chain multiple sinks sequentially as long as the input is compatible. This can be very convenient when you need to run multiple side effects on a single data stream. A common application is to log data into a file while simultaneously transmitting it to an external device. Combinator Although a lot can be done with the right sequence of sources, transforms and sinks, there are many other operators which allow you to express more complex combinations of observables. These operators are grouped together under the Combinator category, but their behaviour can be extremely diverse. Combinators can be used to merge data from multiple sources; control when observable sequences start and stop; or even to create entirely new sequences dynamically. Together, they provide an incredibly flexible toolkit to manipulate asynchronous data streams."
  },
  "articles/packages.html": {
    "href": "articles/packages.html",
    "title": "Package Manager",
    "keywords": "Package Manager Bonsai can be extended by installing software packages containing operators designed for specific tasks, such as video processing or OpenGL shaders. Install dependencies When you first run Bonsai, any required packages will be automatically installed. The built-in package manager can then be launched from the start screen to further customize your installation by selecting the option Manage packages . Packages that are already installed are displayed with a green tick mark to the right of the title. You can install new packages by selecting a package title or description and then clicking on the Install button that appears on the right. You can also search for available packages using the text box in the upper-left corner. Note If you want to start playing with Bonsai quickly, just download the \"Starter Pack\" package. This will automatically install all major dependencies used in this guide. In the Installed tab you can browse currently installed packages and optionally uninstall them. The Updates tab will show you which of those packages can be updated to a newer version. Configure package sources The Settings button in the upper-right corner ( ) will open a new dialog where you can configure the active package sources. This allows you to specify directly where Bonsai should look for new packages, either online or in your local file system. Tip Most of the available Bonsai packages can be found in the official package source. However, at some point you may want to install your own custom packages, or packages that were shared with you by other means. See the Extending Bonsai section for detailed instructions on how to configure local package sources. When you are done managing your packages, you can click the Close button or hit the Escape key to exit the package manager."
  },
  "articles/property-mapping.html": {
    "href": "articles/property-mapping.html",
    "title": "Property Mapping",
    "keywords": "Property Mapping Each Bonsai operator exposes a set of configuration properties that allow you to parameterize that operator's behaviour. These parameters can be configured manually from the editor Properties panel. However, there are times when you may need to map the properties of an operator dynamically from the output of other observable sequences. As an example, imagine you wanted to continuously playback a sound WAV file to the speakers at a specified volume level. You might design a workflow that looks like the following: Using the ConvertScale operator you could set the volume manually by changing its Scale parameter. Now consider a variation of this workflow where the playback volume needs to be modulated continuously depending on some other variable, for example the horizontal position of the mouse cursor as it moves across the screen. A simple way to compute the desired scale value would be to rescale the X coordinate of mouse movements to a range between zero and one: However, how would you now connect the sequence of scale values computed from the mouse position to changes in the Scale property of the ConvertScale node? Property mapping operators allow you to do exactly this. They are operators that take a single input sequence and react to notifications from that sequence by changing the values of the specified properties in the subsequent node. There are three types of property mapping operators, described below. Mapping Type Description Externalize one or more operator properties. The properties can be optionally named and will show up in the Properties panel for node groups. Map multiple properties simultaneously. Individual members of input data items can be mapped to different properties in the target node. Map multiple properties synchronized with input notifications. Same as above, but property changes are applied only when a notification is transmitted to the target node. Externalized properties The ExternalizedMapping operator allows you to create externalized properties. The easiest way to initialize the mapping is from the right-click context menu when a single node is selected. Selecting a property from this menu will create or update the externalized mapping node. Multiple properties can be externalized from the same node. Warning In any one workflow, it is not possible to have more than one externalized property with the same name. When externalizing multiple conflicting properties, you can use the DisplayName property of the externalized mapping to provide distinct unique names for each property. It is also possible to specify different category or description strings to the externalized property for documentation purposes. When externalized properties are nested inside an operator group, for example inside a GroupWorkflow , they will be exposed as member properties of the node group itself. This means that when the group node is selected, all named externalized properties will show up in the Properties panel. Mapping a sequence to a property After an operator property has been externalized, you can connect any sequence which is compatible with the data type of the property to the mapping node. When a connection to a source sequence is established, the externalized property will be promoted to a PropertyMapping operator. Now every time the source sequence emits a new notification, the mapping operator will react by changing the target property to the incoming value. The connection between the property mapping and its target node only affects the state of properties. The behaviour of the operator will otherwise remain unaffected, since the subscription to the mapping is not considered as a proper upstream source. This is indicated in the editor by the dashed line linking the property mapping operator to its target. Warning Because property values are updated independently, this means that values can change even while the target operator is reacting to notifications from other nodes. Care must be taken to ensure that changing the property state in this way does not break the behaviour of the workflow. Specifically, some operators respond to changes in their parameters only at specific moments. For example, the parameters of the Timer operator must be set before the observable sequence is initialized. In this case, the input to the externalized property needs to be emitted immediately during the subscription phase for the mapping to work. Mapping multiple properties Multiple properties can be mapped simultaneously from the same source sequence when using PropertyMapping . You can select which properties to map by using the editors available in the property grid. For each mapped property you must specify a source selector, i.e. an expression specifying which members of the input data type are used to assign values to the mapped property. Note If the type of the selected member does not match the type of the property, a conversion is attempted. If no compatible conversion is available, the compiler checks whether it is possible to construct the corresponding data type from the selected members. For example, it would be possible to map to a Point type by selecting two numeric values from the source sequence. In this case, the values would be used to construct a new point instance by assigning them to the X and Y parameters of the type constructor. In each property mapping operator, all mapped properties are updated at the same time every time the source sequence sends out a new value. It is also possible to connect property mapping operators to multiple target nodes. Mapping properties synchronously Sometimes you need to synchronize property updates with the data flow, i.e. you do not want the property mapping operator to change the property values outside of notifications emitted by the source sequence. For example, imagine a transform operator which is converting a source sequence from one format to another, where the format specification is given by a set of operator properties. You may need the target format to change dynamically from time to time, but you may also need to guarantee that parts of the format specification do not change while the operator was converting some other input. The InputMapping operator allows you to do this by synchronizing property updates with input notifications. Fundamentally, the InputMapping operator works exactly the same way as PropertyMapping , but now the connection from the mapping operator to its target node is done through the upstream sources. In this case, only values from the source sequence can be used to map properties in the target node. However, it is possible to specify which specific member of the original data source will be selected as input to the target node by setting the Selector property. Whenever the original input sequence sends out a new data item, all the specified property mappings will be updated at the same time before this item is finally allowed to go through and notify the target. In this way, you can be sure that no property changes are performed between upstream notifications."
  },
  "articles/reactive-accumulate.html": {
    "href": "articles/reactive-accumulate.html",
    "title": "Accumulate",
    "keywords": "The Accumulate operator returns the current value of the cumulative sum each time the source sequence emits a notification. The result sequence terminates successfully when the source sequence terminates successfully."
  },
  "articles/reactive-amb.html": {
    "href": "articles/reactive-amb.html",
    "title": "Amb",
    "keywords": "The Amb operator sets up a winner-take-all race condition between all source sequences. The first sequence to emit a notification will gain full control of the output, and all the other sequences will have their subscriptions immediatelly cancelled. Amb is most commonly used to ensure only one of many outcomes being evaluated in parallel is propagated."
  },
  "articles/reactive-average.html": {
    "href": "articles/reactive-average.html",
    "title": "Average",
    "keywords": "The Average operator collects all the values from the source sequence and emits a single floating-point number representing their arithmetic mean. The single result value is emitted only when the source sequence terminates successfully."
  },
  "articles/reactive-buffercount.html": {
    "href": "articles/reactive-buffercount.html",
    "title": "Buffer",
    "keywords": "BufferCount groups the notifications of the source sequence into chunks containing the number of elements specified in the Count property. The overlap between the elements in each chunk can be controlled using the Skip property. If no skip value is provided, the chunks will be strictly non-overlapping, with a new chunk beginning when the previous chunk ends. If the skip value is less than the specified number of elements, chunks will be overlapping, with a new buffer created every Skip notifications. Finally, if the skip value is greater than the specified number of elements, there will be a gap between each chunk where elements from the source sequence will be dropped."
  },
  "articles/reactive-buffertime.html": {
    "href": "articles/reactive-buffertime.html",
    "title": "BufferTime",
    "keywords": "The BufferTime operator groups the notifications of the source sequence into chunks, where each chunk contains the elements emitted during the specified TimeSpan . The overlap between the elements in each chunk can be controlled using the TimeShift property. If no TimeShift is provided, the chunks will be strictly non-overlapping, with a new chunk beginning when the previous chunk ends. If TimeShift is smaller than TimeSpan , chunks will be overlapping, with a new buffer created every TimeShift interval. Finally, if TimeShift is larger than TimeSpan , there will be a time gap between each chunk where elements from the source sequence may be dropped."
  },
  "articles/reactive-buffertrigger.html": {
    "href": "articles/reactive-buffertrigger.html",
    "title": "BufferTrigger",
    "keywords": "BufferTrigger groups the notifications of the source sequence into chunks, where the opening of each chunk is triggered by the notifications of the second sequence. The rules for closing each buffer can be specified using the Count and TimeSpan properties. If neither buffer count nor buffer time span are specified, chunks will be strictly non-overlapping, with the previous chunk being closed when a new chunk is created. In this case, and only this case, the first chunk is also created immediately at the start of the sequence. If the Count property or the TimeSpan property is specified, then a new chunk is created when the second sequence emits a notification, and it is automatically closed after either the specified number of elements is collected or the specified time span elapses. If a new chunk is created before the previous chunk is closed, then chunks will overlap, and any elements emitted during this period will be included in both buffers. If at any moment there is no open buffer, elements emitted from the source sequence will be dropped."
  },
  "articles/reactive-catch.html": {
    "href": "articles/reactive-catch.html",
    "title": "Catch",
    "keywords": "The Catch operator allows you to handle error notifications from a sequence by combining the output of multiple fallback sequences of the same type into a single sequence. Catch subscribes to the next sequence when the previous sequence produces an error, and emits all the values from that sequence until successful termination. If that sequence also terminates exceptionally, Catch then subscribes to the next sequence, and so forth. Each sequence is guaranteed to only start after the previous one terminates. The resulting sequence will terminate successfully when any of the source sequences has terminated successfully, or exceptionally when all sequences have terminated with an error."
  },
  "articles/reactive-combinelatest.html": {
    "href": "articles/reactive-combinelatest.html",
    "title": "CombineLatest",
    "keywords": "CombineLatest combines the values from each sequence which are closest in time. Whenever any of the source sequences emits a value (as long as all source sequences have emitted at least one value), CombineLatest takes the most recently emitted values from all other sequences and creates the combined result. CombineLatest will continue to emit values as long as at least one source sequence remains active (i.e. without terminating). CombineLatest can be useful to temporally correlate separate sources (e.g. frames from different cameras, or the closest frame to a key press). It can also be useful when combining a sequence containing a single reference value with a possibly infinite sequence of values to be associated with the reference (e.g. subtracting a background from every frame). Warning Because CombineLatest emits a combined value whenever any of the source sequences emits a new value, the number of values emitted by CombineLatest is approximately the sum of the number of values in each sequence. If you need to discard redundant values you can filter the output, e.g. using Sample to use one of the source sequences as a master driver. Higher-order operator CombineLatest also works as a higher-order operator, so it can take as input a sequence of observable sequences. In this case, it will subscribe to each of the source sequences and start collecting all the latest values from each sequence. As soon as the outer sequence terminates, it will start reactively combining the latest values whenever any sequence changes, just as in the case of using CombineLatest with a fixed number of inputs."
  },
  "articles/reactive-combinetimestamp.html": {
    "href": "articles/reactive-combinetimestamp.html",
    "title": "CombineTimestamp",
    "keywords": "CombineTimestamp is used primarily to create a sequence of Timestamped<T> values for downstream operators, when timestamps have been extracted from other sources. Alternatively, CombineTimestamp can be used to preserve the value of a timestamp during post-processing operations. In this case, even though the timestamped value may be transformed multiple times, we can keep the original acquisition timestamp in a branch and use the Zip operator followed by CombineTimestamp to carry the timestamp value forward."
  },
  "articles/reactive-concat.html": {
    "href": "articles/reactive-concat.html",
    "title": "Concat",
    "keywords": "The Concat operator allows you to combine the output of multiple sequences of the same type into a single sequence. Concat subscribes to each sequence in turn, emits all the values from that sequence until successful termination, and then subscribes to the next sequence. Each sequence is guaranteed to only start after the previous one terminates. The resulting sequence will terminate successfully when the last source sequence has terminated successfully, or exceptionally as soon as any sequence produces an error. Higher-order operator Concat also works as a higher-order operator, so it can take as input a sequence of observable sequences. In this case, it will subscribe to the first source sequence and start passing along all emitted values. As soon as that sequence terminates, it will subscribe to the next received sequence, either immediately if it arrived before termination of the first sequence, or as soon as a new observable sequence is emitted. The higher-order variant is useful to queue execution of long-running operations, for example to sequence logic states in a task, or merging video files in a folder sequentially into a single frame sequence."
  },
  "articles/reactive-condition.html": {
    "href": "articles/reactive-condition.html",
    "title": "Condition",
    "keywords": "The nested workflow specifying the condition must return a sequence of type Boolean . This nested sequence may be synchronous or asynchronous with respect to notifications from the source sequence. After each element is emitted by the source sequence, the latest value from the nested sequence is checked. If the value is true then the element will be accepted and emitted by the result sequence. Otherwise, the element will be dropped. As an example of asynchronous condition evaluation, it is possible to build a simple manual toggle by using a BooleanProperty connected directly to the output of the nested workflow:"
  },
  "articles/reactive-count.html": {
    "href": "articles/reactive-count.html",
    "title": "Count",
    "keywords": "The Count operator collects all the values from the source sequence and emits a single value representing the total number of items. The single result value is emitted only when the source sequence terminates successfully."
  },
  "articles/reactive-createobservable.html": {
    "href": "articles/reactive-createobservable.html",
    "title": "CreateObservable",
    "keywords": "For each notification in the source sequence, CreateObservable constructs a new instance of the asynchronous operation specified in the nested workflow and emits the operation exposed as an observable sequence. However, CreateObservable does not itself subscribe to the sequence, which means the logic inside the nested workflow will not run unless the emitted observables are subscribed downstream. Note You can manipulate and schedule each of the emitted observable sequences downstream using higher-order operators such as Merge , Concat or Switch . The input to the nested workflow represents the element passed as an argument to the asynchronous operation. If the input is itself an observable sequence, the WorkflowInput node will subscribe to all the values in the sequence when the asynchronous operation is finally launched. Otherwise, the input will emit a single value containing the stored argument value."
  },
  "articles/reactive-currentthreadscheduler.html": {
    "href": "articles/reactive-currentthreadscheduler.html",
    "title": "CurrentThreadScheduler",
    "keywords": "The CurrentThreadScheduler operator returns a singleton object that can be used to schedule units of work in the current thread. The action is placed in a queue rather than executing immediately, and will only be called after the current action is complete. Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions."
  },
  "articles/reactive-defaultscheduler.html": {
    "href": "articles/reactive-defaultscheduler.html",
    "title": "DefaultScheduler",
    "keywords": "Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions."
  },
  "articles/reactive-defer.html": {
    "href": "articles/reactive-defer.html",
    "title": "Defer",
    "keywords": "The Defer operator uses the nested workflow to specify the constructed sequence. All input sequences to the outer Defer node will be routed to the inner WorkflowInput nodes, and all notifications emitted by the inner WorkflowOutput node will be emitted by the outer Defer node. Multiple subscriptions can be active simultaneously, in which case the nested workflow will run multiple times and is considered to be reentrant."
  },
  "articles/reactive-delay.html": {
    "href": "articles/reactive-delay.html",
    "title": "Delay",
    "keywords": "The Delay operator modifies the source sequence by pausing for the specified duration before emitting each of the notifications in the original sequence. This has the effect of delaying the timing of the entire sequence of notifications by that specified time interval. Delay is useful to model delayed responses to events in a control task, but also to access past data from a continuous stream in the future. In other words, if the stream timing is delayed, then any downstream observers grabbing data in the present moment will be receiving notifications from the past. For example, if you are recording data aligned on a temporal trigger detected in real-time, you can record data before the trigger simply by triggering the delayed sequence."
  },
  "articles/reactive-delaysubscription.html": {
    "href": "articles/reactive-delaysubscription.html",
    "title": "DelaySubscription",
    "keywords": "The DelaySubscription operator modifies the source sequence by pausing for the specified duration before subscribing to the original sequence. This has the effect of delaying the start of the sequence by the specified time interval. DelaySubscription can be used to control the timing of initialization. Note that if a source is hot , delaying the start of the sequence will not preserve past data, since unlike Delay the DelaySubscription operator does not store or have access to any historical data."
  },
  "articles/reactive-dematerialize.html": {
    "href": "articles/reactive-dematerialize.html",
    "title": "Dematerialize",
    "keywords": "Dematerialize is the complement of Materialize . Dematerialize reconstructs the implicit notifications of an observable sequence from a sequence of explicit notifications. This can be useful if you have materialized a sequence for debugging or logging purposes but still need to retain the original sequence."
  },
  "articles/reactive-distinct.html": {
    "href": "articles/reactive-distinct.html",
    "title": "Distinct",
    "keywords": "The Distinct operator ensures that only unique elements are included in the result sequence. Uniqueness is specified by the default EqualityComparer<T> for the type of the elements in the source sequence. If multiple non-unique elements are present in the source sequence, only the first element will be included in the result sequence."
  },
  "articles/reactive-distinctby.html": {
    "href": "articles/reactive-distinctby.html",
    "title": "DistinctBy",
    "keywords": "The DistinctBy operator ensures that only unique elements are included in the result sequence. The KeySelector property specifies the member, or set of members, to use to test the uniqueness of each element in the source sequence. The default EqualityComparer<T> for the type of the selected key is used to check whether each key is unique. If multiple non-unique keys are present in the source sequence, only the first element emitted with a given key will be included in the result sequence."
  },
  "articles/reactive-distinctuntilchanged.html": {
    "href": "articles/reactive-distinctuntilchanged.html",
    "title": "DistinctUntilChanged",
    "keywords": "The DistinctUntilChanged operator removes all contiguous elements in the sequence that are equal. Equality is determined by the default EqualityComparer<T> for the type of the elements in the source sequence. In other words, after each element is emitted by the result sequence, subsequent elements will be dropped until the value changes."
  },
  "articles/reactive-distinctuntilchangedby.html": {
    "href": "articles/reactive-distinctuntilchangedby.html",
    "title": "DistinctUntilChangedBy",
    "keywords": "The DistinctUntilChangedBy operator removes all contiguous elements in the sequence with equal keys. The KeySelector property specifies the member, or set of members, used to test whether elements in the source sequence are equal. Equality is determined by the default EqualityComparer<T> for the type of the selected key. In other words, after each element is emitted by the result sequence, subsequent elements will be dropped until the value of the key changes."
  },
  "articles/reactive-elementindex.html": {
    "href": "articles/reactive-elementindex.html",
    "title": "ElementIndex",
    "keywords": "ElementIndex can be used to incrementally keep a tally of the number of elements in a sequence. It is also often used as the first step in custom index-dependent computations."
  },
  "articles/reactive-eventloopscheduler.html": {
    "href": "articles/reactive-eventloopscheduler.html",
    "title": "EventLoopScheduler",
    "keywords": "Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions. Important The scheduler object returned by EventLoopScheduler needs to be explicitly disposed. Assign the result of this operator to a ResourceSubject to ensure the dedicated scheduler thread is terminated at the end of the workflow."
  },
  "articles/reactive-first.html": {
    "href": "articles/reactive-first.html",
    "title": "First",
    "keywords": "If the sequence has no elements, First will terminate with an error. Tip If you are interested in finding the first element that meets some criteria, consider using the Condition operator before First . Warning There are subtle but important differences between using the First operator and Take(1) : When the source sequence has no elements, Take(1) will complete successfully, while First will throw an error. When the source sequence emits the first element, Take(1) will immediately cancel the subscription to the source sequence before emitting the notification. First , on the other hand, will emit the notification and only afterwards cancel the subscription to the source sequence."
  },
  "articles/reactive-firstordefault.html": {
    "href": "articles/reactive-firstordefault.html",
    "title": "FirstOrDefault",
    "keywords": "If the sequence has no elements, FirstOrDefault will emit a default value before terminating successfully. Tip If you are interested in finding the first element that meets some criteria, consider using the Condition operator before FirstOrDefault . Warning There are subtle but important differences between using the FirstOrDefault operator and Take(1) : When the source sequence has no elements, Take(1) will complete successfully with no emitted values, while FirstOrDefault will emit a default value before terminating successfully. When the source sequence emits the first element, Take(1) will immediately cancel the subscription to the source sequence before emitting the notification. FirstOrDefault , on the other hand, will emit the notification and only afterwards cancel the subscription to the source sequence."
  },
  "articles/reactive-gate.html": {
    "href": "articles/reactive-gate.html",
    "title": "Gate",
    "keywords": "When the gate is in the open state, a single element is allowed to pass through from the source sequence. After this first element is emitted, the gate closes and all subsequent elements are dropped from the result sequence. The gate reopens when the second sequence emits a notification. It is possible to specify how long the gate stays open by using the DueTime property. If no value is specified, the gate stays open indefinitely until an element arrives. In this case, the gate starts immediately in the open state. If a maximum due time is specified, no elements from the source sequence arriving after the due time elapses will be allowed through and the gate may close again without emitting any new elements. In this case, the gate starts in the closed state, and only opens when the second sequence emits a notification. Warning If the second sequence emits notifications before the gate is closed, the gate will remain open. If there is a maximum specified due time, the timer will be reset upon arrival of the new notification. Even if there are multiple opening notifications, only a single element can make it through the gate."
  },
  "articles/reactive-gateinterval.html": {
    "href": "articles/reactive-gateinterval.html",
    "title": "GateInterval",
    "keywords": "The gate starts in the open state, and a single element is allowed to pass through from the source sequence. After this first element is emitted, the gate closes and all subsequent elements are dropped from the result sequence. The gate reopens when the specified Interval elapses. It is possible to specify how long the gate stays open by using the DueTime property. If no value is specified, the gate stays open indefinitely until an element arrives. If a maximum due time is specified, then no elements from the source sequence arriving after the due time elapses will be allowed through until the gate reopens."
  },
  "articles/reactive-groupby.html": {
    "href": "articles/reactive-groupby.html",
    "title": "GroupBy",
    "keywords": "The GroupBy operator can be used to separate, or demultiplex, the elements from a single sequence into multiple sequences according to the specified KeySelector . Each element from the sequence will be routed to the correct group according to its key. Groups are created and emitted the first time that an element with a new distinct key value is received from the source sequence. Note You can manipulate and schedule each of the group sequences downstream using other higher-order operators such as Merge , Concat or Switch . The members used to generate the elements in each group sequence can be optionally specified using the ElementSelector property. If no element selector is specified, the original values from the source sequence will be used."
  },
  "articles/reactive-ignoreelements.html": {
    "href": "articles/reactive-ignoreelements.html",
    "title": "IgnoreElements",
    "keywords": "Tip This operator can sometimes be useful when only the type of the sequence is important, and not its elements. The compiler will still check the correct type of the sequence even if no elements are emitted."
  },
  "articles/reactive-immediatescheduler.html": {
    "href": "articles/reactive-immediatescheduler.html",
    "title": "ImmediateScheduler",
    "keywords": "The ImmediateScheduler operator returns a singleton object that can be used to schedule units of work to run immediately on the current thread. If there is a recurrent scheduling call downstream from the work unit, the scheduler may hang indefinitely. Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions."
  },
  "articles/reactive-isempty.html": {
    "href": "articles/reactive-isempty.html",
    "title": "IsEmpty",
    "keywords": "If the source sequence completes before returning any elements, the IsEmpty operator will emit a single value true before terminating successfully. If the source sequence emits any element, IsEmpty will immediately emit a single value false , terminate successfully, and cancel the subscription to the source sequence."
  },
  "articles/reactive-last.html": {
    "href": "articles/reactive-last.html",
    "title": "Last",
    "keywords": "If the sequence has no elements, Last will terminate with an error. This is a subtle but important difference between the Last operator and TakeLast(1) , which will complete successfully when the source sequence has no elements."
  },
  "articles/reactive-lastordefault.html": {
    "href": "articles/reactive-lastordefault.html",
    "title": "LastOrDefault",
    "keywords": "If the sequence has no elements, LastOrDefault will emit a default value before terminating successfully. This is a subtle but important difference between the LastOrDefault operator and TakeLast(1) , which will also complete successfully when the source sequence is empty, but will not emit any values. Tip LastOrDefault is one of the simplest and most efficient ways of capturing the end of an observable sequence explicitly as a notification in the workflow. You can use it to react to the termination of a sequence regardless of whether that sequence produces values."
  },
  "articles/reactive-lazyordering.html": {
    "href": "articles/reactive-lazyordering.html",
    "title": "LazyOrdering",
    "keywords": "Warning The ordered collections returned in the result sequence are lazy. The ordering is not really evaluated until the collection is enumerated by a downstream operator such as Merge ."
  },
  "articles/reactive-materialize.html": {
    "href": "articles/reactive-materialize.html",
    "title": "Materialize",
    "keywords": "Materialize surfaces all notifications in the source sequence as explicit values, including termination messages ( OnError and OnCompleted ). Converting termination messages into explicit notifications can be useful to reveal the entire behavior of a sequence for debugging or logging purposes. The application of Materialize can be reversed by applying Dematerialize to the result sequence."
  },
  "articles/reactive-max.html": {
    "href": "articles/reactive-max.html",
    "title": "Max",
    "keywords": "The Max operator collects all the values from the source sequence and emits a single value representing the largest of all values. The single result value is emitted only when the source sequence terminates successfully."
  },
  "articles/reactive-maxby.html": {
    "href": "articles/reactive-maxby.html",
    "title": "MaxBy",
    "keywords": "The MaxBy operator collects all the specified keys from values in the source sequence and emits a single value representing the value with the largest key. The single result value is emitted only when the source sequence terminates successfully."
  },
  "articles/reactive-merge.html": {
    "href": "articles/reactive-merge.html",
    "title": "Merge",
    "keywords": "The Merge operator allows you to combine the output of multiple sequences of the same type into a single sequence. Merge subscribes to all source sequences in parallel and emits all the elements from each sequence downstream. The resulting sequence will terminate successfully only when all source sequences have terminated successfully, or exceptionally as soon as any sequence produces an error. Higher-order operator Merge also works as a higher-order operator, so it can take as input a sequence of observable sequences. In this case, it will subscribe to all source sequences as soon as they are emitted by the outer sequence, and emit all elements from each sequence downstream. The higher-order variant is useful to combine notifications from multiple event sources running in parallel, for example when waiting for the first event from multiple input conditionals, or when logging data from multiple sources to the same file."
  },
  "articles/reactive-min.html": {
    "href": "articles/reactive-min.html",
    "title": "Min",
    "keywords": "The Min operator collects all the values from the source sequence and emits a single value representing the smallest of all values. The single result value is emitted only when the source sequence terminates successfully."
  },
  "articles/reactive-minby.html": {
    "href": "articles/reactive-minby.html",
    "title": "MinBy",
    "keywords": "The MinBy operator collects all the specified keys from values in the source sequence and emits a single value representing the value with the smallest key. The single result value is emitted only when the source sequence terminates successfully."
  },
  "articles/reactive-newthreadscheduler.html": {
    "href": "articles/reactive-newthreadscheduler.html",
    "title": "NewThreadScheduler",
    "keywords": "The NewThreadScheduler operator returns a singleton object that can be used to schedule each unit of work in a separate thread using default thread creation options. Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions."
  },
  "articles/reactive-observeon.html": {
    "href": "articles/reactive-observeon.html",
    "title": "ObserveOn",
    "keywords": "An observable sequence, and the chain of operators that are applied to it, will usually do its work and notify any downstream observers on the same thread that is used to run the source. The ObserveOn operator can be used to instruct a sequence to send notifications to its observers on a particular scheduler. ObserveOn will change the thread used to send notifications only for items emitted downstream from where the operator is introduced. Even if new tasks or threads are created to run notifications, the resulting sequence will keep the order of all emitted items. Warning Care must be taken to prevent unbounded accumulation of notifications when consumers following ObserveOn are slower than the rate at which the source produces new items. Reactive operators such as Gate or Slice may be used to manage any backpressure issues. Note that ObserveOn will forward any error notification from the source sequence immediately, without waiting for slow-consuming observers to receive previously emitted items. In other words, the error notification may jump ahead of items emitted earlier by the source sequence as in the diagram above."
  },
  "articles/reactive-onerrorresumenext.html": {
    "href": "articles/reactive-onerrorresumenext.html",
    "title": "OnErrorResumeNext",
    "keywords": "The OnErrorResumeNext operator allows you to combine the output of multiple sequences of the same type into a single sequence. OnErrorResumeNext subscribes to each sequence in turn, emits all the values from that sequence until termination, and then subscribes to the next sequence, even if the previous sequence has terminated with an error. Each sequence is guaranteed to only start after the previous one terminates. The resulting sequence will always terminate successfully when the last source sequence has terminated."
  },
  "articles/reactive-orderby.html": {
    "href": "articles/reactive-orderby.html",
    "title": "OrderBy",
    "keywords": "The OrderBy operator requires the elements in the source sequence to be collections implementing the IEnumerable<T> interface. For each collection emitted by the source sequence, the result sequence will emit an ordered collection where elements are sorted in ascending order of the keys specified in the KeySelector property. Warning The ordered collections returned in the result sequence are lazy. The ordering is not really evaluated until the collection is enumerated by a downstream operator such as Merge ."
  },
  "articles/reactive-orderbydescending.html": {
    "href": "articles/reactive-orderbydescending.html",
    "title": "OrderByDescending",
    "keywords": "The OrderByDescending operator requires the elements in the source sequence to be collections implementing the IEnumerable<T> interface. For each collection emitted by the source sequence, the result sequence will emit an ordered collection where elements are sorted in descending order of the keys specified in the KeySelector property. Warning The ordered collections returned in the result sequence are lazy. The ordering is not really evaluated until the collection is enumerated by a downstream operator such as Merge ."
  },
  "articles/reactive-range.html": {
    "href": "articles/reactive-range.html",
    "title": "Range",
    "keywords": "The entire sequence of numbers in the range is emitted immediately upon subscription. If another sequence is provided as an input to Range , the entire sequence of numbers will be emitted once for each notification in the source sequence."
  },
  "articles/reactive-repeat.html": {
    "href": "articles/reactive-repeat.html",
    "title": "Repeat",
    "keywords": "Repeat reacts to successful termination by disposing the previous subscription and resubscribing to the source sequence. Elements received from all of the subscriptions are forwarded to the result sequence. If any of the subscriptions terminates exceptionally, the result sequence will also terminate exceptionally, and no further resubscriptions will be made. Tip The subscription side-effects (e.g. opening a file, initializing hardware connections) of all upstream operators will be repeated upon termination and resubscription to the source sequence. Sometimes this may be undesirable. For example logging side-effects introduced by Sink nodes may create extra files on each subscription. To shield operators from these effects, consider moving affected operators downstream from the resubscription operator, or moving the resubscription operator itself further upstream. Caution All resubscription operators should be applied with care to anonymous branch points in the workflow, since dangling branches operate independently from each other, and from the subscription to the source sequence. For more details, see Subjects ."
  },
  "articles/reactive-repeatcount.html": {
    "href": "articles/reactive-repeatcount.html",
    "title": "RepeatCount",
    "keywords": "RepeatCount reacts to successful termination by disposing the previous subscription and resubscribing to the source sequence, up to the maximum number of times specified in the Count property. Value notifications received from all of the subscriptions are forwarded to the result sequence. After the source sequence completes successfully the specified number of times, the result sequence will also terminate successfully. If any of the subscriptions terminates exceptionally, the result sequence will also terminate exceptionally, and no further resubscriptions will be made. Tip The subscription side-effects (e.g. opening a file, initializing hardware connections) of all upstream operators will be repeated upon termination and resubscription to the source sequence. Sometimes this may be undesirable. For example logging side-effects introduced by Sink nodes may create extra files on each subscription. To shield operators from these effects, consider moving affected operators downstream from the resubscription operator, or moving the resubscription operator itself further upstream. Caution All resubscription operators should be applied with care to anonymous branch points in the workflow, since dangling branches operate independently from each other, and from the subscription to the source sequence. For more details, see Subjects ."
  },
  "articles/reactive-resubscription.html": {
    "href": "articles/reactive-resubscription.html",
    "title": "",
    "keywords": "Tip The subscription side-effects (e.g. opening a file, initializing hardware connections) of all upstream operators will be repeated upon termination and resubscription to the source sequence. Sometimes this may be undesirable. For example logging side-effects introduced by Sink nodes may create extra files on each subscription. To shield operators from these effects, consider moving affected operators downstream from the resubscription operator, or moving the resubscription operator itself further upstream. Caution All resubscription operators should be applied with care to anonymous branch points in the workflow, since dangling branches operate independently from each other, and from the subscription to the source sequence. For more details, see Subjects ."
  },
  "articles/reactive-retry.html": {
    "href": "articles/reactive-retry.html",
    "title": "Retry",
    "keywords": "Retry reacts to exceptional termination by disposing the previous subscription and resubscribing to the source sequence. Elements received from all of the subscriptions are forwarded to the result sequence. If any of the subscriptions completes successfully, the result sequence will also complete, and no further resubscriptions will be made. Tip The subscription side-effects (e.g. opening a file, initializing hardware connections) of all upstream operators will be repeated upon termination and resubscription to the source sequence. Sometimes this may be undesirable. For example logging side-effects introduced by Sink nodes may create extra files on each subscription. To shield operators from these effects, consider moving affected operators downstream from the resubscription operator, or moving the resubscription operator itself further upstream. Caution All resubscription operators should be applied with care to anonymous branch points in the workflow, since dangling branches operate independently from each other, and from the subscription to the source sequence. For more details, see Subjects ."
  },
  "articles/reactive-retrycount.html": {
    "href": "articles/reactive-retrycount.html",
    "title": "RetryCount",
    "keywords": "RetryCount reacts to exceptional termination by disposing the previous subscription and resubscribing to the source sequence, up to the maximum number of times specified in the Count property. Value notifications received from all of the subscriptions are forwarded to the result sequence. After the source sequence terminates exceptionally the specified maximum number of times, the result sequence will also terminate exceptionally. If any of the subscriptions completes successfully, the result sequence will also complete, and no further resubscriptions will be made. Tip The subscription side-effects (e.g. opening a file, initializing hardware connections) of all upstream operators will be repeated upon termination and resubscription to the source sequence. Sometimes this may be undesirable. For example logging side-effects introduced by Sink nodes may create extra files on each subscription. To shield operators from these effects, consider moving affected operators downstream from the resubscription operator, or moving the resubscription operator itself further upstream. Caution All resubscription operators should be applied with care to anonymous branch points in the workflow, since dangling branches operate independently from each other, and from the subscription to the source sequence. For more details, see Subjects ."
  },
  "articles/reactive-sample.html": {
    "href": "articles/reactive-sample.html",
    "title": "Sample",
    "keywords": "Sample always emits the most recent element received from the source sequence. If multiple elements are received between sampling events, all but the latest element will be dropped from the result sequence. Conversely, elements are never repeated: if no new elements are received between two sampling events, no notifications will be emitted. Note If the sampler sequence completes successfully, the termination event will be used to sample the latest element from the source sequence, if it exists."
  },
  "articles/reactive-sampleinterval.html": {
    "href": "articles/reactive-sampleinterval.html",
    "title": "SampleInterval",
    "keywords": "If multiple elements are received during each sampling period, SampleInterval will emit only the latest value. However, elements are never repeated: if no new elements are received between two sampling events, no notification will be emitted when the sampling period elapses."
  },
  "articles/reactive-scan.html": {
    "href": "articles/reactive-scan.html",
    "title": "Scan",
    "keywords": "The nested workflow specifying the accumulation function must return a sequence of the same type as the accumulator. The type of the accumulator is specified by the seed sequence, if an explicit seed sequence is provided as a second input. Otherwise, the accumulator will be of the same type as the elements in the source sequence, and will be initialized to the first element. When a new element is received from the source sequence, it is paired with the current value in the accumulator and passed as an input notification to the nested workflow. Values emitted by the nested sequence will update the state of the accumulator. Warning The nested sequence may be synchronous or asynchronous with respect to notifications from the source sequence. However, it is strongly recommended that computation of the accumulation function is performed synchronously to ensure a correspondence between the notifications received from the source sequence and the cumulative values emitted by the result sequence."
  },
  "articles/reactive-schedulers.html": {
    "href": "articles/reactive-schedulers.html",
    "title": "Schedulers",
    "keywords": "Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions."
  },
  "articles/reactive-selectmany.html": {
    "href": "articles/reactive-selectmany.html",
    "title": "SelectMany",
    "keywords": "For each notification in the source sequence, SelectMany constructs and subscribes to the results of an asynchronous operation specified in the nested workflow. If multiple asynchronous operations are launched simultaneously, SelectMany will merge all the results into a single sequence. The input to the nested workflow represents the element passed as an argument to the asynchronous operation. If the input is itself an observable sequence, the WorkflowInput node will subscribe to all the values in the sequence when the asynchronous operation is launched. Otherwise, the input will emit a single value containing the stored argument value. Tip SelectMany is one of the most versatile reactive operators and can be used as a primitive building block on which to build a large number of more complex reactive operators, including reactive state machines. See the State Machines tutorial for examples."
  },
  "articles/reactive-sequenceequal.html": {
    "href": "articles/reactive-sequenceequal.html",
    "title": "SequenceEqual",
    "keywords": "SequenceEqual will return false as soon as one of the sequences emits an element with a different value or in a different order from the other sequences, or if one of the sequences terminates early. If all notifications are equal, SequenceEqual will return true when all sequences terminate successfully."
  },
  "articles/reactive-sink.html": {
    "href": "articles/reactive-sink.html",
    "title": "Sink",
    "keywords": "The Sink operator uses the nested workflow to specify a reactive operation over the elements of the source sequence. Sink emits all values from the source sequence directly without modification, and the nested sequence is subscribed to purely for its side-effects. All notifications emitted by the inner WorkflowOutput node are ignored. Tip Sink operators are very useful to prevent side-effects from affecting the source sequence. Even if the inner sequence terminates early, or changes the timing of emitted values, these effects will not propagate to the outer sequence. Warning If the source sequence terminates, the subscription to the nested sequence will be cancelled. If the reactive operation needs to be fully asynchronous and decoupled from the main sequence, consider using Subjects to process items in a separate branch of the workflow."
  },
  "articles/reactive-skip.html": {
    "href": "articles/reactive-skip.html",
    "title": "Skip",
    "keywords": "The Skip operator modifies the source sequence to remove the specified number of elements from the start of the sequence. After the maximum number of elements is received, Skip will then emit the remaining elements in the sequence. Skip can be used to ignore unstable values from the start of a dynamic time series, e.g. to remove the auto-exposure adaptation start of a camera capture sequence. If the source sequence terminates before the specified number of elements is received, Skip will terminate without emitting any values."
  },
  "articles/reactive-skiplast.html": {
    "href": "articles/reactive-skiplast.html",
    "title": "SkipLast",
    "keywords": "The SkipLast operator modifies the source sequence to remove the specified number of elements from the end of the sequence. Because SkipLast does not know beforehand which values are the last, it will not emit any notifications until at least the specified number of subsequent elements is received. This means that SkipLast has the practical effect of delaying notifications from the source sequence by the specified number of values to skip. Tip SkipLast can often be used when you need to impose a delay in the source sequence using number of elements, rather than a time interval."
  },
  "articles/reactive-skipuntil.html": {
    "href": "articles/reactive-skipuntil.html",
    "title": "SkipUntil",
    "keywords": "SkipUntil modifies the source sequence so that all elements are ignored until the second sequence produces a notification. At that time, SkipUntil will start emitting all remaining elements from the source sequence. SkipUntil is often used to create a dynamic start condition for an infinite sequence, e.g. start grabbing frames from a video camera when a key is pressed. If the source sequence terminates before the second sequence produces a value, SkipUntil will terminate without emitting any elements. Warning SubscribeWhen is a similar operator which is often used to control the start of a sequence. Although often both SubscribeWhen and SkipUntil result in a similar sequence, SkipUntil will always immediately subscribe to the source sequence. This means that any initialization side-effects will be evaluated immediately. For hot sequences (e.g. camera) this might be advantageous, since any initialization costs are paid upfront, and new values are immediately ready to be consumed after the trigger. However, for cold sequences (e.g. video) this might lead to loss of data from the start of the sequence. For more about the difference between hot and cold sequences, see the section on temperature ."
  },
  "articles/reactive-skipwhile.html": {
    "href": "articles/reactive-skipwhile.html",
    "title": "SkipWhile",
    "keywords": "The nested workflow specifying the condition must return a sequence of type Boolean . This nested sequence may be synchronous or asynchronous with respect to notifications from the source sequence. After each element is emitted by the source sequence, the latest value from the nested sequence is checked. While the value is true , elements will continue to be dropped from the result sequence. When the value changes to false , SkipWhile will start emitting all elements from the source sequence. If the source sequence terminates before the nested workflow returns false , SkipWhile will terminate without emitting any values."
  },
  "articles/reactive-slice.html": {
    "href": "articles/reactive-slice.html",
    "title": "Slice",
    "keywords": "The Slice operator specifies an index-based filter over elements of the source sequence. Elements from the source sequence are accepted if their index is: greater than or equal to Start ; less than Stop , or the stop index property is not specified; not set to be skipped by the Step property. Warning If the index of elements in the source sequence becomes greater than or equal to Stop , then Slice will terminate successfully and cancel the subscription to the source sequence."
  },
  "articles/reactive-subscribeon.html": {
    "href": "articles/reactive-subscribeon.html",
    "title": "SubscribeOn",
    "keywords": "An observable sequence, and the chain of operators that are applied to it, will often do its work and notify any downstream observers on the same thread on which the subscribe action is called. The SubscribeOn operator changes this behavior by specifying a different scheduler for the subscribe (and unsubscribe) action. As shown in the diagram, the SubscribeOn operator can affect the ultimate source of notifications, no matter where in the chain of operators it is placed, as it changes the thread for the entire upstream subscribe call. By contrast, the ObserveOn operator changes only the scheduler on which notifications are sent, which affects only downstream operators. Warning Hot observable sources such as hardware devices often impose their own execution schedulers, e.g. by hooking notifications to device driver callbacks or interrupts. In these situations it is usually more appropriate to control concurrency using the ObserveOn operator."
  },
  "articles/reactive-subscribewhen.html": {
    "href": "articles/reactive-subscribewhen.html",
    "title": "SubscribeWhen",
    "keywords": "The SubscribeWhen operator modifies the source sequence by waiting for the first value emitted by the second sequence before subscribing to the first sequence. This has the effect of delaying the start of the sequence until the second sequence emits a value. SubscribeWhen can be used to control the timing of initialization. Note that if a source is hot , delaying the start of the sequence will not preserve past data."
  },
  "articles/reactive-sum.html": {
    "href": "articles/reactive-sum.html",
    "title": "Sum",
    "keywords": "The Sum operator collects all the numbers from the source sequence and emits a single value representing the sum of all numbers. The single result value is emitted only when the source sequence terminates successfully."
  },
  "articles/reactive-switch.html": {
    "href": "articles/reactive-switch.html",
    "title": "Switch",
    "keywords": "Switch is a higher-order operator, so it takes as input a sequence of observable sequences. At any moment Switch is subscribed exclusively to the latest source sequence. As soon as a new sequence is emitted by the outer observable, it cancels subscription to the previous sequence and subscribes to the new sequence. The resulting sequence will terminate successfully when the outer sequence has terminated successfully, and the currently active sequence (if any) also terminates successfully. It will terminate exceptionally if any of the sequences produces an error. Switch is useful to model interruptible states, for example when transitioning between different modes of a state-machine, or switching between different video channels on demand."
  },
  "articles/reactive-synchronize.html": {
    "href": "articles/reactive-synchronize.html",
    "title": "Synchronize",
    "keywords": "Caution This operator is only used to patch problems in custom implementations of observable sequences that breach the observable contract by emitting notifications concurrently with previous notifications. In almost all situations you should never use this operator."
  },
  "articles/reactive-take.html": {
    "href": "articles/reactive-take.html",
    "title": "Take",
    "keywords": "The Take operator modifies the source sequence to emit only the specified maximum number of values from the start of the sequence. If the maximum number of values is reached, Take will terminate immediately and ignore the remainder of the sequence. Take is commonly used to convert an infinite sequence into a finite sequence, for example to take the first key press out of an infinite sequence of keyboard key presses. Take only specifies a maximum upper bound on the number of elements. If the source sequence terminates before that maximum number of values is reached, the behavior of the sequence will not be modified."
  },
  "articles/reactive-takelast.html": {
    "href": "articles/reactive-takelast.html",
    "title": "TakeLast",
    "keywords": "The TakeLast operator modifies the source sequence to emit only a specified maximum number of values from the end of the sequence. Since TakeLast does not know which elements are the last before the original sequence terminates, it will not emit any value until the completion event is emitted, but will instead keep in memory the specified number of \"latest\" values. At the time when the source sequence terminates, TakeLast will immediately emit all buffered values up to the specified maximum number of elements and then terminate. Because of this buffering behavior, TakeLast will always modify the behavior of the original sequence, regardless of how many values it contains."
  },
  "articles/reactive-takeuntil.html": {
    "href": "articles/reactive-takeuntil.html",
    "title": "TakeUntil",
    "keywords": "TakeUntil modifies the source sequence so that values are emitted only until the second sequence produces a value. At that time, TakeUntil will terminate immediately and ignore the remainder of the sequence. TakeUntil is often used to create a dynamic stop condition for an infinite sequence, e.g. grab frames from a video camera until a key is pressed. If the source sequence terminates before the second sequence produces a value, TakeUntil will also terminate and cancel the subscription to the second sequence."
  },
  "articles/reactive-takewhile.html": {
    "href": "articles/reactive-takewhile.html",
    "title": "TakeWhile",
    "keywords": "The nested workflow specifying the condition must return a sequence of type Boolean . This nested sequence may be synchronous or asynchronous with respect to notifications from the source sequence. After each element is emitted by the source sequence, the latest value from the nested sequence is checked. While the value is true , TakeWhile will continue to emit all elements from the source sequence. When the value changes to false , TakeWhile will terminate successfully."
  },
  "articles/reactive-taskpoolscheduler.html": {
    "href": "articles/reactive-taskpoolscheduler.html",
    "title": "TaskPoolScheduler",
    "keywords": "Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions."
  },
  "articles/reactive-thenby.html": {
    "href": "articles/reactive-thenby.html",
    "title": "ThenBy",
    "keywords": "ThenBy operates on sequences returned by any of the OrderBy , OrderByDescending , ThenBy , or ThenByDescending operators. For each ordered collection emitted by the source sequence, the result sequence will emit a new ordered collection where elements in the collection are subsequently sorted in ascending order of the keys specified in the KeySelector property. Warning The ordered collections returned in the result sequence are lazy. The ordering is not really evaluated until the collection is enumerated by a downstream operator such as Merge ."
  },
  "articles/reactive-thenbydescending.html": {
    "href": "articles/reactive-thenbydescending.html",
    "title": "ThenByDescending",
    "keywords": "ThenByDescending operates on sequences returned by any of the OrderBy , OrderByDescending , ThenBy , or ThenByDescending operators. For each ordered collection emitted by the source sequence, the result sequence will emit a new ordered collection where elements in the collection are subsequently sorted in descending order of the keys specified in the KeySelector property. Warning The ordered collections returned in the result sequence are lazy. The ordering is not really evaluated until the collection is enumerated by a downstream operator such as Merge ."
  },
  "articles/reactive-threadpoolscheduler.html": {
    "href": "articles/reactive-threadpoolscheduler.html",
    "title": "ThreadPoolScheduler",
    "keywords": "Warning Scheduler operators are used only to return an instance of the corresponding scheduler object. They need to be combined with the ObserveOn or SubscribeOn operators to actually schedule actions."
  },
  "articles/reactive-throttle.html": {
    "href": "articles/reactive-throttle.html",
    "title": "Throttle",
    "keywords": "The Throttle operator provides a mechanism to control backpressure in reactive streams. Throttle emits an element from the source sequence only if that element is followed by a period of silence longer than DueTime . If new elements are received during this period, the previous element is dropped and the silent period timer is reset. Warning Any elements emitted by Throttle will necessarily be delayed by DueTime , since the only way to test that an element is followed by a period of silence is to wait out the period."
  },
  "articles/reactive-timeinterval.html": {
    "href": "articles/reactive-timeinterval.html",
    "title": "TimeInterval",
    "keywords": "For each element in the source sequence, TimeInterval measures the time elapsed between the arrival of that element and the previous element. Time zero is the start of the sequence (i.e. the moment of subscription)."
  },
  "articles/reactive-timeout.html": {
    "href": "articles/reactive-timeout.html",
    "title": "Timeout",
    "keywords": "Time zero is the start of the sequence (i.e. the moment of subscription). If a new notification arrives before a timeout is reached, the clock is reset."
  },
  "articles/reactive-timer.html": {
    "href": "articles/reactive-timer.html",
    "title": "Timer",
    "keywords": "Timer can either generate a single value, if Period is not specified, or an infinite sequence of values emitted periodically. The first value of Timer is emitted after the specified DueTime . Warning The value of the DueTime and Period properties cannot be modified after the observable sequence has initialized. If dynamic configuration is necessary, make sure that all properties are immediately configured using property mapping operators."
  },
  "articles/reactive-timestamp.html": {
    "href": "articles/reactive-timestamp.html",
    "title": "Timestamp",
    "keywords": "Timestamps are specified relative to Coordinated Universal Time (UTC) using DateTimeOffset values, and are recorded as soon as element notifications are received from the source sequence. Warning By default, timestamps are logged using the highest-resolution performance counter available in the system. The clock is synchronized with system time for events ocurring within the same process, including across different threads. However, timestamps are not guaranteed to be synchronized across different processes. Caution Time recorded using the Timestamp operator does not take into account any hardware or communication latency associated with data acquisition processes. If your application requires high-precision timing of data acquisition events, consider logging any available hardware timestamps included in the data, if available."
  },
  "articles/reactive-toarray.html": {
    "href": "articles/reactive-toarray.html",
    "title": "ToArray",
    "keywords": "ToArray emits a single array of the same type as the type of the elements in the source sequence. The array is emitted when the source sequence completes successfully. Warning If the source sequence is infinite (i.e. does not terminate), this operator will never emit the collection, and will keep accumulating all elements from the source sequence indefinitely, with likely impacts on available memory."
  },
  "articles/reactive-tocollection.html": {
    "href": "articles/reactive-tocollection.html",
    "title": "",
    "keywords": "Warning If the source sequence is infinite (i.e. does not terminate), this operator will never emit the collection, and will keep accumulating all elements from the source sequence indefinitely, with likely impacts on available memory."
  },
  "articles/reactive-todictionary.html": {
    "href": "articles/reactive-todictionary.html",
    "title": "ToDictionary",
    "keywords": "ToDictionary collects all the values from the source sequence and creates a dictionary mapping keys to elements using the specified KeySelector and ElementSelector properties. The dictionary is emitted when the source sequence completes successfully, and will have key and element types matching the selected members. Warning If the source sequence emits a value with a duplicate key, an error will be raised and the sequence will terminate exceptionally. Warning If the source sequence is infinite (i.e. does not terminate), this operator will never emit the collection, and will keep accumulating all elements from the source sequence indefinitely, with likely impacts on available memory."
  },
  "articles/reactive-tolist.html": {
    "href": "articles/reactive-tolist.html",
    "title": "ToList",
    "keywords": "ToList emits a single list of the same type as the type of the elements in the source sequence. The list is emitted when the source sequence completes successfully. Warning If the source sequence is infinite (i.e. does not terminate), this operator will never emit the collection, and will keep accumulating all elements from the source sequence indefinitely, with likely impacts on available memory."
  },
  "articles/reactive-tolookup.html": {
    "href": "articles/reactive-tolookup.html",
    "title": "ToLookup",
    "keywords": "ToLookup collects all the values from the source sequence and creates a mapping from keys to a set of elements using the specified KeySelector and ElementSelector properties. The lookup is emitted when the source sequence completes successfully, and will have key and element types matching the selected members. Note A lookup allows multiple values to be grouped under the same key. Warning If the source sequence is infinite (i.e. does not terminate), this operator will never emit the collection, and will keep accumulating all elements from the source sequence indefinitely, with likely impacts on available memory."
  },
  "articles/reactive-visualizer.html": {
    "href": "articles/reactive-visualizer.html",
    "title": "Visualizer",
    "keywords": "The Visualizer operator is a Sink which uses the nested workflow to specify a reactive visualizer function over the elements of the source sequence. Visualizer emits all values from the source sequence directly without modification, and the nested sequence is subscribed to purely for its side-effects. Note All notifications emitted by the inner WorkflowOutput node are ignored. However, the type visualizer assigned to the nested workflow output will be considered as the default visualizer of the outer node."
  },
  "articles/reactive-window.html": {
    "href": "articles/reactive-window.html",
    "title": "Window",
    "keywords": "The Window operator groups the notifications of the source sequence into new observable sequences. The opening of each window is triggered by notifications emitted by the second sequence passed to the Window node. The nested workflow operation is launched for every new emitted window, and closes that window when a value is emitted. If a new window is created before the previous window is closed, then window will overlap, and any elements emitted during this period will be included in both windows. If at any moment there is no open window, elements emitted from the source sequence will be dropped. Note You can manipulate and schedule each of the windows downstream using other higher-order operators such as Merge , Concat or Switch ."
  },
  "articles/reactive-windowcount.html": {
    "href": "articles/reactive-windowcount.html",
    "title": "WindowCount",
    "keywords": "WindowCount groups the notifications of the source sequence into new observable sequences containing the number of elements specified in the Count property. The overlap between the elements in each window can be controlled using the Skip property. If no skip value is provided, the windows will be strictly non-overlapping, with a new window beginning when the previous window ends. If the skip value is less than the specified number of elements, windows will be overlapping, with a new window created every Skip notifications. Finally, if the skip value is greater than the specified number of elements, there will be a gap between each window where elements from the source sequence will be dropped. Note You can manipulate and schedule each of the windows downstream using other higher-order operators such as Merge , Concat or Switch ."
  },
  "articles/reactive-windowtime.html": {
    "href": "articles/reactive-windowtime.html",
    "title": "WindowTime",
    "keywords": "The WindowTime operator groups the notifications of the source sequence into new observable sequences, where each window contains the elements emitted during the specified TimeSpan . The overlap between the elements in each window can be controlled using the TimeShift property. If no TimeShift is provided, the windows will be strictly non-overlapping, with a new window beginning when the previous window ends. If TimeShift is smaller than TimeSpan , windows will be overlapping, with a new buffer created every TimeShift interval. Finally, if TimeShift is larger than TimeSpan , there will be a time gap between each window where elements from the source sequence may be dropped. Note You can manipulate and schedule each of the windows downstream using other higher-order operators such as Merge , Concat or Switch ."
  },
  "articles/reactive-windowtrigger.html": {
    "href": "articles/reactive-windowtrigger.html",
    "title": "WindowTrigger",
    "keywords": "WindowTrigger groups the notifications of the source sequence into new observable sequences, where the opening of each window is triggered by the notifications of the second sequence. The rules for closing each window can be specified using the Count and TimeSpan properties. If neither count nor time span are specified, windows will be strictly non-overlapping, with the previous window being closed when a new window is created. In this case, and only this case, the first window is also created immediately at the start of the sequence. If the Count property or the TimeSpan property is specified, then a new window is created when the second sequence emits a notification, and it is automatically closed after either the specified number of elements is collected or the specified time span elapses. If a new window is created before the previous window is closed, then window will overlap, and any elements emitted during this period will be included in both windows. If at any moment there is no open window, elements emitted from the source sequence will be dropped. Note You can manipulate and schedule each of the windows downstream using other higher-order operators such as Merge , Concat or Switch ."
  },
  "articles/reactive-withlatestfrom.html": {
    "href": "articles/reactive-withlatestfrom.html",
    "title": "WithLatestFrom",
    "keywords": "The behavior of WithLatestFrom is very similar to CombineLatest , but while CombineLatest emits a combined value whenever any of the source sequences emits a value, WithLatestFrom only emits the combination when the first sequence emits a value (as long as the second sequence has emitted at least one value)."
  },
  "articles/reactive-zip.html": {
    "href": "articles/reactive-zip.html",
    "title": "Zip",
    "keywords": "Zip combines the items from each sequence in strict sequential order. It will combine the first item emitted by sequence #1 with the first item emitted by sequence #2; then the second item emitted by sequence #1 with the second item emitted by sequence #2, and so forth, regardless of the timing of arrival of the values. It will only emit as many values as the number of values in the shortest sequence. Zip can be useful to combine separate processing branches from a single source into a composite result, or when pairing events which are logically related even though they might arrive far apart in time, e.g. request/response pairs from a server, or pairing camera frames with frame trigger event onsets. Warning Zip will continuously store unpaired values from all source sequences, with no limit to the buffer size. This means that if one source sequence produces a much larger number of values than the other sequences, memory usage will continue to grow unbounded. In general, Zip should be used only when there is a known fixed relationship between number of elements in each of the source sequences. Higher-order operator Zip also works as a higher-order operator, so it can take as input a sequence of observable sequences. In this case, it will subscribe to each of the source sequences and start collecting all emitted values from each sequence. As soon as the outer sequence terminates, it will start reactively combining values in sequential order, just as in the case of using Zip with a fixed number of inputs. The higher-order variant can be useful occasionally, for example when combining frames from an unknown number of videos in a folder, but should be used with care and awareness that reactive pairing only starts after the outer sequence terminates, which means its use should be avoided with infinite sequences."
  },
  "articles/scripting-extensions.html": {
    "href": "articles/scripting-extensions.html",
    "title": "Scripting Extensions",
    "keywords": "Scripting Extensions Local extensions can be used to augment the functionality of workflows with new operators scripted directly using the C# programming language. This gives you the ability to tap into the entire .NET ecosystem without requiring a more formal C# project, as the Bonsai bootstrapper will automatically compile the scripts from source each time the workflow is loaded. Scripting extensions are more commonly used to develop small project-specific functionality, but can also be easily shared with others by simply copying individual scripts. Tip If you are interested in developing extensions to be reused across several different projects, consider creating a package instead. Pre-requisites .NET 6.0 SDK . Visual Studio Code . C# extension for Visual Studio Code . .NET Framework 4.7.2 Developer Pack . Warning You might need to reboot your machine after installing these components. Creating a local extension From the Bonsai editor, either open an existing workflow, or create and save a new workflow. Add a new CSharpSource operator from the Toolbox . Double-click on the scripting node. A dialog should be displayed asking whether you want to create the Extensions folder. Click Yes to proceed and give a name to your new scripting operator. If the above pre-requisites have been installed, Visual Studio Code should then be launched automatically. After Visual Studio Code opens, a notification should appear on the lower-right corner with a warning about unresolved dependencies. Click the Restore button to finish configuring the extensions project. You can now go ahead and modify your local extension script. Note If the notification disappears before you have a chance to click Restore , you can bring back the notification by clicking the small blue bell icon on the lower-right corner of Visual Studio Code. Every Bonsai operator specifies an observable sequence using the IObservable<T> interface. The System.Reactive package provides a comprehensive library of methods used to generate and manipulate observable sequences in C#. The simplest way to implement new operators is by using the methods in the Observable class. As an example, the expression below will generate a simple periodic sinewave by applying the projection operator Select to the incremental counter sequence generated by a Timer . [Combinator] [Description(\"\")] [WorkflowElementCategory(ElementCategory.Source)] public class SourceScript { public IObservable<double> Process() { return Observable .Timer( dueTime: TimeSpan.Zero, period: TimeSpan.FromSeconds(0.5)) .Select(counter => Math.Sin(counter)); } } After you are satisfied with your script extension, save the script file and switch back to the Bonsai editor. Save the workflow and select Reload Extensions from the Tools menu. All scripts will now be compiled and loaded every time the workflow is opened. Warning Any errors found while compiling the C# scripts will be logged to the black terminal window when the editor reloads. Make sure to check for any messages if you cannot use the scripting operators after reloading extensions. Be aware that scripting extensions in Bonsai currently use the built-in .NET Framework compiler which only allows for language features up to C# 5. Adding dependencies to a local extension If you need to access external libraries when writing your scripting extensions, you can add new PackageReference items in the Extensions.csproj file. For example, to add OpenCV.NET as a dependency to your project extensions: <Project Sdk=\"Microsoft.NET.Sdk\"> <PropertyGroup> <TargetFramework>net472</TargetFramework> </PropertyGroup> <ItemGroup> <PackageReference Include=\"Bonsai.Core\" Version=\"2.7.1\" /> <PackageReference Include=\"OpenCV.Net\" Version=\"3.4.1\" /> </ItemGroup> </Project> Warning Make sure all package references are also installed in the Bonsai package manager. Otherwise, your scripting extensions may fail to compile successfully. Debugging a local extension It is possible to debug a local extension project. However, you will have to use the Visual Studio debugger, as it is currently not possible to debug Bonsai extensions using Visual Studio Code. To enable debugging, select Reload Extensions with Debugging from the Tools menu. This will recompile the extensions project with debugging symbols enabled. From within Visual Studio, select the option Attach to Process from the Debug menu and find the Bonsai editor process from the list of active processes. After attaching to the process, you should be able to open or drag into the editor any local script file and place breakpoints or inspect local variables, as if you were running a standard C# project."
  },
  "articles/subject-async.html": {
    "href": "articles/subject-async.html",
    "title": "AsyncSubject",
    "keywords": "AsyncSubject stores and passes the last value (and only the last value) emitted by the source sequence to each subscribed observer. The value is also only sent out after the source sequence terminates. If the source sequence does not emit any value, AsyncSubject will also terminate without emitting any values. Tip You can use the Take operator before AsyncSubject to store the first value from an infinite sequence. Any observers which subscribe after the source sequence terminates will immediately receive the stored value. If the source sequence terminates with an error, AsyncSubject will not emit any values but will pass along the error notification to all observers."
  },
  "articles/subject-behavior.html": {
    "href": "articles/subject-behavior.html",
    "title": "BehaviorSubject",
    "keywords": "BehaviorSubject stores and passes the latest value emitted by the source sequence to each subscribed observer, and then continues to emit any subsequent values. Any observers which subscribe later will immediately receive the latest stored value. However, if the source sequence terminates with an error, BehaviorSubject will not emit any values but will pass along the error notification to all subsequent observers. Warning BehaviorSubject is designed to multicast and share state updates from multiple sources, like a global variable. Because of this, even if one of the source sequences emitting values to BehaviorSubject terminates successfully, the BehaviorSubject will not send a termination message to any subscribed observers, but will remain active until the enclosing workflow scope is terminated to allow other sources to update the shared state."
  },
  "articles/subject-multicast.html": {
    "href": "articles/subject-multicast.html",
    "title": "MulticastSubject",
    "keywords": "The MulticastSubject operator works like a sink which accesses the subject with the specified name, at the same scope level or above, and forwards any values emitted by the source sequence to the shared subject. Depending on the behavior of the subject, these values will then be passed to any operators subscribed to the subject, including any termination and error notifications."
  },
  "articles/subject-publish.html": {
    "href": "articles/subject-publish.html",
    "title": "PublishSubject",
    "keywords": "PublishSubject passes to each subscribed observer only the values from the source sequence which were emitted after the time of subscription. This fire-and-forget behavior means that any observers which subscribe late might lose one or more items emitted between the time that PublishSubject was created and the time that the observer subscribed to it. If you require guaranteed delivery of all values from the source sequence, you need to ensure that all observers subscribe immediately upon workflow initialization. If this is not possible, you should consider switching to an AsyncSubject if the sequence contains a single value, or a ReplaySubject if the sequence contains multiple values. If the source sequence terminates with an error, PublishSubject will not emit any items to subsequent observers, but will pass along the terminating error."
  },
  "articles/subject-replay.html": {
    "href": "articles/subject-replay.html",
    "title": "ReplaySubject",
    "keywords": "ReplaySubject passes to each subscribed observer all the values from the source sequence, regardless of when the observer subscribes. Any observers which subscribe late will immediately receive all values which were sent out between the time that ReplaySubject was created and the time that the observer subscribed to it. It is also possible to parameterize the ReplaySubject to throw away old values after a certain period of time, or after a specified buffer size is exceeded."
  },
  "articles/subject-resource.html": {
    "href": "articles/subject-resource.html",
    "title": "ResourceSubject",
    "keywords": "ResourceSubject stores and passes the single last value emitted by the source sequence to each subscribed observer. The value is also only sent out after the source sequence terminates. If the source sequence does not emit any values, ResourceSubject will also complete without emitting any values. Warning The type of the stored value must be IDisposable . When the enclosing workflow scope is terminated, the value will be disposed to free any allocated resources, such as file or memory handles. Any observers which subscribe after the source sequence terminates will immediately receive the stored value. If the source sequence terminates with an error, ResourceSubject will not emit any values but will pass along the error notification to all observers."
  },
  "articles/subjects.html": {
    "href": "articles/subjects.html",
    "title": "Subjects",
    "keywords": "Subjects Subjects are a special type of operator that allows reusing and sharing of observable sequences. A subject acts as a bridge or proxy; it will subscribe to an observable sequence and pass all items it receives to multiple downstream operators, allowing them to share a single subscription to the source sequence. Most subjects will be given a name. You can subscribe to a named subject from anywhere in the workflow using the SubscribeSubject operator, making subjects very useful to organize complex workflows into modular components that can be easily replaced. The following example demonstrates how to separate logging of a sequence of images using a PublishSubject . Finally, subjects also allow you to control the temperature of the shared sequence. You can convert a sequence from cold to hot using PublishSubject or from hot to cold using ReplaySubject . Scope of Subjects Subjects have a visibility scope. Any subject can be accessed in the same workflow where it is declared, or inside any workflows nested inside operators defined at the same scope level. However, if a nested operator defines their own local scope and a subject is declared inside this new scope, that subject will not be visible outside that nested workflow. The border of node groups provides a visual indication of whether a nested operator defines a new local scope. Similarly, if node groups are used to define higher-order observable sequences , any subjects defined inside the local scope will be unique to each created sequence. Branching Subjects Anonymous branch points in the workflow implicitly define a PublishSubject with no name. All branches are first subscribed to the subject prior to subscribing to the common source sequence, so there is a guarantee that every value will be delivered to all branches, assuming immediate subscription. Warning Dangling branches operate independently from each other, and from the subscription to the source sequence. If one branch terminates and resubscribes to the source (e.g. using the Repeat operator) while other branches keep going, this will not reinitialize the shared subscription to the source. If such behavior is of interest, you will need to merge all branches together and implement the cancellation and resubscription logic downstream of the merge point. Source Subjects Subjects can be declared either as a sink from an existing observable sequence, or as a source. Source subjects do not have a pre-existing input sequence from which values are generated, but rather they are setup to redirect inputs from multiple writers into one reader, for example for logging or control purposes. If subjects are created as a source, the type of the subject needs to be declared explicitly on creation. This is done by selecting the source sequence in the workflow whose type we would like to share, and using the right-click context menu. Subject Types Below are listed all different subject types, each represented visually by a unique icon. The last two operators, SubscribeSubject and MulticastSubject , are used to access existing declared subjects for reading and writing, respectively. This is visually indicated by the * in the operator icon. Their behavior will be determined by the type of subject they are accessing. AsyncSubject AsyncSubject stores and passes the last value (and only the last value) emitted by the source sequence to each subscribed observer. The value is also only sent out after the source sequence terminates. If the source sequence does not emit any value, AsyncSubject will also terminate without emitting any values. Tip You can use the Take operator before AsyncSubject to store the first value from an infinite sequence. Any observers which subscribe after the source sequence terminates will immediately receive the stored value. If the source sequence terminates with an error, AsyncSubject will not emit any values but will pass along the error notification to all observers. BehaviorSubject BehaviorSubject stores and passes the latest value emitted by the source sequence to each subscribed observer, and then continues to emit any subsequent values. Any observers which subscribe later will immediately receive the latest stored value. However, if the source sequence terminates with an error, BehaviorSubject will not emit any values but will pass along the error notification to all subsequent observers. Warning BehaviorSubject is designed to multicast and share state updates from multiple sources, like a global variable. Because of this, even if one of the source sequences emitting values to BehaviorSubject terminates successfully, the BehaviorSubject will not send a termination message to any subscribed observers, but will remain active until the enclosing workflow scope is terminated to allow other sources to update the shared state. PublishSubject PublishSubject passes to each subscribed observer only the values from the source sequence which were emitted after the time of subscription. This fire-and-forget behavior means that any observers which subscribe late might lose one or more items emitted between the time that PublishSubject was created and the time that the observer subscribed to it. If you require guaranteed delivery of all values from the source sequence, you need to ensure that all observers subscribe immediately upon workflow initialization. If this is not possible, you should consider switching to an AsyncSubject if the sequence contains a single value, or a ReplaySubject if the sequence contains multiple values. If the source sequence terminates with an error, PublishSubject will not emit any items to subsequent observers, but will pass along the terminating error. ReplaySubject ReplaySubject passes to each subscribed observer all the values from the source sequence, regardless of when the observer subscribes. Any observers which subscribe late will immediately receive all values which were sent out between the time that ReplaySubject was created and the time that the observer subscribed to it. It is also possible to parameterize the ReplaySubject to throw away old values after a certain period of time, or after a specified buffer size is exceeded. ResourceSubject ResourceSubject stores and passes the single last value emitted by the source sequence to each subscribed observer. The value is also only sent out after the source sequence terminates. If the source sequence does not emit any values, ResourceSubject will also complete without emitting any values. Warning The type of the stored value must be IDisposable . When the enclosing workflow scope is terminated, the value will be disposed to free any allocated resources, such as file or memory handles. Any observers which subscribe after the source sequence terminates will immediately receive the stored value. If the source sequence terminates with an error, ResourceSubject will not emit any values but will pass along the error notification to all observers. SubscribeSubject The SubscribeSubject operator is essentially a source which accesses a subject with the specified name, at the same scope level or above, and subscribes to it. The behavior of SubscribeSubject is defined by the type of the subject which is accessed, and values from the shared underlying sequence will then be passed to any operators downstream from SubscribeSubject , as if these operators were connected to the subject directly. Note If the definition of the underlying subject changes, there is no need to change the SubscribeSubject as long as the name remains the same. MulticastSubject The MulticastSubject operator works like a sink which accesses the subject with the specified name, at the same scope level or above, and forwards any values emitted by the source sequence to the shared subject. Depending on the behavior of the subject, these values will then be passed to any operators subscribed to the subject, including any termination and error notifications."
  },
  "articles/subject-subscribe.html": {
    "href": "articles/subject-subscribe.html",
    "title": "SubscribeSubject",
    "keywords": "The SubscribeSubject operator is essentially a source which accesses a subject with the specified name, at the same scope level or above, and subscribes to it. The behavior of SubscribeSubject is defined by the type of the subject which is accessed, and values from the shared underlying sequence will then be passed to any operators downstream from SubscribeSubject , as if these operators were connected to the subject directly. Note If the definition of the underlying subject changes, there is no need to change the SubscribeSubject as long as the name remains the same."
  },
  "articles/workflow-guidelines.html": {
    "href": "articles/workflow-guidelines.html",
    "title": "Workflow Design Guidelines",
    "keywords": "Workflow Design Guidelines This section offers guidelines and design patterns to consider when developing workflows for any reactive program. Workflow Organization use GroupWorkflow nodes to separate independent functionality (e.g. acquisition, visualization and processing). branching without merging. Subject Declaration Using subjects is one of the most important techniques for improving readability and managing the complexity of large workflows. Subjects make it possible to reduce the number of branches in the workflow and also allow abstraction over data sources and sinks so that you can easily replace different components. Finally, subjects are fundamental for managing and storing data inside nested operators. prefer using subjects over branches when sharing sequences across independent sections of the workflow. use a BehaviorSubject to share global state which can be accessed by multiple consumers and modified by multiple producers. using MulticastSubject on variables which are not declared as BehaviorSubject . This will prevent accidental termination of the subject sequence if a producer terminates prematurely. using source subjects when sharing a sequence with one consumer where data is generated by zero or more producers. moving all subject declarations to the top of the workflow. This will make sure that subject initialization order is easily readable from top to bottom. Nested Operators Several reactive operators require specification of a nested workflow, e.g. SelectMany or CreateObservable . The operator itself will control when the nested workflow is initialized and subscribed to. If it is possible for a nested workflow to be executed multiple times, potentially in parallel, we call the operator reentrant . Some care is necessary to understand how to manage shared state and properties inside a reentrant nested operator. use an AsyncSubject to share workflow input data inside a nested operator. using PropertyMapping nodes inside reentrant nested operators. Property Initialization branch a source sequence to share the same value across different PropertyMapping nodes. This can introduce a race condition for operators that use property values at subscribe time. Alternatively, you can either share the value using a subject, or branch after the PropertyMapping node (if both the value to share and the name of the property in each node are identical)."
  },
  "index.html": {
    "href": "index.html",
    "title": "Bonsai Documentation",
    "keywords": "Bonsai Documentation Bonsai is a visual language for reactive programming. It is lightweight and easy to use with a variety of packages and modules for interfacing with hardware and for real-time processing and manipulation of data streams. Warning These docs are under active development, feel free to contribute by either raising an issue or following the links saying Improve this Doc . Quick Start Download Bonsai . Install Bonsai - Starter Pack from the package manager. Click on the Updates tab at the top of the screen and install any available upgrades. Read the Workflow Editor page for an introduction to the user interface."
  },
  "README.html": {
    "href": "README.html",
    "title": "Bonsai Documentation",
    "keywords": "Bonsai Documentation This repo contains the technical reference manual for the Bonsai visual programming language, in addition to articles and examples that document the collective knowledge of the Bonsai user community. Would you like to contribute to this repo? Step-by-step guide to getting started as a contributor Fork the \"develop\" branch of this repository. Download and install the latest stable version of DocFx (currently 2.59). In a Windows Powershell, use the command docfx docfx.json --serve to generate a local preview of the documentation website. If you are working on multiple articles at once, create a descriptively named branch of your fork of the repo for each article. We recommend creating an issue for each article (if it does not already exist), and name the branch issue-### where ### is the issue number. When you are ready to have your contribution reviewed, commit your edits to the approriate branch of your fork of the repo and create a PR to merge that branch with the \"develop\" branch of this original repo. Because the \"develop\" branch was created explicitly to aid collaboration between contributors, pull requests to this branch will be accepted and merged rapidly (at least once a week). Once a piece of documentation has been polished, and at least two community members agree that it is ready for a final review, create a pull request to merge with the \"main\" branch of this repo. At this point, @glopesdev will conduct the final review and quality control check. If the contribution passes this final step, the PR to merge with \"main\" will be approved and the contribution will be published on the publicly accessible Bonsai documentation website . Contributor Style Guide Why use the \"develop\" branch? The \"develop\" branch is specifically created so that contributors can quickly commit drafts of documentation and collaborate with other community members in order to edit and polish documentation contributions. Re-use/update existing documentation When working on an article, first check the old documentation to see what written material might already exist for that topic. Including figures To include a figure or image in an article: save your figure or image as a .svg file, naming the file using the pattern [article filename]-[figure name].svg add the figure/image to the images folder in this repo Standard formatting for operators and operator properties When referring to operators (also known as nodes in Bonsai), place operator names inside a pair of backticks and double stars ( **`Operator_name`** ) so that the node names render as bold text in code snippet formatting (i.e. CameraCapture ). When referring to operator properties, simply place the operator property name inside a pair of backticks ( `Operator_property_name` ). For both operators and operator properties, link the name to the relevant documentation in the code base, using the markdown syntax for xref in DocFX . For example, the DigitalOutput node is part of the Bonsai.Arduino namespace/package, and contains a property called PortName . To reference this specific property you need to specify the full path to it including namespace, operator name and property name, like so: xref:Bonsai.Arduino.DigitalOutput.PortName . To find out the full path for any node, right-click on the operator of interest in Bonsai and select the option \"Go to Definition\" or hit F12. The xref will be the namespace + operator name + (optionally) property name. Example: ### **Exercise 7:** Control an LED ![Control an LED](~/images/acquisition-led.svg) - Insert a [**`Boolean`**](xref:Bonsai.Expressions.BooleanProperty) source. - Insert a [**`DigitalOutput`**](xref:Bonsai.Arduino.DigitalOutput) sink. - Set the [`Pin`](xref:Bonsai.Arduino.DigitalOutput.Pin) property of the [**`DigitalOutput`**](xref:Bonsai.Arduino.DigitalOutput) operator to 13. - Configure the [`PortName`](xref:Bonsai.Arduino.DigitalOutput.PortName) property. - Run the workflow and change the [`Value`](xref:Bonsai.Expressions.BooleanProperty.Value) property of the [**`Boolean`**](xref:Bonsai.Expressions.BooleanProperty) operator. - **Optional:** Use your mouse to control the LED! Replace the [**`Boolean`**](xref:Bonsai.Expressions.BooleanProperty) operator by a `MouseMove` source (hint: use `GreaterThan`, `LessThan`, or equivalent operators to connect one of the mouse axis to [**`DigitalOutput`**](xref:Bonsai.Arduino.DigitalOutput). How to include and/or reference examples of workflows To include and/or reference an example workflow in an article of the documentation, first create the example workflow in a Bonsai workflow editor. Then open File -> Export -> Image or use keyboard shortcut Ctrl + Shift + E. Name the example according to the following pattern: articleFileName_workflowName . This will export the example workflow as both a .svg file and a .bonsai file. Add the .svg file to the images folder in this repo, and add the .bonsai file to the workflows folder in this repo. In the text of the article that includes/references this example workflow, add the .svg file as an image and link that image to the .bonsai file. Example: Assuming you want to include acquisition-example.bonsai : [![Example Workflow](~/images/acquisition-example.svg)](~/workflows/acquisition-example.bonsai)"
  },
  "tutorials/acquisition.html": {
    "href": "tutorials/acquisition.html",
    "title": "Acquisition and Tracking",
    "keywords": "Acquisition and Tracking Video Acquisition Bonsai can be used to acquire and record data from many different devices. The exercises below will make you comfortable with the most common Bonsai data types. The first data type we will discuss is an image, which is represented as a 2D matrix of pixels. Each pixel represents either a brightness value in a grayscale image, or a BGR colour value in a colour image. Exercise 1: Saving a video Insert a CameraCapture source. Insert a VideoWriter sink. Configure the FileName property of the VideoWriter operator with a file name ending in .avi . Run the workflow and check that it generates a valid video file. Exercise 2: Saving a grayscale video Insert a Grayscale transform between CameraCapture and VideoWriter . Run the workflow. The output should now be a grayscale movie. How would you modify the workflow to record both a colour and a grayscale movie? Audio Acquisition Audio data is captured at much higher temporal sampling frequencies than video. However, the data is typically buffered into chunks of multiple samples before being sent to the computer. Also, multi-channel data can be acquired simultaneously in the case of a stereo microphone, or high-density ephys probes. Such multi-sample, multi-channel data is typically represented as a 2D matrix, where rows represent channels, and columns represent time. Exercise 3: Saving a WAV file Insert an AudioCapture source. Insert an AudioWriter sink. Configure the FileName property of the AudioWriter operator with a file name ending in .wav . Make sure that the SampleRate property of the AudioWriter matches the frequency of audio capture. Run the workflow for some seconds. Playback the file in your favorite media player to check that it is a valid audio file. Exercise 4: Saving raw binary waveform data Replace the AudioWriter operator with a MatrixWriter sink. Configure the Path property of the MatrixWriter operator with a file name ending in .bin . Run the workflow for some seconds. Open the resulting binary file in MATLAB/Python/R and make a time series plot of the raw waveform samples. MATLAB: Use the fread function to read the binary file. The source data must be set to int16 . Python: Use the fromfile in the numpy package to read the binary file. The dtype option must be set to np.int16 . Exercise 5: Trigger an auditory stimulus Insert an AudioReader source. Configure the FileName property to point to the audio file you recorded in Exercise 3 . Insert an AudioPlayback sink. Run the workflow and check the sound is played correctly. Insert a KeyDown source. Set the BufferLength property of the AudioReader to zero, so that all audio data is read into a single buffer. Combine the key press with the audio data using the WithLatestFrom combinator. Right-click the WithLatestFrom operator. Select the Tuple > Item2 member from the context menu. Move the AudioPlayback sink so that it follows the selected Item2 member. Run the workflow and press a key. What happens if you press the key several times? Arduino Acquisition In order to communicate and interact with an Arduino using Bonsai, you must program the microcontroller to send and receive binary data from the computer via the USB cable. Fortunately, the Arduino environment already comes with a standard implementation of an efficient binary protocol called Firmata which can be used for serial communication with external applications such as Bonsai. Configure Arduino for real-time communication Open the Arduino IDE . Upload StandardFirmata to your Arduino. The code can be found in File > Examples > Firmata . Exercise 6: Saving analog data Insert an AnalogInput source. Configure the PortName property to point to the correct serial port where the Arduino is connected. Run the workflow and visualize the output of the analog source. What do you see? Optional: Connect a sensor to the analog input pin, e.g. a potentiometer or a button. Insert a CsvWriter sink. This operator records input data into a text file. Configure the FileName property of the CsvWriter operator with a file name ending in .csv . Run the workflow, record some interesting signal, and then open the result text data file. Exercise 7: Control an LED Insert a Boolean source. Insert a DigitalOutput sink. Set the Pin property of the DigitalOutput operator to 13. Configure the PortName property. Run the workflow and change the Value property of the Boolean operator. Optional: Use your mouse to control the LED! Replace the Boolean operator by a MouseMove source (hint: use GreaterThan , LessThan , or equivalent operators to connect one of the mouse axis to DigitalOutput ). Exercise 8: Control a servo motor Insert a Timer source. Set its Period property to 500 ms. Insert a Take operator. Set its Count property to 10. Insert a Rescale operator. Set its Max property to 10, and its RangeMax property to 180. Insert a Repeat operator. Insert a ServoOutput sink. Set the Pin property of the ServoOutput operator to 9. Configure the PortName property. Connect a servo motor to the Arduino pin 9 and run the workflow. Can you explain the behaviour of the servo? Optional: Make the servo sweep back and forth. Video Tracking Bonsai allows processing captured raw video data to extract real-time measures of behaviour or other derived quantities. The exercises below will introduce you to some of its online video processing capabilities. Exercise 9: Segmentation of a coloured object Insert a CameraCapture source. Insert a RangeThreshold transform. Open the visualizer for the RangeThreshold operator. Configure the Lower and Upper properties of the RangeThreshold to isolate your coloured object (hint: click the small arrow to the left of each property to expand their individual values). This method segments coloured objects by setting boundaries directly on the BGR colour space. This colour space is considered a poor choice for colour segmentation. Can you see why? Replace the RangeThreshold operator by a ConvertColor transform. This node converts the image from the BGR colour space to the Hue-Saturation-Value (HSV) colour space . Insert an HsvThreshold transform. Configure the Lower and Upper properties of the HsvThreshold to isolate the object. Test the resulting tracking under different illumination conditions. Exercise 10: Real-time position tracking Starting with the workflow from the previous exercise, insert a FindContours transform. This operator traces the contours of all the objects in a black-and-white image. An object is defined as a region of connected white pixels. Insert a BinaryRegionAnalysis transform. This node calculates the area, center of mass, and orientation for all the detected contours. Insert a LargestBinaryRegion transform to extract the largest detected object in the image. Select the ConnectedComponent > Centroid field of the largest binary region using the context menu. Record the position of the centroid using a CsvWriter sink. Optional: Open the CSV file in Excel/Python/MATLAB/R and plot the trajectory of the object. Exercise 11: Background subtraction and motion segmentation Create a grayscale video workflow similar to Exercise 2 . Insert a Skip operator. Set its Count property to 1. In a new branch, insert a Take operator. Set its Count property to 1. Combine the images from both branches using the CombineLatest combinator. Insert the AbsoluteDifference transform after CombineLatest . Insert a Threshold transform. Visualize the node output and adjust the ThresholdValue property. Describe in your own words what the above workflow is doing. Replace the CombineLatest operator with the Zip combinator. Delete the Take operator. Describe in your own words what the above modified workflow is doing. Exercise 12: Measuring motion Create a grayscale video stream similar to Exercise 2 . Insert a BackgroundSubtraction transform. Set its AdaptationRate property to 1. Insert a Sum operator. This operator will sum the values of all the pixels in the image. Run the workflow, point the camera at a moving object and visualize the output of the Sum operator. Compare small movements to big movements. What happens to the signal when the object holds perfectly still? Right-click the Sum operator. Select the Scalar > Val0 member from the context menu. Note The Sum operator sums the pixel values across all image colour channels. However, in the case of grayscale binary images, there is only one active channel and its sum is stored in the Val0 field. Record the motion of an object using a CsvWriter sink."
  },
  "tutorials/closed-loop.html": {
    "href": "tutorials/closed-loop.html",
    "title": "Closed-Loop Systems",
    "keywords": "Closed-Loop Systems In a closed-loop experiment, we want the behaviour data to generate feedback in real-time into the external world, establishing a relationship where the output of the system depends on detected sensory input. Many behavioural experiments in neuroscience require some kind of closed-loop interaction between the subject and the experimental setup. The exercises below will show you how to use the online data processing capabilities of Bonsai to create and benchmark many different kinds of closed-loop systems. Measuring closed-loop latency One of the most important benchmarks to evaluate the performance of a closed-loop system is the latency, or the time it takes for a change in the output to be generated in response to a change in the input. The easiest way to measure the latency of a closed-loop system is to use a digital feedback test. In this test, we measure a binary output from the closed-loop system and feed it directly into the input sensor. We then record a series of measurements where we change the output to HIGH if the sensor detects LOW , and change it to LOW if the sensor detects HIGH . The time interval between HIGH and LOW signals will give us the total closed-loop latency of the system, also known as the round-trip time. Exercise 1: Measuring serial port communication latency Connect the digital pin 8 on the Arduino to digital pin 13 using a jumper wire. Insert a DigitalInput source and set its Pin property to 8. Insert a BitwiseNot transform. Insert a DigitalOutput sink and configure its Pin property to pin 13. Insert a TimeInterval operator. Right-click on the TimeInterval operator and select Output > Interval > TotalMilliseconds . Note The TimeInterval operator measures the interval between consecutive events in an observable sequence using the high-precision event timer (HPET) in the computer. The HPET has a frequency of at least 10MHz, allowing us to accurately time intervals with sub-microsecond precision. Run the workflow and measure the round-trip time between digital input messages. Exercise 2: Measuring video acquisition latency Connect a red LED to Arduino digital pin 13. Insert a CameraCapture source. Insert a Crop transform. Run the workflow and set the RegionOfInterest property to a small area around the LED. Tip You can use the visual editor for an easier calibration. While the workflow is running, right-click on the Crop transform and select Show Default Editor from the context menu or click in the small button with ellipsis that appears when you select the RegionOfInterest property. Insert a Sum transform and select the Val2 field from the output. Note The Sum operator adds the value of all the pixels in the image together, across all the color channels. Assuming the default BGR format, the result of summing all the pixels in the Red channel of the image will be stored in Val2 . Val0 and Val1 would store the Blue and Green values, respectively. If you are using an LED with a color other than Red, please select the output field accordingly. Insert a GreaterThan transform. Insert a BitwiseNot transform. Insert a DigitalOutput sink and configure its Pin property to pin 13. Run the workflow and use the visualizer of the Sum operator to choose an appropriate threshold for GreaterThan . When connected to pin 13, the LED should flash a couple of times when the Arduino is first connected. Insert a DistinctUntilChanged operator after the BitwiseNot transform. Note The DistinctUntilChanged operator filters consecutive duplicate items from an observable sequence. In this case, we want to change the value of the LED only when the threshold output changes from LOW to HIGH , or vice-versa. This will let us measure correctly the latency between detecting a change in the input and measuring the response to that change. Insert the TimeInterval operator and select Output > Interval > TotalMilliseconds . Run the workflow and measure the round-trip time between LED triggers. Given the measurements obtained in Exercise 2, what would you estimate is the input latency for video acquisition? Closed-Loop Control Exercise 3: Triggering a digital line based on region of interest activity Insert a CameraCapture source. Insert a Crop transform. Run the workflow and use the RegionOfInterest property to specify the desired area. Insert a Grayscale and a Threshold transform (or the color segmentation operators). Insert a Sum transform, and select the Val0 field from the output. Insert a GreaterThan transform and configure the Value property to an appropriate threshold. Remember you can use the visualizers to see what values are coming through the Sum and what the result of the GreaterThan operator is. Insert the Arduino DigitalOutput sink. Set the Pin property of the DigitalOutput operator to 13. Configure the PortName property. Run the workflow and verify that entering the region of interest triggers the Arduino LED. Optional: Replace the Crop transform by a CropPolygon to allow for non-rectangular regions. Note The CropPolygon operator uses the Regions property to define multiple, possibly non-rectangular regions. The visual editor is similar to Crop , where you draw a rectangular box. However, in CropPolygon you can move the corners of the box by right-clicking inside the box and dragging the cursor to the new position. You can add new points by double-clicking with the left mouse button, and delete points by double-clicking with the right mouse button. You can delete regions by pressing the Del key and cycle through selected regions by pressing the Tab key. Exercise 4: Modulating stimulus intensity based on distance to a point Insert a FunctionGenerator source. Set the Amplitude property to 500, and the Frequency property to 200 . Insert an AudioPlayback sink. Externalize the Amplitude property of the FunctionGenerator using the right-click context menu. If you run the workflow, you should hear a pure tone coming through the speakers. The FunctionGenerator periodically emits buffered waveforms with values ranging between 0 and Amplitude , the shape of which changes the properties of the tone. For example, by changing the value of Amplitude you can make the sound loud or soft. The next step is to modulate the Amplitude property dynamically based on the distance of the object to a target. Create a video tracking workflow using ConvertColor , HsvThreshold , and the Centroid operator to directly compute the centre of mass of a colored object. Insert a Subtract transform and configure the Value property to be some target coordinate in the image. The result of the Subtract operator will be a vector pointing from the target to the centroid of the largest object. The desired distance from the centroid to the target would be the length of that vector. Insert an ExpressionTransform operator. This node allows you to write small mathematical and logical expressions to transform input values. Right-click on the ExpressionTransform operator and select Show Default Editor . Set the expression to Math.Sqrt(X*X + Y*Y) . Note Inside the Expression editor you can access any field of the input by name. In this case X and Y represent the corresponding fields of the Point2f data type. You can check which fields are available by right-clicking the previous node. You can use all the normal arithmetical and logical operators as well as the mathematical functions available in the Math type. The default expression it means \"input\" and represents the input value itself. Connect the ExpressionTransform operator to the externalized Amplitude property. Run the workflow and verify that stimulus intensity is modulated by the distance of the object to the target point. Optional: Modulate the Frequency property instead of Amplitude . Optional: Use the Rescale operator to adjust the gain of the modulation by configuring the Min , Max , RangeMax and RangeMin properties. Set the RescaleType property to Clamp to restrict the output values to an allowed range. Note You can specify inverse relationships using Rescale if you set the maximum input value to the Min property, and the minimum input value to the Max property. In this case, a small distance will generate a large output, and a large distance will produce a small output. Exercise 5: Triggering a digital line based on distance between objects Reproduce the above object tracking workflow using FindContours and BinaryRegionAnalysis . Insert a SortBinaryRegions transform. This operator will sort the list of objects by area, in order of largest to smallest. To calculate the distance between the two largest objects in every frame you will need to take into account some special cases. Specifically, there is the possibility that no object is detected, or that the two objects may be touching each other and will be detected as a single object. You can develop a new operator in order to perform this specific calculation. Insert a PythonTransform operator. Change the Script property to the following code: from math import sqrt @returns(float) def process(value): # no objects were detected if value.Count == 0: return float.NaN # only one object was detected, assume objects are touching elif value.Count == 1: return 0 # two or more objects were detected, compute distance else: # d: displacement between two largest objects d = value[0].Centroid - value[1].Centroid return sqrt(d.X * d.X + d.Y * d.Y) Insert a LessThan transform and configure the Value property to an appropriate threshold. Connect the boolean output to Arduino pin 13 using a DigitalOutput sink. Run the workflow and verify that the Arduino LED is triggered when the two objects are close together. Exercise 6: Centring the video on a tracked object Insert a CameraCapture source. Insert a WarpAffine transform. This node applies affine transformations on the input defined by the Transform matrix. Externalize the Transform property of the WarpAffine operator using the right-click context menu. Create an AffineTransform source and connect it to the externalized property. Run the workflow and change the values of the Translation property while visualizing the output of WarpAffine . Notice that the transformation induces a translation in the input image controlled by the values in the property. In a new branch, create a video tracking pipeline using ConvertColor , HsvThreshold , and the Centroid operator to directly compute the centre of mass of a colored object. Insert a Negate transform. This will make the X and Y coordinates of the centroid negative. We now want to map our negative centroid to the Translation property of AffineTransform , so that we dynamically translate each frame using the negative position of the object. You can do this by using property mapping operators . Insert an InputMapping operator. Connect the InputMapping to the AffineTransform operator. Open the PropertyMappings editor and add a new mapping to the Translation property. Run the workflow. Verify the object is always placed at position (0,0). What is the problem? Note Generally for image coordinates, (0,0) is at the top-left corner, and the center will be at coordinates (width/2, height/2), usually (320,240) for images with 640 x 480 resolution. Insert an Add transform. This will add a fixed offset to the point. Configure the Value property with an offset that will place the object at the image centre, e.g. (320,240). Run the workflow, and verify the output of WarpAffine is now a video which is always centred on the tracked object. Optional : Insert a Crop transform after WarpAffine to select a bounded region around the object. Optional : Modify the object tracking workflow to use FindContours and BinaryRegionAnalysis . Exercise 7: Make a robotic camera follow a tracked object On this exercise we will use the Pan and Tilt servo motor assembly to make the camera itself always point to the tracked object. The goal will be to keep the object always in the centre of the visual field of the camera. If the object is to the left of the centre, we turn the camera left, if it is to the right, we need to turn the camera right. Insert a CameraCapture source. Insert nodes to complete a video tracking workflow using ConvertColor , HsvThreshold , and the Centroid operator. Run the workflow and calibrate the threshold to make sure the colored object is perfectly segmented. To make the Pan and Tilt servo motors correct the position of the camera, we now need to transform the X and Y values of the centroid, which are in image coordinates, to servo motor commands in degrees. For each frame we will have an incremental error depending on the observed location of the object, i.e. the deviation from the image centre. Right-click the Centroid and select Output > X . Insert a Rescale transform and set the Max property to 640 (the image width), and the RangeMin and RangeMax properties to 1 and -1, respectively. The output of this workflow will be a relative error signal indicating how much from the centre, and in which direction, the motor should turn. However, the commands to the servo are absolute motor positions in degrees. This means we will need to integrate the relative error signals to get the actual position where the servo should be. We also need to be aware of the servo operational range (0 to 180 degrees) in order not to damage the motors. To accomplish this, we will develop a new operator to compute the error-corrected integration before sending the final command to the servos. Insert a PythonTransform operator after Rescale . Change the Script property to the following code: position = 90.0 @returns(float) def process(value): global position temp = position + value # update the position only when the angle range is valid if (20.0 < temp and temp < 160): position = temp return position Insert a ServoOutput sink. Set the Pin property to the Arduino pin where the horizontal Pan motor is connected. Configure the PortName to the Arduino port where the micro-controller is connected. Run the workflow and validate the horizontal position of the motor is adjusted to keep the object in the middle. Right-click the Centroid and select Output > Y to create a new branch for the vertical Tilt motor. Insert a Rescale transform and set the Max property to 480 (the image height), and the RangeMin and RangeMax properties to -1 and 1, respectively (note these values are swapped from before because in image coordinates zero is at the image top). Copy and paste the PythonTransform script from the previous branch. Insert a ServoOutput sink and set the Pin property to the Arduino pin where the vertical Tilt motor is connected. Configure the PortName property. Run the workflow and validate the camera is tracking the object and keeping it in the centre of the image."
  },
  "tutorials/networking.html": {
    "href": "tutorials/networking.html",
    "title": "Networking",
    "keywords": "Networking Bonsai includes support for Open Sound Control (OSC), a flexible networking protocol for low-latency communication between different processes, potentially running in different devices over the network. The next exercises will show you how to leverage these primitives for connecting two Bonsai processes exchanging a variety of data. The final optional exercise shows how to leverage the OSC protocol to interface a Python script with a Bonsai workflow. Exercise 1: Peer-to-peer UDP communication We will start by implementing a direct peer-to-peer communication link between two processes on the same machine. This will allow us to send data between two known nodes in the network, or two independent Bonsai processes. Setup the above workflow. Set the Name property of the CreateUdpClient source to Emitter . Set the RemotePort to 2342. Set the Connection property of the SendMessage sink to Emitter . Open a new Bonsai window and setup the following workflow: Set the Name property of the CreateUdpClient source to Receiver . Set the Port property to 2342. Set the Connection property of the ReceiveMessage source to Receiver . Run the workflow and visualize the output of the ReceiveMessage source. Note the characters displayed in the TypeTag . Now change the TypeTag property of the ReceiveMessage source to i . This will make the source interpret the contents of the OSC message as a 32-bit integer. You can string multiple characters to describe complex messages. If you have access to two computers over a shared network, you can try to setup one of them to be the Emitter and the other to be the Receiver . In this case, make sure to set the RemoteHostName property of the Emitter to match the IP address of the receiver computer. Exercise 2: Client/Server TCP communication Next we will implement a responsive TCP server with support to accept multiple connections. This will allow us to share data between multiple unknown nodes in the network, where each receiver node just needs to know the IP address of the server and establish a connection to the data stream. Setup the above workflow (identical to the previous exercise but using CreateTcpServer ). Set the Name property of the CreateTcpServer source to Emitter . Set the Port property to 2342. Set the Connection property of the SendMessage sink to Emitter . Open a new Bonsai window and setup the following workflow: Set the Name property of the CreateTcpClient source to Receiver . Set the Port property to 2342. Set the Connection property of the ReceiveMessage source to Receiver . Run the workflow and visualize the output of the ReceiveMessage source, optionally setting the TypeTag property to i . Try opening multiple copies of the receiver workflow and running them simultaneously. Verify that data is streamed to all instances successfully. If you have access to two or more computers over a shared network, you can try to set up multiple remote data listeners. In this case, make sure to set the HostName property of the Receiver node to match the IP address of the receiver computer. Exercise 3: Streaming image data It is possible to share multiple data streams of different types simultaneously through a single OSC connection. To do this, we need to specify different OSC addresses for our messages to allow clients to subscribe to the independent streams. Start from the previous emitter workflow. Set the Address property of the SendMessage sink to /cursor . Add a CameraCapture source. Add a ConvertToArray transform to convert the image into an array of bytes. Add a new SendMessage node with the Address property set to /image . Ensure the Connection property of the new node is set to Emitter . Open a new Bonsai window and setup the following workflow: Start from the previous receiver workflow. Set the Address property of the ReceiveMessage source to /cursor . Add a new ReceiveMessage source with the Address property set to /image . Run the emitter workflow and the receiver workflow and verify that you can receive both data streams. Set the TypeTag property on the new ReceiveMessage node to b for byte array. Add a ConvertFromArray transform following the ReceiveMessage source. Add a Reshape transform. Set the Channels property to 3 (color image) and the Rows property to 480 (or your camera image height). Add a ConvertToImage transform to interpret the resulting buffer as an image. Run both the emitter and the receiver workflow and verify you can successfully receive and decode both data streams. If you have access to two or more computers over a shared network, you can try to set up multiple remote data listeners, each listening to one or both data streams."
  },
  "tutorials/scripting.html": {
    "href": "tutorials/scripting.html",
    "title": "Scripting",
    "keywords": "Scripting The Bonsai compiler includes advanced scripting functionality to allow developing custom operators specifically for your project. These scripts will be compiled together with your workflow. The Bonsai editor makes it easier to bootstrap the required infrastructure and the scripts themselves. This worksheet will walk you through the basics of getting C# scripting to work with Bonsai and a short exercise in building a project with custom scripts. Getting Started Install the following: Visual Studio Code . .NET Core SDK . C# extension from the VS Code extensions menu. .NET Framework 4.7.2 Developer Pack . Warning You might need to reboot your machine after installing these components. Random Dot Kinematogram In this exercise, we will implement a random-dot kinematogram (RDK) stimulus using a custom C# script. This visual stimulus is composed of a dense pattern of random dots which are displaced coherently along a primary direction of motion from one frame to the next. The following set of exercises are to be developed in a single workflow, so do not remove the elements from the previous exercise from subsequent exercises, unless it is specifically mentioned. Exercise 1: Dot Field Implement the common BonVision render pipeline shown below. The Draw operator should be implemented as a PublishSubject . Next we will create the workflow that will initialize and update the state of the RDK across frames. To do this, we will use a custom operator implemented in C#. Set the Name property of the BehaviorSubject to DotField . Double-click the CSharpTransform operator and follow the instructions to generate a new script file. When prompted, name the script RandomDotKinematogram . When inside the Visual Studio Code project, look for a pop-up in the bottom-right corner asking about \"Reload Extensions\". Click the button as soon as it shows up. If you miss the chance you can also click on the small bell on the bottom-right corner of the VS Code window (in the status bar). This will load all necessary dependencies for the script into Visual Studio Code so it can assist you in writing the C# script. The output type for our script observable sequence should be a Vector2[] representing an array of all the positions of the dots to draw in each frame. To get started, you can copy the below infrastructure into the script you have created to initialize a random dot field. using Bonsai; using System; using System.ComponentModel; using System.Linq; using System.Reactive.Linq; using Bonsai.Shaders; using OpenTK; [Combinator] [Description(\"Creates and updates the state of a random dot kinematogram.\")] [WorkflowElementCategory(ElementCategory.Transform)] public class RandomDotKinematogram { [Description(\"The number of dots in the random dot kinematogram.\")] public int DotCount { get; set; } public IObservable<Vector2[]> Process(IObservable<FrameEvent> source) { return Observable.Defer(() => { var random = new Random(); Vector2[] previous = null; return source.Select(value => { var current = new Vector2[DotCount]; for (int i = 0; i < current.Length; i++) { do { // take points uniformly distributed in the unit circle current[i].X = (float)random.NextDouble() * 2 - 1; current[i].Y = (float)random.NextDouble() * 2 - 1; } while (current[i].LengthSquared > 1); } previous = current; return current; }); }); } } This small script simply generates a field of random dots uniformly distributed inside the unit circle every frame. After the script is saved in Visual Studio Code, you can go back to Bonsai and select the menu option Tools > Reload Extensions to recompile the scripts for your workflow. You will have to do this step every time you change something about your script that you would like to test in the Bonsai workflow. To visualize the dot field we are generating, we can use the DrawCircleArray operator from BonVision. Make sure to set the PositionData property to match the name of the BehaviorSubject we defined in the previous step (i.e. DotField ). Exercise 2: Kinematogram Parameters To initialize and update this field as a random dot kinematogram, we will use the following parameters: DotCount : The number of dots in the random dot kinematogram. Direction : The direction of movement for coherent dots. Coherence : The proportion of dots which move together in the coherent direction. DotLifetime : The number of frames that elapse before a dot disappears and reappears. Speed : The speed of each dot. New parameters can be added to the script as properties following the same syntax we used for DotCount in the previous exercise. It is possible to add various converters and editors to help us manipulate the property values in the Bonsai environment. To implement the above parameters, for example, you can copy the following declarations into the top of your script (note that DotCount was already defined in the previous exercise): [Description(\"The number of dots in the random dot kinematogram.\")] public int DotCount { get; set; } [Range(-Math.PI, Math.PI)] [TypeConverter(\"BonVision.DegreeConverter, BonVision\")] [Editor(DesignTypes.SliderEditor, DesignTypes.UITypeEditor)] [Description(\"The direction of movement for coherent dots.\")] public float Direction { get; set; } [Range(0, 1)] [Editor(DesignTypes.SliderEditor, DesignTypes.UITypeEditor)] [Description(\"The proportion of dots which move together in the coherent direction.\")] public float Coherence { get; set; } [Description(\"The number of frames that elapse before a dot disappears and reappears.\")] public int DotLifetime { get; set; } [Description(\"The speed of each dot.\")] public float Speed { get; set; } After inserting these properties and saving the script, select again the menu option Tools > Reload Extensions . Observe the behaviour of each of the properties in the RandomDotKinematogram operator, and try to map it to the property declarations in the script file. You can also delete or change some of the declarations to see the effect in the operator after a reload. Exercise 3: Dot Lifetime Our first step towards building a full random dot kinematogram will be to manage the lifetime of each dot. Basically, instead of regenerating the position of each dot in every frame, we want to keep each dot around in the same position for a configurable number of frames (as specified in the DotLifetime parameter). To do this, we can use the previous variable which is storing the position of each dot in the previous frame. We also need a new array variable, which we will call active , that will store for each dot how many frames of life it still has before it should disappear and reappear somewhere else. When a dot is regenerated, the active value for that dot should be set to DotLifetime . Then, for each frame where the dot is active (i.e. the active value is larger than zero), keep the same position of the previous frame, and decrease by one the number of frames left for the dot to be regenerated. Click to show the solution public IObservable<Vector2[]> Process(IObservable<FrameEvent> source) { return Observable.Defer(() => { var random = new Random(); int[] active = new int[DotCount]; Vector2[] previous = null; return source.Select(value => { var current = new Vector2[active.Length]; for (int i = 0; i < current.Length; i++) { // if the dot is inactive, regenerate the position if (active[i] == 0) { do { // take points uniformly distributed in the unit circle current[i].X = (float)random.NextDouble() * 2 - 1; current[i].Y = (float)random.NextDouble() * 2 - 1; } while (current[i].LengthSquared > 1); active[i] = DotLifetime; } else { // if the dot is active, keep the same position current[i].X = previous[i].X; current[i].Y = previous[i].Y; if (active[i] > 0) { active[i] = active[i] - 1; } } } previous = current; return current; }); }); } Exercise 4: Dot Motion Next, we need to move our dots according to the coherent direction of motion. To do this, we need to add to the previous position of each dot a displacement that will bring it to the new position. Since we later want to generate a distribution of random displacements for some dots, the easiest way is to create a new array variable velocity that will keep the vector by which each dot should move. Note that the velocity vector will be a 2D vector in (X,Y) cartesian coordinates that gets added to the dot position. However, the parameters of the kinematogram specify the coherent motion vector using the Direction of motion property, specified as an angle, and the Speed property specifying the magnitude of the motion vector. We also need to take into account that points very close to the edge of the random dot field might go outside the field when we add the displacement. In case the dot goes outside of the field, we should make it immediately regenerate. Click to show the solution public IObservable<Vector2[]> Process(IObservable<FrameEvent> source) { return Observable.Defer(() => { var random = new Random(); int[] active = new int[DotCount]; Vector2[] velocity = new Vector2[DotCount]; Vector2[] previous = null; return source.Select(value => { var current = new Vector2[active.Length]; for (int i = 0; i < current.Length; i++) { // if the dot is inactive, regenerate the position if (active[i] == 0) { do { // take points uniformly distributed in the unit circle current[i].X = (float)random.NextDouble() * 2 - 1; current[i].Y = (float)random.NextDouble() * 2 - 1; } while (current[i].LengthSquared > 1); active[i] = DotLifetime; // convert the velocity vector (Direction,Speed) into (x,y) cartesian coordinates double angle = Direction; velocity[i] = new Vector2( Speed * (float)Math.Cos(angle), Speed * (float)Math.Sin(angle)); } else { // add the velocity for each point, taking into account the time interval current[i].X = previous[i].X + velocity[i].X * (float)value.TimeStep.ElapsedTime; current[i].Y = previous[i].Y + velocity[i].Y * (float)value.TimeStep.ElapsedTime; // if the position of the current point goes outside the unit circle, // inactivate it immediately if (current[i].LengthSquared > 1) active[i] = 0; if (active[i] > 0) { active[i] = active[i] - 1; } } } previous = current; return current; }); }); } Exercise 5: Dot Coherence Finally, we want to make sure only a specified proportion of the dots are moving coherently. The remaining points should move in a random direction which is decided when the point is regenerated. The probability of each point to move in the coherent direction is given by the Coherence property. Click to show the solution public IObservable<Vector2[]> Process(IObservable<FrameEvent> source) { return Observable.Defer(() => { var random = new Random(); int[] active = new int[DotCount]; Vector2[] velocity = new Vector2[DotCount]; Vector2[] previous = null; return source.Select(value => { var current = new Vector2[active.Length]; for (int i = 0; i < current.Length; i++) { // if the dot is inactive, regenerate the position if (active[i] == 0) { do { // take points uniformly distributed in the unit circle current[i].X = (float)random.NextDouble() * 2 - 1; current[i].Y = (float)random.NextDouble() * 2 - 1; } while (current[i].LengthSquared > 1); active[i] = DotLifetime; double angle; if (random.NextDouble() < Coherence) // coherent direction { angle = Direction; } else angle = random.NextDouble() * MathHelper.TwoPi; // random direction // convert the velocity vector (Direction,Speed) into (x,y) cartesian coordinates velocity[i] = new Vector2( Speed * (float)Math.Cos(angle), Speed * (float)Math.Sin(angle)); } else { // add the velocity for each point, taking into account the time interval current[i].X = previous[i].X + velocity[i].X * (float)value.TimeStep.ElapsedTime; current[i].Y = previous[i].Y + velocity[i].Y * (float)value.TimeStep.ElapsedTime; // if the position of the current point goes outside the unit circle, // inactivate it immediately if (current[i].LengthSquared > 1) active[i] = 0; if (active[i] > 0) { active[i] = active[i] - 1; } } } previous = current; return current; }); }); }"
  },
  "tutorials/state-machines.html": {
    "href": "tutorials/state-machines.html",
    "title": "State Machines",
    "keywords": "State Machines When designing operant behaviour assays in systems neuroscience, it is useful to describe the task as a sequence of states the system goes through (e.g. stimulus on, stimulus off, reward, inter-trial interval, etc). Progression through these states is driven by events, which can be either internal or external to the system (e.g. button press, timeout, stimulus offset, movement onset). It is common to describe the interplay between states and events in the form of a finite-state machine diagram, or graph, where nodes are states, and arrows are events. For example, a simple reaction time task where the subject needs to press a button as fast as possible following a stimulus is described in the following diagram: The task begins with an inter-trial interval ( ITI ), followed by stimulus presentation ( ON ). After stimulus onset, advancement to the next state can happen only when the subject presses the button ( success ) or a timeout elapses ( miss ). Depending on which event is triggered first, the task advances either to the Reward state, or Fail state. At the end, the task goes back to the beginning of the ITI state for the next trial. The exercises below will show you how to translate the above diagram of states and events into an equivalent Bonsai workflow, which can be easily adapted and modified to describe many different operant behaviour tasks. Exercise 1: Declaring and logging external hardware events In this worksheet, we will be using an Arduino or a camera as an interface to detect external behaviour events. For experimental purposes, it is very helpful to record and timestamp all of these events, independently of which state the task is in. Connect a digital sensor (e.g. beam-break, button, TTL) into Arduino pin 8. Insert a DigitalInput source and set it to Arduino pin 8. Insert a PublishSubject operator and set its Name property to Response . Insert a Timestamp operator. Insert a CsvWriter sink and configure its FileName property with a file name ending in .csv . Run the workflow and activate the digital sensor a couple of times. Stop the workflow and confirm that the events were successfully timestamped and logged in the .csv file. Note In order to avoid hardware side-effects, it is highly recommended to declare all hardware connections at the top-level of the workflow, and interface all trial logic using subject variables. This will have the added benefit of allowing for very easy and centralized replacement of the rig hardware: as long as the new inputs and configurations are compatible with the logical subjects, no code inside the task logic will have to be changed at all. Right-click the DigitalInput source, select Create Source (bool) > BehaviorSubject , and set its Name property to Led . Insert a DigitalOutput sink and set it to Arduino pin 13. Exercise 2: Inter-trial interval and stimulus presentation Translating a state machine diagram into a Bonsai workflow begins by identifying the initial state of the task (i.e. the beginning of each trial). It is often convenient to consider the inter-trial interval period as the initial state, followed by stimulus presentation. Insert a Timer source and set its DueTime property to be about 3 seconds. Insert a Sink operator and set its Name property to StimOn . Double-click on the Sink node to open up its internal specification. Note The Sink operator allows you to specify arbitrary processing side-effects without affecting the original flow of events. It is often used to trigger and control stimulus presentation in response to events in the task. Inside the nested specification, Source1 represents input events arriving at the sink. In the specific case of Sink operators, the WorkflowOutput node can be safely ignored. StimOn : Insert a Boolean operator following Source1 and set its Value property to True . Find and right-click the Led subject in the toolbox and select the option Multicast . Run the workflow a couple of times and verify that the sequence of events is progressing correctly. Note Opening a new connection to the Arduino can take several seconds due to the way the Firmata protocol is implemented. This may introduce a slight delay in starting the task. This delay is only present at the start of execution and will not affect the behavior of the state machine. In the main top-level workflow, insert a Delay operator and set its DueTime property to a couple of seconds. Copy the StimOn operator and insert it after the Delay (you can either copy-paste or recreate it from scratch). Rename the new operator to StimOff and double-click it to open up its internal representation. Set the Value property of the Boolean operator to False . Run the workflow a couple of times. Is it behaving as you would expect? Insert a Repeat operator after the StimOff . Run the worklow. Can you describe in your own words what is happening? Optional: Draw a marble diagram for Timer , StimOn , Delay , and Repeat . Exercise 3: Driving state transitions with external behaviour events Delete the Delay operator. Insert a SelectMany operator after StimOn , and set its Name property to Response . Double-click on the SelectMany node to open up its internal specification. Note The SelectMany operator is used here to create a new state for every input event. Source1 represents the input event that created the state, and WorkflowOutput will be used to report the end result from the state (e.g. whether the response was a success or failure). Response : Subscribe to the Response subject in the toolbox. Insert a Boolean operator and set its Value property to True . Insert a Take operator and set its Count property to 1. Delete the Source1 operator. Connect the Boolean operator to WorkflowOutput . Run the workflow a couple of times and validate the state machine is responding to the button press. Exercise 4: Timeout and choice Response : Inside the Response node, insert a Timer source and set its DueTime property to be about 1 second. Insert a Boolean operator and set its Value property to False . Join both Boolean operators with a Merge combinator. Connect the output of Take to WorkflowOutput . Run the workflow a couple of times, opening the visualizer of the Response node. Describe in your own words what the above modified workflow is doing. Exercise 5: Specifying conditional task outcomes Insert a Condition operator after the StimOff node, and set its Name property to Success . In a new branch from StimOff , insert another Condition , and set its Name property to Miss . Double-click on the Condition operator to open up its internal specification. Note The Condition operator allows you to specify arbitrary rules for accepting or rejecting inputs. Only inputs which pass the filter specified inside the Condition are allowed to proceed. It is often used to represent choice points in the task. Inside the nested specification, Source1 represents input events to be tested. The WorkflowOutput node always needs to be specified with a bool input, the result of whether the input is accepted ( True ) or rejected ( False ). Usually you can use operators such as Equal , NotEqual , GreaterThan , etc for specifying such tests. Miss : Insert a BitwiseNot operator after Source1 . Why did we not need to specify anything for the Success condition? In the top-level workflow, insert a SelectMany operator after the Success condition and change its Name property to Reward . Inside the Reward node you can specify your own logic to signal the trial was successful. For example, you can make the LED blink three times in rapid succession: Reward : Insert a Timer node and set both the DueTime and the Period properties to 100ms. Insert a Mod operator and set the Value property to 2. Insert the Equal operator and leave its Value property at 0. Find and right-click the Led subject in the toolbox and select the option Multicast . Insert a Take operator and set the Count property to 6. Insert the Last operator. Try out your state machine and check whether you understand the behavior of the reward signal. Copy the Reward node, paste it after the Miss condition, and change its Name property to Fail . Optional : Modify the Fail state in some way to signal a different trial outcome (e.g. make the LED blink more times, or move a motor). In the top-level workflow, insert a Merge operator and connect to it the outputs of both conditional branches and before the Repeat node. Try out your state machine and introduce variations to the task behavior and conditions. Exercise 6: Go/No-Go task Implement the following trial structure for a Go/No-Go task. Trials should be sampled from a uniform distribution using the Numerics package (install from Tools > Manage Packages ). Response events should be based on a button press, and reject events on a timeout. Make sure to implement different visual or auditory feedback for either the cue or reward/failure states. Tip To sample values from a discrete uniform distribution, you can use the following workflow: Record a timestamped chronological log of trial types and rewards into a CSV file using a BehaviorSubject . Exercise 7: Conditioned place preference Implement the following trial structure for conditioned place preference. enter and leave events should be triggered in real-time from the camera, by tracking an object moving in or out of a region of interest (ROI). Reward should be triggered once upon entering the ROI, and not repeat again until the object exits the ROI and the ITI has elapsed. Tip There are several ways to implement ROI activation, so feel free to explore different ideas. Consider using either Crop , RoiActivity , or ContainsPoint as part of different strategies to implement the enter and leave events."
  },
  "tutorials/synching.html": {
    "href": "tutorials/synching.html",
    "title": "Data Synchronization",
    "keywords": "Data Synchronization Synchronizing behaviour and other experimental events with stimulation or recorded neural data is a fundamental component of neuroscience data collection and analysis. The exercises below will walk you through some common synchronization problems encountered in systems neuroscience experiments, and how to handle them using Bonsai. Exercise 1: Synchronizing video from two webcams Insert a CameraCapture source and set it to index 0. Insert another CameraCapture source and set it to index 1. Combine both sources using a WithLatestFrom combinator. Insert a Concat (Dsp) operator and set its Axis property to 1. Insert a VideoWriter sink and record a small segment of video. How would you test the synchronization between the two video streams? Note You can use the FileCapture source to inspect the video frame by frame by setting the Playing property to False . After setting the FileName property to match your recorded video, run the workflow, open the source visualizer, and then right-clicking on top of the video frame to open up the seek bar at the bottom. You can use the arrow keys to move forward and back on individual frames. Reaction Time For this and subsequent tutorials, we will use a simple reaction time task as our model systems neuroscience experiment. In this task, the subject needs to press a button as fast as possible following a stimulus, as described in the following diagram: The task begins with an inter-trial interval ( ITI ), followed by stimulus presentation ( ON ). After stimulus onset, advancement to the next state can happen only when the subject presses the button ( success ) or a timeout elapses ( miss ). Depending on which event is triggered first, the task advances either to the Reward state, or Fail state. At the end, the task goes back to the beginning of the ITI state for the next trial. Exercise 2: Generating a fixed-interval stimulus In this first exercise, you will assemble the basic hardware and software components required to implement the reaction time task. The wiring diagram below illustrates the hardware assembly. You can wire the LED into any digital input pin, but make sure to note the pin number for the steps below. We will start by using a fixed-interval blinking LED as our stimulus. To configure the Arduino analog sampling rate, insert a CreateArduino source. Configure the PortName to the Arduino port where the microcontroller is connected. Configure the SamplingInterval property to 10 ms. Insert a Timer source and set its DueTime property to 1 second. Insert a Boolean source and set its Value property to True . Insert a DigitalOutput sink and set its Pin property to the Arduino pin where the LED is connected. Configure the PortName to the Arduino port where the microcontroller is connected. Insert a Delay operator and set its DueTime property to 200 milliseconds. Insert a Boolean source and set its Value property to False . Insert a DigitalOutput sink configured to the same Pin and PortName . Insert a Repeat operator. Exercise 3: Measuring reaction time Insert an AnalogInput source. Set the Pin property to the analog pin number where the duplicate LED wire is connected. Insert a second AnalogInput source. Set the Pin property to the analog pin number where the button is connected. Connect both inputs to a Zip operator. Insert a CsvWriter sink and configure the FileName property. Insert a RollingGraph visualizer and set its Capacity property to 1000. Run the workflow, and verify that both the stimulus and the button are correctly recorded. Exercise 4: Synchronizing video with a visual stimulus To analyze movement dynamics in the reaction time task, you will need to align individual frame timing to stimulus onset. To do this, you can take advantage of the fact that our simple visual stimulus can be seen in the camera image and recorded together with the behaviour. Starting from the workflow in the previous exercise, insert a CameraCapture source and position the camera such that you can see clearly both the LED and the computer keyboard. Insert a VideoWriter sink and configure the FileName with a path ending in .avi . Insert a Crop transform and set the RegionOfInterest property to a small area around the LED. Insert a Grayscale transform. Insert a Sum (Dsp) transform. This operator will sum the brightness values of all the pixels in the input image. Select the Scalar > Val0 field from the right-click context menu. Record the output in a text file using a CsvWriter sink. Open both the text file containing the Arduino data, and the text file containing video data, and verify that you have detected an equal number of stimulus in both files. What can you conclude from these two pieces of data? Optional: Open the raw video file and find the exact frame where the stimulus came on. If you compare different trials you might notice that the brightness of the LED in that first frame across two different trials is different. Why is that? Exercise 5: Trigger a visual stimulus using a button To make our task more interesting, we will now trigger the stimulus manually using a button press and learn more about SelectMany along the way! Connect a new push button component into one of the Arduino digital inputs. Insert a DigitalInput source and set its Pin property to the Arduino pin where the new button is connected. Configure the PortName to the Arduino port where the microcontroller is connected. Insert a Condition operator. Insert a SelectMany operator and move the stimulus generation logic inside the nested node: Why do we need to remove the Repeat operator? Ask a friend to test your reaction time! Optional: In the current workflow, what happens if you press the stimulus button twice in succession? Can you fix the current behaviour by using one of the higher-order operators? Exercise 6: Recording response-triggered videos Starting from the previous workflow, insert another AnalogInput source with the Pin property set to the button press pin number. Insert a GreaterThan operator. Insert a DistinctUntilChanged operator. Insert a Condition operator. In a new branch coming off the VideoWriter , insert a Delay operator. Set the DueTime property of the Delay operator to 1 second. Insert a TriggeredWindow operator, and set its Count property to 100. Insert a SelectMany operator and inside the nested node create the below workflow: Run the workflow and record a few videos triggered on the button press. Inspect the videos frame by frame and check whether the response LED comes ON at exactly the same frame number across different trials. If it does not, why would this happen? And how would you fix it?"
  },
  "tutorials/synching-ephys.html": {
    "href": "tutorials/synching-ephys.html",
    "title": "Ephys Synchronization",
    "keywords": "Ephys Synchronization Synchronizing behaviour and other experimental events with recorded neural data is a fundamental component of neuroscience data collection and analysis. The exercises below will walk you through some common cases encountered in systems neuroscience experiments, and how to deal with them using Bonsai. The general approach when synchronizing two independent data acquisition clocks is to record precise temporal events simultaneously in both systems. If you know that the two recorded events are the same, you know that those two time points are the same. When using multiple systems, it is common to choose the system with the fastest clock as master , and route all events to its analog or digital inputs. Exercise 1: Synchronizing behaviour events with ephys Insert a KeyDown source. Insert an Equal transform and set its Value to one of the keys. The output of this operator will toggle between True and False depending on whether the key press matches the specified key. Insert a DigitalOutput sink and connect it to Arduino pin 13. Connect the Arduino pin 13 to OpenEphys analog input 1. Insert an Rhd2000EvalBoard source. Select the Rhd2000DataFrame > BoardAdcData field from the source output using the context menu. Insert a SelectChannels transform and set the Channels property to 0. This will select only the first analog input channel. Insert a MatrixWriter sink and configure its Path property with a file name ending in .bin . Run the workflow and alternate pressing the selected key and some other key. Repeat this a couple of times to make the LED change state. Open the binary file in MATLAB/Python/R and plot the raw data. What can you conclude from it? Exercise 2: Synchronizing video with ephys using an LED Using the workflow from the previous exercise, insert a CameraCapture source and point the camera such that you can see clearly both the LED and the computer keyboard. Insert a VideoWriter sink and configure the FileName with a path ending in .avi . Insert a Crop transform and set the RegionOfInterest property to a small area around the LED. Insert a Grayscale transform. Insert a Sum (Dsp) transform. This operator will sum the brightness values of all the pixels in the input image. Select the Scalar > Val0 field from the right-click context menu. Record the output in a text file using a CsvWriter sink. Open both the text file and the binary file in MATLAB/Python/R and check that you have detected an equal number of key presses in both files. What can you conclude from these two pieces of data? Optional: Repeat the exercise, replacing the KeyDown source with a periodic Timer . Can you point out some of the limitations of synchronizing a video stream with ephys using this method? Exercise 3: Synchronizing video with ephys using GPIO Industrial grade cameras often include a GPIO connector which exposes input and output digital pins that operate similar to the pins in an Arduino or other microcontrollers. It is possible to configure these pins to report when the shutter of the camera is open or closed (i.e., when a frame is being exposed, the shutter is open and the pin goes HIGH , and conversely, when exposure stops, the shutter closes and the pin goes LOW ). By connecting this strobe signal to the ephys system and counting the number of pulses, it is possible to reconstruct with sub-millisecond precision how many exposures were acquired by the camera, and when each of them started. One problem to consider during high-speed recordings, however, is that frames may occasionally be dropped if the system cannot handle each acquired frame fast enough. One way to work around this issue is to record the hardware frame counter which can be enabled in the drivers of all industrial grade cameras. Connect one of the output GPIO camera pins to the OpenEphys analog input 1. Configure the camera output as strobe . Insert a FlyCapture source or other industrial grade camera capture source. Record the embedded hardware frame counter into a text file using CsvWriter . Record the OpenEphys analog input and verify that you can recover individual camera pulses. Point out some of the remaining difficulties of this approach and how you would adress them. Exercise 4: Synchronizing a visual stimulus with ephys Displaying visual patterns on a screen or projector can be subject to significant delays that may impact synchronization with neural signals. Unfortunately, most displays do not directly provide any kind of digital output that might be used to synchronize stimulus presentation with ephys. However, you can take advantage of the fact that all pixels in a frame are presented synchronously and reserve part of the display area to show a synchronization trigger. A passive photodiode can then be used to transduce this optical trigger into a digital signal that can be transmitted to the ephys auxiliary input channels. In this exercise you will track the display of a very simple visual stimulus: a transition between black and white. Insert a SolidColor source and set its Size property to a positive value, e.g. 100,100. Insert a Timer source and set the Period to one second. Insert a Mod transform and set its Value property to 2. Insert a Multiply transform and set its Value property to 255. Note The output of Timer is a growing count of the number of ticks. The Mod operator computes the remainder of the integer division of a number by another. Because every integer number in the sequence is alternately even or odd, the remainder of the division of the clock ticks by two will constantly oscillate between 0 and 1. Together with the Multiply operator, this is an easy way to make a periodic toggle between 0 and some value. Insert an InputMapping operator and connect it to the SolidColor source. Edit the PropertyMappings and add a mapping to the Color property. You will have to select four times the input to fill all the components of the Color scalar. Run the workflow and verify that the output of SolidColor oscillates between black and white. Insert an Rhd2000EvalBoard source. Select the Rhd2000DataFrame > BoardAdcData and either save or visualize its output. Connect a photodiode, or a photoresistor, to the ephys analog input and hold it flat against the screen, on top of the visualizer window. Verify that you can capture the transitions between black and white in the ephys data using the photodiode. Exercise 5: Synchronizing video acquisition to a visual stimulus using GPIO The easiest way to synchronize the video acquisition with a visual stimulus is to make sure that your camera can see and track both your object of interest and the visual stimulus. If you can extract the stimulus events from your video, then they are synchronized with all other video events by definition, since all pixels in a video frame are acquired synchronously. However, sometimes this is not feasible: the stimulus may be covered by the subject, it may not be possible to recover the exact stimulus parameters from the camera view, or the stimulus may need to be filtered out entirely in order to allow for accurate tracking. In these situations, one solution for industrial grade cameras is to operate the camera in trigger mode, where the input GPIO channels can be used to align the beginning of each frame acquisition to the refresh rate of the display. To do this, you can use the photodiode technique described in the previous exercise, but this time the digital signal from the photodiode will be used as a trigger for the camera by connecting it to one of the GPIO inputs. Assuming a DLP projector, how would you design the optical trigger for a camera system that ensures a single pulse is generated for each projected frame (hint: In a DLP projector, each colour of a BGR frame is projected sequentially: first the Blue channel, then the Green, and finally the Red channel, in quick succession)? Optional: Synchronize a camera with a projector using the GPIO trigger system outlined above."
  },
  "tutorials/vision-psychophysics.html": {
    "href": "tutorials/vision-psychophysics.html",
    "title": "Vision Psychophysics",
    "keywords": "Vision Psychophysics Getting Started Install the BonVision package from the Bonsai Community feed in the package manager. Go through the basic stimuli tutorial at the BonVision website. Warning Make sure the latest version of the BonVision package is installed for this worksheet. Orientation Discrimination In this worksheet you will build the skeleton of an orientation discrimination vision psychophysics task. In this variant of the task we will present two test gratings in quick succession at different random orientations, and ask the participant to report which of the gratings had the more clockwise orientation. Orientations for each grating will be drawn from a random uniform distribution, and feedback of whether the response was correct or incorrect will be provided visually. The following set of exercises are to be developed in a single workflow, so do not remove the elements from the previous exercise from subsequent exercises, unless it is specifically mentioned. Exercise 1: Random Orientation Grating To allow sharing screen calibration for all displayed task elements, we start by defining a common BonVision render pipeline. Insert a CreateWindow source and set the ClearColor property to Gray . Insert the BonVisionResources and LoadResources operators to preload all built-in BonVision shaders. Insert the WorkflowOutput operator after LoadResources to ensure the workflow terminates when the shader window is closed. Insert a RenderFrame source. This source will emit a notification when it is time for a new frame to be drawn on the screen. Insert a NormalizedView operator. This will specify that our stimulus dimensions are resolution independent, aspect ratio corrected, and normalized to the range [-1,1]. Insert a PublishSubject operator and set its Name property to Draw . We will use these events whenever we need to draw any element on the screen. The first step in developing our task will be to display a grating in the center of the screen at a random orientation for a specified period of time, and store the value of the orientation, so we can use it later to test the participant. Insert a CreateRandom source. Insert a CreateContinuousUniform and set its Lower and Upper properties to -1 and 1, respectively. Insert an AsyncSubject and set its name property to AngleDistribution . For now, we start by displaying a repeating sequence of random orientation gratings. Insert a Timer (Shaders) source and set its DueTime property to 2 seconds. Insert a SelectMany operator and set its name to ReferenceGrating . Insert a Repeat operator. Note The Timer (Shaders) source works exactly like the default Timer (Reactive) source, but it counts the time by using the screen refresh time, rather than the operating system time. This can be important for precise timing of screen stimuli, as it avoid clock drift and jitter when synchronizing multiple visual elements, and should be in general preferred when specifying the various intervals used to control elements in the BonVision or Shaders packages. To implement the ReferenceGrating state, we will need to sample a random angle from the angle distribution, use it to initialize the angle property of the gratings, and present the gratings for a specified period of time. At the end, we need to send out as a result the value of the random orientation which was generated. ReferenceGrating : Use the Sample (Numerics) operator to sample a random orientation value from the AngleDistribution subject and store it in a new AsyncSubject named Angle . This will allow us to reuse the sampled value when drawing the gratings later. Subscribe to the Draw subject we defined previously and insert a DrawGratings operator. Externalize the Angle property from the DrawGratings node and connect the Angle subject we created to it. Insert a Timer operator and set its DueTime property to 1 second. Insert a TakeUntil operator and connect the DrawGratings node as the source, and the Timer as the trigger. Insert a Last operator. This will ensure we will get a notification whenever the Timer stops the presentation of the stimulus. Insert a Sample operator following the Angle declaration, and connect the Last operator as a trigger. This will store the sampled angle value until it is time to return. Insert a WorkflowOutput operator to specify the final output of the state. Run the workflow and verify whether the behaviour of the system is correct. Are different orientation values being used for each subsequent presentation of the gratings? Exercise 2: Reusing stimulus definitions The second step in defining the contrast discrimination task is to display a second randomly oriented grating in each trial, with a small blank (or masking) period in between. To do this, we want to avoid repeating the entire workflow we designed for our reference grating, so we will make use of the IncludeWorkflow operator to reuse our stimulus presentation logic. ReferenceGrating : Inside the ReferenceGrating state, select all nodes before WorkflowOutput , right-click the selection, and choose the Save as Workflow option. Choose RandomOrientationGrating as the name for the extension. After we have our new reusable operator, we can extend the workflow to include the blank period and the second grating stimulus. Insert a SelectMany operator after the ReferenceGrating state and set its Name property to Blank . Insert another SelectMany operator after Blank with the name TestGrating . Insert a Repeat operator. For the Blank state we will use a simple gap interval where nothing is drawn on the screen. We can do this easily by delaying the transmission of the result of the previous state, before we move on to the next state. Blank : Insert a Delay (Shaders) operator between the input and the output of the state workflow. Note Similar to Timer (Shaders) , the Delay (Shaders) operator works exactly like the Delay (Reactive) operator, but using the screen refresh clock instead of the operating system clock. This also ensures that any delayed notifications are resynchronized with the render loop, in case they were emitted from other external devices. To implement the TestGrating state, we want to reuse our previous RandomOrientationGrating extension workflow and simply combine the random generated angle with the angle from the reference grating. TestGrating : Insert a new RandomOrientationGrating operator from the toolbox and combine it with the input by using the Zip combinator. This will generate a pair where the first value is the random angle from the first reference grating, and the second value is the random angle for this test grating. Run the workflow and validate the random angle pairs are distinct and valid from trial to trial. Exercise 3: Collect test response and compute trial outcome Now that we have our two randomly generated gratings, we need to gather the response from the participant and compare it with the actual situation to determine whether the trial was successful. Insert a new Response state after the TestGrating state using the SelectMany operator. To implement the response gathering state we will use key presses from the participant. We will use the left and right arrow keys to indicate which stimulus had the most clockwise orientation and compare the response with whether or not the first stimulus was more clockwise than the second stimulus. Response : Connect the Draw subject from the toolbox to a new DrawText operator and set its Text property to a suggestive question (e.g. A or B? ). Also edit the Font property and make sure the size is at least 72pt for readability. Insert a DelaySubscription (Shaders) operator and set its DueTime property to 1 second. Note As before, the difference with DelaySubscription (Reactive) is that DelaySubscription (Shaders) will use the screen refresh time and make sure that all effects of subscription are synchronized with the render loop. Insert a LessThan operator after the input source node. This will compare the value of the randomly sampled angles for the first and second gratings, respectively, and will return true if the first grating is more clockwise than the second grating (i.e. its angle in radians is smaller than the second grating). Insert a KeyDown (Shaders) source and set its Key property to Left . Insert a KeyDown (Shaders) source and set its Key property to Right . Insert a Boolean operator after each of the key press sources and set the Value property to True for the operator following the left key press. Combine the results of both key presses with a Merge operator. Insert a First operator since we are only interested in the first response from the participant. Combine the comparison from LessThan with the response from the participant using the Zip combinator. Insert an Equal operator to check whether or not the response matches the true angle comparison. This will be the result of the Response state and after it is reported, all other effects of the state will be determined (i.e. the question display). Exercise 4: Present trial outcome feedback to participants The only step left for finishing our experimental prototype is to report the feedback of each trial back to the participants. We will do this by drawing a colored square, indicating green for a correct response, and red for an incorrect response. Insert a new Feedback state after the Response state using the SelectMany operator. This final state will simply display a quad for a certain period of time, where the color will be modulated by the trial outcome value. We want to store this value until the end of the trial so we can report it for subsequent processing. Feedback : Insert an AsyncSubject operator and set its Name property to Result . This will store the trial outcome result so it can be used to compute the color value of the quad. Subscribe to the Draw subject and insert a DrawQuad operator. Externalize the ColorR , ColorG , and ColorB properties from the DrawQuad node. Subscribe to the Result subject and create a new ExpressionTransform operator. In the Expression property of the ExpressionTransform operator, create a structure holding the RGB color value using the following script: it ? new(0 as R, 1 as G, 0 as B) : new(1 as R, 0 as G, 0 as B) Connect the ExpressionTransform to the externalized properties. Insert a Timer operator and set its DueTime property to 1 second. Insert a TakeUntil operator and connect the DrawQuad node as the source, and the Timer as the trigger. Insert a Last operator. This will ensure we will get a notification whenever the Timer stops the feedback presentation. Insert a Sample operator following the Result declaration, and connect the Last operator as a trigger. This will store the trial outcome value until it is time to return. Connect it to the WorkflowOutput operator to specify the final output of the state and trial. Run the workflow and verify the visual feedback indeed matches the perceived results from each trial. Exercise 5 (Optional): Measure psychometric data What is the minimal discrimination threshold for humans in this task? How would you extend the previous workflow in order to assess this?"
  }
}